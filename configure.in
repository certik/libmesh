dnl --------------------------------------------------------------
dnl $Id: configure.in,v 1.37 2003-11-30 21:42:56 benkirk Exp $
dnl --------------------------------------------------------------
dnl Process this file with autoconf to produce a configure script.


dnl switch off caching, since that leads to insurmountable trouble if
dnl you call ./configure subsequently on different systems without
dnl clearing the cache 
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
AC_REVISION($Revision: 1.37 $)


AC_INIT(Make.common.in)
AC_CONFIG_HEADER(include/base/libmesh_config.h:include/base/libmesh_config.h.in)

AC_MSG_RESULT(---------------------------------------------)
AC_MSG_RESULT(----------- Configuring libMesh -------------)
AC_MSG_RESULT(---------------------------------------------)

AC_CANONICAL_TARGET
AC_LANG_CPLUSPLUS
AC_PROG_CXX
AC_PROG_CC


dnl --------------------------------------------------------------
dnl Shared libraries - enabled by default
dnl --------------------------------------------------------------
AC_ARG_ENABLE(shared,
              AC_HELP_STRING([--enable-shared],
                             [build shared libraries]),
              enableshared=$enableval,
              enableshared=yes)
AC_SUBST(enableshared)	
dnl --------------------------------------------------------------

DETERMINE_CXX_BRAND
SET_CXX_FLAGS

AC_SUBST(host)
AC_SUBST(GXX_VERSION)
AC_SUBST(CXXFLAGSG)
AC_SUBST(CXXFLAGSO)
AC_SUBST(CXXFLAGSP)
AC_SUBST(CXXFLAGSS)
AC_SUBST(CFLAGSG)
AC_SUBST(CFLAGSO)
AC_SUBST(CFLAGSP)
AC_SUBST(CFLAGSS)
AC_SUBST(LDFLAGS)
AC_SUBST(CXXDEPFLAG)
AC_SUBST(CXXSHAREDFLAG)
AC_SUBST(RPATHFLAG)


dnl --------------------------------------------------------------
dnl Check for important type sizes
dnl --------------------------------------------------------------
AC_CHECK_SIZEOF(short int)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long int)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(void *)



dnl --------------------------------------------------------------
dnl Check for headers
dnl --------------------------------------------------------------
AC_CHECK_HEADERS(getopt.h)
AC_CXX_HAVE_LOCALE
AC_CXX_HAVE_SSTREAM
AC_CHECK_HEADERS(hash_map,[],[AC_CHECK_HEADERS(ext/hash_map)])
AC_CHECK_HEADERS(hash_set,[],[AC_CHECK_HEADERS(ext/hash_set)])


dnl --------------------------------------------------------------
dnl mpCC fails the AC_LANG tests. Set the compiler to 
dnl mpCC if it is there instead of xlC, but only do this
dnl _after_ configure is finished using CXX!
dnl --------------------------------------------------------------
if test "$CXX" = xlC_r; then
  dnl           Var   | look for | name if found | name if not | where
  AC_CHECK_PROG(MPCXX,  mpCC_r,      mpCC_r,           $CXX,         $PATH)
  CXX=$MPCXX
  if test "$CXX" = mpCC_r; then
    AC_MSG_RESULT(<<< Using $CXX instead of xlC_r to compile C++ >>>)
  fi
fi
if test "$CXX" = xlC; then
  dnl           Var   | look for | name if found | name if not | where
  AC_CHECK_PROG(MPCXX,  mpCC,      mpCC,           $CXX,         $PATH)
  CXX=$MPCXX
  if test "$CXX" = mpCC; then
    AC_MSG_RESULT(<<< Using $CXX instead of xlC to compile C++ >>>)
  fi
fi
dnl --------------------------------------------------------------





dnl --------------------------------------------------------------
dnl Get the source tree directory
dnl --------------------------------------------------------------
PWD=`pwd`
AC_SUBST(PWD)



dnl -------------------------------------------------------------
dnl AMR -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(amr,
              AC_HELP_STRING([--enable-amr],
                             [build with adaptive mesh refinement (AMR) suppport]),
              enableamr=$enableval,
              enableamr=yes)

if test "$enableamr" != no ; then
  AC_DEFINE(ENABLE_AMR, 1,
           [Flag indicating if the library should be built with AMR support])
  AC_MSG_RESULT(<<< Configuring library with AMR support >>>)
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl 2D only -- disabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(2D-only,
              AC_HELP_STRING([--enable-2D-only],
                             [build with support for 1D and 2D meshes only]),
              enable2D=$enableval,
              enable2D=no)

if test "$enable2D" != no ; then
  AC_DEFINE(DIM, 2,
           [Flag indicating if the library should be built with 2D support only])
  AC_MSG_RESULT(<<< Configuring library for 2D meshes only >>>)
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Expensive Data Structures -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(expensive,
              AC_HELP_STRING([--enable-expensive],
                             [build with expensive data structures]),
              enableexpensive=$enableval,
              enableexpensive=yes)

if test "$enableexpensive" != no ; then
  AC_DEFINE(ENABLE_EXPENSIVE_DATA_STRUCTURES, 1,
           [Flag indicating if the library should be built with expensive data structures])
  AC_MSG_RESULT(<<< Configuring library with expensive data structures enabled >>>)
else
  AC_MSG_RESULT(<<< Configuring library with lightweight data structures >>>)
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Infinite Elements  -- disabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(ifem,
              AC_HELP_STRING([--enable-ifem],
                             [build with infinite elements]),
              enableifem=$enableval,
              enableifem=no)

if test "$enableifem" != no ; then
  AC_DEFINE(ENABLE_INFINITE_ELEMENTS, 1,
           [Flag indicating if the library should be built with infinite elements])
  AC_MSG_RESULT(<<< Configuring library with infinite elements >>>)
fi
dnl -------------------------------------------------------------



dnl --------------------------------------------------------------
dnl XDR binary IO support - enabled by default
dnl --------------------------------------------------------------
AC_ARG_ENABLE(xdr,
              AC_HELP_STRING([--enable-xdr],
                             [enable XDR platform-independent binary I/O]),
              enablexdr=$enableval,
              enablexdr=yes)
AC_SUBST(enablexdr)	

if test "$enablexdr" != no ; then
   AC_CHECK_HEADERS(rpc/rpc.h,
                    echo "<<< Configuring library with XDR support >>>")
   dnl --------------------------------------------------------------
   dnl Broken MGF XDR mesh support - disabled by default
   dnl only do this if XDR is enabled
   dnl --------------------------------------------------------------
   AC_ARG_ENABLE(mgf-workaround,
                 AC_HELP_STRING([--enable-mgf-workaround],
                                [work around MGF BC problem]),
                 enablemgfworkaround=$enableval,
                 enablemgfworkaround=no)

   if test "$enablemgfworkaround" != no ; then
     AC_DEFINE(ENABLE_MGF_WORKAROUND, 1,
              [Flag indicating if the library should be built to work around broken MGF boundary conditions])
     AC_MSG_RESULT(<<< Configuring library to work around broken MGF boundary conditions >>>)
   fi
   dnl -------------------------------------------------------------
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl complex numbers -- disabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(complex,
              AC_HELP_STRING([--enable-complex],
                             [build with complex number support]),
              enablecomplex=$enableval,
              enablecomplex=no)

if test "$enablecomplex" != no ; then
  AC_DEFINE(USE_COMPLEX_NUMBERS, 1,
     [Flag indicating if the library should be built using complex numbers])
  AC_MSG_RESULT(<<< Configuring library with complex number support >>>)
  AC_SUBST(enablecomplex)

else
  AC_DEFINE(USE_REAL_NUMBERS, 1,
     [Flag indicating if the library should be built using real numbers])
  AC_MSG_RESULT(<<< Configuring library with real number support >>>)
  AC_SUBST(enablecomplex)
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Reference Counting -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(reference-counting,
              AC_HELP_STRING([--enable-reference-counting],
                             [build with reference counting suppport]),
              enablerefct=$enableval,
              enablerefct=yes)

if test "$enablerefct" != no ; then
  AC_DEFINE(ENABLE_REFERENCE_COUNTING, 1,
           [Flag indicating if the library should be built with reference counting support])
  AC_MSG_RESULT(<<< Configuring library with reference counting support >>>)
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Performance Logging -- disabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(perflog,
              AC_HELP_STRING([--enable-perflog],
                             [build with performance logging turned on]),
              enableperflog=$enableval,
              enableperflog=no)

if test "$enableperflog" != no ; then
  AC_DEFINE(ENABLE_PERFORMANCE_LOGGING, 1,
           [Flag indicating if the library should be built with performance logging support])
  AC_MSG_RESULT(<<< Configuring library with performance logging support >>>)
fi
dnl ------------------------------------------------------------




dnl --------------------------------------------------------------
dnl netCDF binary IO support - enabled by default
dnl --------------------------------------------------------------
AC_ARG_ENABLE(netcdf,
              AC_HELP_STRING([--enable-netcdf],
                             [build with netCDF binary I/O]),
              enablenetcdf=$enableval,
              enablenetcdf=yes)

if (test "$enablenetcdf" != no) ; then
   CONFIGURE_NETCDF

   dnl -------------------------------------------------------------
   dnl ExodusII -- enabled by default - Reads in cubit meshes
   dnl (note that ExodusII requires netCDF
   dnl -------------------------------------------------------------
   AC_ARG_ENABLE(exodus,
                 AC_HELP_STRING([--enable-exodus],
                                [build with ExodusII binary support]),
                 enableexodus=$enableval,
                 enableexodus=yes)
   
   if (test "$enableexodus" != no -a "$have_netcdf" = yes) ; then
     CONFIGURE_EXODUS
   fi
   dnl -------------------------------------------------------------
fi
dnl -------------------------------------------------------------


dnl --------------------------------------------------------------
dnl Allow for disable-optional
dnl --------------------------------------------------------------
AC_ARG_ENABLE(optional,
              AC_HELP_STRING([--enable-optional],
                             [en/disable optional external libraries]),
              enableoptional=$enableval,
              enableoptional=yes)
AC_SUBST(enableoptional)	

if test "$enableoptional" != no ; then
   AC_MSG_RESULT(---------------------------------------------)
   AC_MSG_RESULT(----- Configuring for optional packages -----)
   AC_MSG_RESULT(---------------------------------------------)




dnl -------------------------------------------------------------
dnl MPI -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(mpi,
              AC_HELP_STRING([--enable-mpi],
                             [build with MPI message passing support]),
              enablempi=$enableval,
              enablempi=yes)


dnl -------------------------------------------------------------
dnl Petsc -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(petsc,
              AC_HELP_STRING([--enable-petsc],
                             [build with PETSc iterative solver suppport]),
              enablepetsc=$enableval,
              enablepetsc=yes)

dnl -------------------------------------------------------------
dnl configure MPI only if PETSc fails
if (test "$enablempi" != no) ; then
  if (test "$enablepetsc" !=  no) ; then
    CONFIGURE_PETSC
  else
    ACX_MPI
  fi
else
  dnl no PETSc without MPI!
  enablepetsc=no
fi
dnl -------------------------------------------------------------




dnl -------------------------------------------------------------
dnl LASPACK iterative solvers -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(laspack,
              AC_HELP_STRING([--enable-laspack],
                             [build with LASPACK iterative solver suppport]),
              enablelaspack=$enableval,
              enablelaspack=yes)

if test "$enablelaspack" != no ; then
   CONFIGURE_LASPACK
fi
dnl -------------------------------------------------------------




dnl -------------------------------------------------------------
dnl Space filling curves -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(sfc,
              AC_HELP_STRING([--enable-sfc],
                             [build with space-filling curves suppport]),
              enablesfc=$enableval,
              enablesfc=yes)

if test "$enablesfc" != no ; then
   CONFIGURE_SFC
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Compressed Streams with gzstream -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(gzstreams,
              AC_HELP_STRING([--enable-gzstreams],
                             [build with gzstreams compressed I/O suppport]),
              enablegz=$enableval,
              enablegz=yes)

if test "$enablegz" != no ; then
   CONFIGURE_GZ
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Tecplot -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(tecplot,
              AC_HELP_STRING([--enable-tecplot],
                             [build with Tecplot binary support]),
              enabletecplot=$enableval,
              enabletecplot=yes)

if test "$enabletecplot" != no ; then
  CONFIGURE_TECPLOT
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Metis Partitioning -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(metis,
              AC_HELP_STRING([--enable-metis],
                             [build with Metis graph partitioning suppport]),
              enablemetis=$enableval,
              enablemetis=yes)

if (test "$enablemetis" != no) ; then
   CONFIGURE_METIS

   dnl -------------------------------------------------------------
   dnl Parmetis Partitioning -- enabled by default
   dnl -------------------------------------------------------------
   AC_ARG_ENABLE(parmetis,
                 AC_HELP_STRING([--enable-parmetis],
                                [build with Parmetis parallel partitioning suppport]),
                 enableparmetis=$enableval,
                 enableparmetis=yes)
   
   if (test "$enableparmetis" != no \
         -a "$enablemetis"    != no \
         -a "$enablempi"      != no) ; then
      CONFIGURE_PARMETIS
   fi
   dnl -------------------------------------------------------------
fi
dnl -------------------------------------------------------------





dnl -------------------------------------------------------------
dnl Doxygen - look for doxygen (a documentation tool)
dnl -------------------------------------------------------------
AC_PATH_PROG(DOXYGEN, doxygen)
AC_SUBST(DOXYGEN)
if test "x$DOXYGEN" != x ; then
  dnl -----------------------------------------------------------
  dnl Dot -- lets doxygen generate pretty class diagrams
  dnl -----------------------------------------------------------
  AC_PATH_PROG(DOT, dot)
  HAVE_DOT=NO
  if test "x$DOT" != x ; then
    HAVE_DOT=YES
    DOTPATH=`dirname $DOT`
    AC_SUBST(DOTPATH)
  fi
  AC_SUBST(HAVE_DOT)
fi
dnl -------------------------------------------------------------


dnl end of --disable-optional test
   AC_MSG_RESULT(----------------------------------------------)
   AC_MSG_RESULT(--- Done configuring for optional packages ---)
   AC_MSG_RESULT(----------------------------------------------)
fi
 


dnl -------------------------------------------------------------
dnl Perl - look for perl.  Perl is used to generate dependencies
dnl -------------------------------------------------------------
AC_PATH_PROG(PERL, perl)
AC_SUBST(PERL)
dnl -------------------------------------------------------------


AC_OUTPUT(Make.common:Make.common.in)
AC_OUTPUT(doc/Doxyfile:doc/Doxyfile.in)
rm -f conftest* config.cache config.status


AC_MSG_RESULT(---------------------------------------------)
AC_MSG_RESULT(--------- Done Configuring libMesh ----------)
AC_MSG_RESULT(---------------------------------------------)


dnl Local Variables:
dnl mode: m4
dnl End:
