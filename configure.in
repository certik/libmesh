dnl Process this file with autoconf to produce a configure script.


dnl switch off caching, since that leads to insurmountable trouble if
dnl you call ./configure subsequently on different systems without
dnl clearing the cache 
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl

dnl Copy revision stamp revision-info into the configure script, with any
dnl dollar signs or double-quotes removed. This macro lets you put a
dnl revision stamp from `configure.ac' into configure without RCS or cvs
dnl changing it when you check in configure. That way, you can determine
dnl easily which revision of `configure.ac' a particular configure
dnl corresponds to.
dnl
dnl For example, this line in `configure.ac':
dnl
dnl AC_REVISION($Revision$)
dnl produces this in configure:
dnl 
dnl #! /bin/sh
dnl # From configure.ac Revision: 1.30
dnl
dnl AC_REVISION($Revision$)


AC_INIT
AC_CONFIG_FILES(Make.common)
AC_CONFIG_FILES(doc/Doxyfile)
AC_CONFIG_FILES(contrib/bin/libmesh-config,         [chmod +x contrib/bin/libmesh-config])
AC_CONFIG_FILES(contrib/bin/xda2mgf,                [chmod +x contrib/bin/xda2mgf])
AC_CONFIG_FILES(contrib/bin/create_libmesh_release, [chmod +x contrib/bin/create_libmesh_release])
AC_CONFIG_FILES(doc/dot,                            [chmod +x doc/dot])
dnl Create a temporary file with e.g. HAVE_MPI
AC_CONFIG_HEADER(include/base/libmesh_config.h.tmp:include/base/libmesh_config.h.in)
dnl Prefixes everything in the temporary file with LIBMESH_, e.g. LIBMESH_HAVE_MPI
AX_PREFIX_CONFIG_H(include/base/libmesh_config.h,LIBMESH,include/base/libmesh_config.h.tmp)

AC_MSG_RESULT(---------------------------------------------)
AC_MSG_RESULT(----------- Configuring libMesh -------------)
AC_MSG_RESULT(---------------------------------------------)


dnl --------------------------------------------------------------
dnl Print configuration info to the header file
dnl --------------------------------------------------------------
AC_DEFINE_UNQUOTED(CONFIGURE_INFO, ["$0 run on `date`"], [Configuration information.])	

dnl --------------------------------------------------------------
dnl Compute the canonical target system type variable "target", and its
dnl three individual parts: "target_cpu", "target_vendor", and "target_os"
dnl --------------------------------------------------------------
AC_CANONICAL_TARGET

dnl --------------------------------------------------------------
dnl Do compilation tests using the compiler, preprocessor, and file extensions
dnl of C++.  This uses the .C extension for test programs.
dnl --------------------------------------------------------------
AC_LANG_CPLUSPLUS



dnl --------------------------------------------------------------
dnl look for a decent C++ compiler or honor --with-cxx=...
CXX_TRY_LIST="g++ icc pgCC c++"

   dnl -------------------------------------------------------------------
   dnl MPI -- enabled by default.  Check for it now so we can be somewhat
   dnl                             smart about which compilers to look for
   dnl -------------------------------------------------------------------
   AC_ARG_ENABLE(mpi,
                 AC_HELP_STRING([--enable-mpi],
                                [build with MPI message passing support]),
                 enablempi=$enableval,
                 enablempi=yes)
   
if  (test "$enablempi" != no) ; then
  CXX_TRY_LIST="mpicxx mpiCC mpicc $CXX_TRY_LIST"
fi

AC_ARG_WITH([cxx],
	    AC_HELP_STRING([--with-cxx=CXX],
                           [C++ compiler to use]),
	    [CXX="$withval"],
	    [])

dnl --------------------------------------------------------------
dnl Determines a C++ compiler to use.  First checks if the variable CXX is
dnl already set.  If not, then searches under g++, c++, and other names.
dnl --------------------------------------------------------------
AC_PROG_CXX([$CXX_TRY_LIST])
dnl --------------------------------------------------------------



dnl --------------------------------------------------------------
dnl See aclocal.m4 for the definition of this function.  It can
dnl figure out which version of a particular compiler, e.g. GCC 4.0,
dnl you are using.
dnl --------------------------------------------------------------
DETERMINE_CXX_BRAND



dnl --------------------------------------------------------------
dnl look for a decent C compiler or honor --with-cc=...
CC_TRY_LIST="gcc icc pgcc cc"
if  (test "$enablempi" != no) ; then
  CC_TRY_LIST="mpicc $CC_TRY_LIST"
fi
AC_ARG_WITH([cc],
	    AC_HELP_STRING([--with-cc=CC],
                           [C compiler to use]),
	    [CC="$withval"],
	    [])

dnl --------------------------------------------------------------
dnl Determine a C compiler to use.  If CC is not already set, checks for
dnl gcc, cc, and other C compilers.  Then sets the CC variable to the result.
dnl --------------------------------------------------------------
AC_PROG_CC([$CC_TRY_LIST])
dnl --------------------------------------------------------------



dnl look for a decent F90+ compiler or honor --with-fc=...
FC_TRY_LIST="gfortran ifort pgf90 xlf95"
if  (test "$enablempi" != no) ; then
  FC_TRY_LIST="mpif90 $FC_TRY_LIST"
fi
AC_ARG_WITH([fc],
	    AC_HELP_STRING([--with-fc=FC],
                           [Fortran compiler to use]),
	    [FC="$withval"],
	    [])

dnl --------------------------------------------------------------
dnl Determine a F90+ compiler to use.
dnl --------------------------------------------------------------
AC_PROG_FC([$FC_TRY_LIST])
dnl --------------------------------------------------------------



dnl --------------------------------------------------------------
dnl look for a decent F77 compiler or honor --with-77=...
FC_TRY_LIST="g77 gfortran ifort f77 xlf frt pgf77 fort77 fl32 af77 f90 xlf90 pgf90 epcf90 f95 fort xlf95 ifc efc pgf95 lf95"
if  (test "$enablempi" != no) ; then
  F77_TRY_LIST="mpif77 $F77_TRY_LIST"
fi
AC_ARG_WITH([f77],
	    AC_HELP_STRING([--with-f77=F77],
                           [Fortran compiler to use]),
	    [F77="$withval"],
	    [])

dnl --------------------------------------------------------------
dnl Determine a F77 compiler to use.
dnl --------------------------------------------------------------
AC_PROG_F77([$F77_TRY_LIST])
dnl --------------------------------------------------------------


dnl --------------------------------------------------------------
dnl Real precision - double by default
dnl --------------------------------------------------------------

ACX_CHOOSE_PRECISION


dnl --------------------------------------------------------------
dnl Determine support for the C99 "restrict" keyword in the C++
dnl compiler.  This should place a pound-define statement in the
dnl config file along the lines of:
dnl
dnl #define _libmesh_restrict __restrict
dnl
dnl The restrict keyword allows the compiler to make
dnl certain optimizations which require non-overlapping pointer
dnl addresses, i.e. in a call to:
dnl
dnl foo(int* restrict a, int* restrict b)
dnl
dnl the compiler may assume that the memory addresses pointed to
dnl by a and b do not overlap, and therefore certain low-level
dnl optimizations can be made.  From the Autoconf documentation:
dnl
dnl If the C compiler recognizes a variant spelling for the restrict
dnl keyword (__restrict, __restrict__, or _Restrict), then define restrict
dnl to that; this is more likely to do the right thing with compilers that
dnl support language variants where plain restrict is not a
dnl keyword. Otherwise, if the C compiler recognizes the restrict keyword,
dnl don't do anything. Otherwise, define restrict to be empty. Thus,
dnl programs may simply use restrict as if every C compiler supported it;
dnl for those that do not, the makefile or configuration header defines it
dnl away.
dnl 
dnl Although support in C++ for the restrict keyword is not required,
dnl several C++ compilers do accept the keyword. This macro works for
dnl them, too.
dnl 
dnl This macro caches 'no' in the ac_cv_c_restrict variable if restrict is
dnl not supported, and a supported spelling otherwise.
AC_C_RESTRICT


dnl --------------------------------------------------------------
dnl getpwuid - enabled by default
dnl Some systems, for example Crays, actually have getpwuid on the head-node
dnl but (if I understand correctly) a dynamically-linked glibc is not available
dnl on the backend, which is running a reduced operating system like Compute
dnl Node Linux.  Thus functions like getpwuid cannot be called.  This makes
dnl automatically testing for the existence of getpwuid on the login node
dnl difficult.  If you know that you are on such a system, configure with
dnl --disable-getpwuid.
dnl --------------------------------------------------------------
AC_ARG_ENABLE(getpwuid,
              AC_HELP_STRING([--enable-getpwuid],
                             [allow calls to getpwuid]),
              enablegetpwuid=$enableval,
              enablegetpwuid=yes)

if test "$enablegetpwuid" != no ; then
  AC_DEFINE(HAVE_GETPWUID, 1,
           [Flag indicating if the library should be built with calls to getpwuid()])
  AC_MSG_RESULT(<<< Configuring library with getpwuid >>>)
fi
dnl --------------------------------------------------------------



dnl --------------------------------------------------------------
dnl Shared libraries - enabled by default
dnl --------------------------------------------------------------
AC_ARG_ENABLE(shared,
              AC_HELP_STRING([--enable-shared],
                             [build shared libraries]),
              enableshared=$enableval,
              enableshared=yes)
AC_SUBST(enableshared)	
dnl --------------------------------------------------------------



dnl --------------------------------------------------------------
dnl C++ exceptions - enabled by default
dnl --------------------------------------------------------------
AC_ARG_ENABLE(exceptions,
              AC_HELP_STRING([--enable-exceptions],
                             [throw exceptions on unexpected errors]),
              enableexceptions=$enableval,
              enableexceptions=yes)

if test "$enableexceptions" != no ; then
  AC_DEFINE(ENABLE_EXCEPTIONS, 1,
           [Flag indicating if the library should be built to throw C++ exceptions on unexpected errors])
  AC_MSG_RESULT(<<< Configuring library with exception throwing support >>>)
fi
dnl --------------------------------------------------------------

dnl --------------------------------------------------------------
dnl See aclocal.m4 for the definition of this as well.  It uses the
dnl output of DETERMINE_CXX_BRAND to set special flags for idiosyncratic
dnl compilers.  For example, newer versions of GCC have additional C++ debugging
dnl flags like _GLIBCXX_DEBUG_PEDANTIC which were not present in older versions.
dnl --------------------------------------------------------------
SET_CXX_FLAGS

dnl --------------------------------------------------------------
dnl The AC_SUBST(foo) command creates an output variable from a shell variable.
dnl This command also causes AC_OUTPUT to replace all instances of @VAR@ with
dnl the value of the shell variable VAR in the output files (e.g. one or more Makefiles).
dnl --------------------------------------------------------------
AC_SUBST(host)
AC_SUBST(GXX_VERSION)
AC_SUBST(CXXFLAGS_OPT)
AC_SUBST(CXXFLAGS_DBG)
AC_SUBST(CXXFLAGS_DVL)
AC_SUBST(CFLAGS_OPT)
AC_SUBST(CFLAGS_DBG)
AC_SUBST(CFLAGS_DVL)
AC_SUBST(LDFLAGS)
AC_SUBST(NODEPRECATEDFLAG)
AC_SUBST(CXXSHAREDFLAG)
AC_SUBST(RPATHFLAG)
AC_SUBST(PROFILING_FLAGS)
AC_SUBST(OPROFILE_FLAGS)
AC_SUBST(ASSEMBLY_FLAGS)
AC_SUBST(FLIBS)

dnl --------------------------------------------------------------
dnl Check for important type sizes
dnl --------------------------------------------------------------
AC_CHECK_SIZEOF(short int)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(unsigned int)
AC_CHECK_SIZEOF(long int)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(void *)
dnl Check the size of a function pointer.  This is the same
dnl as a void* on most systems which matter (POSIX).
dnl It turns out that AC_CHECK_SIZEOF can't do this
dnl automatically... so we use a kind of hack with the 3rd
dnl argument to do it.
AC_CHECK_SIZEOF([function_pointer], [], [typedef void (*function_pointer)();])
dnl AC_CHECK_SIZEOF([void(*)(void)]) <-- Does not work! 

dnl -------------------------------------------------------------
dnl size of subdomain_id -- default 2
dnl -------------------------------------------------------------
AC_ARG_WITH([subdomain_id_bytes],
	    AC_HELP_STRING([--with-subdomain-id-bytes=<1|2|4>],
                           [bytes of storage per element used to store the subdomain_id]),
	    [subdomain_bytes="$withval"],
	    [subdomain_bytes=2])

if test "$subdomain_bytes" == 1 ; then
  AC_DEFINE(SUBDOMAIN_ID_BYTES, 1,
           [size of subdomain_id])
  AC_MSG_RESULT(configuring size of subdomain_id... 1)
elif test "$subdomain_bytes" == 2 ; then
  AC_DEFINE(SUBDOMAIN_ID_BYTES, 2,
           [size of subdomain_id])
  AC_MSG_RESULT(configuring size of subdomain_id... 2)
elif test "$subdomain_bytes" == 4 ; then
  AC_DEFINE(SUBDOMAIN_ID_BYTES, 4,
           [size of subdomain_id])
  AC_MSG_RESULT(configuring size of subdomain_id... 4)
else
  AC_MSG_RESULT(unrecognized subdomain_id size - configuring size...2)
fi

dnl -------------------------------------------------------------


dnl --------------------------------------------------------------
dnl Check for Run Time Type Identification support
dnl --------------------------------------------------------------
AC_CXX_RTTI


dnl --------------------------------------------------------------
dnl Check for headers
dnl --------------------------------------------------------------
AC_CHECK_HEADERS(getopt.h)
AC_CHECK_HEADERS(csignal)
AC_CHECK_HEADERS(sys/resource.h)
AC_CXX_HAVE_LOCALE
AC_CXX_HAVE_SSTREAM

AC_ARG_ENABLE(unordered-containers,
              AC_HELP_STRING([--enable-unordered-containers],
                             [Use unordered_map/unordered_set if available]),
              enableunorderedcontainers=$enableval,
              enableunorderedcontainers=yes)

  if test "$enableunorderedcontainers" != no ; then
    dnl The following routines, defined in unordered.m4, check to see if the compiler can compile programs using
    dnl various quasi-standard hash containers.
    ACX_BEST_UNORDERED_MULTIMAP
    ACX_BEST_UNORDERED_MAP
    ACX_BEST_UNORDERED_SET
  else
    ACX_STD_MAP
    ACX_STD_MULTIMAP
    ACX_STD_SET
  fi

AC_CHECK_HEADERS(dlfcn.h)
AX_CXX_GCC_ABI_DEMANGLE
AX_CXX_GLIBC_BACKTRACE


dnl --------------------------------------------------------------
dnl This is a special test for the mpCC (IBM) compiler.
dnl mpCC fails the AC_LANG tests. Set the compiler to 
dnl mpCC if it is there instead of xlC, but only do this
dnl _after_ configure is finished using CXX!
dnl --------------------------------------------------------------
if test "$CXX" = xlC_r; then
  dnl           Var   | look for | name if found | name if not | where
  AC_CHECK_PROG(MPCXX,  mpCC_r,      mpCC_r,           $CXX,         $PATH)
  CXX=$MPCXX
  if test "$CXX" = mpCC_r; then
    AC_MSG_RESULT(<<< Using $CXX instead of xlC_r to compile C++ >>>)
  fi
fi
if test "$CXX" = xlC; then
  dnl           Var   | look for | name if found | name if not | where
  AC_CHECK_PROG(MPCXX,  mpCC,      mpCC,           $CXX,         $PATH)
  CXX=$MPCXX
  if test "$CXX" = mpCC; then
    AC_MSG_RESULT(<<< Using $CXX instead of xlC to compile C++ >>>)
  fi
fi
dnl --------------------------------------------------------------


dnl --------------------------------------------------------------
dnl Get the source tree directory
dnl --------------------------------------------------------------
PWD=`pwd`
AC_SUBST(PWD)



dnl -------------------------------------------------------------
dnl Boost -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(boost,
              AC_HELP_STRING([--enable-boost],
                             [build with either external or built-in BOOST support]),
              enableboost=$enableval,
              enableboost=yes)

if (test "$enableboost" !=  no) ; then
  dnl --------------------------------------------------------------
  dnl Look for a user or system-provided boost.  If there is not
  dnl one available then use the minimal ./contrib/boost provided.
  dnl --------------------------------------------------------------
  external_boost_found=yes
  AX_BOOST_BASE([1.20.0], [AC_MSG_RESULT(<<< Using external boost installation >>>)], [external_boost_found=no], [])
  
  dnl If that did not work, try using our builtin boost.
  if test "$external_boost_found" = "no" ; then
    AC_MSG_RESULT(<<< External boost installation *not* found... will try to configure for libmesh's internal boost >>>)
  
    dnl Note: 4th argument is libmesh's builtin boost.
    internal_boost_found=yes
    AX_BOOST_BASE([1.20.0], [AC_MSG_RESULT(<<< Using libmesh-provided boost in ./contrib >>>)], [internal_boost_found=no], [$PWD/contrib/boost])
  
    if test "$internal_boost_found" = "no" ; then
      AC_MSG_RESULT(<<< Libmesh boost installation *not* found >>>)
    fi
  fi
  dnl --------------------------------------------------------------
fi

dnl -------------------------------------------------------------
dnl Allow user to specify --enable-everything
dnl
dnl This flag will cause all (non-conflicting) options to be
dnl enabled for the purposes of configuration.  For example, by
dnl performance logging is off by default, however
dnl --enable-everything will change it to be on by default.
dnl
dnl Note specific flags will override --enable-everything for
dnl that particular package, i.e.
dnl  ./configure --enable-everything --disable-perflog
dnl
dnl -------------------------------------------------------------
AC_ARG_ENABLE(everything,
              AC_HELP_STRING([--enable-everything],
                             [treat all applicable options as enabled]),
              enableeverything=$enableval,
              enableeverything=no)


dnl --------------------------------------------------------------
dnl Write stack trace output files on error() - disabled by default
dnl --------------------------------------------------------------
AC_ARG_ENABLE(tracefiles,
              AC_HELP_STRING([--enable-tracefiles],
                             [write stack trace files on unexpected errors]),
              enabletracefiles=$enableval,
              enabletracefiles=$enableeverything)

if test "$enabletracefiles" != no ; then
  AC_DEFINE(ENABLE_TRACEFILES, 1,
           [Flag indicating if the library should be built to write stack trace files on unexpected errors])
  AC_MSG_RESULT(<<< Configuring library with stack trace file support >>>)
fi
dnl --------------------------------------------------------------


dnl -------------------------------------------------------------
dnl AMR -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(amr,
              AC_HELP_STRING([--enable-amr],
                             [build with adaptive mesh refinement (AMR) suppport]),
              enableamr=$enableval,
              enableamr=yes)

if test "$enableamr" != no ; then
  AC_DEFINE(ENABLE_AMR, 1,
           [Flag indicating if the library should be built with AMR support])
  AC_MSG_RESULT(<<< Configuring library with AMR support >>>)
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Variational smoother -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(vsmoother,
              AC_HELP_STRING([--enable-vsmoother],
                             [build with variational smoother suppport]),
              enablevsmoother=$enableval,
              enablevsmoother=yes)

if test "$enablevsmoother" != no ; then
  AC_DEFINE(ENABLE_VSMOOTHER, 1,
           [Flag indicating if the library should be built with variational smoother support])
  AC_MSG_RESULT(<<< Configuring library with variational smoother support >>>)
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Periodic BCs -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(periodic,
              AC_HELP_STRING([--enable-periodic],
                             [build with periodic boundary condition suppport]),
              enableperiodic=$enableval,
              enableperiodic=yes)

if test "$enableperiodic" != no ; then
  AC_DEFINE(ENABLE_PERIODIC, 1,
           [Flag indicating if the library should be built with periodic boundary condition support])
  AC_MSG_RESULT(<<< Configuring library with periodic BC support >>>)
fi
dnl -------------------------------------------------------------


dnl -------------------------------------------------------------
dnl Dirichlet BC constraints -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(dirichlet,
              AC_HELP_STRING([--enable-dirichlet],
                             [build with Dirichlet boundary constraint support]),
              enabledirichlet=$enableval,
              enabledirichlet=yes)

if test "$enabledirichlet" != no ; then
  AC_DEFINE(ENABLE_DIRICHLET, 1,
           [Flag indicating if the library should be built with Dirichlet boundary constraint support])
  AC_MSG_RESULT(<<< Configuring library with Dirichlet constraint support >>>)
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl NodeConstraints -- disabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(nodeconstraint,
              AC_HELP_STRING([--enable-nodeconstraint],
                             [build with node constraints suppport]),
              enablenodeconstraint=$enableval,
              enablenodeconstraint=$enableeverything)

if test "$enablenodeconstraint" != no ; then
  AC_DEFINE(ENABLE_NODE_CONSTRAINTS, 1,
           [Flag indicating if the library should be built with node constraints support])
  AC_MSG_RESULT(<<< Configuring library with node constraints support >>>)
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Mesh == ParallelMesh -- disabled until it's debugged/finished
dnl -------------------------------------------------------------
AC_ARG_ENABLE(parmesh,
              AC_HELP_STRING([--enable-parmesh],
                             [Use experimental ParallelMesh as Mesh]),
              enableparmesh=$enableval,
              enableparmesh=no)

if test "$enableparmesh" != no ; then
  AC_DEFINE(ENABLE_PARMESH, 1,
	   [Flag indicating if the library should use the experimental
ParallelMesh as its default Mesh type])
  AC_MSG_RESULT(<<< Configuring library to use ParallelMesh >>>)
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Ghosted instead of Serial local vectors -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(ghosted,
              AC_HELP_STRING([--enable-ghosted],
                             [Use ghosted local vectors when available]),
              enableghosted=$enableval,
              enableghosted=yes)

if test "$enableghosted" != no ; then
  AC_DEFINE(ENABLE_GHOSTED, 1,
	   [Flag indicating if the library should use ghosted local vectors])
  AC_MSG_RESULT(<<< Configuring library to use ghosted local vectors >>>)
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl 1D or 1D/2D only -- disabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(1D-only,
              AC_HELP_STRING([--enable-1D-only],
                             [build with support for 1D meshes only]),
              enable1D=$enableval,
              enable1D=no)

AC_ARG_ENABLE(2D-only,
              AC_HELP_STRING([--enable-2D-only],
                             [build with support for 1D and 2D meshes only]),
              enable2D=$enableval,
              enable2D=no)

if test "$enable2D" != no ; then
  AC_DEFINE(DIM, 2,
           [Integer indicating the highest spatial dimensionality supported by libMesh])
  AC_MSG_RESULT(<<< Configuring library for 1D/2D meshes only >>>)
elif test "$enable1D" != no ; then
  AC_DEFINE(DIM, 1,
           [Integer indicating the highest spatial dimensionality supported by libMesh])
  AC_MSG_RESULT(<<< Configuring library for 1D meshes only >>>)
fi
dnl -------------------------------------------------------------


dnl dnl -------------------------------------------------------------
dnl dnl Expensive Data Structures -- enabled by default
dnl dnl -------------------------------------------------------------
dnl AC_ARG_ENABLE(expensive,
dnl               AC_HELP_STRING([--enable-expensive],
dnl                              [build with expensive data structures]),
dnl               enableexpensive=$enableval,
dnl               enableexpensive=yes)
dnl 
dnl if test "$enableexpensive" != no ; then
dnl   AC_DEFINE(ENABLE_EXPENSIVE_DATA_STRUCTURES, 1,
dnl            [Flag indicating if the library should be built with expensive data structures])
dnl   AC_MSG_RESULT(<<< Configuring library with expensive data structures enabled >>>)
dnl else
dnl   AC_MSG_RESULT(<<< Configuring library with lightweight data structures >>>)
dnl fi
dnl dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl higher order shapes -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(pfem,
              AC_HELP_STRING([--enable-pfem],
                             [build with support for higher order p-FEM shapes]),
              enablepfem=$enableval,
              enablepfem=yes)

if test "$enablepfem" != no ; then
  AC_DEFINE(ENABLE_HIGHER_ORDER_SHAPES, 1,
           [Flag indicating if the library should offer higher order p-FEM shapes])
  AC_MSG_RESULT(<<< Configuring library with higher order p-FEM shapes >>>)
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Infinite Elements  -- disabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(ifem,
              AC_HELP_STRING([--enable-ifem],
                             [build with infinite elements]),
              enableifem=$enableval,
              enableifem=$enableeverything)

if test "$enableifem" != no ; then
  AC_DEFINE(ENABLE_INFINITE_ELEMENTS, 1,
           [Flag indicating if the library should be built with infinite elements])
  AC_MSG_RESULT(<<< Configuring library with infinite elements >>>)
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Second Derivative Calculations -- disabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(second,
              AC_HELP_STRING([--enable-second],
                             [build with second derivatives]),
              enablesecond=$enableval,
              enablesecond=yes)

if test "$enablesecond" != no ; then
  AC_DEFINE(ENABLE_SECOND_DERIVATIVES, 1,
           [Flag indicating if the library should be built with second derivatives])
  AC_MSG_RESULT(<<< Configuring library with second derivatives >>>)
fi
dnl -------------------------------------------------------------



dnl --------------------------------------------------------------
dnl XDR binary IO support - enabled by default
dnl --------------------------------------------------------------
AC_ARG_ENABLE(xdr,
              AC_HELP_STRING([--enable-xdr],
                             [enable XDR platform-independent binary I/O]),
              enablexdr=$enableval,
              enablexdr=yes)

if test "$enablexdr" != no ; then
   AC_CHECK_HEADERS(rpc/rpc.h,
                    [
                     AC_CHECK_FUNC(xdrstdio_create,
                                   [
                                     AC_DEFINE(HAVE_XDR, 1,
                                               [Flag indicating headers and libraries for XDR IO are available])
                                     echo "<<< Configuring library with XDR support >>>"
                                   ],
                                   [enablexdr=no])
                    ],
                    [enablexdr=no])
fi
AC_SUBST(enablexdr)	
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl complex numbers -- disabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(complex,
              AC_HELP_STRING([--enable-complex],
                             [build with complex number support]),
              enablecomplex=$enableval,
              enablecomplex=no)

if test "$enablecomplex" != no ; then
  AC_DEFINE(USE_COMPLEX_NUMBERS, 1,
     [Flag indicating if the library should be built using complex numbers])
  AC_MSG_RESULT(<<< Configuring library with complex number support >>>)
  AC_SUBST(enablecomplex)

else
  AC_DEFINE(USE_REAL_NUMBERS, 1,
     [Flag indicating if the library should be built using real numbers])
  AC_MSG_RESULT(<<< Configuring library with real number support >>>)
  AC_SUBST(enablecomplex)
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Reference Counting -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(reference-counting,
              AC_HELP_STRING([--enable-reference-counting],
                             [build with reference counting suppport]),
              enablerefct=$enableval,
              enablerefct=yes)

if test "$enablerefct" != no ; then
  if test "$ac_cv_cxx_rtti" = yes; then
    AC_DEFINE(ENABLE_REFERENCE_COUNTING, 1,
             [Flag indicating if the library should be built with reference counting support])
    AC_MSG_RESULT(<<< Configuring library with reference counting support >>>)
  else
    AC_MSG_RESULT(<<< No RTTI: disabling reference counting support >>>)
  fi
fi
dnl -------------------------------------------------------------


dnl -------------------------------------------------------------
dnl Performance Logging -- disabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(perflog,
              AC_HELP_STRING([--enable-perflog],
                             [build with performance logging turned on]),
              enableperflog=$enableval,
              enableperflog=$enableeverything)

if test "$enableperflog" != no ; then
  AC_DEFINE(ENABLE_PERFORMANCE_LOGGING, 1,
           [Flag indicating if the library should be built with performance logging support])
  AC_MSG_RESULT(<<< Configuring library with performance logging support >>>)
fi
dnl ------------------------------------------------------------

dnl --------------------------------------------------------------
dnl Allow for disable-optional
dnl --------------------------------------------------------------
AC_ARG_ENABLE(optional,
              AC_HELP_STRING([--enable-optional],
                             [en/disable optional external libraries]),
              enableoptional=$enableval,
              enableoptional=yes)
AC_SUBST(enableoptional)	

if test "$enableoptional" != no ; then
   AC_MSG_RESULT(---------------------------------------------)
   AC_MSG_RESULT(----- Configuring for optional packages -----)
   AC_MSG_RESULT(---------------------------------------------)



dnl -------------------------------------------------------------
dnl Petsc -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(petsc,
              AC_HELP_STRING([--enable-petsc],
                             [build with PETSc iterative solver suppport]),
              enablepetsc=$enableval,
              enablepetsc=yes)


dnl -------------------------------------------------------------
dnl configure MPI separately only if PETSc fails
if (test "$enablepetsc" !=  no) ; then
  CONFIGURE_PETSC
else
  ACX_MPI
fi
dnl -------------------------------------------------------------




dnl -------------------------------------------------------------
dnl SLEPc  -- disabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(slepc,
              AC_HELP_STRING([--enable-slepc],
                             [build with SLEPc eigen solver support]),
     enableslepc=$enableval,
     enableslepc=yes)

if test "$enableslepc" != no ; then
   CONFIGURE_SLEPC
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl "Trilinos" -- enabled by default unless we're building with
dnl               complex numbers. This looks for the AztecOO
dnl               linear solvers and requisite Epetra parallel 
dnl               data structures
dnl -------------------------------------------------------------
AC_ARG_ENABLE(trilinos,
              AC_HELP_STRING([--enable-trilinos],
                             [build with Trilinos support]),
              enabletrilinos=$enableval,
              enabletrilinos=yes)
if test "$enablecomplex" = no ; then
   if test "$enabletrilinos" != no ; then
      dnl -- try Trilinos 10 first
      CONFIGURE_TRILINOS_10
      dnl -- then Trlinos 9
      if test "$enabletrilinos10" = no ; then
        CONFIGURE_TRILINOS_9
      fi
   fi
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Intel's Threading Building Blocks  -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(tbb,
             AC_HELP_STRING([--enable-tbb],
                            [build with threading support via Threading Building Blocks]),
             enabletbb=$enableval,
             enabletbb=yes)
if (test "$enabletbb" != no) ; then
   CONFIGURE_TBB
   AX_TLS
fi
dnl -------------------------------------------------------------

dnl -------------------------------------------------------------
dnl OpenMP Support  -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(openmp,
             AC_HELP_STRING([--enable-openmp],
                            [Build with OpenMP Support]),
             enableopenmp=$enableval,
             enableopenmp=no)
if (test "$enableopenmp" != no) ; then
   AX_OPENMP
   #The above call only sets the flag for C++
   OPENMP_CFLAGS=$OPENMP_CXXFLAGS
   OPENMP_FFLAGS=$OPENMP_CXXFLAGS
   AC_SUBST(OPENMP_CXXFLAGS)
   AC_SUBST(OPENMP_CFLAGS)
   AC_SUBST(OPENMP_FFLAGS)
   AC_SUBST(enableopenmp)
fi
dnl -------------------------------------------------------------


dnl -------------------------------------------------------------
dnl LASPACK iterative solvers -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(laspack,
              AC_HELP_STRING([--enable-laspack],
                             [build with LASPACK iterative solver suppport]),
              enablelaspack=$enableval,
              enablelaspack=yes)

CONFIGURE_LASPACK
dnl -------------------------------------------------------------




dnl -------------------------------------------------------------
dnl Space filling curves -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(sfc,
              AC_HELP_STRING([--enable-sfc],
                             [build with space-filling curves suppport]),
              enablesfc=$enableval,
              enablesfc=yes)

CONFIGURE_SFC
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Compressed Streams with gzstream -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(gzstreams,
              AC_HELP_STRING([--enable-gzstreams],
                             [build with gzstreams compressed I/O suppport]),
              enablegz=$enableval,
              enablegz=yes)

CONFIGURE_GZ
dnl -------------------------------------------------------------

dnl -------------------------------------------------------------
dnl Compressed Files with bzip2
dnl -------------------------------------------------------------
AC_ARG_ENABLE(bzip2,
              AC_HELP_STRING([--enable-bzip2],
                             [build with bzip2 compressed I/O suppport]),
              enablebz2=$enableval,
              enablebz2=yes)

if (test "$enablebz2" != no) ; then
   dnl           Var   | look for | name if found | name if not | where
   AC_CHECK_PROG(BZIP2,  bzip2,      bzip2,           none,      $PATH)
   if test "$BZIP2" = bzip2; then
       AC_CHECK_PROG(BUNZIP2,  bunzip2,     bunzip2,        none,      $PATH)
       if test "$BUNZIP2" = bunzip2; then
         AC_MSG_RESULT(<<< Using bzip2/bunzip2 for writing/reading compressed .bz2 files >>>)
         AC_DEFINE(HAVE_BZIP, 1,
                   [Flag indicating bzip2/bunzip2 are available for handling compressed .bz2 files])
       fi
   fi
fi
dnl -------------------------------------------------------------


dnl -------------------------------------------------------------
dnl Compressed Files with xz
dnl -------------------------------------------------------------
AC_ARG_ENABLE(xz,
              AC_HELP_STRING([--enable-xz],
                             [build with xz compressed I/O suppport]),
              enablexz=$enableval,
              enablexz=yes)

if (test "$enablexz" != no) ; then
   dnl           Var   | look for | name if found | name if not | where
   AC_CHECK_PROG(XZ,  xz,      xz,           none,      $PATH)
   if test "$XZ" = xz; then
      AC_MSG_RESULT(<<< Using xz for writing/reading compressed .xz files >>>)
      AC_DEFINE(HAVE_XZ, 1,
                [Flag indicating xz is available for handling compressed .xz files])
   fi
fi
dnl -------------------------------------------------------------


dnl -------------------------------------------------------------
dnl Tecplot -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(tecplot,
              AC_HELP_STRING([--enable-tecplot],
                             [build with Tecplot binary support]),
              enabletecplot=$enableval,
              enabletecplot=yes)

if test "$enabletecplot" != no ; then
  CONFIGURE_TECPLOT
fi
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Metis Partitioning -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(metis,
              AC_HELP_STRING([--enable-metis],
                             [build with Metis graph partitioning suppport]),
              enablemetis=$enableval,
              enablemetis=yes)

if (test "$enablemetis" != no) ; then
   CONFIGURE_METIS

   dnl -------------------------------------------------------------
   dnl Parmetis Partitioning -- enabled by default
   dnl -------------------------------------------------------------
   AC_ARG_ENABLE(parmetis,
                 AC_HELP_STRING([--enable-parmetis],
                                [build with Parmetis parallel partitioning suppport]),
                 enableparmetis=$enableval,
                 enableparmetis=yes)
   
   if (test "$enableparmetis" != no \
         -a "$enablemetis"    != no \
         -a "$enablempi"      != no) ; then
      CONFIGURE_PARMETIS
   else
     enableparmetis=no
   fi
   dnl -------------------------------------------------------------
else
  enableparmetis=no
fi
AC_SUBST(enablemetis)
AC_SUBST(enableparmetis)
dnl -------------------------------------------------------------





dnl -------------------------------------------------------------
dnl Doxygen - look for doxygen (a documentation tool)
dnl -------------------------------------------------------------
AC_PATH_PROG(DOXYGEN, doxygen)
AC_SUBST(DOXYGEN)
if test "x$DOXYGEN" != x ; then
  dnl -----------------------------------------------------------
  dnl Dot -- lets doxygen generate pretty class diagrams
  dnl -----------------------------------------------------------
  AC_PATH_PROG(DOT, dot)
  HAVE_DOT=NO
  if test "x$DOT" != x ; then
    HAVE_DOT=YES
    DOTPATH=$PWD/doc
    AC_SUBST(DOT)
    AC_SUBST(DOTPATH)
  fi
  AC_SUBST(HAVE_DOT)
fi
dnl -------------------------------------------------------------




dnl -------------------------------------------------------------
dnl TetGen -- enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(tetgen,
              AC_HELP_STRING([--enable-tetgen],
                             [build with TetGen tetrahedrization library support]),
              enabletetgen=$enableval,
              enabletetgen=yes)

CONFIGURE_TETGEN
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Triangle -- enabled by default (it is distributed in contrib)
dnl -------------------------------------------------------------
AC_ARG_ENABLE(triangle,
              AC_HELP_STRING([--enable-triangle],
                             [build with Triangle Delaunay triangulation library support]),
              enabletriangle=$enableval,
              enabletriangle=yes)

CONFIGURE_TRIANGLE
dnl -------------------------------------------------------------

dnl -------------------------------------------------------------
dnl GMV -- file I/O API is enabled by default (it is distributed in contrib)
dnl -------------------------------------------------------------
AC_ARG_ENABLE(gmv,
              AC_HELP_STRING([--enable-gmv],
                             [build with GMV file I/O support]),
              enablegmv=$enableval,
              enablegmv=yes)

CONFIGURE_GMV
dnl -------------------------------------------------------------

dnl -------------------------------------------------------------
dnl VTK -- Mesh I/O API is enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(vtk,
              AC_HELP_STRING([--enable-vtk],
                             [build with VTK file I/O support]),
              enablevtk=$enableval,
              enablevtk=yes)

CONFIGURE_VTK
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl Eigen -- Optimized linear algebra routines, disabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(eigen,
              AC_HELP_STRING([--enable-eigen],
                             [build with Eigen linear algebra support]),
              enableeigen=$enableval,
              enableeigen=yes)

CONFIGURE_EIGEN
dnl -------------------------------------------------------------



dnl -------------------------------------------------------------
dnl GLPK -- Needed by the SCM routine of rbOOmit.
dnl Enabled by default.
dnl -------------------------------------------------------------
AC_ARG_ENABLE(glpk,
              AC_HELP_STRING([--enable-glpk],
                             [build with GLPK support]),
              enableglpk=$enableval,
              enableglpk=yes)

CONFIGURE_GLPK
dnl -------------------------------------------------------------


dnl --------------------------------------------------------------
dnl netCDF -- enabled by default (it is distributed in contrib)
dnl --------------------------------------------------------------
AC_ARG_ENABLE(netcdf,
              AC_HELP_STRING([--enable-netcdf],
                             [build with netCDF binary I/O]),
              enablenetcdf=$enableval,
              enablenetcdf=yes)

if (test "$enablenetcdf" != no) ; then
   CONFIGURE_NETCDF

   dnl -------------------------------------------------------------
   dnl ExodusII -- enabled by default (it is distributed in contrib)
   dnl (note that ExodusII requires netCDF
   dnl -------------------------------------------------------------
   AC_ARG_ENABLE(exodus,
                 AC_HELP_STRING([--enable-exodus],
                                [build with ExodusII API support]),
                 enableexodus=$enableval,
                 enableexodus=yes)
   
   if (test "$enableexodus" != no -a "$have_netcdf" = yes) ; then
     CONFIGURE_EXODUS

     dnl -------------------------------------------------------------
     dnl Nemesis -- enabled by default (it is distributed in contrib)
     dnl (note that Nemesis requires netCDF and exodus)
     dnl -------------------------------------------------------------
     AC_ARG_ENABLE(nemesis,
	           AC_HELP_STRING([--enable-nemesis],
        	   [build with Nemesis API support]),
                   enablenemesis=$enableval,
                   enablenemesis=yes)

     if (test "$enableexodus" != no -a "$have_netcdf" = yes -a "$enablenemesis" != no ) ; then
       CONFIGURE_NEMESIS
     fi
   fi
   dnl -------------------------------------------------------------
fi
dnl -------------------------------------------------------------

dnl -------------------------------------------------------------
dnl libHilbert -- distributed in ./contrib,
dnl               enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(libHilbert,
              AC_HELP_STRING([--enable-libHilbert],
                             [build with libHilbert by Chris Hamilton]),
              enablelibhilbert=$enableval,
              enablelibhilbert=yes)

CONFIGURE_LIBHILBERT
dnl -------------------------------------------------------------

dnl -------------------------------------------------------------
dnl fparser -- distributed in ./contrib,
dnl            enabled by default
dnl -------------------------------------------------------------
AC_ARG_ENABLE(fparser,
              AC_HELP_STRING([--enable-fparser],
                             [build with fparser by Juha Nieminen, Joel Yliluoma]),
              enablefparser=$enableval,
              enablefparser=yes)

CONFIGURE_FPARSER
dnl -------------------------------------------------------------


dnl end of --disable-optional test
   AC_MSG_RESULT(----------------------------------------------)
   AC_MSG_RESULT(--- Done configuring for optional packages ---)
   AC_MSG_RESULT(----------------------------------------------)
else
   dnl --disable-optional, so don't build any optional packages!
   enablepetsc=no
   enablelaspack=no
   enablemetis=no
   enableparmetis=no
   enablesfc=no
   enablegz=no
   enabletetgen=no
   enabletriangle=no
   enablegmv=no
   enablevtk=no
   enableexodus=no
   enablenetcdf=no
   enablenemesis=no
   enablelibhilbert=no
   dnl -----------------
   AC_SUBST(enablepetsc)
   AC_SUBST(enablelaspack)
   AC_SUBST(enablemetis)
   AC_SUBST(enableparmetis)
   AC_SUBST(enablesfc)
   AC_SUBST(enablegz)
   AC_SUBST(enabletetgen)
   AC_SUBST(enabletriangle)
   AC_SUBST(enablegmv)
   AC_SUBST(enablevtk)
   AC_SUBST(enableexodus)
   AC_SUBST(enablenetcdf)
   AC_SUBST(enablenemesis)
   AC_SUBST(enablelibhilbert)
fi
dnl end of --disable-optional test 


dnl -------------------------------------------------------------
dnl Perl - look for perl.  Perl is used to generate dependencies
dnl -------------------------------------------------------------
AC_PATH_PROG(PERL, perl)
AC_SUBST(PERL)
dnl -------------------------------------------------------------


AC_OUTPUT


AC_MSG_RESULT(---------------------------------------------)
AC_MSG_RESULT(--------- Done Configuring libMesh ----------)
AC_MSG_RESULT(---------------------------------------------)
rm -f -r conftest* config.cache include/base/libmesh_config.h.tmp


dnl Local Variables:
dnl mode: m4
dnl End:
