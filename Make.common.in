# $Id: Make.common.in,v 1.20 2003-04-08 22:54:06 benkirk Exp $


###############################################################################
## Please note:
##   The ./configure script generates Make.common from 
##   Make.common.in, so if you want to change something,
##   then do it in the latter file (here!)and re-run ./configure in the
##   top level directory
###############################################################################

###############################################################################
#
# The Make.common file defines the build environment for libMesh
# and all its helper applications.  If you want to build an application
# that makes use of libMesh it is highly recommended that you include
# this file in your project's Makefile.
#
###############################################################################


###############################################################################
# the following lines will be replaced by the output 
# of ./configure
hosttype             = @host@

CXX                  = @CXX@
CC		     = @CC@
LDFLAGS              = @LDFLAGS@
DLFLAGS              =
LIBS                 = @LIBS@
FLIBS		     = @FLIBS@
GXX-VERSION          = @GXX_VERSION@
CXXSHAREDFLAG        = @CXXSHAREDFLAG@
CSHAREDFLAG          = @CXXSHAREDFLAG@
RPATHFLAG            = @RPATHFLAG@

# Complex variable support
enable-complex       = @enablecomplex@

# NetCDF platform-independent binary file support.
# Needed for ExodusII support
enable-netcdf 	     = @enablenetcdf@
NETCDF_INCLUDE	     = @NETCDF_INCLUDE_PATH@
NETCDF_LIBRARY	     = @LIBNETCDF@ 

# HDF Version 4 support for platform-independent
# binary files.  Precludes (because it includes) NetCDF
enable-hdf4          = @enablehdf4@
HDF4_INCLUDE	     = @HDF4_INCLUDE_PATH@
HDF4_LIB_DIR	     = @HDF4_LIB_PATH@ 
HDF4_LIBS            = @HDF4_LIB_NAMES@

# ExodusII binary file support for reading meshes in 
# Sandia National Lab's ExodusII format
enable-exodus        = @enableexodus@
EXODUS_INCLUDE       = @EXODUS_INCLUDE_PATH@
EXODUS_LIBRARY       = @LIBEXOII@

# Metis graph partitiong software for domain decomposition
enable-metis         = @enablemetis@
METIS_INCLUDE	     = @METIS_INCLUDE_PATH@

# Laspack iterative solvers for uniprocessor applications
enable-laspack       = @enablelaspack@
LASPACK_INCLUDE	     = @LASPACK_INCLUDE_PATH@

# Petsc iterative solvers for parallel and uniprocessor
# applications
enable-petsc         = @enablepetsc@
petsc-version        = @petscversion@
PETSC_ARCH           = @PETSC_ARCH@
PETSC_DIR            = @PETSC_DIR@

# MPI message passing interface for parallel communication.
# Only configured explicitly if Petsc is absent, otherwise
# just snoop Petsc's MPI configuration
enable-mpi           = @enablempi@
MPI_INCLUDE          = @MPI_INCLUDE_PATH@
MPI_LIBRARY          = @MPI_LIBRARY_PATH@

# Hilbert and Morton space filling curves for domain decomposition
enable-sfc	     = @enablesfc@
SFC_INCLUDE	     = @SFC_INCLUDE_PATH@

# Tecplot binary API support
enable-tecplot       = @enabletecplot@
TECIO_INCLUDE        = @TECPLOT_INCLUDE_PATH@
TECIO_LIBRARY        = @TECPLOT_LIBRARY@

# Doxygen for generating documentation
doxygen		     = @DOXYGEN@

# Perl for making .depend
perl                 = @PERL@

# Flag to disable all optional packages
enable-optional      = @enableoptional@



#
# Set the current directory.
pwd := @PWD@
###############################################################################




###############################################################################
#
# Figure out the compilation mode based on the
# environment variable METHOD.
opt-mode   := off
debug-mode := off
prof-mode  := off
syn-mode   := off
obj-suffix := @host@.o

#
# If the user has no environment variable
# called METHOD, he gets optimized mode.
ifeq (x$(METHOD),x)
  METHOD     := opt
  opt-mode   := on
  obj-suffix := @host@.o
endif

#
# If METHOD=opt, compile in optimized mode.
ifeq ($(METHOD),opt)
  opt-mode   := on
  obj-suffix := @host@.o
endif

#
# If METHOD=dbg, compile in debug mode.
ifeq ($(METHOD),dbg)
  debug-mode := on
  obj-suffix := @host@.g.o
endif

#
# If METHOD=pro, compile in profiler mode
ifeq ($(METHOD),pro)
  prof-mode  := on
  obj-suffix := @host@.pg.o
endif

#
# If METHOD=syn, compile in syntax-checking mode
ifeq ($(METHOD),syn)
  syn-mode  := on
  obj-suffix := @host@.sy.o
endif

#
# Set the option to determine what type of
# library (.so or .a) will be built.
enable-shared        := @enableshared@

#
# If we are profiling, we CANNOT use shared
# libs.  At least I don't think we can ;)
ifeq ($(prof-mode),on)
  enable-shared := no
endif
###############################################################################



###############################################################################
# Compiler flags, different for optimized, debug, and profiler modes.
ifeq ($(debug-mode),on)
  CXXFLAGS += @CXXFLAGSG@
  CFLAGS   += @CFLAGSG@
endif


ifeq ($(opt-mode),on)
  CXXFLAGS += @CXXFLAGSO@
  CFLAGS   += @CFLAGSO@
endif


ifeq ($(prof-mode),on)
  CXXFLAGS += @CXXFLAGSP@ 
  CFLAGS   += @CFLAGSP@ 
endif


ifeq ($(syn-mode),on)
  CXXFLAGS += @CXXFLAGSS@ 
  CFLAGS   += @CFLAGSS@ 
endif

ifeq ($(prof-mode),on)
  LIBS += -pg
endif
###############################################################################



###############################################################################
# The mesh library
#
mesh_library_dir := $(pwd)/lib/$(hosttype)_$(METHOD)

mesh_library     := $(mesh_library_dir)/libmesh.a
ifeq ($(enable-shared),yes) 
  mesh_library   := $(mesh_library_dir)/libmesh.so
  DLFLAGS += $(RPATHFLAG)$(mesh_library_dir)
endif

LIBS += $(mesh_library)
###############################################################################



###############################################################################
# now configuration for package includes, libraries, etc...
#
# Package-specific stuff

INCLUDE += -I$(pwd)/include

#
# Contributed source & libraries
EXTERNAL_LIBDIR := $(pwd)/contrib/lib/$(hosttype)_$(METHOD)
EXTERNAL_LIBEXT := .a
ifeq ($(enable-shared),yes) 
  EXTERNAL_LIBEXT := .so
  DLFLAGS += $(RPATHFLAG)$(EXTERNAL_LIBDIR)
endif


#
# Optional packages
ifeq ($(enable-optional),yes)

  # if Laspack is used we need the header path
  # and the lib
  ifeq ($(enable-laspack),yes)
    LIBS    += $(EXTERNAL_LIBDIR)/liblaspack$(EXTERNAL_LIBEXT)
    INCLUDE += -I$(LASPACK_INCLUDE)
    ifeq ($(enable-complex),yes)
      CXXFLAGS     += -DUSE_COMPLEX_NUMBERS
      CFLAGS       += -DUSE_REAL_NUMBERS
    endif
  endif

  # if Metis is used we need the header path
  # and the lib
  ifeq ($(enable-metis),yes)
    LIBS    += $(EXTERNAL_LIBDIR)/libmetis$(EXTERNAL_LIBEXT)
    INCLUDE += -I$(METIS_INCLUDE)
  endif

  # if Space filling curves are used we need the
  # header path and the lib
  ifeq ($(enable-sfc),yes)
    LIBS    += $(EXTERNAL_LIBDIR)/libsfcurves$(EXTERNAL_LIBEXT)
    INCLUDE += -I$(SFC_INCLUDE)
  endif

  #if Tecplot is used, link against tecio.a
  ifeq ($(enable-tecplot),yes)
    LIBS    += $(TECIO_LIBRARY)
    INCLUDE += -I$(TECIO_INCLUDE)
  endif	

  #############################################################################
  # Petsc
  ifeq ($(enable-petsc),yes)

    # Depending on petsc version, we include different files
    ifeq ($(petsc-version),2.1.0)
      include $(PETSC_DIR)/bmake/$(PETSC_ARCH)/base.site # 2.1.0 style
    else
      include $(PETSC_DIR)/bmake/$(PETSC_ARCH)/packages  # 2.1.1 or later style
    endif


    INCLUDE += -I$(PETSC_DIR)/include -I$(PETSC_DIR)/bmake/$(PETSC_ARCH) \
                $(MPI_INCLUDE) $(BLOCKSOLVE_INCLUDE) $(HYPRE_INCLUDE)

    ifeq ($(enable-complex),yes)
      CXXFLAGS     += -DPETSC_USE_COMPLEX
      CFLAGS       += -DPETSC_USE_COMPLEX
      PETSC_BOPT.g = g_complex
      PETSC_BOPT.o = O_complex
    else
      PETSC_BOPT.g = g
      PETSC_BOPT.o = O
    endif

    ifeq ($(debug-mode),on)
      PETSC_LIB = $(PETSC_DIR)/lib/lib$(PETSC_BOPT.g)/$(PETSC_ARCH)
    else	
      PETSC_LIB = $(PETSC_DIR)/lib/lib$(PETSC_BOPT.o)/$(PETSC_ARCH)
    endif	

    ifeq ($(enable-shared),yes)
      CXXFLAGS     += -DPETSC_USE_DYNAMIC_LIBRARIES
      CFLAGS       += -DPETSC_USE_DYNAMIC_LIBRARIES 
      DLFLAGS      += $(RPATHFLAG)$(PETSC_LIB)
    endif

    libs-PETSC = -L$(PETSC_LIB) \
	         -lpetscsles \
		 -lpetscdm \
		 -lpetscmat \
		 -lpetscvec \
		 -lpetsc

    LIBS += $(libs-PETSC) $(BLOCKSOLVE_LIB) $(SPOOLES_LIB) \
	    $(HYPRE_LIB) $(BLASLAPACK_LIB) $(MPI_LIB) \
	    $(X11_LIB) $(MATLAB_LIB) $(FLIBS)
  else

    # MPI configuration when Petsc is absent
    ifeq ($(enable-mpi),yes)
      LIBS    += $(MPI_LIBRARY)
      INCLUDE += -I$(MPI_INCLUDE)
    endif

  endif #end ifeq ($(enable-petsc),yes)

endif # End of disable-optional test



#if Exodus is used, link against libexoIIv2c.a
ifeq ($(enable-exodus),yes)
  LIBS += $(EXODUS_LIBRARY)
  INCLUDE += -I$(EXODUS_INCLUDE)
endif

#if netCDF is used, link against libnetcdf.a
# (note that netCDF is required by exodus if available,
# so we need to link to this _after_ exodus.
ifeq ($(enable-netcdf),yes)
  LIBS += $(NETCDF_LIBRARY)
  INCLUDE += -I$(NETCDF_INCLUDE)
endif

#if HDF4 is used, link against its libraries
ifeq ($(enable-hdf4),yes)
  LIBS += -L$(HDF4_LIB_DIR) $(HDF4_LIBS)
  INCLUDE += -I$(HDF4_INCLUDE)
endif


#
# Finally, Append the linker flags to the libraries
LIBS += $(DLFLAGS) $(LDFLAGS)
###############################################################################



###############################################################################
# Build rules

##################################
# C++ rules                      #
##################################

#
# How to compile optimized C++
#
%.@host@.o : %.C
	@echo "Compiling C++ (in optimized mode) "$<"..."
	@$(CXX) $(CXXFLAGS) $(INCLUDE) -c $< -o $@

#
# How to compile C++ with debugging flags
#
%.@host@.g.o : %.C
	@echo "Compiling C++ (in debug mode) "$<"..."
	@$(CXX) $(CXXFLAGS) $(INCLUDE) -c $< -o $@

#
# How to compile C++ with profiling flags
#
%.@host@.pg.o : %.C
	@echo "Compiling C++ (in profiler mode) "$<"..."
	@$(CXX) $(CXXFLAGS) $(INCLUDE) -c $< -o $@

#
# How to compile C++ with syntax-checking flags
#
%.@host@.sy.o : %.C
	@echo "Compiling C++ (in syntax-checker mode) "$<"..."
	@$(CXX) $(CXXFLAGS) $(INCLUDE) -c $<
	$(shell touch $@)

##################################
# C rules                        #
##################################

# do not show this to the LASPACK Makefile
ifeq (x$(included-from-laspack),x)
  #
  # How to compile optimized C
  #
%.@host@.o : %.c
	@echo "Compiling C (in optimized mode) "$<"..."
	@$(CC) $(CFLAGS) $(INCLUDE) -c $< -o $@

  #
  # How to compile C with debugging flags
  #
%.@host@.g.o : %.c
	@echo "Compiling C (in debug mode) "$<"..."
	@$(CC) $(CFLAGS) $(INCLUDE) -c $< -o $@

  #
  # How to compile C with profiling flags
  #
%.@host@.pg.o : %.c
	@echo "Compiling C (in profiler mode) "$<"..."
	@$(CC) $(CFLAGS) $(INCLUDE) -c $< -o $@

  #
  # How to compile C with profiling flags
  #
%.@host@.sy.o : %.c
	@echo "Compiling C (in syntax-checker mode) "$<"..."
	@$(CC) $(CFLAGS) $(INCLUDE) -c $< -o $@
	$(shell touch $@)

else

  # only visible for LASPACK Makefile
  ifeq ($(enable-complex),yes)

    # complex: C++ rules for .c Laspack code
%.@host@.o : %.c
	@echo "Compiling C++ (in optimized mode) "$<"..."
	@$(CXX) $(CXXFLAGS) $(INCLUDE) -c $< -o $@

%.@host@.g.o : %.c
	@echo "Compiling C++ (in debug mode) "$<"..."
	@$(CXX) $(CXXFLAGS) $(INCLUDE) -c $< -o $@

%.@host@.pg.o : %.c
	@echo "Compiling C++ (in profiler mode) "$<"..."
	@$(CXX) $(CXXFLAGS) $(INCLUDE) -c $< -o $@

%.@host@.sy.o : %.c
	@echo "Compiling C++ (in syntax-checker mode) "$<"..."
	@$(CXX) $(CXXFLAGS) $(INCLUDE) -c $<
	$(shell touch $@)

  else

    # real: C rules for .c Laspack code
%.@host@.o : %.c
	@echo "Compiling C (in optimized mode) "$<"..."
	@$(CC) $(CFLAGS) $(INCLUDE) -c $< -o $@

%.@host@.g.o : %.c
	@echo "Compiling C (in debug mode) "$<"..."
	@$(CC) $(CFLAGS) $(INCLUDE) -c $< -o $@

%.@host@.pg.o : %.c
	@echo "Compiling C (in profiler mode) "$<"..."
	@$(CC) $(CFLAGS) $(INCLUDE) -c $< -o $@

%.@host@.sy.o : %.c
	@echo "Compiling C (in syntax-checker mode) "$<"..."
	@$(CC) $(CFLAGS) $(INCLUDE) -c $< -o $@
	$(shell touch $@)

  endif
endif

###############################################################################



# Local Variables:
# mode: makefile
# End:
