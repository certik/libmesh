###############################################################################
## Please note:
##   The ./configure script generates Make.common from 
##   Make.common.in, so if you want to change something,
##   then do it in the latter file (here!) and re-run
##   ./configure in the top level directory
###############################################################################

###############################################################################
#
# The Make.common file defines the build environment for libMesh
# and all its helper applications.  If you want to build an application
# that makes use of libMesh it is highly recommended that you include
# this file in your project's Makefile.
#
###############################################################################

###############################################################################
# the following lines will be replaced by the output 
# of ./configure
hosttype              = @host@
hostos                = @host_os@

libmesh_CXX           = @CXX@
libmesh_CC            = @CC@
libmesh_F77           = @F77@
libmesh_F90           = @FC@
libmesh_LDFLAGS       = @LDFLAGS@
libmesh_DLFLAGS       =
libmesh_LIBS          = @LIBS@
libmesh_FLIBS         = @FLIBS@
libmesh_FFLAGS        = @FFLAGS@
GXX-VERSION           = @GXX_VERSION@
libmesh_CXXSHAREDFLAG = @CXXSHAREDFLAG@
libmesh_CSHAREDFLAG   = @CXXSHAREDFLAG@
libmesh_RPATHFLAG     = @RPATHFLAG@
libmesh_ASSEMBLYFLAGS = @ASSEMBLY_FLAGS@

# Use libmesh-specific compiler flags if available, otherwise
# use general compiler flags from environment
libmesh_CFLAGS       ?= $(CFLAGS)
libmesh_CXXFLAGS     ?= $(CXXFLAGS)
libmesh_CPPFLAGS     ?= $(CPPFLAGS)
NODEPRECATEDFLAG     = @NODEPRECATEDFLAG@

# Complex variable support
enable-complex       = @enablecomplex@

# Petsc iterative solvers for parallel and uniprocessor
# applications
enable-petsc         = @enablepetsc@
petsc-version        = @petscversion@
petsc-major          = @petscmajor@
petsc-major-minor    = @petscmajorminor@
PETSC_ARCH           = @PETSC_ARCH@
PETSC_DIR            = @PETSC_DIR@

# Slepc for eigen value analysis
enable-slepc         = @enableslepc@
SLEPC_DIR            = @SLEPC_DIR@

# MPI configuration
# (only explicitly defined when PETSc is absent, otherwise snooped from PETSc)
MPI_IMPL             = @MPI_IMPL@
MPI_INCLUDE          = @MPI_INCLUDES_PATHS@
MPI_LIB              = @MPI_LIBS_PATHS@ @MPI_LIBS@

# Trilinos configuration
enable-trilinos-10       = @enabletrilinos10@
TRILINOS_MAKEFILE_EXPORT = @TRILINOS_MAKEFILE_EXPORT@

# AztecOO configuration
enable-aztecoo          = @enableaztecoo@
AZTECOO_MAKEFILE_EXPORT = @AZTECOO_MAKEFILE_EXPORT@

# Nox configuration
enable-nox          = @enablenox@
NOX_MAKEFILE_EXPORT = @NOX_MAKEFILE_EXPORT@

# ML configuration
enable-ml          = @enableml@
ML_MAKEFILE_EXPORT = @ML_MAKEFILE_EXPORT@

# Boost Configuration - currently using header-only libraries
libmesh_INCLUDE += @BOOST_CPPFLAGS@
#libmesh_LIBS     += @BOOST_LDFLAGS@

# Doxygen for generating documentation
doxygen		     = @DOXYGEN@

# Perl for making .depend
perl                 = @PERL@

# Flag for optional packages
enable-optional      = @enableoptional@
enable-eigen         = @enableeigen@
enable-exodus	     = @enableexodus@
enable-fparser       = @enablefparser@
enable-glpk          = @enableglpk@
enable-gmv           = @enablegmv@
enable-gzstream      = @enablegz@
enable-laspack	     = @enablelaspack@
enable-libhilbert    = @enablelibhilbert@
enable-metis	     = @enablemetis@
enable-nemesis	     = @enablenemesis@
enable-netcdf	     = @enablenetcdf@
enable-openmp        = @enableopenmp@
enable-parmetis	     = @enableparmetis@
enable-sfcurves	     = @enablesfc@
enable-tetgen        = @enabletetgen@
enable-triangle      = @enabletriangle@
enable-vtk           = @enablevtk@

#
# Set the current directory.
libmesh_dir := @PWD@
top_srcdir  := @PWD@
export libmesh_dir
###############################################################################




###############################################################################
# Set the option to determine if shared libraries will be built
enable-shared := @enableshared@
#
# Figure out the compilation mode based on the
# environment variable METHOD.
opt-mode   := off
debug-mode := off
prof-mode  := off
oprof-mode := off
syn-mode   := off
devel-mode := off

# Unless we find a valid or an unset METHOD 
# variable, there's something wrong.
mode := "INVALID"

# If the user has no environment variable
# called METHOD, he gets optimized mode.
ifeq (x$(METHOD),x)
  METHOD := opt
endif

# If METHOD=opt, compile in optimized mode.
ifeq ($(METHOD),optimized)
  METHOD := opt
endif

ifeq ($(METHOD),opt)
  opt-mode := on
  mode     := "optimized"
endif

#
# If METHOD=devel, compile in development mode.
ifeq ($(METHOD),development)
  METHOD := devel
endif

ifeq ($(METHOD),devel)
  devel-mode := on
  mode       := "development"
endif

#
# If METHOD=dbg, compile in debug mode.
ifeq ($(METHOD),debug)
  METHOD := dbg
endif
ifeq ($(METHOD),dbg)
  debug-mode := on
  mode       := "debug"
endif

#
# If METHOD=prof, compile in profiling mode
ifeq ($(METHOD),profiling)
  METHOD := pro
endif
ifeq ($(METHOD),prof)
  METHOD := pro
endif
ifeq ($(METHOD),pro)
  prof-mode     := on
  mode          := "profiling"
  enable-shared := no
endif

#
# If METHOD=oprof, compile in OProfile mode
ifeq ($(METHOD),oprofile)
  METHOD := oprof
endif
ifeq ($(METHOD),oprof)
  oprof-mode    := on
  mode          := "oprofile"
endif

# If the user had a METHOD variable we didn't
# recognize, there's been some mistake.  Let's
# yell at them.
ifeq ($(mode),"INVALID")
  $(error Invalid environment variable METHOD=$(METHOD) specified)
endif

# The file extension for object files.
# foo.C is compiled to foo.$(obj-suffix)
obj-suffix := @host@.$(METHOD).o

#
# Define the right lib-extension for shared libraries
static_libext := .a
shared_libext := .so
ifeq ($(findstring darwin,$(hostos)),darwin)
  shared_libext := .dylib
endif

libext := $(static_libext)
ifeq ($(enable-shared),yes) 
  libext := $(shared_libext)
endif
###############################################################################



###############################################################################
# Compiler flags, different for optimized, debug, and profiler modes.
ifeq ($(opt-mode),on)
  libmesh_CPPFLAGS := -DNDEBUG $(libmesh_CPPFLAGS)
  libmesh_CXXFLAGS := @CXXFLAGS_OPT@ $(libmesh_CXXFLAGS)
  libmesh_CFLAGS   := @CFLAGS_OPT@ $(libmesh_CFLAGS)
endif


ifeq ($(devel-mode),on)
  libmesh_CXXFLAGS := @CXXFLAGS_DVL@ $(libmesh_CXXFLAGS)
  libmesh_CFLAGS   := @CFLAGS_DVL@ $(libmesh_CFLAGS)
endif


ifeq ($(debug-mode),on)
  libmesh_CPPFLAGS := -DDEBUG $(libmesh_CPPFLAGS)
  libmesh_CXXFLAGS := @CXXFLAGS_DBG@ $(libmesh_CXXFLAGS)
  libmesh_CFLAGS   := @CFLAGS_DBG@  $(libmesh_CFLAGS)
endif


ifeq ($(prof-mode),on)
  libmesh_CPPFLAGS := -DNDEBUG $(libmesh_CPPFLAGS)
  libmesh_CXXFLAGS := @CXXFLAGS_OPT@ @PROFILING_FLAGS@ $(libmesh_CXXFLAGS)
  libmesh_CFLAGS   := @CFLAGS_OPT@ @PROFILING_FLAGS@  $(libmesh_CFLAGS)
  libmesh_LIBS := @PROFILING_FLAGS@ $(libmesh_LIBS)
endif


ifeq ($(oprof-mode),on)
  libmesh_CPPFLAGS := -DNDEBUG
  libmesh_CXXFLAGS := @CXXFLAGS_OPT@ @OPROFILE_FLAGS@ $(libmesh_CXXFLAGS)
  libmesh_CFLAGS   := @CFLAGS_OPT@ @OPROFILE_FLAGS@ $(libmesh_CFLAGS)
endif
###############################################################################



###############################################################################
# The mesh library
#
mesh_library_dir := $(libmesh_dir)/lib/$(hosttype)_$(METHOD)

mesh_library     := $(mesh_library_dir)/libmesh$(static_libext)
ifeq ($(enable-shared),yes) 
  mesh_library   := $(mesh_library_dir)/libmesh$(shared_libext)
  libmesh_DLFLAGS += $(libmesh_RPATHFLAG)$(mesh_library_dir)
endif

libmesh_LIBS += $(mesh_library)
###############################################################################



###############################################################################
# now configuration for package includes, libraries, etc...

#
# The include directories for libMesh
libmesh_INCLUDE += -I$(libmesh_dir)/include/base \
                   -I$(libmesh_dir)/include/enums \
                   -I$(libmesh_dir)/include/error_estimation \
                   -I$(libmesh_dir)/include/fe \
                   -I$(libmesh_dir)/include/geom \
                   -I$(libmesh_dir)/include/mesh \
                   -I$(libmesh_dir)/include/numerics \
                   -I$(libmesh_dir)/include/parallel \
                   -I$(libmesh_dir)/include/partitioning \
                   -I$(libmesh_dir)/include/physics \
                   -I$(libmesh_dir)/include/quadrature \
                   -I$(libmesh_dir)/include/reduced_basis \
                   -I$(libmesh_dir)/include/solvers \
                   -I$(libmesh_dir)/include/systems \
                   -I$(libmesh_dir)/include/utils



#
# Package-specific stuff

#
# Contributed source & libraries
EXTERNAL_LIBDIR := $(libmesh_dir)/contrib/lib/$(hosttype)_$(METHOD)
ifeq ($(enable-shared),yes) 
  libmesh_DLFLAGS += $(libmesh_RPATHFLAG)$(EXTERNAL_LIBDIR)
endif


# # Include path for local boost header files.  Note, this
# # will probably not be an "optional" package if we really
# # do end up using it.
# libmesh_INCLUDE += -I$(libmesh_dir)/contrib/boost

#
# Optional packages
ifeq ($(enable-optional),yes)

  # if Laspack is used we need the header path
  # and the lib
  libmesh_LIBS    += @LASPACK_LIB@
  libmesh_INCLUDE += @LASPACK_INCLUDE@

  # if Paretis is used we need the header path
  # and the lib
  # (Parmetis must precede Metis for static linking)
  libmesh_LIBS    += @PARMETIS_LIB@
  libmesh_INCLUDE += @PARMETIS_INCLUDE@

  # if Metis is used we need the header path
  # and the lib
  libmesh_LIBS    += @METIS_LIB@
  libmesh_INCLUDE += @METIS_INCLUDE@

  # if Space filling curves are used we need the
  # header path and the lib
  libmesh_LIBS    += @SFC_LIB@
  libmesh_INCLUDE += @SFC_INCLUDE@

  # if TBB is used, we need the 
  # header path and the lib
  libmesh_LIBS    += @TBB_LIBRARY@
  libmesh_INCLUDE += @TBB_INCLUDE@

  # if OpenMP is used, modify the build and link flags
  ifeq ($(enable-openmp),yes)
    libmesh_CXXFLAGS += @OPENMP_CXXFLAGS@
    libmesh_CFLAGS   += @OPENMP_CFLAGS@
    libmesh_FFLAGS   += @OPENMP_FFLAGS@
  endif

  # if gzstreams are used, we need the 
  # header path and the lib
  libmesh_LIBS    += @GZSTREAM_LIB@
  libmesh_INCLUDE += @GZSTREAM_INCLUDE@

  # if Tecplot is used, link against tecio.a
  libmesh_LIBS    += @TECPLOT_LIBRARY@
  libmesh_INCLUDE += @TECPLOT_INCLUDE@

  # Link against the GMV APIs to read/write GMV files
  libmesh_LIBS    += @GMV_LIBRARY@
  libmesh_INCLUDE += @GMV_INCLUDE@

  # Link against the VTK APIs to read/write VTK files
  ifeq ($(enable-vtk),yes)
    libmesh_LIBS    += @VTK_LIBRARY@
    libmesh_INCLUDE += @VTK_INCLUDE@
  endif

  # Link against the GLPK APIs to perform linear programs
  ifeq ($(enable-glpk),yes)
    libmesh_LIBS    += @GLPK_LIBRARY@
    libmesh_INCLUDE += @GLPK_INCLUDE@
  endif

  # Add Eigen header files to include paths
  ifeq ($(enable-eigen),yes)
    libmesh_INCLUDE += @EIGEN_INCLUDE@
  endif

  # if TetGen is used:
  ifeq ($(enable-tetgen),yes)
    libmesh_LIBS     += @TETGEN_LIBRARY@
    libmesh_INCLUDE  += @TETGEN_INCLUDE@
  endif

  # if Triangle is used:
  ifeq ($(enable-triangle),yes)
    libmesh_LIBS     += @TRIANGLE_LIBRARY@
    libmesh_INCLUDE  += @TRIANGLE_INCLUDE@
  endif

  # if Exodus is used we need the header path
  # and the lib
  ifeq ($(enable-exodus),yes)
    libmesh_LIBS    += @EXODUS_LIBRARY@
    libmesh_INCLUDE += @EXODUS_INCLUDE@
  endif

  # if netCDF is used, link against libnetcdf.a
  # (note that netCDF is required by exodus if available,
  # so we need to link to this _after_ exodus.
  ifeq ($(enable-netcdf),yes)
    libmesh_LIBS    += @NETCDF_LIBRARY@
    libmesh_INCLUDE += @NETCDF_INCLUDE@
  endif

  # if Nemesis is used we need the header path
  # and the lib
  ifeq ($(enable-nemesis),yes)
    libmesh_LIBS    += @NEMESIS_LIBRARY@
    libmesh_INCLUDE += @NEMESIS_INCLUDE@
  endif

  # if libHilbert is used we need the header path
  # and the lib
  ifeq ($(enable-libhilbert),yes)
    libmesh_LIBS    += @LIBHILBERT_LIBRARY@
    libmesh_INCLUDE += @LIBHILBERT_INCLUDE@
  endif

  # if fparser is used we need the header path
  #  and the lib
  ifeq ($(enable-fparser),yes)
    libmesh_LIBS    += @FPARSER_LIBRARY@
    libmesh_INCLUDE += @FPARSER_INCLUDE@
  endif

  # Trilinos - at a minimum, we support the 
  # AztecOO linear solvers and requisite Epetra
  # data structures
  ifeq ($(enable-aztecoo),yes)
      include @AZTECOO_MAKEFILE_EXPORT@
      libmesh_LIBS    += $(AZTECOO_LIBS)
      libmesh_INCLUDE += $(AZTECOO_INCLUDES)

      # Nox, an additional option if AztecOO is present
      ifeq ($(enable-nox),yes)
          include @NOX_MAKEFILE_EXPORT@
          libmesh_LIBS    += $(NOX_LIBS)
          libmesh_INCLUDE += $(NOX_INCLUDES)
          libmesh_CPPFLAGS     += -DHAVE_CONFIG_H
      endif
      
      # ML, an additional option if AztecOO is present
      ifeq ($(enable-ml),yes)
          include @ML_MAKEFILE_EXPORT@
          libmesh_LIBS    += $(ML_LIBS)
          libmesh_INCLUDE += $(ML_INCLUDES)
      endif
  endif	

  ifeq ($(enable-trilinos-10),yes)
      include @TRILINOS_MAKEFILE_EXPORT@
      libmesh_LIBS    += $(Trilinos_LIBRARIES) $(Trilinos_LIBRARY_DIRS) $(Trilinos_TPL_LIBRARIES) $(Trilinos_TPL_LIBRARY_DIRS)
      libmesh_INCLUDE += $(Trilinos_INCLUDE_DIRS) $(Trilinos_TPL_INCLUDE_DIRS)      	
  endif	

  #############################################################################
  # SLEPc
  ifeq ($(enable-slepc),yes)
    # The configure script checks that only corresponding
    # versions of PETSc and SLEPc can be used. Hence,
    # petsc-major-minor is also used to identify the SLEPc version 
    ifeq ($(petsc-major-minor),2.3.x)  # 2.3.x style
      include $(SLEPC_DIR)/bmake/$(PETSC_ARCH)/slepcconf
    else
	  ifeq ($(petsc-major),3)  # 3.0.x & newer style
	    ifeq ($(petsc-major-minor),3.0.x)
	      include ${SLEPC_DIR}/conf/slepc_common_variables
	    else ifeq ($(petsc-major-minor),3.1.x)
	      include ${SLEPC_DIR}/conf/slepc_common_variables
	    else   # 3.2.x & newer style
	      include ${SLEPC_DIR}/conf/slepc_variables
	    endif
	  else
	    include $(SLEPC_DIR)/bmake/$(PETSC_ARCH)/packages
	  endif
    endif	

    libmesh_INCLUDE += -I$(SLEPC_DIR)/include -I$(SLEPC_DIR)/$(PETSC_ARCH)/include

    libs-SLEPC = $(SLEPC_LIB)

    libmesh_LIBS += $(libs-SLEPC) $(ARPACK_LIB)

    libmesh_DLFLAGS += $(SLEPC_LIB)

  endif #end ifeq ($(enable-slepc),yes)


  #############################################################################
  # Petsc
  ifeq ($(enable-petsc),yes)

    # define BOPT first since it may be used in the packages file
    ifeq ($(enable-complex),yes)
      libmesh_CPPFLAGS     += -DPETSC_USE_COMPLEX
      PETSC_BOPT.g = g_complex
      PETSC_BOPT.o = O_complex
    else
      PETSC_BOPT.g = g
      PETSC_BOPT.o = O
    endif

    ifeq ($(debug-mode),on)
      BOPT = $(PETSC_BOPT.g)
    else
      BOPT = $(PETSC_BOPT.o)
    endif
    # Depending on petsc version, we include different files
    ifeq ($(petsc-version),2.1.0)
      include $(PETSC_DIR)/bmake/$(PETSC_ARCH)/base.site # 2.1.0 style
    else
      C_CLINKER_SLFLAG = $(libmesh_RPATHFLAG)# necessary for PETSc >= 2.1.6
      ifeq ($(petsc-major),3)  # 3.0.x & newer style
        include $(PETSC_DIR)/conf/variables
      else
        include $(PETSC_DIR)/bmake/common/variables  # 2.1.1 or later style
      endif      
    endif

#     # As of PETSc 2.1.x we can extract the libraries and include paths
#     # from the PETSc make file
#     LIBS    += `$(MAKE) -C $(PETSC_DIR) BOPT=$(BOPT) getlinklibs`
#     INCLUDE += `$(MAKE) -C $(PETSC_DIR) BOPT=$(BOPT) getincludedirs`

    #                    (needed by all petsc)  (needed by versions <= 2.3.3)      (needed by versions >= 3.0.0)
    libmesh_INCLUDE += -I$(PETSC_DIR)/include -I$(PETSC_DIR)/bmake/$(PETSC_ARCH) -I$(PETSC_DIR)/$(PETSC_ARCH)/include \
                         $(BLOCKSOLVE_INCLUDE) $(HYPRE_INCLUDE) $(PACKAGES_INCLUDES)

    # Depending on petsc version, libs live in different locations
    ifeq ($(petsc-major-minor),2.3.x) # 2.3.x does not use BOPT, has lib/ARCH/...
      PETSC_LIB = $(PETSC_DIR)/lib/$(PETSC_ARCH)
    else
      ifeq ($(petsc-major),3) # 3.0.x & newer does not use BOPT, has ARCH/lib/...
        PETSC_LIB = $(PETSC_DIR)/$(PETSC_ARCH)/lib
      else # old-schol lib/lib$BOPT/ARCH format
        PETSC_LIB = $(PETSC_DIR)/lib/lib$(BOPT)/$(PETSC_ARCH)
      endif
    endif

    ifeq ($(enable-shared),yes)
      libmesh_CPPFLAGS     += -DPETSC_USE_DYNAMIC_LIBRARIES
      libmesh_DLFLAGS      += $(libmesh_RPATHFLAG)$(PETSC_LIB)
    endif

    # Get required PETSc link options from their variables
    libmesh_LIBS += $(PETSC_SNES_LIB)

  endif #end ifeq ($(enable-petsc),yes)

  #############################################################################
  # SLEPc again. When linking slepc-2.3.x to external libraries
  # e.g. ARPACK this needs to be included after PETSc.
  ifeq ($(enable-slepc),yes)
    ifeq ($(petsc-major-minor),2.3.x)  # 2.3.x & newer style
      include $(SLEPC_DIR)/bmake/slepc_common_variables
    endif
  endif

  # MPI configuration when Petsc is absent
  libmesh_LIBS    += $(MPI_LIB)
  libmesh_INCLUDE += $(MPI_INCLUDE)

endif # End of disable-optional test


# Finally, Append the linker flags to the libraries
libmesh_LIBS += $(libmesh_DLFLAGS) $(libmesh_LDFLAGS)


###############################################################################



###############################################################################
# Build rules

##################################
# C++ rules                      #
##################################

#
# How to compile C++ to an object file
#
%.$(obj-suffix) : %.C
	@echo "Compiling C++ (in "$(mode)" mode) "$<"..."
	@$(libmesh_CXX) $(libmesh_CPPFLAGS) $(libmesh_CXXFLAGS) $(libmesh_INCLUDE) -c $< -o $@

#
# How to compile C++ to an assembly file for human examination
#
%.$(obj-suffix).S : %.C
	@echo "C++ (in "$(mode)" mode) "$<"..."
	@$(libmesh_CXX) $(libmesh_CPPFLAGS) $(libmesh_CXXFLAGS) $(libmesh_INCLUDE) $(libmesh_ASSEMBLYFLAGS) $< -o $@


##################################
# C rules                        #
##################################

# do not show this to the LASPACK Makefile
ifeq (x$(included-from-laspack),x)
  #
  # How to compile C
  #
%.$(obj-suffix) : %.c
	@echo "Compiling C (in "$(mode)" mode) "$<"..."
	@$(libmesh_CC) $(libmesh_CPPFLAGS) $(libmesh_CFLAGS) $(libmesh_INCLUDE) -c $< -o $@

else

  # only visible for LASPACK Makefile
  ifeq ($(enable-complex),yes)

    # complex: C++ rules for .c Laspack code
%.$(obj-suffix) : %.c
	@echo "Compiling C++ (in "$(mode)" mode) "$<"..."
	@$(libmesh_CXX) $(libmesh_CPPFLAGS) $(libmesh_CXXFLAGS) $(libmesh_INCLUDE) -c $< -o $@

  else

    # real: C rules for .c Laspack code
%.$(obj-suffix) : %.c
	@echo "Compiling C (in "$(mode)" mode) "$<"..."
	@$(libmesh_CC) $(libmesh_CPPFLAGS) $(libmesh_CFLAGS) $(libmesh_INCLUDE) -c $< -o $@

  endif
endif

##################################
# Fortran rules                  #
##################################

%.$(obj-suffix) : %.f
	@echo "Compiling Fortan (in "$(mode)" mode) "$<"..."
	@$(libmesh_F77) $(libmesh_FFLAGS) $(libmesh_INCLUDE) -c $< -o $@

%.$(obj-suffix) : %.f90
	@echo "Compiling Fortan90 (in "$(mode)" mode) "$<"..."
	@$(libmesh_F90) $(libmesh_FFLAGS) $(libmesh_INCLUDE) -c $< -o $@

###############################################################################



# Local Variables:
# mode: makefile
# End:
