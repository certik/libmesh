? meshes
? src/apps/foo.cc
Index: CHANGELOG
===================================================================
RCS file: /cvsroot/libmesh/libmesh/CHANGELOG,v
retrieving revision 1.3
diff -c -r1.3 CHANGELOG
*** CHANGELOG	21 Feb 2003 21:03:48 -0000	1.3
--- CHANGELOG	22 Feb 2003 16:01:51 -0000
***************
*** 1,68744 ****
- ? src/apps/foo.cc
- Index: .cvsignore
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/.cvsignore,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** .cvsignore	24 Jan 2003 17:24:32 -0000	1.5
- --- .cvsignore	12 Feb 2003 05:41:24 -0000	1.6
- ***************
- *** 50,52 ****
- --- 50,53 ----
-   CHANGELOG
-   *.png
-   *.rgb
- + it_test*
- Index: .depend
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/.depend,v
- retrieving revision 1.3
- retrieving revision 1.13
- diff -c -r1.3 -r1.13
- *** .depend	29 Jan 2003 20:58:29 -0000	1.3
- --- .depend	19 Feb 2003 13:28:40 -0000	1.13
- ***************
- *** 4,27 ****
- --- 4,39 ----
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- +     include/enum_solver_package.h\
-       include/fe_interface.h\
-       include/fe_type.h\
- +     include/libmesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- +     include/node_iterators.h\
-       include/perf_log.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
- +     include/sparse_matrix.h\
-       include/sphere.h\
-       include/surface.h
- + src/base/dof_object.$(obj-suffix):\
- +     src/base/dof_object.C\
- +     include/dof_object.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h
-   src/base/equation_systems.$(obj-suffix):\
-       src/base/equation_systems.C\
-       include/auto_ptr.h\
- ***************
- *** 30,60 ****
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
-       include/equation_systems.h\
-       include/fe_interface.h\
-       include/fe_type.h\
-       include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
-       include/perf_log.h\
- -     include/petsc_interface.h\
- -     include/petsc_matrix.h\
- -     include/petsc_vector.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h\
- !     include/system_data.h\
-       include/xdr_cxx.h
-   src/base/equation_systems_io.$(obj-suffix):\
-       src/base/equation_systems_io.C\
- --- 42,81 ----
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- +     include/enum_preconditioner_type.h\
- +     include/enum_solver_package.h\
- +     include/enum_solver_type.h\
-       include/equation_systems.h\
-       include/fe_interface.h\
-       include/fe_type.h\
- +     include/general_system.h\
- +     include/libmesh.h\
- +     include/linear_solver_interface.h\
-       include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- +     include/node_iterators.h\
- +     include/numeric_vector.h\
-       include/perf_log.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
- +     include/sparse_matrix.h\
-       include/sphere.h\
-       include/surface.h\
- !     include/system_base.h\
-       include/xdr_cxx.h
-   src/base/equation_systems_io.$(obj-suffix):\
-       src/base/equation_systems_io.C\
- ***************
- *** 64,96 ****
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
-       include/equation_systems.h\
-       include/fe_type.h\
-       include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/petsc_interface.h\
-       include/petsc_matrix.h\
-       include/petsc_vector.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h\
- !     include/system_data.h\
-       include/xdr_cxx.h
-   src/base/node.$(obj-suffix):\
-       src/base/node.C\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- --- 85,217 ----
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- +     include/enum_preconditioner_type.h\
- +     include/enum_solver_package.h\
- +     include/enum_solver_type.h\
-       include/equation_systems.h\
-       include/fe_type.h\
- +     include/general_system.h\
- +     include/linear_solver_interface.h\
-       include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
- !     include/numeric_vector.h\
-       include/petsc_interface.h\
-       include/petsc_matrix.h\
-       include/petsc_vector.h\
-       include/point.h\
- +     include/predicated_iterator.h\
- +     include/reference_counted_object.h\
- +     include/reference_counter.h\
- +     include/sparse_matrix.h\
- +     include/sphere.h\
- +     include/surface.h\
- +     include/system_base.h\
- +     include/xdr_cxx.h
- + src/base/frequency_system.$(obj-suffix):\
- +     src/base/frequency_system.C\
- +     include/auto_ptr.h\
- +     include/boundary_info.h\
- +     include/boundary_mesh.h\
- +     include/coupling_matrix.h\
- +     include/dense_matrix.h\
- +     include/dof_map.h\
- +     include/dof_object.h\
- +     include/elem.h\
- +     include/elem_iterators.h\
- +     include/enum_elem_quality.h\
- +     include/enum_elem_type.h\
- +     include/enum_fe_family.h\
- +     include/enum_inf_map_type.h\
- +     include/enum_order.h\
- +     include/enum_preconditioner_type.h\
- +     include/enum_solver_package.h\
- +     include/enum_solver_type.h\
- +     include/equation_systems.h\
- +     include/fe_type.h\
- +     include/frequency_system.h\
- +     include/linear_solver_interface.h\
- +     include/mesh.h\
- +     include/mesh_base.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/mesh_refinement.h\
- +     include/node.h\
- +     include/node_iterators.h\
- +     include/numeric_vector.h\
- +     include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
- +     include/sparse_matrix.h\
-       include/sphere.h\
-       include/surface.h\
- !     include/system_base.h\
-       include/xdr_cxx.h
- + src/base/general_system.$(obj-suffix):\
- +     src/base/general_system.C\
- +     include/auto_ptr.h\
- +     include/boundary_info.h\
- +     include/boundary_mesh.h\
- +     include/coupling_matrix.h\
- +     include/dense_matrix.h\
- +     include/dof_map.h\
- +     include/dof_object.h\
- +     include/elem.h\
- +     include/elem_iterators.h\
- +     include/enum_elem_quality.h\
- +     include/enum_elem_type.h\
- +     include/enum_fe_family.h\
- +     include/enum_inf_map_type.h\
- +     include/enum_order.h\
- +     include/enum_preconditioner_type.h\
- +     include/enum_solver_package.h\
- +     include/enum_solver_type.h\
- +     include/equation_systems.h\
- +     include/fe_type.h\
- +     include/general_system.h\
- +     include/libmesh.h\
- +     include/linear_solver_interface.h\
- +     include/mesh.h\
- +     include/mesh_base.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/mesh_refinement.h\
- +     include/node.h\
- +     include/node_iterators.h\
- +     include/numeric_vector.h\
- +     include/perf_log.h\
- +     include/point.h\
- +     include/predicated_iterator.h\
- +     include/reference_counted_object.h\
- +     include/reference_counter.h\
- +     include/sparse_matrix.h\
- +     include/sphere.h\
- +     include/surface.h\
- +     include/system_base.h\
- +     include/xdr_cxx.h
- + src/base/libmesh.$(obj-suffix):\
- +     src/base/libmesh.C\
- +     include/libmesh.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/perf_log.h\
- +     include/reference_counter.h
-   src/base/node.$(obj-suffix):\
-       src/base/node.C\
- +     include/dof_object.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- ***************
- *** 106,177 ****
-       src/base/reference_counter.C\
-       include/mesh_config.h\
-       include/reference_counter.h
- ! src/base/system_data.$(obj-suffix):\
- !     src/base/system_data.C\
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- !     include/equation_systems.h\
-       include/fe_type.h\
-       include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
-       include/perf_log.h\
- -     include/petsc_interface.h\
- -     include/petsc_matrix.h\
- -     include/petsc_vector.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h\
- !     include/system_data.h\
- !     include/xdr_cxx.h
- ! src/fe/fe.$(obj-suffix):\
- !     src/fe/fe.C\
-       include/auto_ptr.h\
- -     include/elem.h\
- -     include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
-       include/fe.h\
-       include/fe_base.h\
-       include/fe_type.h\
-       include/inf_fe.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
- -     include/node.h\
-       include/point.h\
-       include/quadrature.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
- ! src/fe/fe_base.$(obj-suffix):\
- !     src/fe/fe_base.C\
-       include/auto_ptr.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
-       include/fe.h\
-       include/fe_base.h\
-       include/fe_type.h\
- -     include/inf_fe.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- --- 227,305 ----
-       src/base/reference_counter.C\
-       include/mesh_config.h\
-       include/reference_counter.h
- ! src/base/system_base.$(obj-suffix):\
- !     src/base/system_base.C\
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- !     include/enum_preconditioner_type.h\
- !     include/enum_solver_package.h\
- !     include/enum_solver_type.h\
-       include/fe_type.h\
- +     include/libmesh.h\
- +     include/linear_solver_interface.h\
-       include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- +     include/node_iterators.h\
- +     include/numeric_vector.h\
-       include/perf_log.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
- +     include/sparse_matrix.h\
-       include/sphere.h\
-       include/surface.h\
- !     include/system_base.h
- ! src/base/system_data.$(obj-suffix):\
- !     src/base/system_data.C
- ! src/fe/fe_base.$(obj-suffix):\
- !     src/fe/fe_base.C\
-       include/auto_ptr.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- +     include/enum_quadrature_type.h\
-       include/fe.h\
-       include/fe_base.h\
-       include/fe_type.h\
-       include/inf_fe.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
- ! src/fe/fe_boundary.$(obj-suffix):\
- !     src/fe/fe_boundary.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- +     include/enum_quadrature_type.h\
-       include/fe.h\
-       include/fe_base.h\
-       include/fe_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- ***************
- *** 179,196 ****
-       include/quadrature.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
- ! src/fe/fe_boundary.$(obj-suffix):\
- !     src/fe/fe_boundary.C\
-       include/auto_ptr.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
-       include/fe.h\
-       include/fe_base.h\
-       include/fe_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- --- 307,327 ----
-       include/quadrature.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
- ! src/fe/fe.$(obj-suffix):\
- !     src/fe/fe.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- +     include/enum_quadrature_type.h\
-       include/fe.h\
-       include/fe_base.h\
-       include/fe_type.h\
- +     include/inf_fe.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- ***************
- *** 201,206 ****
- --- 332,338 ----
-   src/fe/fe_hierarchic.$(obj-suffix):\
-       src/fe/fe_hierarchic.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- ***************
- *** 219,224 ****
- --- 351,357 ----
-   src/fe/fe_hierarchic_shape_1D.$(obj-suffix):\
-       src/fe/fe_hierarchic_shape_1D.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- ***************
- *** 237,242 ****
- --- 370,376 ----
-   src/fe/fe_hierarchic_shape_2D.$(obj-suffix):\
-       src/fe/fe_hierarchic_shape_2D.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- ***************
- *** 255,260 ****
- --- 389,395 ----
-   src/fe/fe_hierarchic_shape_3D.$(obj-suffix):\
-       src/fe/fe_hierarchic_shape_3D.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- ***************
- *** 273,278 ****
- --- 408,434 ----
-   src/fe/fe_interface.$(obj-suffix):\
-       src/fe/fe_interface.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
- +     include/elem.h\
- +     include/enum_elem_quality.h\
- +     include/enum_elem_type.h\
- +     include/enum_fe_family.h\
- +     include/enum_inf_map_type.h\
- +     include/enum_order.h\
- +     include/fe.h\
- +     include/fe_base.h\
- +     include/fe_interface.h\
- +     include/fe_type.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/node.h\
- +     include/point.h\
- +     include/reference_counted_object.h\
- +     include/reference_counter.h
- + src/fe/fe_interface_inf_fe.$(obj-suffix):\
- +     src/fe/fe_interface_inf_fe.C\
- +     include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- ***************
- *** 293,298 ****
- --- 449,455 ----
-   src/fe/fe_lagrange.$(obj-suffix):\
-       src/fe/fe_lagrange.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- ***************
- *** 311,316 ****
- --- 468,474 ----
-   src/fe/fe_lagrange_shape_1D.$(obj-suffix):\
-       src/fe/fe_lagrange_shape_1D.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- ***************
- *** 329,334 ****
- --- 487,493 ----
-   src/fe/fe_lagrange_shape_2D.$(obj-suffix):\
-       src/fe/fe_lagrange_shape_2D.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- ***************
- *** 347,352 ****
- --- 506,512 ----
-   src/fe/fe_lagrange_shape_3D.$(obj-suffix):\
-       src/fe/fe_lagrange_shape_3D.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- ***************
- *** 365,376 ****
- --- 525,538 ----
-   src/fe/fe_map.$(obj-suffix):\
-       src/fe/fe_map.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- +     include/enum_quadrature_type.h\
-       include/fe.h\
-       include/fe_base.h\
-       include/fe_type.h\
- ***************
- *** 384,389 ****
- --- 546,552 ----
-   src/fe/fe_monomial.$(obj-suffix):\
-       src/fe/fe_monomial.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- ***************
- *** 402,407 ****
- --- 565,571 ----
-   src/fe/fe_monomial_shape_1D.$(obj-suffix):\
-       src/fe/fe_monomial_shape_1D.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- ***************
- *** 420,425 ****
- --- 584,590 ----
-   src/fe/fe_monomial_shape_2D.$(obj-suffix):\
-       src/fe/fe_monomial_shape_2D.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- ***************
- *** 438,443 ****
- --- 603,609 ----
-   src/fe/fe_monomial_shape_3D.$(obj-suffix):\
-       src/fe/fe_monomial_shape_3D.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- ***************
- *** 453,468 ****
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
- ! src/fe/inf_fe.$(obj-suffix):\
- !     src/fe/inf_fe.C\
-       include/auto_ptr.h\
- -     include/elem.h\
- -     include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- -     include/fe.h\
-       include/fe_base.h\
-       include/fe_type.h\
-       include/inf_fe.h\
- --- 619,631 ----
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
- ! src/fe/inf_fe_boundary.$(obj-suffix):\
- !     src/fe/inf_fe_boundary.C\
-       include/auto_ptr.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
-       include/fe_base.h\
-       include/fe_type.h\
-       include/inf_fe.h\
- ***************
- *** 472,492 ****
-       include/inf_fe_macro.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
- -     include/node.h\
-       include/point.h\
- -     include/quadrature.h\
- -     include/quadrature_gauss.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
- ! src/fe/inf_fe_boundary.$(obj-suffix):\
- !     src/fe/inf_fe_boundary.C\
-       include/auto_ptr.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
-       include/fe_base.h\
-       include/fe_type.h\
-       include/inf_fe.h\
- --- 635,655 ----
-       include/inf_fe_macro.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
- ! src/fe/inf_fe.$(obj-suffix):\
- !     src/fe/inf_fe.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- +     include/enum_quadrature_type.h\
- +     include/fe.h\
-       include/fe_base.h\
-       include/fe_type.h\
-       include/inf_fe.h\
- ***************
- *** 498,510 ****
-       include/mesh_config.h\
-       include/node.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
-   src/fe/inf_fe_jacobi_20_00_eval.$(obj-suffix):\
-       src/fe/inf_fe_jacobi_20_00_eval.C\
-       include/auto_ptr.h\
- -     include/elem.h\
- -     include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
- --- 661,673 ----
-       include/mesh_config.h\
-       include/node.h\
-       include/point.h\
- +     include/quadrature.h\
- +     include/quadrature_gauss.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
-   src/fe/inf_fe_jacobi_20_00_eval.$(obj-suffix):\
-       src/fe/inf_fe_jacobi_20_00_eval.C\
-       include/auto_ptr.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
- ***************
- *** 514,528 ****
-       include/inf_fe.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
- -     include/node.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
-   src/fe/inf_fe_jacobi_30_00_eval.$(obj-suffix):\
-       src/fe/inf_fe_jacobi_30_00_eval.C\
-       include/auto_ptr.h\
- -     include/elem.h\
- -     include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
- --- 677,688 ----
- ***************
- *** 532,546 ****
-       include/inf_fe.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
- -     include/node.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
-   src/fe/inf_fe_lagrange_eval.$(obj-suffix):\
-       src/fe/inf_fe_lagrange_eval.C\
-       include/auto_ptr.h\
- -     include/elem.h\
- -     include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
- --- 692,703 ----
- ***************
- *** 550,564 ****
-       include/inf_fe.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
- -     include/node.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
-   src/fe/inf_fe_legendre_eval.$(obj-suffix):\
-       src/fe/inf_fe_legendre_eval.C\
-       include/auto_ptr.h\
- -     include/elem.h\
- -     include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
- --- 707,718 ----
- ***************
- *** 568,582 ****
-       include/inf_fe.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
- -     include/node.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
-   src/fe/inf_fe_map_eval.$(obj-suffix):\
-       src/fe/inf_fe_map_eval.C\
-       include/auto_ptr.h\
- -     include/elem.h\
- -     include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
- --- 722,733 ----
- ***************
- *** 586,598 ****
-       include/inf_fe.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
- -     include/node.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
-   src/fe/inf_fe_static.$(obj-suffix):\
-       src/fe/inf_fe_static.C\
-       include/auto_ptr.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- --- 737,749 ----
-       include/inf_fe.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h
-   src/fe/inf_fe_static.$(obj-suffix):\
-       src/fe/inf_fe_static.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- ***************
- *** 615,637 ****
-       include/reference_counter.h
-   src/geom/cell.$(obj-suffix):\
-       src/geom/cell.C
- - src/geom/cell_hex.$(obj-suffix):\
- -     src/geom/cell_hex.C\
- -     include/auto_ptr.h\
- -     include/cell_hex.h\
- -     include/elem.h\
- -     include/enum_elem_quality.h\
- -     include/enum_elem_type.h\
- -     include/enum_order.h\
- -     include/face.h\
- -     include/face_quad.h\
- -     include/face_quad4.h\
- -     include/mesh_common.h\
- -     include/mesh_config.h\
- -     include/node.h\
- -     include/point.h\
- -     include/reference_counted_object.h\
- -     include/reference_counter.h
-   src/geom/cell_hex20.$(obj-suffix):\
-       src/geom/cell_hex20.C\
-       include/auto_ptr.h\
- --- 766,771 ----
- ***************
- *** 639,645 ****
- --- 773,781 ----
-       include/boundary_mesh.h\
-       include/cell_hex.h\
-       include/cell_hex20.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 652,659 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 788,796 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 665,671 ****
- --- 802,810 ----
-       include/boundary_mesh.h\
-       include/cell_hex.h\
-       include/cell_hex27.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 678,685 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 817,825 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 691,697 ****
- --- 831,839 ----
-       include/boundary_mesh.h\
-       include/cell_hex.h\
-       include/cell_hex8.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 704,715 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
-   src/geom/cell_inf_hex16.$(obj-suffix):\
-       src/geom/cell_inf_hex16.C\
-       include/auto_ptr.h\
- --- 846,876 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
- + src/geom/cell_hex.$(obj-suffix):\
- +     src/geom/cell_hex.C\
- +     include/auto_ptr.h\
- +     include/cell_hex.h\
- +     include/dof_object.h\
- +     include/elem.h\
- +     include/enum_elem_quality.h\
- +     include/enum_elem_type.h\
- +     include/enum_order.h\
- +     include/face.h\
- +     include/face_quad.h\
- +     include/face_quad4.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/node.h\
- +     include/point.h\
- +     include/reference_counted_object.h\
- +     include/reference_counter.h
-   src/geom/cell_inf_hex16.$(obj-suffix):\
-       src/geom/cell_inf_hex16.C\
-       include/auto_ptr.h\
- ***************
- *** 717,723 ****
- --- 878,886 ----
-       include/boundary_mesh.h\
-       include/cell_hex.h\
-       include/cell_inf_hex16.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 731,738 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 894,902 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 744,750 ****
- --- 908,916 ----
-       include/boundary_mesh.h\
-       include/cell_hex.h\
-       include/cell_inf_hex18.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 758,765 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 924,932 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 771,777 ****
- --- 938,946 ----
-       include/boundary_mesh.h\
-       include/cell_hex.h\
-       include/cell_inf_hex8.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 785,792 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 954,962 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 799,805 ****
- --- 969,977 ----
-       include/cell.h\
-       include/cell_inf_prism12.h\
-       include/cell_prism.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 814,821 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 986,994 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 828,834 ****
- --- 1001,1009 ----
-       include/cell.h\
-       include/cell_inf_prism6.h\
-       include/cell_prism.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 843,860 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
- ! src/geom/cell_prism.$(obj-suffix):\
- !     src/geom/cell_prism.C\
-       include/auto_ptr.h\
-       include/cell.h\
-       include/cell_prism.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- --- 1018,1041 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
- ! src/geom/cell_prism6.$(obj-suffix):\
- !     src/geom/cell_prism6.C\
-       include/auto_ptr.h\
- +     include/boundary_info.h\
- +     include/boundary_mesh.h\
-       include/cell.h\
-       include/cell_prism.h\
- +     include/cell_prism6.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 863,882 ****
-       include/face_quad4.h\
-       include/face_tri.h\
-       include/face_tri3.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
-       include/point.h\
-       include/reference_counted_object.h\
- !     include/reference_counter.h
- ! src/geom/cell_prism6.$(obj-suffix):\
- !     src/geom/cell_prism6.C\
-       include/auto_ptr.h\
- -     include/boundary_info.h\
- -     include/boundary_mesh.h\
-       include/cell.h\
-       include/cell_prism.h\
- !     include/cell_prism6.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- --- 1044,1068 ----
-       include/face_quad4.h\
-       include/face_tri.h\
-       include/face_tri3.h\
- +     include/mesh.h\
- +     include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
- +     include/mesh_refinement.h\
-       include/node.h\
- +     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
- !     include/reference_counter.h\
- !     include/sphere.h\
- !     include/surface.h
- ! src/geom/cell_prism.$(obj-suffix):\
- !     src/geom/cell_prism.C\
-       include/auto_ptr.h\
-       include/cell.h\
-       include/cell_prism.h\
- !     include/dof_object.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
- ***************
- *** 886,911 ****
-       include/face_quad4.h\
-       include/face_tri.h\
-       include/face_tri3.h\
- -     include/mesh.h\
- -     include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
- -     include/mesh_refinement.h\
-       include/node.h\
- -     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
- !     include/reference_counter.h\
- !     include/sphere.h\
- !     include/surface.h
- ! src/geom/cell_pyramid.$(obj-suffix):\
- !     src/geom/cell_pyramid.C\
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
-       include/cell.h\
-       include/cell_pyramid.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- --- 1072,1098 ----
-       include/face_quad4.h\
-       include/face_tri.h\
-       include/face_tri3.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
-       include/point.h\
-       include/reference_counted_object.h\
- !     include/reference_counter.h
- ! src/geom/cell_pyramid5.$(obj-suffix):\
- !     src/geom/cell_pyramid5.C\
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
-       include/cell.h\
-       include/cell_pyramid.h\
- +     include/cell_pyramid5.h\
- +     include/cell_tet.h\
- +     include/cell_tet4.h\
- +     include/dof_object.h\
- +     include/edge.h\
- +     include/edge_edge2.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 920,944 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
- ! src/geom/cell_pyramid5.$(obj-suffix):\
- !     src/geom/cell_pyramid5.C\
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
-       include/cell.h\
-       include/cell_pyramid.h\
- !     include/cell_pyramid5.h\
- !     include/cell_tet.h\
- !     include/cell_tet4.h\
- !     include/edge.h\
- !     include/edge_edge2.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- --- 1107,1129 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
- ! src/geom/cell_pyramid.$(obj-suffix):\
- !     src/geom/cell_pyramid.C\
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
-       include/cell.h\
-       include/cell_pyramid.h\
- !     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 953,1026 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
- ! src/geom/cell_tet.$(obj-suffix):\
- !     src/geom/cell_tet.C\
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
-       include/cell.h\
-       include/cell_tet.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/face.h\
-       include/face_tri.h\
- !     include/face_tri3.h\
-       include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
- ! src/geom/cell_tet10.$(obj-suffix):\
- !     src/geom/cell_tet10.C\
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
-       include/cell.h\
-       include/cell_tet.h\
- !     include/cell_tet10.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/face.h\
-       include/face_tri.h\
- !     include/face_tri6.h\
-       include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
- ! src/geom/cell_tet4.$(obj-suffix):\
- !     src/geom/cell_tet4.C\
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
-       include/cell.h\
-       include/cell_tet.h\
- !     include/cell_tet4.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- --- 1138,1220 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
- ! src/geom/cell_tet10.$(obj-suffix):\
- !     src/geom/cell_tet10.C\
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
-       include/cell.h\
-       include/cell_tet.h\
- +     include/cell_tet10.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/face.h\
-       include/face_tri.h\
- !     include/face_tri6.h\
-       include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
- ! src/geom/cell_tet4.$(obj-suffix):\
- !     src/geom/cell_tet4.C\
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
-       include/cell.h\
-       include/cell_tet.h\
- !     include/cell_tet4.h\
- !     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/face.h\
-       include/face_tri.h\
- !     include/face_tri3.h\
-       include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
- ! src/geom/cell_tet.$(obj-suffix):\
- !     src/geom/cell_tet.C\
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
-       include/cell.h\
-       include/cell_tet.h\
- !     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1033,1040 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 1227,1235 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1044,1049 ****
- --- 1239,1245 ----
-   src/geom/edge_edge2.$(obj-suffix):\
-       src/geom/edge_edge2.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/edge.h\
-       include/edge_edge2.h\
-       include/elem.h\
- ***************
- *** 1059,1064 ****
- --- 1255,1261 ----
-   src/geom/edge_edge3.$(obj-suffix):\
-       src/geom/edge_edge3.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/edge.h\
-       include/edge_edge3.h\
-       include/elem.h\
- ***************
- *** 1074,1079 ****
- --- 1271,1277 ----
-   src/geom/edge_inf_edge2.$(obj-suffix):\
-       src/geom/edge_inf_edge2.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/edge.h\
-       include/edge_inf_edge2.h\
-       include/elem.h\
- ***************
- *** 1105,1110 ****
- --- 1303,1309 ----
-       include/cell_tet.h\
-       include/cell_tet10.h\
-       include/cell_tet4.h\
- +     include/dof_object.h\
-       include/edge.h\
-       include/edge_edge2.h\
-       include/edge_edge3.h\
- ***************
- *** 1153,1162 ****
- --- 1352,1363 ----
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
- +     include/dof_object.h\
-       include/edge.h\
-       include/edge_edge2.h\
-       include/edge_inf_edge2.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1169,1176 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 1370,1378 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1180,1189 ****
- --- 1382,1393 ----
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
- +     include/dof_object.h\
-       include/edge.h\
-       include/edge_edge3.h\
-       include/edge_inf_edge2.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1196,1234 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
- - src/geom/face_infinite.$(obj-suffix):\
- -     src/geom/face_infinite.C
- - src/geom/face_quad.$(obj-suffix):\
- -     src/geom/face_quad.C\
- -     include/auto_ptr.h\
- -     include/edge.h\
- -     include/edge_edge2.h\
- -     include/elem.h\
- -     include/enum_elem_quality.h\
- -     include/enum_elem_type.h\
- -     include/enum_order.h\
- -     include/face.h\
- -     include/face_quad.h\
- -     include/mesh_common.h\
- -     include/mesh_config.h\
- -     include/node.h\
- -     include/point.h\
- -     include/reference_counted_object.h\
- -     include/reference_counter.h
-   src/geom/face_quad4.$(obj-suffix):\
-       src/geom/face_quad4.C\
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
-       include/edge.h\
-       include/edge_edge2.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- --- 1400,1422 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
-   src/geom/face_quad4.$(obj-suffix):\
-       src/geom/face_quad4.C\
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
- +     include/dof_object.h\
-       include/edge.h\
-       include/edge_edge2.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1241,1248 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 1429,1437 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1252,1260 ****
- --- 1441,1451 ----
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
- +     include/dof_object.h\
-       include/edge.h\
-       include/edge_edge3.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1267,1274 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 1458,1466 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1278,1286 ****
- --- 1470,1480 ----
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
- +     include/dof_object.h\
-       include/edge.h\
-       include/edge_edge3.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1293,1307 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
- ! src/geom/face_tri.$(obj-suffix):\
- !     src/geom/face_tri.C\
-       include/auto_ptr.h\
-       include/edge.h\
-       include/edge_edge2.h\
-       include/elem.h\
- --- 1487,1503 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
- ! src/geom/face_quad.$(obj-suffix):\
- !     src/geom/face_quad.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/edge.h\
-       include/edge_edge2.h\
-       include/elem.h\
- ***************
- *** 1309,1315 ****
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/face.h\
- !     include/face_tri.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- --- 1505,1511 ----
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/face.h\
- !     include/face_quad.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- ***************
- *** 1321,1329 ****
- --- 1517,1527 ----
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
- +     include/dof_object.h\
-       include/edge.h\
-       include/edge_edge2.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1336,1343 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 1534,1542 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1347,1355 ****
- --- 1546,1556 ----
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
- +     include/dof_object.h\
-       include/edge.h\
-       include/edge_edge3.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1362,1373 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
-   src/geom/plane.$(obj-suffix):\
-       src/geom/plane.C\
-       include/mesh_common.h\
- --- 1563,1593 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
- + src/geom/face_tri.$(obj-suffix):\
- +     src/geom/face_tri.C\
- +     include/auto_ptr.h\
- +     include/dof_object.h\
- +     include/edge.h\
- +     include/edge_edge2.h\
- +     include/elem.h\
- +     include/enum_elem_quality.h\
- +     include/enum_elem_type.h\
- +     include/enum_order.h\
- +     include/face.h\
- +     include/face_tri.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/node.h\
- +     include/point.h\
- +     include/reference_counted_object.h\
- +     include/reference_counter.h
-   src/geom/plane.$(obj-suffix):\
-       src/geom/plane.C\
-       include/mesh_common.h\
- ***************
- *** 1398,1404 ****
- --- 1618,1626 ----
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1408,1451 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
-   src/mesh/boundary_mesh.$(obj-suffix):\
-       src/mesh/boundary_mesh.C\
- -     include/boundary_mesh.h\
- -     include/enum_elem_type.h\
- -     include/enum_order.h\
- -     include/mesh_base.h\
- -     include/mesh_common.h\
- -     include/mesh_config.h\
- -     include/node.h\
- -     include/perf_log.h\
- -     include/point.h\
- -     include/reference_counted_object.h\
- -     include/reference_counter.h\
- -     include/sphere.h\
- -     include/surface.h
- - src/mesh/mesh.$(obj-suffix):\
- -     src/mesh/mesh.C\
-       include/auto_ptr.h\
- -     include/boundary_info.h\
-       include/boundary_mesh.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- -     include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
- -     include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 1630,1659 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h
-   src/mesh/boundary_mesh.$(obj-suffix):\
-       src/mesh/boundary_mesh.C\
-       include/auto_ptr.h\
-       include/boundary_mesh.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1463,1486 ****
- --- 1671,1727 ----
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- +     include/enum_solver_package.h\
-       include/face.h\
-       include/face_tri.h\
-       include/face_tri3.h\
-       include/face_tri6.h\
-       include/fe_type.h\
- +     include/libmesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- +     include/node_iterators.h\
-       include/perf_log.h\
-       include/petsc_matrix.h\
-       include/point.h\
- +     include/predicated_iterator.h\
- +     include/reference_counted_object.h\
- +     include/reference_counter.h\
- +     include/sparse_matrix.h\
- +     include/sphere.h\
- +     include/surface.h
- + src/mesh/mesh.$(obj-suffix):\
- +     src/mesh/mesh.C\
- +     include/auto_ptr.h\
- +     include/boundary_info.h\
- +     include/boundary_mesh.h\
- +     include/dof_object.h\
- +     include/elem.h\
- +     include/elem_iterators.h\
- +     include/enum_elem_quality.h\
- +     include/enum_elem_type.h\
- +     include/enum_order.h\
- +     include/libmesh.h\
- +     include/mesh.h\
- +     include/mesh_base.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/mesh_refinement.h\
- +     include/node.h\
- +     include/node_iterators.h\
- +     include/perf_log.h\
- +     include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1490,1496 ****
- --- 1731,1739 ----
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1500,1507 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 1743,1751 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1511,1517 ****
- --- 1755,1763 ----
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1522,1529 ****
-       include/mesh_exodus_support.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 1768,1776 ----
-       include/mesh_exodus_support.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1537,1546 ****
- --- 1784,1795 ----
-       include/cell_hex20.h\
-       include/cell_hex27.h\
-       include/cell_hex8.h\
- +     include/dof_object.h\
-       include/edge.h\
-       include/edge_edge2.h\
-       include/edge_edge3.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1552,1565 ****
- --- 1801,1817 ----
-       include/face_tri.h\
-       include/face_tri3.h\
-       include/face_tri6.h\
- +     include/libmesh.h\
-       include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- +     include/node_iterators.h\
-       include/perf_log.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1572,1615 ****
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
-       include/equation_systems.h\
-       include/fe_type.h\
-       include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/petsc_interface.h\
-       include/petsc_matrix.h\
-       include/petsc_vector.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h\
- -     include/system_data.h\
-       include/xdr_cxx.h
-   src/mesh/mesh_metis_support.$(obj-suffix):\
-       src/mesh/mesh_metis_support.C\
-       include/auto_ptr.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
-       include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 1824,1880 ----
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- +     include/enum_preconditioner_type.h\
- +     include/enum_solver_package.h\
- +     include/enum_solver_type.h\
-       include/equation_systems.h\
-       include/fe_type.h\
- +     include/linear_solver_interface.h\
-       include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
- !     include/numeric_vector.h\
-       include/petsc_interface.h\
-       include/petsc_matrix.h\
-       include/petsc_vector.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
- +     include/sparse_matrix.h\
-       include/sphere.h\
-       include/surface.h\
-       include/xdr_cxx.h
-   src/mesh/mesh_metis_support.$(obj-suffix):\
-       src/mesh/mesh_metis_support.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- +     include/libmesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- +     include/node_iterators.h\
-       include/perf_log.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1617,1623 ****
- --- 1882,1890 ----
-   src/mesh/mesh_misc_support.$(obj-suffix):\
-       src/mesh/mesh_misc_support.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1630,1637 ****
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 1897,1905 ----
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1641,1647 ****
- --- 1909,1917 ----
-       include/auto_ptr.h\
-       include/boundary_info.h\
-       include/boundary_mesh.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1651,1658 ****
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 1921,1929 ----
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1665,1694 ****
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
-       include/elem.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
-       include/equation_systems.h\
-       include/fe_type.h\
-       include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/petsc_interface.h\
-       include/petsc_matrix.h\
-       include/petsc_vector.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
-       include/surface.h\
- -     include/system_data.h\
-       include/xdr_cxx.h
-   src/mesh/mesh_ucd_support.$(obj-suffix):\
-       src/mesh/mesh_ucd_support.C\
- --- 1936,1973 ----
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- +     include/enum_preconditioner_type.h\
- +     include/enum_solver_package.h\
- +     include/enum_solver_type.h\
-       include/equation_systems.h\
-       include/fe_type.h\
- +     include/linear_solver_interface.h\
-       include/mesh.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/mesh_refinement.h\
-       include/node.h\
- !     include/node_iterators.h\
- !     include/numeric_vector.h\
-       include/petsc_interface.h\
-       include/petsc_matrix.h\
-       include/petsc_vector.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
- +     include/sparse_matrix.h\
-       include/sphere.h\
-       include/surface.h\
-       include/xdr_cxx.h
-   src/mesh/mesh_ucd_support.$(obj-suffix):\
-       src/mesh/mesh_ucd_support.C\
- ***************
- *** 1699,1705 ****
- --- 1978,1986 ----
-       include/cell_prism6.h\
-       include/cell_tet.h\
-       include/cell_tet4.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1712,1719 ****
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 1993,2001 ----
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1729,1735 ****
- --- 2011,2019 ----
-       include/cell_tet.h\
-       include/cell_tet10.h\
-       include/cell_tet4.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1747,1754 ****
-       include/mesh_refinement.h\
-       include/mesh_unv_support.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 2031,2039 ----
-       include/mesh_refinement.h\
-       include/mesh_unv_support.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1760,1766 ****
- --- 2045,2053 ----
-       include/boundary_mesh.h\
-       include/cell_hex.h\
-       include/cell_hex27.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1771,1778 ****
-       include/mesh_refinement.h\
-       include/mesh_xdr_support.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 2058,2066 ----
-       include/mesh_refinement.h\
-       include/mesh_xdr_support.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1785,1919 ****
-       include/dense_matrix.h\
-       include/mesh_common.h\
-       include/mesh_config.h
-   src/numerics/petsc_interface.$(obj-suffix):\
-       src/numerics/petsc_interface.C\
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
-       include/fe_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
- !     include/perf_log.h\
-       include/petsc_interface.h\
-       include/petsc_matrix.h\
- !     include/petsc_vector.h
-   src/numerics/petsc_matrix.$(obj-suffix):\
-       src/numerics/petsc_matrix.C\
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
-       include/fe_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
- !     include/perf_log.h\
-       include/petsc_matrix.h\
- !     include/petsc_vector.h
-   src/numerics/petsc_vector.$(obj-suffix):\
-       src/numerics/petsc_vector.C\
-       include/mesh_common.h\
-       include/mesh_config.h\
- !     include/petsc_vector.h
-   src/quadrature/quadrature.$(obj-suffix):\
-       src/quadrature/quadrature.C\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
- !     include/quadrature.h
- ! src/quadrature/quadrature_gauss.$(obj-suffix):\
- !     src/quadrature/quadrature_gauss.C
-   src/quadrature/quadrature_gauss_1D.$(obj-suffix):\
-       src/quadrature/quadrature_gauss_1D.C\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_gauss.h
-   src/quadrature/quadrature_gauss_2D.$(obj-suffix):\
-       src/quadrature/quadrature_gauss_2D.C\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_gauss.h
-   src/quadrature/quadrature_gauss_3D.$(obj-suffix):\
-       src/quadrature/quadrature_gauss_3D.C\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_gauss.h
- ! src/quadrature/quadrature_simpson.$(obj-suffix):\
- !     src/quadrature/quadrature_simpson.C
-   src/quadrature/quadrature_simpson_1D.$(obj-suffix):\
-       src/quadrature/quadrature_simpson_1D.C\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_simpson.h
-   src/quadrature/quadrature_simpson_2D.$(obj-suffix):\
-       src/quadrature/quadrature_simpson_2D.C\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_simpson.h
-   src/quadrature/quadrature_simpson_3D.$(obj-suffix):\
-       src/quadrature/quadrature_simpson_3D.C\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_simpson.h
- ! src/quadrature/quadrature_trap.$(obj-suffix):\
- !     src/quadrature/quadrature_trap.C
-   src/quadrature/quadrature_trap_1D.$(obj-suffix):\
-       src/quadrature/quadrature_trap_1D.C\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_trap.h
-   src/quadrature/quadrature_trap_2D.$(obj-suffix):\
-       src/quadrature/quadrature_trap_2D.C\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_trap.h
-   src/quadrature/quadrature_trap_3D.$(obj-suffix):\
-       src/quadrature/quadrature_trap_3D.C\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_trap.h
-   src/utils/perf_log.$(obj-suffix):\
-       src/utils/perf_log.C\
-       include/mesh_common.h\
- --- 2073,2419 ----
-       include/dense_matrix.h\
-       include/mesh_common.h\
-       include/mesh_config.h
- + src/numerics/distributed_vector.$(obj-suffix):\
- +     src/numerics/distributed_vector.C\
- +     include/auto_ptr.h\
- +     include/distributed_vector.h\
- +     include/enum_solver_package.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/numeric_vector.h\
- +     include/reference_counted_object.h\
- +     include/reference_counter.h
- + src/numerics/laspack_interface.$(obj-suffix):\
- +     src/numerics/laspack_interface.C\
- +     include/auto_ptr.h\
- +     include/coupling_matrix.h\
- +     include/dense_matrix.h\
- +     include/dof_map.h\
- +     include/enum_fe_family.h\
- +     include/enum_inf_map_type.h\
- +     include/enum_order.h\
- +     include/enum_preconditioner_type.h\
- +     include/enum_solver_package.h\
- +     include/enum_solver_type.h\
- +     include/fe_type.h\
- +     include/laspack_interface.h\
- +     include/laspack_matrix.h\
- +     include/laspack_vector.h\
- +     include/linear_solver_interface.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/numeric_vector.h\
- +     include/reference_counted_object.h\
- +     include/reference_counter.h\
- +     include/sparse_matrix.h
- + src/numerics/laspack_matrix.$(obj-suffix):\
- +     src/numerics/laspack_matrix.C\
- +     include/auto_ptr.h\
- +     include/coupling_matrix.h\
- +     include/dense_matrix.h\
- +     include/dof_map.h\
- +     include/enum_fe_family.h\
- +     include/enum_inf_map_type.h\
- +     include/enum_order.h\
- +     include/enum_solver_package.h\
- +     include/fe_type.h\
- +     include/laspack_matrix.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/reference_counted_object.h\
- +     include/reference_counter.h\
- +     include/sparse_matrix.h
- + src/numerics/laspack_vector.$(obj-suffix):\
- +     src/numerics/laspack_vector.C\
- +     include/auto_ptr.h\
- +     include/enum_solver_package.h\
- +     include/laspack_vector.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/numeric_vector.h\
- +     include/reference_counted_object.h\
- +     include/reference_counter.h
- + src/numerics/linear_solver_interface.$(obj-suffix):\
- +     src/numerics/linear_solver_interface.C\
- +     include/auto_ptr.h\
- +     include/coupling_matrix.h\
- +     include/dense_matrix.h\
- +     include/dof_map.h\
- +     include/enum_fe_family.h\
- +     include/enum_inf_map_type.h\
- +     include/enum_order.h\
- +     include/enum_preconditioner_type.h\
- +     include/enum_solver_package.h\
- +     include/enum_solver_type.h\
- +     include/fe_type.h\
- +     include/laspack_interface.h\
- +     include/laspack_matrix.h\
- +     include/laspack_vector.h\
- +     include/linear_solver_interface.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/numeric_vector.h\
- +     include/petsc_interface.h\
- +     include/petsc_matrix.h\
- +     include/petsc_vector.h\
- +     include/reference_counted_object.h\
- +     include/reference_counter.h\
- +     include/sparse_matrix.h
- + src/numerics/numeric_vector.$(obj-suffix):\
- +     src/numerics/numeric_vector.C\
- +     include/auto_ptr.h\
- +     include/enum_solver_package.h\
- +     include/laspack_vector.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/numeric_vector.h\
- +     include/petsc_vector.h\
- +     include/reference_counted_object.h\
- +     include/reference_counter.h
-   src/numerics/petsc_interface.$(obj-suffix):\
-       src/numerics/petsc_interface.C\
- +     include/auto_ptr.h\
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- +     include/enum_preconditioner_type.h\
- +     include/enum_solver_package.h\
- +     include/enum_solver_type.h\
-       include/fe_type.h\
- +     include/linear_solver_interface.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
- !     include/numeric_vector.h\
-       include/petsc_interface.h\
-       include/petsc_matrix.h\
- !     include/petsc_vector.h\
- !     include/reference_counted_object.h\
- !     include/reference_counter.h\
- !     include/sparse_matrix.h
-   src/numerics/petsc_matrix.$(obj-suffix):\
-       src/numerics/petsc_matrix.C\
- +     include/auto_ptr.h\
-       include/coupling_matrix.h\
-       include/dense_matrix.h\
-       include/dof_map.h\
-       include/enum_fe_family.h\
-       include/enum_inf_map_type.h\
-       include/enum_order.h\
- +     include/enum_solver_package.h\
-       include/fe_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
- !     include/numeric_vector.h\
-       include/petsc_matrix.h\
- !     include/petsc_vector.h\
- !     include/reference_counted_object.h\
- !     include/reference_counter.h\
- !     include/sparse_matrix.h
-   src/numerics/petsc_vector.$(obj-suffix):\
-       src/numerics/petsc_vector.C\
- +     include/auto_ptr.h\
- +     include/enum_solver_package.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/numeric_vector.h\
- +     include/petsc_vector.h\
- +     include/reference_counted_object.h\
- +     include/reference_counter.h
- + src/numerics/sparse_matrix.$(obj-suffix):\
- +     src/numerics/sparse_matrix.C\
- +     include/auto_ptr.h\
- +     include/coupling_matrix.h\
- +     include/dense_matrix.h\
- +     include/dof_map.h\
- +     include/enum_fe_family.h\
- +     include/enum_inf_map_type.h\
- +     include/enum_order.h\
- +     include/enum_solver_package.h\
- +     include/fe_type.h\
- +     include/laspack_matrix.h\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/petsc_matrix.h\
- +     include/reference_counted_object.h\
- +     include/reference_counter.h\
- +     include/sparse_matrix.h
- + src/quadrature/quadrature_build.$(obj-suffix):\
- +     src/quadrature/quadrature_build.C\
- +     include/auto_ptr.h\
- +     include/enum_elem_type.h\
- +     include/enum_order.h\
- +     include/enum_quadrature_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
- !     include/point.h\
- !     include/quadrature.h\
- !     include/quadrature_gauss.h\
- !     include/quadrature_jacobi.h\
- !     include/quadrature_simpson.h\
- !     include/quadrature_trap.h\
- !     include/reference_counted_object.h\
- !     include/reference_counter.h
-   src/quadrature/quadrature.$(obj-suffix):\
-       src/quadrature/quadrature.C\
- +     include/auto_ptr.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- +     include/enum_quadrature_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
- !     include/quadrature.h\
- !     include/reference_counted_object.h\
- !     include/reference_counter.h
-   src/quadrature/quadrature_gauss_1D.$(obj-suffix):\
-       src/quadrature/quadrature_gauss_1D.C\
- +     include/auto_ptr.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- +     include/enum_quadrature_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_gauss.h\
- !     include/reference_counted_object.h\
- !     include/reference_counter.h
-   src/quadrature/quadrature_gauss_2D.$(obj-suffix):\
-       src/quadrature/quadrature_gauss_2D.C\
- +     include/auto_ptr.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- +     include/enum_quadrature_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_gauss.h\
- !     include/quadrature_jacobi.h\
- !     include/reference_counted_object.h\
- !     include/reference_counter.h
-   src/quadrature/quadrature_gauss_3D.$(obj-suffix):\
-       src/quadrature/quadrature_gauss_3D.C\
- +     include/auto_ptr.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- +     include/enum_quadrature_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_gauss.h\
- !     include/quadrature_jacobi.h\
- !     include/reference_counted_object.h\
- !     include/reference_counter.h
- ! src/quadrature/quadrature_gauss.$(obj-suffix):\
- !     src/quadrature/quadrature_gauss.C
- ! src/quadrature/quadrature_jacobi_1D.$(obj-suffix):\
- !     src/quadrature/quadrature_jacobi_1D.C\
- !     include/auto_ptr.h\
- !     include/enum_elem_type.h\
- !     include/enum_order.h\
- !     include/enum_quadrature_type.h\
- !     include/mesh_common.h\
- !     include/mesh_config.h\
- !     include/point.h\
- !     include/quadrature.h\
- !     include/quadrature_jacobi.h\
- !     include/reference_counted_object.h\
- !     include/reference_counter.h
- ! src/quadrature/quadrature_jacobi.$(obj-suffix):\
- !     src/quadrature/quadrature_jacobi.C
- ! src/quadrature/quadrature_rules.$(obj-suffix):\
- !     src/quadrature/quadrature_rules.C\
- !     include/enum_quadrature_type.h\
- !     include/mesh_common.h\
- !     include/mesh_config.h\
- !     include/quadrature_rules.h
-   src/quadrature/quadrature_simpson_1D.$(obj-suffix):\
-       src/quadrature/quadrature_simpson_1D.C\
- +     include/auto_ptr.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- +     include/enum_quadrature_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_simpson.h\
- !     include/reference_counted_object.h\
- !     include/reference_counter.h
-   src/quadrature/quadrature_simpson_2D.$(obj-suffix):\
-       src/quadrature/quadrature_simpson_2D.C\
- +     include/auto_ptr.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- +     include/enum_quadrature_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_simpson.h\
- !     include/reference_counted_object.h\
- !     include/reference_counter.h
-   src/quadrature/quadrature_simpson_3D.$(obj-suffix):\
-       src/quadrature/quadrature_simpson_3D.C\
- +     include/auto_ptr.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- +     include/enum_quadrature_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_simpson.h\
- !     include/reference_counted_object.h\
- !     include/reference_counter.h
- ! src/quadrature/quadrature_simpson.$(obj-suffix):\
- !     src/quadrature/quadrature_simpson.C
-   src/quadrature/quadrature_trap_1D.$(obj-suffix):\
-       src/quadrature/quadrature_trap_1D.C\
- +     include/auto_ptr.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- +     include/enum_quadrature_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_trap.h\
- !     include/reference_counted_object.h\
- !     include/reference_counter.h
-   src/quadrature/quadrature_trap_2D.$(obj-suffix):\
-       src/quadrature/quadrature_trap_2D.C\
- +     include/auto_ptr.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- +     include/enum_quadrature_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_trap.h\
- !     include/reference_counted_object.h\
- !     include/reference_counter.h
-   src/quadrature/quadrature_trap_3D.$(obj-suffix):\
-       src/quadrature/quadrature_trap_3D.C\
- +     include/auto_ptr.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- +     include/enum_quadrature_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/point.h\
-       include/quadrature.h\
- !     include/quadrature_trap.h\
- !     include/reference_counted_object.h\
- !     include/reference_counter.h
- ! src/quadrature/quadrature_trap.$(obj-suffix):\
- !     src/quadrature/quadrature_trap.C
-   src/utils/perf_log.$(obj-suffix):\
-       src/utils/perf_log.C\
-       include/mesh_common.h\
- ***************
- *** 1926,1939 ****
-       include/statistics.h
-   src/utils/tree.$(obj-suffix):\
-       src/utils/tree.C\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 2426,2445 ----
-       include/statistics.h
-   src/utils/tree.$(obj-suffix):\
-       src/utils/tree.C\
- +     include/auto_ptr.h\
- +     include/dof_object.h\
- +     include/elem.h\
- +     include/elem_iterators.h\
- +     include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
-       include/mesh_base.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1943,1949 ****
- --- 2449,2457 ----
-   src/utils/tree_node.$(obj-suffix):\
-       src/utils/tree_node.C\
-       include/auto_ptr.h\
- +     include/dof_object.h\
-       include/elem.h\
- +     include/elem_iterators.h\
-       include/enum_elem_quality.h\
-       include/enum_elem_type.h\
-       include/enum_order.h\
- ***************
- *** 1951,1958 ****
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- !     include/perf_log.h\
-       include/point.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- --- 2459,2467 ----
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/node.h\
- !     include/node_iterators.h\
-       include/point.h\
- +     include/predicated_iterator.h\
-       include/reference_counted_object.h\
-       include/reference_counter.h\
-       include/sphere.h\
- ***************
- *** 1962,1975 ****
-       src/utils/utility.C\
-       include/mesh_config.h\
-       include/utility.h
-   src/utils/xdrIO.$(obj-suffix):\
-       src/utils/xdrIO.C\
-       include/enum_elem_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/xdrIO.h
- - src/utils/xdr_cxx.$(obj-suffix):\
- -     src/utils/xdr_cxx.C\
- -     include/mesh_common.h\
- -     include/mesh_config.h\
- -     include/xdr_cxx.h
- --- 2471,2484 ----
-       src/utils/utility.C\
-       include/mesh_config.h\
-       include/utility.h
- + src/utils/xdr_cxx.$(obj-suffix):\
- +     src/utils/xdr_cxx.C\
- +     include/mesh_common.h\
- +     include/mesh_config.h\
- +     include/xdr_cxx.h
-   src/utils/xdrIO.$(obj-suffix):\
-       src/utils/xdrIO.C\
-       include/enum_elem_type.h\
-       include/mesh_common.h\
-       include/mesh_config.h\
-       include/xdrIO.h
- Index: CHANGELOG
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/CHANGELOG,v
- retrieving revision 1.2
- diff -c -r1.2 CHANGELOG
- *** CHANGELOG	24 Jan 2003 17:24:33 -0000	1.2
- --- CHANGELOG	21 Feb 2003 20:53:39 -0000
- ***************
- *** 1,11475 ****
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/base/dof_map.C,v
- - Working file: src/base/dof_map.C
- - head: 1.13
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 13;	selected revisions: 13
- - description:
- - ----------------------------
- - revision 1.13
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -3
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.12
- - date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +136 -128
- - reworked the ReferenceCounter class
- - ----------------------------
- - revision 1.11
- - date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;  lines: +1 -2
- - Split up quadrature classes into
- - separate files.  Removed the quadrature header from
- - dof_map.C as it did not seem to be using it.
- - ----------------------------
- - revision 1.10
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +51 -28
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.9
- - date: 2003/01/10 22:21:25;  author: benkirk;  state: Exp;  lines: +3 -6
- - AutoPtr code unification
- - ----------------------------
- - revision 1.8
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +3 -3
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.7
- - date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +11 -17
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +7 -7
- - added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +5 -1
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +3 -3
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -5
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/base/equation_systems.C,v
- - Working file: src/base/equation_systems.C
- - head: 1.5
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 5;	selected revisions: 5
- - description:
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 20:43:46;  author: peterson;  state: Exp;  lines: +1 -2
- - Removing more unnecessary #includes.
- - ----------------------------
- - revision 1.4
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +6 -5
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.3
- - date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +2 -3
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.2
- - date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +9 -4
- - added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/base/equation_systems_io.C,v
- - Working file: src/base/equation_systems_io.C
- - head: 1.5
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 5;	selected revisions: 5
- - description:
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -4
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +2 -2
- - reworked the reference counting to use C++ run-type identification
- - ----------------------------
- - revision 1.3
- - date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +3 -3
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.2
- - date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +48 -8
- - added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/base/node.C,v
- - Working file: src/base/node.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/base/reference_counted_object.C,v
- - Working file: src/base/reference_counted_object.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;
- - reworked the reference counting to use C++ run-type identification
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/base/reference_counter.C,v
- - Working file: src/base/reference_counter.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +7 -7
- - reworked the reference counting to use C++ run-type identification
- - ----------------------------
- - revision 1.2
- - date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +2 -2
- - reworked the ReferenceCounter class
- - ----------------------------
- - revision 1.1
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/base/system_data.C,v
- - Working file: src/base/system_data.C
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -5
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.4
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -3
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.3
- - date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +9 -11
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.2
- - date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +10 -2
- - added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe.C,v
- - Working file: src/fe/fe.C
- - head: 1.11
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 11;	selected revisions: 11
- - description:
- - ----------------------------
- - revision 1.11
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +90 -1
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - ----------------------------
- - revision 1.10
- - date: 2003/01/16 22:06:45;  author: benkirk;  state: Exp;  lines: +4 -3
- - fixed a bug in the finite element mapping.  We always use Lagrange shape functions for the mapping, but in the compute_map() member there were blind calls to n_shape_functions(), which should have been FE<Dim,LAGRANGE>::n_shape_functions().  This was causing inexplicable negative jacobians when using the discontinuous monomials
- - ----------------------------
- - revision 1.9
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +12 -16
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.8
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +13 -13
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.7
- - date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +39 -40
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +6 -6
- - added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
- - ----------------------------
- - revision 1.5
- - date: 2003/01/08 23:25:24;  author: benkirk;  state: Exp;  lines: +49 -17
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +12 -12
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +14 -14
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +14 -14
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_boundary.C,v
- - Working file: src/fe/fe_boundary.C
- - head: 1.11
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 11;	selected revisions: 11
- - description:
- - ----------------------------
- - revision 1.11
- - date: 2003/01/18 19:48:29;  author: peterson;  state: Exp;  lines: +2 -2
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - ----------------------------
- - revision 1.10
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +18 -19
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.9
- - date: 2003/01/10 22:21:25;  author: benkirk;  state: Exp;  lines: +1 -17
- - AutoPtr code unification
- - ----------------------------
- - revision 1.8
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +9 -9
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.7
- - date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +11 -10
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 01:11:05;  author: benkirk;  state: Exp;  lines: +16 -0
- - fix for xlC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:06:48;  author: benkirk;  state: Exp;  lines: +5 -5
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +5 -5
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +5 -5
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +5 -20
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_hierarchic.C,v
- - Working file: src/fe/fe_hierarchic.C
- - head: 1.5
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 5;	selected revisions: 5
- - description:
- - ----------------------------
- - revision 1.5
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.4
- - date: 2003/01/15 03:27:38;  author: peterson;  state: Exp;  lines: +1 -2
- - Removed quadrature.h from the fe_FEFAMILY
- - source files as they do not appear to use it.
- - ----------------------------
- - revision 1.3
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +4 -6
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +2 -1
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_hierarchic_shape_1D.C,v
- - Working file: src/fe/fe_hierarchic_shape_1D.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +3 -3
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_hierarchic_shape_2D.C,v
- - Working file: src/fe/fe_hierarchic_shape_2D.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +18 -14
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_hierarchic_shape_3D.C,v
- - Working file: src/fe/fe_hierarchic_shape_3D.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +18 -14
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_interface.C,v
- - Working file: src/fe/fe_interface.C
- - head: 1.7
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 7;	selected revisions: 7
- - description:
- - ----------------------------
- - revision 1.7
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +342 -147
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - ----------------------------
- - revision 1.6
- - date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +1 -3
- - More unnecessary #includes in source files.
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +12 -2
- - reworked the reference counting to use C++ run-type identification
- - ----------------------------
- - revision 1.4
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +20 -22
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.3
- - date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +17 -11
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.2
- - date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +33 -33
- - added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_lagrange.C,v
- - Working file: src/fe/fe_lagrange.C
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:27:38;  author: peterson;  state: Exp;  lines: +1 -2
- - Removed quadrature.h from the fe_FEFAMILY
- - source files as they do not appear to use it.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +5 -5
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_lagrange_shape_1D.C,v
- - Working file: src/fe/fe_lagrange_shape_1D.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +3 -3
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_lagrange_shape_2D.C,v
- - Working file: src/fe/fe_lagrange_shape_2D.C
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_lagrange_shape_3D.C,v
- - Working file: src/fe/fe_lagrange_shape_3D.C
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_map.C,v
- - Working file: src/fe/fe_map.C
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 22:06:45;  author: benkirk;  state: Exp;  lines: +5 -5
- - fixed a bug in the finite element mapping.  We always use Lagrange shape functions for the mapping, but in the compute_map() member there were blind calls to n_shape_functions(), which should have been FE<Dim,LAGRANGE>::n_shape_functions().  This was causing inexplicable negative jacobians when using the discontinuous monomials
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +46 -51
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_monomial.C,v
- - Working file: src/fe/fe_monomial.C
- - head: 1.5
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 5;	selected revisions: 5
- - description:
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 22:06:45;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed a bug in the finite element mapping.  We always use Lagrange shape functions for the mapping, but in the compute_map() member there were blind calls to n_shape_functions(), which should have been FE<Dim,LAGRANGE>::n_shape_functions().  This was causing inexplicable negative jacobians when using the discontinuous monomials
- - ----------------------------
- - revision 1.4
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:27:38;  author: peterson;  state: Exp;  lines: +1 -2
- - Removed quadrature.h from the fe_FEFAMILY
- - source files as they do not appear to use it.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +7 -9
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_monomial_shape_1D.C,v
- - Working file: src/fe/fe_monomial_shape_1D.C
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 22:06:45;  author: benkirk;  state: Exp;  lines: +16 -16
- - fixed a bug in the finite element mapping.  We always use Lagrange shape functions for the mapping, but in the compute_map() member there were blind calls to n_shape_functions(), which should have been FE<Dim,LAGRANGE>::n_shape_functions().  This was causing inexplicable negative jacobians when using the discontinuous monomials
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +3 -3
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_monomial_shape_2D.C,v
- - Working file: src/fe/fe_monomial_shape_2D.C
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 22:06:45;  author: benkirk;  state: Exp;  lines: +15 -15
- - fixed a bug in the finite element mapping.  We always use Lagrange shape functions for the mapping, but in the compute_map() member there were blind calls to n_shape_functions(), which should have been FE<Dim,LAGRANGE>::n_shape_functions().  This was causing inexplicable negative jacobians when using the discontinuous monomials
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +3 -3
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_monomial_shape_3D.C,v
- - Working file: src/fe/fe_monomial_shape_3D.C
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 22:06:45;  author: benkirk;  state: Exp;  lines: +8 -8
- - fixed a bug in the finite element mapping.  We always use Lagrange shape functions for the mapping, but in the compute_map() member there were blind calls to n_shape_functions(), which should have been FE<Dim,LAGRANGE>::n_shape_functions().  This was causing inexplicable negative jacobians when using the discontinuous monomials
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +10 -10
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe.C,v
- - Working file: src/fe/inf_fe.C
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +626 -136
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - ----------------------------
- - revision 1.3
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +53 -52
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +3 -2
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe_boundary.C,v
- - Working file: src/fe/inf_fe_boundary.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe_jacobi_20_00_eval.C,v
- - Working file: src/fe/inf_fe_jacobi_20_00_eval.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe_jacobi_30_00_eval.C,v
- - Working file: src/fe/inf_fe_jacobi_30_00_eval.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe_lagrange_eval.C,v
- - Working file: src/fe/inf_fe_lagrange_eval.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe_legendre_eval.C,v
- - Working file: src/fe/inf_fe_legendre_eval.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe_map_eval.C,v
- - Working file: src/fe/inf_fe_map_eval.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe_static.C,v
- - Working file: src/fe/inf_fe_static.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell.C,v
- - Working file: src/geom/cell.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_hex.C,v
- - Working file: src/geom/cell_hex.C
- - head: 1.5
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 5;	selected revisions: 5
- - description:
- - ----------------------------
- - revision 1.5
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +1 -2
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -5
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +27 -28
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +59 -60
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_hex20.C,v
- - Working file: src/geom/cell_hex20.C
- - head: 1.10
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 10;	selected revisions: 10
- - description:
- - ----------------------------
- - revision 1.10
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.9
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -4
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.8
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.7
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +61 -61
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.6
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +10 -10
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +9 -9
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +10 -10
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +10 -10
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +10 -11
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_hex27.C,v
- - Working file: src/geom/cell_hex27.C
- - head: 1.10
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 10;	selected revisions: 10
- - description:
- - ----------------------------
- - revision 1.10
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.9
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -4
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.8
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.7
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +66 -66
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.6
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +10 -10
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +9 -9
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +10 -10
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +10 -10
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +10 -11
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_hex8.C,v
- - Working file: src/geom/cell_hex8.C
- - head: 1.10
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 10;	selected revisions: 10
- - description:
- - ----------------------------
- - revision 1.10
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.9
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -4
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.8
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.7
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +36 -36
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.6
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +10 -10
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +9 -9
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +10 -10
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +10 -10
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +10 -11
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_inf_hex16.C,v
- - Working file: src/geom/cell_inf_hex16.C
- - head: 1.13
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 13;	selected revisions: 13
- - description:
- - ----------------------------
- - revision 1.13
- - date: 2003/01/22 22:07:31;  author: d.dreyer;  state: Exp;  lines: +11 -1
- - Changes for inifinite elements: added some virtual members in FEBase; split fe_base.h from fe.h, but did not touch fe/src/fe*.C -- shall i change these, too?; changed normal vector of InfAbcXY::build_side(0) so that they point inwards; minor documentation issue in meshtool. -- All of this seems quite imperative to me for infinite elements. If anybody doesn't like - please feedback
- - ----------------------------
- - revision 1.12
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.11
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -3
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.10
- - date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +2 -4
- - More unnecessary includes.
- - ----------------------------
- - revision 1.9
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +12 -12
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +35 -35
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +10 -10
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +5 -6
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +6 -6
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +10 -10
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +10 -10
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +10 -10
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_inf_hex18.C,v
- - Working file: src/geom/cell_inf_hex18.C
- - head: 1.13
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 13;	selected revisions: 13
- - description:
- - ----------------------------
- - revision 1.13
- - date: 2003/01/22 22:07:31;  author: d.dreyer;  state: Exp;  lines: +12 -1
- - Changes for inifinite elements: added some virtual members in FEBase; split fe_base.h from fe.h, but did not touch fe/src/fe*.C -- shall i change these, too?; changed normal vector of InfAbcXY::build_side(0) so that they point inwards; minor documentation issue in meshtool. -- All of this seems quite imperative to me for infinite elements. If anybody doesn't like - please feedback
- - ----------------------------
- - revision 1.12
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.11
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -3
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.10
- - date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +2 -4
- - More unnecessary includes.
- - ----------------------------
- - revision 1.9
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +13 -13
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +36 -36
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +10 -10
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +4 -5
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +6 -6
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +10 -10
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +10 -10
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +10 -10
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_inf_hex8.C,v
- - Working file: src/geom/cell_inf_hex8.C
- - head: 1.12
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 12;	selected revisions: 12
- - description:
- - ----------------------------
- - revision 1.12
- - date: 2003/01/22 22:07:31;  author: d.dreyer;  state: Exp;  lines: +7 -1
- - Changes for inifinite elements: added some virtual members in FEBase; split fe_base.h from fe.h, but did not touch fe/src/fe*.C -- shall i change these, too?; changed normal vector of InfAbcXY::build_side(0) so that they point inwards; minor documentation issue in meshtool. -- All of this seems quite imperative to me for infinite elements. If anybody doesn't like - please feedback
- - ----------------------------
- - revision 1.11
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.10
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -3
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.9
- - date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +2 -4
- - More unnecessary includes.
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +33 -33
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +10 -10
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +4 -5
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +6 -6
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +10 -10
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +10 -10
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +10 -11
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_inf_prism12.C,v
- - Working file: src/geom/cell_inf_prism12.C
- - head: 1.13
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 13;	selected revisions: 13
- - description:
- - ----------------------------
- - revision 1.13
- - date: 2003/01/22 22:07:31;  author: d.dreyer;  state: Exp;  lines: +9 -1
- - Changes for inifinite elements: added some virtual members in FEBase; split fe_base.h from fe.h, but did not touch fe/src/fe*.C -- shall i change these, too?; changed normal vector of InfAbcXY::build_side(0) so that they point inwards; minor documentation issue in meshtool. -- All of this seems quite imperative to me for infinite elements. If anybody doesn't like - please feedback
- - ----------------------------
- - revision 1.12
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +4 -4
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.11
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -3
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.10
- - date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +2 -4
- - More unnecessary includes.
- - ----------------------------
- - revision 1.9
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +9 -9
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +27 -27
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +9 -9
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +4 -4
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +5 -5
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +8 -8
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +8 -8
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +8 -8
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_inf_prism6.C,v
- - Working file: src/geom/cell_inf_prism6.C
- - head: 1.12
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 12;	selected revisions: 12
- - description:
- - ----------------------------
- - revision 1.12
- - date: 2003/01/22 22:07:31;  author: d.dreyer;  state: Exp;  lines: +6 -1
- - Changes for inifinite elements: added some virtual members in FEBase; split fe_base.h from fe.h, but did not touch fe/src/fe*.C -- shall i change these, too?; changed normal vector of InfAbcXY::build_side(0) so that they point inwards; minor documentation issue in meshtool. -- All of this seems quite imperative to me for infinite elements. If anybody doesn't like - please feedback
- - ----------------------------
- - revision 1.11
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.10
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -3
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.9
- - date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +2 -2
- - More unnecessary includes.
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +18 -18
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +9 -9
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +5 -5
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +5 -5
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +8 -8
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +8 -8
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +8 -8
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_prism.C,v
- - Working file: src/geom/cell_prism.C
- - head: 1.5
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 5;	selected revisions: 5
- - description:
- - ----------------------------
- - revision 1.5
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +1 -2
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -7
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +22 -23
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +19 -19
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_prism6.C,v
- - Working file: src/geom/cell_prism6.C
- - head: 1.11
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 11;	selected revisions: 11
- - description:
- - ----------------------------
- - revision 1.11
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.10
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -5
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.9
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +11 -18
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +21 -21
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +8 -8
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +6 -6
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +8 -8
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +8 -8
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +8 -8
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_pyramid.C,v
- - Working file: src/geom/cell_pyramid.C
- - head: 1.5
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 5;	selected revisions: 5
- - description:
- - ----------------------------
- - revision 1.5
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +1 -2
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -5
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +25 -25
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +17 -17
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_pyramid5.C,v
- - Working file: src/geom/cell_pyramid5.C
- - head: 1.11
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 11;	selected revisions: 11
- - description:
- - ----------------------------
- - revision 1.11
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.10
- - date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -3
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.9
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -9
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +259 -257
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +8 -8
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +6 -6
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +8 -8
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +8 -8
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +8 -8
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_tet.C,v
- - Working file: src/geom/cell_tet.C
- - head: 1.5
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 5;	selected revisions: 5
- - description:
- - ----------------------------
- - revision 1.5
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -2
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -4
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +16 -17
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +14 -14
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_tet10.C,v
- - Working file: src/geom/cell_tet10.C
- - head: 1.11
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 11;	selected revisions: 11
- - description:
- - ----------------------------
- - revision 1.11
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.10
- - date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -4
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.9
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +33 -32
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +7 -7
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +6 -6
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +7 -7
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +7 -7
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +7 -7
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_tet4.C,v
- - Working file: src/geom/cell_tet4.C
- - head: 1.11
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 11;	selected revisions: 11
- - description:
- - ----------------------------
- - revision 1.11
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.10
- - date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -4
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.9
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +23 -23
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +7 -7
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +6 -6
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +7 -7
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +7 -7
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +7 -7
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/edge.C,v
- - Working file: src/geom/edge.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/edge_edge2.C,v
- - Working file: src/geom/edge_edge2.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +2 -2
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/edge_edge3.C,v
- - Working file: src/geom/edge_edge3.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +2 -2
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/edge_inf_edge2.C,v
- - Working file: src/geom/edge_inf_edge2.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/elem.C,v
- - Working file: src/geom/elem.C
- - head: 1.9
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 9;	selected revisions: 9
- - description:
- - ----------------------------
- - revision 1.9
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -3
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.8
- - date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -7
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.7
- - date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +3 -2
- - reworked the reference counting to use C++ run-type identification
- - ----------------------------
- - revision 1.6
- - date: 2003/01/16 03:55:52;  author: peterson;  state: Exp;  lines: +1 -2
- - More unnecessary includes.
- - ----------------------------
- - revision 1.5
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +70 -65
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.4
- - date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +6 -4
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.3
- - date: 2003/01/09 19:38:45;  author: benkirk;  state: Exp;  lines: +4 -2
- - documentation.  Fix for template instantiation with Compaq CXX
- - ----------------------------
- - revision 1.2
- - date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +4 -2
- - added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/elem_quality.C,v
- - Working file: src/geom/elem_quality.C
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/16 19:22:01;  author: peterson;  state: Exp;  lines: +2 -1
- - Appended enum_ to a few more files.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/elem_type.C,v
- - Working file: src/geom/elem_type.C
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +2 -1
- - Created separate file for the element type enumeration.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/face.C,v
- - Working file: src/geom/face.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_inf_quad4.C,v
- - Working file: src/geom/face_inf_quad4.C
- - head: 1.8
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 8;	selected revisions: 8
- - description:
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +9 -9
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +6 -6
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +4 -4
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +6 -6
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +6 -6
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +7 -6
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_inf_quad6.C,v
- - Working file: src/geom/face_inf_quad6.C
- - head: 1.9
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 9;	selected revisions: 9
- - description:
- - ----------------------------
- - revision 1.9
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +2 -2
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +10 -10
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +6 -6
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +4 -4
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +6 -6
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +6 -6
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +7 -6
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_infinite.C,v
- - Working file: src/geom/face_infinite.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_quad.C,v
- - Working file: src/geom/face_quad.C
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 20:43:47;  author: peterson;  state: Exp;  lines: +1 -4
- - Removing more unnecessary #includes.
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +13 -14
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +10 -10
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_quad4.C,v
- - Working file: src/geom/face_quad4.C
- - head: 1.10
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 10;	selected revisions: 10
- - description:
- - ----------------------------
- - revision 1.10
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +2 -2
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.9
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -15
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +11 -11
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +7 -7
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +5 -5
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +7 -7
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +7 -7
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +7 -7
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_quad8.C,v
- - Working file: src/geom/face_quad8.C
- - head: 1.10
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 10;	selected revisions: 10
- - description:
- - ----------------------------
- - revision 1.10
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -3
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.9
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -4
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +15 -15
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +7 -7
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +5 -5
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +7 -7
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +7 -7
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +9 -15
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_quad9.C,v
- - Working file: src/geom/face_quad9.C
- - head: 1.10
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 10;	selected revisions: 10
- - description:
- - ----------------------------
- - revision 1.10
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -3
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.9
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +15 -15
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +7 -7
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +5 -5
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +7 -7
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +7 -7
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +10 -15
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_tri.C,v
- - Working file: src/geom/face_tri.C
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 20:43:47;  author: peterson;  state: Exp;  lines: +1 -4
- - Removing more unnecessary #includes.
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +11 -10
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +8 -8
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_tri3.C,v
- - Working file: src/geom/face_tri3.C
- - head: 1.10
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 10;	selected revisions: 10
- - description:
- - ----------------------------
- - revision 1.10
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +2 -2
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.9
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -12
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +9 -9
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +6 -6
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +4 -4
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +6 -6
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +6 -6
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:41;  author: benkirk;  state: Exp;  lines: +10 -13
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_tri6.C,v
- - Working file: src/geom/face_tri6.C
- - head: 1.9
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 9;	selected revisions: 9
- - description:
- - ----------------------------
- - revision 1.9
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -3
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.8
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -11
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.7
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +12 -12
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.6
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +6 -6
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +5 -5
- - fix for xlC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +6 -6
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +6 -6
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:41;  author: benkirk;  state: Exp;  lines: +9 -12
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/plane.C,v
- - Working file: src/geom/plane.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -3
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +6 -5
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/point.C,v
- - Working file: src/geom/point.C
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:06:48;  author: benkirk;  state: Exp;  lines: +1 -2
- - forgot math.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -17
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/sphere.C,v
- - Working file: src/geom/sphere.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +5 -4
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/geom/surface.C,v
- - Working file: src/geom/surface.C
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -81
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/mesh/boundary_info.C,v
- - Working file: src/mesh/boundary_info.C
- - head: 1.12
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 12;	selected revisions: 12
- - description:
- - ----------------------------
- - revision 1.12
- - date: 2003/01/21 15:41:58;  author: steffen;  state: Exp;  lines: +11 -1
- - extended UNV support to import analysis datasets (used for boundary conditions)
- - ----------------------------
- - revision 1.11
- - date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -2
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.10
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.9
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +94 -95
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 22:21:25;  author: benkirk;  state: Exp;  lines: +1 -5
- - AutoPtr code unification
- - ----------------------------
- - revision 1.6
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +3 -3
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +6 -2
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:41;  author: benkirk;  state: Exp;  lines: +86 -88
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/mesh/boundary_mesh.C,v
- - Working file: src/mesh/boundary_mesh.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;
- - More unnecessary includes. Also added a source file for the
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh.C,v
- - Working file: src/mesh/mesh.C
- - head: 1.13
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 13;	selected revisions: 13
- - description:
- - ----------------------------
- - revision 1.13
- - date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +2 -4
- - More unnecessary #includes in source files.
- - ----------------------------
- - revision 1.12
- - date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +2 -1
- - More unnecessary includes.
- - ----------------------------
- - revision 1.11
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.10
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +4 -1018
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.9
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +310 -330
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 22:21:25;  author: benkirk;  state: Exp;  lines: +2 -5
- - AutoPtr code unification
- - ----------------------------
- - revision 1.6
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +3 -3
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +5 -2
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:41;  author: benkirk;  state: Exp;  lines: +2 -4
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_base.C,v
- - Working file: src/mesh/mesh_base.C
- - head: 1.18
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 18;	selected revisions: 18
- - description:
- - ----------------------------
- - revision 1.18
- - date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +162 -161
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.17
- - date: 2003/01/16 22:06:45;  author: benkirk;  state: Exp;  lines: +3 -2
- - fixed a bug in the finite element mapping.  We always use Lagrange shape functions for the mapping, but in the compute_map() member there were blind calls to n_shape_functions(), which should have been FE<Dim,LAGRANGE>::n_shape_functions().  This was causing inexplicable negative jacobians when using the discontinuous monomials
- - ----------------------------
- - revision 1.16
- - date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -23
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.15
- - date: 2003/01/16 03:55:52;  author: peterson;  state: Exp;  lines: +2 -6
- - More unnecessary includes.
- - ----------------------------
- - revision 1.14
- - date: 2003/01/16 03:35:57;  author: benkirk;  state: Exp;  lines: +3 -3
- - AutoPtr fix fot xlC
- - ----------------------------
- - revision 1.13
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.12
- - date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +21 -11
- - reworked the ReferenceCounter class
- - ----------------------------
- - revision 1.11
- - date: 2003/01/15 23:20:40;  author: hendrik;  state: Exp;  lines: +276 -1
- - added MeshBase::add_inf_elem() method
- - ----------------------------
- - revision 1.10
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +30 -22
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.9
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +173 -150
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 22:21:25;  author: benkirk;  state: Exp;  lines: +2 -5
- - AutoPtr code unification
- - ----------------------------
- - revision 1.6
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +3 -3
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +5 -2
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:41;  author: benkirk;  state: Exp;  lines: +8 -15
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_diva_support.C,v
- - Working file: src/mesh/mesh_diva_support.C
- - head: 1.12
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 12;	selected revisions: 12
- - description:
- - ----------------------------
- - revision 1.12
- - date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +1 -6
- - More unnecessary #includes in source files.
- - ----------------------------
- - revision 1.11
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.10
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.9
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +12 -12
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/10 22:21:25;  author: benkirk;  state: Exp;  lines: +5 -17
- - AutoPtr code unification
- - ----------------------------
- - revision 1.6
- - date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +9 -9
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +17 -5
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +5 -5
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +5 -5
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:41;  author: benkirk;  state: Exp;  lines: +10 -18
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_exodus_support.C,v
- - Working file: src/mesh/mesh_exodus_support.C
- - head: 1.8
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 8;	selected revisions: 8
- - description:
- - ----------------------------
- - revision 1.8
- - date: 2003/01/24 00:53:36;  author: d.dreyer;  state: Exp;  lines: +2 -2
- - eliminated some warnings for --disable-exodus and --disable-ifem
- - ----------------------------
- - revision 1.7
- - date: 2003/01/22 01:09:28;  author: peterson;  state: Exp;  lines: +2 -3
- - Added simpson quadrature rule for triangles.
- - Checked to make sure it worked, but dont know what order of
- - accuracy to expect.
- - ----------------------------
- - revision 1.6
- - date: 2003/01/16 20:43:47;  author: peterson;  state: Exp;  lines: +1 -2
- - Removing more unnecessary #includes.
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.4
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +17 -19
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_generation.C,v
- - Working file: src/mesh/mesh_generation.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -7
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.2
- - date: 2003/01/16 03:55:52;  author: peterson;  state: Exp;  lines: +1 -8
- - More unnecessary includes.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_gmv_support.C,v
- - Working file: src/mesh/mesh_gmv_support.C
- - head: 1.5
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 5;	selected revisions: 5
- - description:
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -4
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.4
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +5 -5
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +39 -39
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_metis_support.C,v
- - Working file: src/mesh/mesh_metis_support.C
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +1 -3
- - More unnecessary #includes in source files.
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_misc_support.C,v
- - Working file: src/mesh/mesh_misc_support.C
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +1 -2
- - More unnecessary #includes in source files.
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.4
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +4 -4
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +36 -30
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_refinement.C,v
- - Working file: src/mesh/mesh_refinement.C
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +2 -5
- - More unnecessary #includes in source files.
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +3 -2
- - reworked the ReferenceCounter class
- - ----------------------------
- - revision 1.4
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -16
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +23 -24
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_tecplot_support.C,v
- - Working file: src/mesh/mesh_tecplot_support.C
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +2 -4
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +2 -5
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.4
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +7 -7
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +2 -3
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +60 -60
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_ucd_support.C,v
- - Working file: src/mesh/mesh_ucd_support.C
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +2 -3
- - More unnecessary #includes in source files.
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +2 -3
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.4
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +4 -4
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +2 -3
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +12 -12
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_unv_support.C,v
- - Working file: src/mesh/mesh_unv_support.C
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/21 15:41:59;  author: steffen;  state: Exp;  lines: +208 -8
- - extended UNV support to import analysis datasets (used for boundary conditions)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +20 -22
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_xdr_support.C,v
- - Working file: src/mesh/mesh_xdr_support.C
- - head: 1.5
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 5;	selected revisions: 5
- - description:
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +1 -4
- - More unnecessary #includes in source files.
- - ----------------------------
- - revision 1.4
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +12 -12
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
- - The only source file which now includes point.h is
- - point.C.  This is because mesh_base.h now includes node.h which
- - includes point.h.  Since many things included both mesh_base.h and
- - point.h, they now include only mesh_base.h
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +142 -129
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/numerics/coupling_matrix.C,v
- - Working file: src/numerics/coupling_matrix.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/16 02:12:41;  author: peterson;  state: Exp;
- - Added empty source file for the CouplingMatrix.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/numerics/dense_matrix.C,v
- - Working file: src/numerics/dense_matrix.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/numerics/petsc_interface.C,v
- - Working file: src/numerics/petsc_interface.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/numerics/petsc_matrix.C,v
- - Working file: src/numerics/petsc_matrix.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/numerics/petsc_vector.C,v
- - Working file: src/numerics/petsc_vector.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature.C,v
- - Working file: src/quadrature/quadrature.C
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/19 04:15:50;  author: peterson;  state: Exp;  lines: +250 -1
- - Moved a few more functions into the quadrature
- - base class to promote code re-use.  This should also compile
- - faster since the functions are now only compiled once in
- - quadrature.C instead of in every rule separately. Have not tested
- - with prismatic elements (no mesh available) but it should
- - work fine.
- - ----------------------------
- - revision 1.3
- - date: 2003/01/18 19:48:29;  author: peterson;  state: Exp;  lines: +498 -2
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;  lines: +2 -176
- - Split up quadrature classes into
- - separate files.  Removed the quadrature header from
- - dof_map.C as it did not seem to be using it.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_gauss.C,v
- - Working file: src/quadrature/quadrature_gauss.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;  lines: +6 -87
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
- - The quadrature source files no longer include
- - point.h as it is included in quadrature.h
- - ----------------------------
- - revision 1.1
- - date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
- - Split up quadrature classes into
- - separate files.  Removed the quadrature header from
- - dof_map.C as it did not seem to be using it.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_gauss_1D.C,v
- - Working file: src/quadrature/quadrature_gauss_1D.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
- - The quadrature source files no longer include
- - point.h as it is included in quadrature.h
- - ----------------------------
- - revision 1.1
- - date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
- - Split up quadrature classes into
- - separate files.  Removed the quadrature header from
- - dof_map.C as it did not seem to be using it.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_gauss_2D.C,v
- - Working file: src/quadrature/quadrature_gauss_2D.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;  lines: +6 -136
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
- - The quadrature source files no longer include
- - point.h as it is included in quadrature.h
- - ----------------------------
- - revision 1.1
- - date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
- - Split up quadrature classes into
- - separate files.  Removed the quadrature header from
- - dof_map.C as it did not seem to be using it.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_gauss_3D.C,v
- - Working file: src/quadrature/quadrature_gauss_3D.C
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/19 04:15:50;  author: peterson;  state: Exp;  lines: +10 -251
- - Moved a few more functions into the quadrature
- - base class to promote code re-use.  This should also compile
- - faster since the functions are now only compiled once in
- - quadrature.C instead of in every rule separately. Have not tested
- - with prismatic elements (no mesh available) but it should
- - work fine.
- - ----------------------------
- - revision 1.3
- - date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;  lines: +9 -235
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
- - The quadrature source files no longer include
- - point.h as it is included in quadrature.h
- - ----------------------------
- - revision 1.1
- - date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
- - Split up quadrature classes into
- - separate files.  Removed the quadrature header from
- - dof_map.C as it did not seem to be using it.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_simpson.C,v
- - Working file: src/quadrature/quadrature_simpson.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_simpson_1D.C,v
- - Working file: src/quadrature/quadrature_simpson_1D.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_simpson_2D.C,v
- - Working file: src/quadrature/quadrature_simpson_2D.C
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/22 01:09:28;  author: peterson;  state: Exp;  lines: +37 -21
- - Added simpson quadrature rule for triangles.
- - Checked to make sure it worked, but dont know what order of
- - accuracy to expect.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_simpson_3D.C,v
- - Working file: src/quadrature/quadrature_simpson_3D.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/23 03:07:30;  author: peterson;  state: Exp;  lines: +56 -40
- - Added a simpson quadrature rule for tetrahedra.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/19 04:15:50;  author: peterson;  state: Exp;  lines: +25 -140
- - Moved a few more functions into the quadrature
- - base class to promote code re-use.  This should also compile
- - faster since the functions are now only compiled once in
- - quadrature.C instead of in every rule separately. Have not tested
- - with prismatic elements (no mesh available) but it should
- - work fine.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_trap.C,v
- - Working file: src/quadrature/quadrature_trap.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;  lines: +6 -88
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
- - The quadrature source files no longer include
- - point.h as it is included in quadrature.h
- - ----------------------------
- - revision 1.1
- - date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
- - Split up quadrature classes into
- - separate files.  Removed the quadrature header from
- - dof_map.C as it did not seem to be using it.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_trap_1D.C,v
- - Working file: src/quadrature/quadrature_trap_1D.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
- - The quadrature source files no longer include
- - point.h as it is included in quadrature.h
- - ----------------------------
- - revision 1.1
- - date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
- - Split up quadrature classes into
- - separate files.  Removed the quadrature header from
- - dof_map.C as it did not seem to be using it.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_trap_2D.C,v
- - Working file: src/quadrature/quadrature_trap_2D.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;  lines: +8 -135
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
- - The quadrature source files no longer include
- - point.h as it is included in quadrature.h
- - ----------------------------
- - revision 1.1
- - date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
- - Split up quadrature classes into
- - separate files.  Removed the quadrature header from
- - dof_map.C as it did not seem to be using it.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_trap_3D.C,v
- - Working file: src/quadrature/quadrature_trap_3D.C
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/19 04:15:50;  author: peterson;  state: Exp;  lines: +6 -118
- - Moved a few more functions into the quadrature
- - base class to promote code re-use.  This should also compile
- - faster since the functions are now only compiled once in
- - quadrature.C instead of in every rule separately. Have not tested
- - with prismatic elements (no mesh available) but it should
- - work fine.
- - ----------------------------
- - revision 1.3
- - date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;  lines: +8 -234
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
- - The quadrature source files no longer include
- - point.h as it is included in quadrature.h
- - ----------------------------
- - revision 1.1
- - date: 2003/01/15 03:08:55;  author: peterson;  state: Exp;
- - Split up quadrature classes into
- - separate files.  Removed the quadrature header from
- - dof_map.C as it did not seem to be using it.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/utils/perf_log.C,v
- - Working file: src/utils/perf_log.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/utils/statistics.C,v
- - Working file: src/utils/statistics.C
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/utils/tree.C,v
- - Working file: src/utils/tree.C
- - head: 1.5
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 5;	selected revisions: 5
- - description:
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +1 -2
- - More unnecessary #includes in source files.
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +1 -3
- - reworked the reference counting to use C++ run-type identification
- - ----------------------------
- - revision 1.3
- - date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +1 -423
- - Removing more unnecessary includes.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +2 -2
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/utils/tree_node.C,v
- - Working file: src/utils/tree_node.C
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +5 -1
- - reworked the reference counting to use C++ run-type identification
- - ----------------------------
- - revision 1.1
- - date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;
- - Removing more unnecessary includes.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/utils/utility.C,v
- - Working file: src/utils/utility.C
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/utils/xdrIO.C,v
- - Working file: src/utils/xdrIO.C
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +2 -4
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 19:05:16;  author: benkirk;  state: Exp;  lines: +2 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/src/utils/xdr_cxx.C,v
- - Working file: src/utils/xdr_cxx.C
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 19:05:16;  author: benkirk;  state: Exp;  lines: +4 -4
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.1
- - date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
- - major directory restructuring
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/auto_ptr.h,v
- - Working file: include/auto_ptr.h
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +15 -3
- - Added documentation.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +21 -11
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.1
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;
- - switched from std::auto_ptr to AutoPtr
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/boundary_info.h,v
- - Working file: include/boundary_info.h
- - head: 1.34
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 34;	selected revisions: 34
- - description:
- - ----------------------------
- - revision 1.34
- - date: 2003/01/21 15:41:58;  author: steffen;  state: Exp;  lines: +20 -5
- - extended UNV support to import analysis datasets (used for boundary conditions)
- - ----------------------------
- - revision 1.33
- - date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +12 -2
- - Added documentation.
- - ----------------------------
- - revision 1.32
- - date: 2003/01/16 02:08:16;  author: peterson;  state: Exp;  lines: +6 -7
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.31
- - date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +2 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.30
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +25 -24
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.29
- - date: 2002/12/05 03:56:32;  author: peterson;  state: Exp;  lines: +85 -2
- - Added three different functors and for_each
- - statements to the boundary_info code.  This code is marked
- - with a // New code comment and the original code is still
- - there.  If we decide to go back to the original all we have
- - to do is erase the New code.  It should work, but has not
- - been *extensively* tested.
- - ----------------------------
- - revision 1.28
- - date: 2002/11/07 23:43:10;  author: benkirk;  state: Exp;  lines: +7 -2
- - added print_info to boundary_info and code to automatically generate nodal BCs from side BCs if they are not already specified
- - ----------------------------
- - revision 1.27
- - date: 2002/10/21 15:55:26;  author: benkirk;  state: Exp;  lines: +60 -22
- - added boundary chooser in the GUI.  Right now it is pretty ugly...  Added a method to BoundaryInfo to return the bc_id set to facilitate this
- - ----------------------------
- - revision 1.26
- - date: 2002/10/09 02:49:50;  author: benkirk;  state: Exp;  lines: +2 -2
- - made the BoundaryInfo::invalid_id a const static member, as it should be
- - ----------------------------
- - revision 1.25
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -2
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.24
- - date: 2002/06/06 21:34:44;  author: benkirk;  state: Exp;  lines: +14 -7
- - added some documentation and changed some functions to constant that should have been all along
- - ----------------------------
- - revision 1.23
- - date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +3 -9
- - added equation system support
- - ----------------------------
- - revision 1.22
- - date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +22 -4
- - allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
- - ----------------------------
- - revision 1.21
- - date: 2002/05/06 19:18:15;  author: benkirk;  state: Exp;  lines: +23 -17
- - allow users to specify boundary_ids as short ints instead of unsigned short ints
- - ----------------------------
- - revision 1.20
- - date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +12 -47
- - eliminated templates from everything except Petsc Interface
- - ----------------------------
- - revision 1.19
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -2
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.18
- - date: 2002/04/18 19:24:24;  author: benkirk;  state: Exp;  lines: +3 -2
- - documentation
- - ----------------------------
- - revision 1.17
- - date: 2002/04/12 16:04:11;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.16
- - date: 2002/04/12 03:32:35;  author: benkirk;  state: Exp;  lines: +1 -3
- - fixed empty numBCs in the case of writing xdr files
- - ----------------------------
- - revision 1.15
- - date: 2002/04/11 19:39:03;  author: benkirk;  state: Exp;  lines: +3 -5
- - boundary_mesh subdomain id now consecutively numbered from 0 independent of corresponding boundary_id
- - ----------------------------
- - revision 1.14
- - date: 2002/04/11 17:16:32;  author: peterson;  state: Exp;  lines: +3 -2
- - Added reading/writing of BCs for XDR meshes.
- - ----------------------------
- - revision 1.13
- - date: 2002/04/11 14:28:54;  author: benkirk;  state: Exp;  lines: +5 -3
- - BoundaryMesh now works.  Moved DofMap into MeshBase, so the user need not concern herself with that any more.
- - ----------------------------
- - revision 1.12
- - date: 2002/04/11 04:57:34;  author: benkirk;  state: Exp;  lines: +12 -57
- - mucho changes.  better just ask Ben... Im a little too tired to write a useful comment now.  Suffice to say boundary conditions basically work, can have a 2D mesh in 3D space, etc...
- - ----------------------------
- - revision 1.11
- - date: 2002/04/10 21:39:09;  author: benkirk;  state: Exp;  lines: +28 -1
- - working on boundary integral support
- - ----------------------------
- - revision 1.10
- - date: 2002/04/10 18:13:39;  author: benkirk;  state: Exp;  lines: +79 -31
- - working on boundary support
- - ----------------------------
- - revision 1.9
- - date: 2002/04/10 01:53:21;  author: benkirk;  state: Exp;  lines: +7 -1
- - working on boundary output.  cleaned up some code in shape_function calculations. probably going to change the way side boundary conditions are stored
- - ----------------------------
- - revision 1.8
- - date: 2002/04/09 21:13:20;  author: peterson;  state: Exp;  lines: +8 -1
- - working on XDR support, boundary support in exodusII
- - ----------------------------
- - revision 1.7
- - date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - renamed config.h mesh_config.h and did some cleanup
- - ----------------------------
- - revision 1.6
- - date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +4 -4
- - changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
- - ----------------------------
- - revision 1.5
- - date: 2002/03/10 13:22:30;  author: benkirk;  state: Exp;  lines: +19 -3
- - silenced some print statements
- - ----------------------------
- - revision 1.4
- - date: 2002/03/08 19:45:05;  author: benkirk;  state: Exp;  lines: +16 -1
- - lots of changes
- - ----------------------------
- - revision 1.3
- - date: 2002/03/05 23:28:17;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.2
- - date: 2002/03/05 22:49:14;  author: benkirk;  state: Exp;  lines: +4 -1
- - BoundaryInfo class starting to take shape
- - ----------------------------
- - revision 1.1
- - date: 2002/03/05 20:08:05;  author: benkirk;  state: Exp;
- - errata
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/boundary_mesh.h,v
- - Working file: include/boundary_mesh.h
- - head: 1.8
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 8;	selected revisions: 8
- - description:
- - ----------------------------
- - revision 1.8
- - date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +8 -2
- - Added documentation.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/16 02:08:16;  author: peterson;  state: Exp;  lines: +1 -4
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.6
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +2 -2
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.5
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -3
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.4
- - date: 2002/05/30 18:06:39;  author: benkirk;  state: Exp;  lines: +1 -2
- - removed perf_log from MeshBase.  the user should log events in the applications code.
- - ----------------------------
- - revision 1.3
- - date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +3 -2
- - added equation system support
- - ----------------------------
- - revision 1.2
- - date: 2002/05/17 19:10:22;  author: benkirk;  state: Exp;  lines: +3 -2
- - added pause and restart to perf_log.  put it in most of the major algorithms
- - ----------------------------
- - revision 1.1
- - date: 2002/05/01 22:24:54;  author: benkirk;  state: Exp;
- - forgot to add some files
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell.h,v
- - Working file: include/cell.h
- - head: 1.83
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - 	start: 1.1.1.1
- - 	mesh: 1.1.1
- - keyword substitution: kv
- - total revisions: 84;	selected revisions: 84
- - description:
- - ----------------------------
- - revision 1.83
- - date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +1 -2
- - More unnecessary includes.
- - ----------------------------
- - revision 1.82
- - date: 2003/01/16 02:08:16;  author: peterson;  state: Exp;  lines: +1 -2
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.81
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;  lines: +1 -1697
- - split all the cell implementation into separate files.
- - ----------------------------
- - revision 1.80
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +270 -270
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.79
- - date: 2002/12/24 14:50:05;  author: benkirk;  state: Exp;  lines: +2 -3
- - fixed invalid constructor calls.  SGI compiler caught the error
- - ----------------------------
- - revision 1.78
- - date: 2002/12/23 15:18:39;  author: peterson;  state: Exp;  lines: +1 -8
- - Removed unnecessary write_tecplot function declarations.
- - ----------------------------
- - revision 1.77
- - date: 2002/12/23 15:00:45;  author: peterson;  state: Exp;  lines: +9 -9
- - Moved write_ucd and write_tecplot_connectivity routines into the Elem base class.
- - ----------------------------
- - revision 1.76
- - date: 2002/12/22 03:12:16;  author: benkirk;  state: Exp;  lines: +72 -41
- - added Edge, Face, and Cell classes.  Will be useful in FE reimplementation
- - ----------------------------
- - revision 1.75
- - date: 2002/12/04 22:52:50;  author: benkirk;  state: Exp;  lines: +71 -36
- - added vtk_connectivity support for primitive (non-infinite) elements
- - ----------------------------
- - revision 1.74
- - date: 2002/12/01 13:31:47;  author: d.dreyer;  state: Exp;  lines: +54 -1
- - minor changes to code for infinite elements; added some documentation; added in Makefile target doxy
- - ----------------------------
- - revision 1.73
- - date: 2002/11/30 18:45:19;  author: d.dreyer;  state: Exp;  lines: +609 -7
- - First stage of infinite elements: added geometric entities. Use them with --enable-ifem.
- - ----------------------------
- - revision 1.72
- - date: 2002/11/01 20:48:43;  author: benkirk;  state: Exp;  lines: +36 -22
- - split FE mapping from FE approximation.  made a lot of changes in the FE class that trickled down...
- - ----------------------------
- - revision 1.71
- - date: 2002/10/18 15:10:05;  author: benkirk;  state: Exp;  lines: +59 -3
- - The fast element-containing-point search is now implemented using an OctTree.
- - ----------------------------
- - revision 1.70
- - date: 2002/10/16 21:26:33;  author: benkirk;  state: Exp;  lines: +2 -2
- - Tree builds properly.  Now need to figure out which element contains a point
- - ----------------------------
- - revision 1.69
- - date: 2002/10/15 19:22:42;  author: benkirk;  state: Exp;  lines: +3 -3
- - removed class static pointers to the mesh in the finite element and element base classes.  This is necessary to support multiple meshes at the same time.
- - ----------------------------
- - revision 1.68
- - date: 2002/09/26 22:03:44;  author: peterson;  state: Exp;  lines: +21 -1
- - Added quality bounds for elements based on CUBIT docs.  Added the cut_below and cut_above functions to the StatVector.
- - ----------------------------
- - revision 1.67
- - date: 2002/09/24 20:05:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - the element class now has a static pointer to a constant Mesh named mesh.  This pointer can be used instead of passing the mesh to methods that need vertex locations.  For sanity assert it is not null before you use it!
- - ----------------------------
- - revision 1.66
- - date: 2002/09/24 17:39:34;  author: benkirk;  state: Exp;  lines: +24 -16
- - find_neighbors now uses the minumum element necessary to find a neighbor.  This would be a quad4 in the case of hex{8,20,27}
- - ----------------------------
- - revision 1.65
- - date: 2002/09/23 16:46:51;  author: benkirk;  state: Exp;  lines: +3 -3
- - hmin, hmax, and centroid now computed using element vertices instead of all the nodes.  This will be fatser in the case of Hex27s and other many-noded elements
- - ----------------------------
- - revision 1.64
- - date: 2002/09/17 18:09:28;  author: benkirk;  state: Exp;  lines: +6 -1
- - incorporated Johns quality code for hexes based on diagonal ratio
- - ----------------------------
- - revision 1.63
- - date: 2002/09/17 17:41:12;  author: benkirk;  state: Exp;  lines: +180 -58
- - added Pyramid and Prism base classes.
- - ----------------------------
- - revision 1.62
- - date: 2002/09/17 03:57:19;  author: benkirk;  state: Exp;  lines: +89 -181
- - added Edge, Tri, Quad, Tet, and Hex base classes for specific instances of those types of elements.  still need ones for Prism and Pyramid
- - ----------------------------
- - revision 1.61
- - date: 2002/08/21 14:44:46;  author: benkirk;  state: Exp;  lines: +15 -15
- - testing refinement some more.  Had to make the element parent a pointer (not a const pointer) due to some of the logic in the level-one enforcement.  Hopefully I can make it a const Elem* again in the future
- - ----------------------------
- - revision 1.60
- - date: 2002/08/20 19:26:20;  author: benkirk;  state: Exp;  lines: +53 -7
- - created embedding matrices for all 2D elements and all but Pyramid for the 3D elements
- - ----------------------------
- - revision 1.59
- - date: 2002/08/15 15:49:52;  author: benkirk;  state: Exp;  lines: +15 -15
- - Elements now have subdomain IDs and processor IDs.  You can get to an elements parent even if AMR is disabled.  This is useful for derived elements...  If you build a side of an element the resulting side knows what element it came from.
- - ----------------------------
- - revision 1.58
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -2
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.57
- - date: 2002/07/28 21:14:30;  author: benkirk;  state: Exp;  lines: +45 -3
- - reworking internals of refinement
- - ----------------------------
- - revision 1.56
- - date: 2002/05/16 20:25:54;  author: benkirk;  state: Exp;  lines: +17 -73
- - moved testmesh to meshtool.  made it more user-friendly so I could give it to Owen since he is now working with cubit meshes
- - ----------------------------
- - revision 1.55
- - date: 2002/05/16 00:06:21;  author: benkirk;  state: Exp;  lines: +54 -32
- - preliminary unrefinement support
- - ----------------------------
- - revision 1.54
- - date: 2002/05/15 11:22:17;  author: benkirk;  state: Exp;  lines: +92 -1
- - working on coarsening
- - ----------------------------
- - revision 1.53
- - date: 2002/05/13 21:17:36;  author: benkirk;  state: Exp;  lines: +4 -5
- - pyramid refinement now works
- - ----------------------------
- - revision 1.52
- - date: 2002/05/13 19:42:29;  author: benkirk;  state: Exp;  lines: +4 -5
- - added prism refinement
- - ----------------------------
- - revision 1.51
- - date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +18 -15
- - allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
- - ----------------------------
- - revision 1.50
- - date: 2002/05/10 21:05:18;  author: benkirk;  state: Exp;  lines: +2 -3
- - added hex20 refinement rules.  completely rewrote main.cc to be much more flexible
- - ----------------------------
- - revision 1.49
- - date: 2002/05/09 22:55:27;  author: benkirk;  state: Exp;  lines: +2 -3
- - hex27 refinement now works
- - ----------------------------
- - revision 1.48
- - date: 2002/05/07 22:02:57;  author: benkirk;  state: Exp;  lines: +3 -5
- - refinement now works for all 2D elements, the Tet, and the Hex
- - ----------------------------
- - revision 1.47
- - date: 2002/05/06 21:15:22;  author: benkirk;  state: Exp;  lines: +8 -15
- - refinement works for all 2D element types
- - ----------------------------
- - revision 1.46
- - date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +29 -15
- - refinement (at least uniform) now works
- - ----------------------------
- - revision 1.45
- - date: 2002/05/02 13:40:18;  author: benkirk;  state: Exp;  lines: +99 -1
- - code clean up.  now compiles with g++, icc, cxx (alpha), and CC (SGI)
- - ----------------------------
- - revision 1.44
- - date: 2002/05/01 14:59:10;  author: benkirk;  state: Exp;  lines: +8 -8
- - elements do not allocate storage for their children until they are refined
- - ----------------------------
- - revision 1.43
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -2
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.42
- - date: 2002/04/30 21:44:15;  author: benkirk;  state: Exp;  lines: +2 -1
- - added some more includes to satisfy CC on the SGI
- - ----------------------------
- - revision 1.41
- - date: 2002/04/26 16:22:42;  author: peterson;  state: Exp;  lines: +3 -3
- - Errata.
- - ----------------------------
- - revision 1.40
- - date: 2002/04/26 16:19:22;  author: peterson;  state: Exp;  lines: +11 -1
- - Ghetto drawing of pyramid.
- - ----------------------------
- - revision 1.39
- - date: 2002/04/23 17:38:51;  author: benkirk;  state: Exp;  lines: +8 -8
- - Quad8 shape functions work now
- - ----------------------------
- - revision 1.38
- - date: 2002/04/23 16:34:00;  author: benkirk;  state: Exp;  lines: +102 -1
- - added initial support for quad8 and hex20.  no shape functions yet
- - ----------------------------
- - revision 1.37
- - date: 2002/04/22 14:33:10;  author: benkirk;  state: Exp;  lines: +124 -50
- - initial support for pyramids.  still need shape functions and quadrature rules
- - ----------------------------
- - revision 1.36
- - date: 2002/04/18 19:24:24;  author: benkirk;  state: Exp;  lines: +118 -1
- - documentation
- - ----------------------------
- - revision 1.35
- - date: 2002/04/18 16:06:38;  author: benkirk;  state: Exp;  lines: +77 -2
- - documentation
- - ----------------------------
- - revision 1.34
- - date: 2002/04/18 14:03:20;  author: benkirk;  state: Exp;  lines: +6 -6
- - added QuadratureOrder enum.  broke quadrature.C into multiple files for faster compiles
- - ----------------------------
- - revision 1.33
- - date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;  lines: +45 -288
- - many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
- - ----------------------------
- - revision 1.32
- - date: 2002/04/12 16:04:11;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.31
- - date: 2002/04/11 04:57:34;  author: benkirk;  state: Exp;  lines: +3 -1307
- - mucho changes.  better just ask Ben... Im a little too tired to write a useful comment now.  Suffice to say boundary conditions basically work, can have a 2D mesh in 3D space, etc...
- - ----------------------------
- - revision 1.30
- - date: 2002/04/10 21:39:09;  author: benkirk;  state: Exp;  lines: +411 -1
- - working on boundary integral support
- - ----------------------------
- - revision 1.29
- - date: 2002/04/08 13:01:38;  author: benkirk;  state: Exp;  lines: +18 -16
- - more on sparsity structure.  changed n_tecplot_* to n_sub_* to be more generic.  added total_weight to mesh.h for partitioning hybrid meshes.
- - ----------------------------
- - revision 1.28
- - date: 2002/04/05 22:38:18;  author: benkirk;  state: Exp;  lines: +135 -11
- - added a lot of documentation and re-ordered the quadratic 1D basis functions
- - ----------------------------
- - revision 1.27
- - date: 2002/04/05 03:21:44;  author: benkirk;  state: Exp;  lines: +184 -3
- - cleaned up ./configure some.  Reversed-engineered the Tri6 connectivity.  Documented some.  Added hooks for n_nz & n_oz in dof_map
- - ----------------------------
- - revision 1.26
- - date: 2002/04/03 23:25:33;  author: benkirk;  state: Exp;  lines: +1 -11
- - removerd order from fe
- - ----------------------------
- - revision 1.25
- - date: 2002/04/03 02:26:27;  author: benkirk;  state: Exp;  lines: +35 -101
- - added GMV variable output support
- - ----------------------------
- - revision 1.24
- - date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +203 -22
- - renamed config.h mesh_config.h and did some cleanup
- - ----------------------------
- - revision 1.23
- - date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +42 -32
- - changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
- - ----------------------------
- - revision 1.22
- - date: 2002/03/31 05:58:42;  author: peterson;  state: Exp;  lines: +5 -5
- - Added a new Conversion class to the ExodusII support.  The purpose of this class is to encapsut naming scheme and node numbering scheme which is purely local to ExodusII.  This way, other parts of the code, espend face.h dont need to know anything about other specialized naming schemes.
- - ----------------------------
- - revision 1.21
- - date: 2002/03/29 21:22:51;  author: peterson;  state: Exp;  lines: +16 -11
- - Exodus support is working
- - ----------------------------
- - revision 1.20
- - date: 2002/03/29 15:51:49;  author: peterson;  state: Exp;  lines: +2 -2
- - initial merge of exodus support, changed configure for lsfcurves, lpapi, lperfctr
- - ----------------------------
- - revision 1.19
- - date: 2002/03/28 22:52:32;  author: benkirk;  state: Exp;  lines: +353 -16
- - added tri6, quad9, hex27.  will add prism17 and tet12 later.  I still need to make edge a base/derived class with edge2 and edge3 as derived classes
- - ----------------------------
- - revision 1.18
- - date: 2002/03/21 15:18:27;  author: benkirk;  state: Exp;  lines: +23 -2
- - added tecplot binary support
- - ----------------------------
- - revision 1.17
- - date: 2002/03/05 16:57:43;  author: benkirk;  state: Exp;  lines: +5 -1
- - errata
- - ----------------------------
- - revision 1.16
- - date: 2002/03/05 14:28:22;  author: benkirk;  state: Exp;  lines: +59 -20
- - adding more stuff
- - ----------------------------
- - revision 1.15
- - date: 2002/03/05 06:12:42;  author: benkirk;  state: Exp;  lines: +8 -5
- - added neighborhood computation, petsc matrix from deal.II
- - ----------------------------
- - revision 1.14
- - date: 2002/03/04 22:43:23;  author: benkirk;  state: Exp;  lines: +7 -1
- - added partitioning
- - ----------------------------
- - revision 1.13
- - date: 2002/03/03 00:31:36;  author: benkirk;  state: Exp;  lines: +7 -4
- - updates makefile and added some fe shape functions, quadrature rules
- - ----------------------------
- - revision 1.12
- - date: 2002/03/02 21:19:54;  author: benkirk;  state: Exp;  lines: +147 -3
- - updates makefile and added some fe shape functions, quadrature rules
- - ----------------------------
- - revision 1.11
- - date: 2002/02/28 16:34:51;  author: benkirk;  state: Exp;  lines: +6 -2
- - errata
- - ----------------------------
- - revision 1.10
- - date: 2002/02/26 15:53:40;  author: benkirk;  state: Exp;  lines: +56 -9
- - Added pointers to neighbors within faces and cells, can now write UCD files
- - ----------------------------
- - revision 1.9
- - date: 2002/02/25 22:55:36;  author: benkirk;  state: Exp;  lines: +54 -8
- - errata
- - ----------------------------
- - revision 1.8
- - date: 2002/02/25 14:36:03;  author: benkirk;  state: Exp;  lines: +70 -19
- - errata
- - ----------------------------
- - revision 1.7
- - date: 2002/02/25 05:23:04;  author: benkirk;  state: Exp;  lines: +9 -18
- - errata
- - ----------------------------
- - revision 1.6
- - date: 2002/02/25 02:52:04;  author: benkirk;  state: Exp;  lines: +136 -8
- - errata
- - ----------------------------
- - revision 1.5
- - date: 2002/02/25 01:18:38;  author: benkirk;  state: Exp;  lines: +35 -4
- - errata
- - ----------------------------
- - revision 1.4
- - date: 2002/02/24 16:30:36;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.3
- - date: 2002/02/24 16:29:51;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.2
- - date: 2002/02/24 16:27:47;  author: benkirk;  state: Exp;  lines: +96 -4
- - errata
- - ----------------------------
- - revision 1.1
- - date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;
- - branches:  1.1.1;
- - Initial revision
- - ----------------------------
- - revision 1.1.1.1
- - date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;  lines: +0 -0
- - init
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_hex.h,v
- - Working file: include/cell_hex.h
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +2 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -2
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_hex20.h,v
- - Working file: include/cell_hex20.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +3 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.5
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_hex27.h,v
- - Working file: include/cell_hex27.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +3 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.5
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_hex8.h,v
- - Working file: include/cell_hex8.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +4 -4
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.5
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_inf_hex16.h,v
- - Working file: include/cell_inf_hex16.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +8 -1
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.5
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_inf_hex18.h,v
- - Working file: include/cell_inf_hex18.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +8 -1
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.5
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_inf_hex8.h,v
- - Working file: include/cell_inf_hex8.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +8 -1
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.5
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_inf_prism12.h,v
- - Working file: include/cell_inf_prism12.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +8 -1
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.5
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_inf_prism6.h,v
- - Working file: include/cell_inf_prism6.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +8 -1
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.5
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_prism.h,v
- - Working file: include/cell_prism.h
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_prism6.h,v
- - Working file: include/cell_prism6.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.5
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_pyramid.h,v
- - Working file: include/cell_pyramid.h
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_pyramid5.h,v
- - Working file: include/cell_pyramid5.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.5
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_tet.h,v
- - Working file: include/cell_tet.h
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -2
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_tet10.h,v
- - Working file: include/cell_tet10.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +4 -3
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.5
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/cell_tet4.h,v
- - Working file: include/cell_tet4.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.5
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
- - split all the cell implementation into separate files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/coupling_matrix.h,v
- - Working file: include/coupling_matrix.h
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/dense_matrix.h,v
- - Working file: include/dense_matrix.h
- - head: 1.24
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 24;	selected revisions: 24
- - description:
- - ----------------------------
- - revision 1.24
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -139
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.23
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +66 -76
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.22
- - date: 2002/11/18 23:20:49;  author: benkirk;  state: Exp;  lines: +29 -7
- - added code to get dphidx etc... directly from the FE.  may or may not last
- - ----------------------------
- - revision 1.21
- - date: 2002/11/08 20:50:38;  author: benkirk;  state: Exp;  lines: +3 -3
- - fixed quadrature mapping for faces on quads, tris, and hexes.  still need to fix tets, prisms, and pyramids
- - ----------------------------
- - revision 1.20
- - date: 2002/10/31 20:22:41;  author: benkirk;  state: Exp;  lines: +145 -3
- - re-implemented the dof_coupling as a matrix
- - ----------------------------
- - revision 1.19
- - date: 2002/10/30 17:15:22;  author: benkirk;  state: Exp;  lines: +3 -3
- - Hanging node constraints work.  Need to properly compute the sparsity pattern
- - ----------------------------
- - revision 1.18
- - date: 2002/10/29 23:15:36;  author: benkirk;  state: Exp;  lines: +47 -2
- - dof constraints _almost_ working
- - ----------------------------
- - revision 1.17
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.16
- - date: 2002/05/30 18:37:31;  author: benkirk;  state: Exp;  lines: +7 -19
- - added print_info to equation systems
- - ----------------------------
- - revision 1.15
- - date: 2002/05/30 18:06:39;  author: benkirk;  state: Exp;  lines: +4 -8
- - removed perf_log from MeshBase.  the user should log events in the applications code.
- - ----------------------------
- - revision 1.14
- - date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +3 -3
- - changed cout to std::cout
- - ----------------------------
- - revision 1.13
- - date: 2002/05/01 23:10:57;  author: benkirk;  state: Exp;  lines: +62 -64
- - un-templated everything
- - ----------------------------
- - revision 1.12
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +1 -4
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.11
- - date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +2 -2
- - changes for compatibility with icc v6.0
- - ----------------------------
- - revision 1.10
- - date: 2002/04/22 13:11:00;  author: benkirk;  state: Exp;  lines: +5 -3
- - fixed a bug that computed the incorrect sparsity pattern in the case of multiple dofs per vertex
- - ----------------------------
- - revision 1.9
- - date: 2002/04/18 19:24:24;  author: benkirk;  state: Exp;  lines: +69 -8
- - documentation
- - ----------------------------
- - revision 1.8
- - date: 2002/04/11 14:28:54;  author: benkirk;  state: Exp;  lines: +7 -8
- - BoundaryMesh now works.  Moved DofMap into MeshBase, so the user need not concern herself with that any more.
- - ----------------------------
- - revision 1.7
- - date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +3 -3
- - renamed config.h mesh_config.h and did some cleanup
- - ----------------------------
- - revision 1.6
- - date: 2002/03/27 03:12:20;  author: benkirk;  state: Exp;  lines: +14 -3
- - verified that the BLAS matvec is working properly
- - ----------------------------
- - revision 1.5
- - date: 2002/03/18 20:07:58;  author: peterson;  state: Exp;  lines: +15 -4
- - errata
- - ----------------------------
- - revision 1.4
- - date: 2002/03/09 00:43:06;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed a syntax error
- - ----------------------------
- - revision 1.3
- - date: 2002/03/08 19:45:05;  author: benkirk;  state: Exp;  lines: +86 -41
- - lots of changes
- - ----------------------------
- - revision 1.2
- - date: 2002/03/07 20:52:30;  author: benkirk;  state: Exp;  lines: +3 -1
- - added dof_indices computation
- - ----------------------------
- - revision 1.1
- - date: 2002/03/05 14:28:22;  author: benkirk;  state: Exp;
- - adding more stuff
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/dof_map.h,v
- - Working file: include/dof_map.h
- - head: 1.51
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 51;	selected revisions: 51
- - description:
- - ----------------------------
- - revision 1.51
- - date: 2003/01/16 16:42:27;  author: peterson;  state: Exp;  lines: +2 -2
- - Removing unnecessary includes.  Changing headers which
- - simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
- - ----------------------------
- - revision 1.50
- - date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +2 -4
- - Removing more unnecessary includes.
- - ----------------------------
- - revision 1.49
- - date: 2003/01/16 02:45:35;  author: benkirk;  state: Exp;  lines: +74 -74
- - reworked the ReferenceCounter class
- - ----------------------------
- - revision 1.48
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +2 -3
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.47
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -30
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.46
- - date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +4 -12
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.45
- - date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +4 -4
- - added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
- - ----------------------------
- - revision 1.44
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +56 -28
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.43
- - date: 2002/12/01 22:19:16;  author: d.dreyer;  state: Exp;  lines: +43 -1
- - some fixes for --disable-amr target
- - ----------------------------
- - revision 1.42
- - date: 2002/11/27 20:58:50;  author: benkirk;  state: Exp;  lines: +20 -13
- - added trapezoidal quadrature.  Compute tangent directions _and_ normal on faces
- - ----------------------------
- - revision 1.41
- - date: 2002/11/04 23:05:12;  author: benkirk;  state: Exp;  lines: +58 -25
- - can generate quad9 and hex27 bricks internally.  added code in DofMap to only allocate space for element dofs if any elements _have_ dofs
- - ----------------------------
- - revision 1.40
- - date: 2002/11/03 23:45:52;  author: benkirk;  state: Exp;  lines: +266 -23
- - added support for multiple DOFs per node and element-based DOFs
- - ----------------------------
- - revision 1.39
- - date: 2002/11/01 15:49:55;  author: benkirk;  state: Exp;  lines: +11 -3
- - moved the coupling matrix dof_coupling into the DofMap class where it belongs
- - ----------------------------
- - revision 1.38
- - date: 2002/10/31 20:22:41;  author: benkirk;  state: Exp;  lines: +2 -8
- - re-implemented the dof_coupling as a matrix
- - ----------------------------
- - revision 1.37
- - date: 2002/10/31 04:39:55;  author: benkirk;  state: Exp;  lines: +13 -7
- - fixed DofMap::compute_sparsity to work with hanging nodes
- - ----------------------------
- - revision 1.36
- - date: 2002/10/30 22:34:44;  author: benkirk;  state: Exp;  lines: +7 -1
- - Need to rewrite compute_sparsity to account for hanging nodes
- - ----------------------------
- - revision 1.35
- - date: 2002/10/30 17:15:22;  author: benkirk;  state: Exp;  lines: +36 -3
- - Hanging node constraints work.  Need to properly compute the sparsity pattern
- - ----------------------------
- - revision 1.34
- - date: 2002/10/29 23:15:36;  author: benkirk;  state: Exp;  lines: +58 -3
- - dof constraints _almost_ working
- - ----------------------------
- - revision 1.33
- - date: 2002/10/29 16:03:40;  author: benkirk;  state: Exp;  lines: +33 -17
- - formatting
- - ----------------------------
- - revision 1.32
- - date: 2002/10/28 22:34:17;  author: benkirk;  state: Exp;  lines: +28 -2
- - added code to compute hanging node constraints for Lagrange elements
- - ----------------------------
- - revision 1.31
- - date: 2002/10/11 20:56:15;  author: benkirk;  state: Exp;  lines: +12 -27
- - The FEBase class now has a static pointer to the mesh rather than a reference passed via the constructor.  DofMap can _almost_ constrain degrees of freedom properly
- - ----------------------------
- - revision 1.30
- - date: 2002/09/06 14:53:28;  author: benkirk;  state: Exp;  lines: +10 -10
- - added Xdr class to provide a uniform interface for Xdr and ASCII IO.  The equation_systems read & write is also based on these methods.  I have validated it for one processor.  Still need to be sure that in the case of multiple processors each proc gets te relevant piece of data.
- - ----------------------------
- - revision 1.29
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -3
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.28
- - date: 2002/06/11 20:06:39;  author: benkirk;  state: Exp;  lines: +6 -1
- - made the FE classes dof_index ignorant.  Now ask the dof map for the dof_indices associated with a cell
- - ----------------------------
- - revision 1.27
- - date: 2002/06/10 21:05:28;  author: benkirk;  state: Exp;  lines: +33 -16
- - can now mix approximation order for variables in a system.  There is a strange bug that causes the send_list size to be larger than the total number of dofs for the tet meshes on 2 procs
- - ----------------------------
- - revision 1.26
- - date: 2002/06/07 21:19:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - added order enum.  Separating FE from mesh elements
- - ----------------------------
- - revision 1.25
- - date: 2002/06/04 15:08:28;  author: benkirk;  state: Exp;  lines: +3 -3
- - more work on equation system support.  Each SystemData now contains a matrix, rhs, and solution.  Can call the solve
- - ----------------------------
- - revision 1.24
- - date: 2002/06/03 12:43:26;  author: benkirk;  state: Exp;  lines: +34 -3
- - adding hooks for more complicated element DOF distribution in DofMap
- - ----------------------------
- - revision 1.23
- - date: 2002/05/31 15:59:28;  author: benkirk;  state: Exp;  lines: +9 -8
- - added TODO make target.  Allow user to optionally control DOF coupling for matrix allocation
- - ----------------------------
- - revision 1.22
- - date: 2002/05/30 12:26:06;  author: benkirk;  state: Exp;  lines: +3 -3
- - modified Petsc support to be compatible with Petsc 2.1.2
- - ----------------------------
- - revision 1.21
- - date: 2002/05/29 22:34:37;  author: benkirk;  state: Exp;  lines: +3 -3
- - chaned id_map from a pointer to a vector
- - ----------------------------
- - revision 1.20
- - date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +4 -10
- - added equation system support
- - ----------------------------
- - revision 1.19
- - date: 2002/05/28 20:33:42;  author: benkirk;  state: Exp;  lines: +7 -8
- - added initial support for simulation groups (systems) and equation systems
- - ----------------------------
- - revision 1.18
- - date: 2002/05/02 02:40:49;  author: benkirk;  state: Exp;  lines: +3 -3
- - changed variable named map to id_map because it confused cxx compiler
- - ----------------------------
- - revision 1.17
- - date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +13 -14
- - eliminated templates from everything except Petsc Interface
- - ----------------------------
- - revision 1.16
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +12 -12
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.15
- - date: 2002/04/18 19:24:24;  author: benkirk;  state: Exp;  lines: +35 -1
- - documentation
- - ----------------------------
- - revision 1.14
- - date: 2002/04/11 17:37:45;  author: benkirk;  state: Exp;  lines: +2 -2
- - dofs_per_vertex is 0 until distribute_dofs is called, then is either user-specified or 1
- - ----------------------------
- - revision 1.13
- - date: 2002/04/11 14:28:54;  author: benkirk;  state: Exp;  lines: +25 -76
- - BoundaryMesh now works.  Moved DofMap into MeshBase, so the user need not concern herself with that any more.
- - ----------------------------
- - revision 1.12
- - date: 2002/04/11 04:57:34;  author: benkirk;  state: Exp;  lines: +6 -6
- - mucho changes.  better just ask Ben... Im a little too tired to write a useful comment now.  Suffice to say boundary conditions basically work, can have a 2D mesh in 3D space, etc...
- - ----------------------------
- - revision 1.11
- - date: 2002/04/09 13:59:12;  author: benkirk;  state: Exp;  lines: +3 -1
- - sparsity pattern computation works well in 3D, serial and parallel.  Will implement in 2D after rethinking the underlying STL container
- - ----------------------------
- - revision 1.10
- - date: 2002/04/05 22:38:18;  author: benkirk;  state: Exp;  lines: +3 -1
- - added a lot of documentation and re-ordered the quadratic 1D basis functions
- - ----------------------------
- - revision 1.9
- - date: 2002/04/05 03:21:44;  author: benkirk;  state: Exp;  lines: +40 -20
- - cleaned up ./configure some.  Reversed-engineered the Tri6 connectivity.  Documented some.  Added hooks for n_nz & n_oz in dof_map
- - ----------------------------
- - revision 1.8
- - date: 2002/04/04 22:02:09;  author: benkirk;  state: Exp;  lines: +59 -3
- - documentation
- - ----------------------------
- - revision 1.7
- - date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - renamed config.h mesh_config.h and did some cleanup
- - ----------------------------
- - revision 1.6
- - date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +2 -2
- - changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
- - ----------------------------
- - revision 1.5
- - date: 2002/03/25 22:25:16;  author: benkirk;  state: Exp;  lines: +4 -2
- - added send_list computation to dof_map.distribute()
- - ----------------------------
- - revision 1.4
- - date: 2002/03/08 19:45:05;  author: benkirk;  state: Exp;  lines: +8 -6
- - lots of changes
- - ----------------------------
- - revision 1.3
- - date: 2002/03/07 20:52:30;  author: benkirk;  state: Exp;  lines: +4 -1
- - added dof_indices computation
- - ----------------------------
- - revision 1.2
- - date: 2002/03/07 16:32:13;  author: benkirk;  state: Exp;  lines: +2 -2
- - works in parallel
- - ----------------------------
- - revision 1.1
- - date: 2002/03/06 23:13:40;  author: benkirk;  state: Exp;
- - actually starting to work
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/edge.h,v
- - Working file: include/edge.h
- - head: 1.51
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - 	start: 1.1.1.1
- - 	mesh: 1.1.1
- - keyword substitution: kv
- - total revisions: 52;	selected revisions: 52
- - description:
- - ----------------------------
- - revision 1.51
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -2
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.50
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +24 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.49
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;  lines: +3 -4
- - split all the cell implementation into separate files.
- - ----------------------------
- - revision 1.48
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +2 -2
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.47
- - date: 2002/12/23 18:45:57;  author: peterson;  state: Exp;  lines: +1 -239
- - Split the 1D elements (edges) including
- - infinite edges into separate files.  Trying to maintain
- - format of one class per header file.
- - ----------------------------
- - revision 1.46
- - date: 2002/12/22 03:12:16;  author: benkirk;  state: Exp;  lines: +14 -9
- - added Edge, Face, and Cell classes.  Will be useful in FE reimplementation
- - ----------------------------
- - revision 1.45
- - date: 2002/12/04 22:52:50;  author: benkirk;  state: Exp;  lines: +11 -1
- - added vtk_connectivity support for primitive (non-infinite) elements
- - ----------------------------
- - revision 1.44
- - date: 2002/12/01 13:31:47;  author: d.dreyer;  state: Exp;  lines: +3 -2
- - minor changes to code for infinite elements; added some documentation; added in Makefile target doxy
- - ----------------------------
- - revision 1.43
- - date: 2002/11/30 18:45:19;  author: d.dreyer;  state: Exp;  lines: +88 -2
- - First stage of infinite elements: added geometric entities. Use them with --enable-ifem.
- - ----------------------------
- - revision 1.42
- - date: 2002/11/01 20:48:43;  author: benkirk;  state: Exp;  lines: +12 -1
- - split FE mapping from FE approximation.  made a lot of changes in the FE class that trickled down...
- - ----------------------------
- - revision 1.41
- - date: 2002/09/17 17:41:12;  author: benkirk;  state: Exp;  lines: +11 -6
- - added Pyramid and Prism base classes.
- - ----------------------------
- - revision 1.40
- - date: 2002/09/17 03:57:19;  author: benkirk;  state: Exp;  lines: +42 -61
- - added Edge, Tri, Quad, Tet, and Hex base classes for specific instances of those types of elements.  still need ones for Prism and Pyramid
- - ----------------------------
- - revision 1.39
- - date: 2002/08/21 14:44:46;  author: benkirk;  state: Exp;  lines: +5 -5
- - testing refinement some more.  Had to make the element parent a pointer (not a const pointer) due to some of the logic in the level-one enforcement.  Hopefully I can make it a const Elem* again in the future
- - ----------------------------
- - revision 1.38
- - date: 2002/08/15 15:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
- - Elements now have subdomain IDs and processor IDs.  You can get to an elements parent even if AMR is disabled.  This is useful for derived elements...  If you build a side of an element the resulting side knows what element it came from.
- - ----------------------------
- - revision 1.37
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -2
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.36
- - date: 2002/05/16 20:25:54;  author: benkirk;  state: Exp;  lines: +5 -21
- - moved testmesh to meshtool.  made it more user-friendly so I could give it to Owen since he is now working with cubit meshes
- - ----------------------------
- - revision 1.35
- - date: 2002/05/16 00:06:21;  author: benkirk;  state: Exp;  lines: +16 -10
- - preliminary unrefinement support
- - ----------------------------
- - revision 1.34
- - date: 2002/05/15 11:22:18;  author: benkirk;  state: Exp;  lines: +27 -1
- - working on coarsening
- - ----------------------------
- - revision 1.33
- - date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +8 -5
- - allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
- - ----------------------------
- - revision 1.32
- - date: 2002/05/06 21:15:22;  author: benkirk;  state: Exp;  lines: +3 -5
- - refinement works for all 2D element types
- - ----------------------------
- - revision 1.31
- - date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +11 -7
- - refinement (at least uniform) now works
- - ----------------------------
- - revision 1.30
- - date: 2002/05/02 13:40:18;  author: benkirk;  state: Exp;  lines: +29 -1
- - code clean up.  now compiles with g++, icc, cxx (alpha), and CC (SGI)
- - ----------------------------
- - revision 1.29
- - date: 2002/05/01 14:59:10;  author: benkirk;  state: Exp;  lines: +3 -3
- - elements do not allocate storage for their children until they are refined
- - ----------------------------
- - revision 1.28
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -2
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.27
- - date: 2002/04/30 21:44:15;  author: benkirk;  state: Exp;  lines: +2 -1
- - added some more includes to satisfy CC on the SGI
- - ----------------------------
- - revision 1.26
- - date: 2002/04/23 17:38:51;  author: benkirk;  state: Exp;  lines: +3 -3
- - Quad8 shape functions work now
- - ----------------------------
- - revision 1.25
- - date: 2002/04/18 16:06:38;  author: benkirk;  state: Exp;  lines: +63 -2
- - documentation
- - ----------------------------
- - revision 1.24
- - date: 2002/04/18 14:03:20;  author: benkirk;  state: Exp;  lines: +15 -7
- - added QuadratureOrder enum.  broke quadrature.C into multiple files for faster compiles
- - ----------------------------
- - revision 1.23
- - date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;  lines: +17 -135
- - many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
- - ----------------------------
- - revision 1.22
- - date: 2002/04/12 16:04:11;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.21
- - date: 2002/04/11 16:09:28;  author: benkirk;  state: Exp;  lines: +14 -1
- - fixed exodusII side maps.  eliminated mesh rebuild_maps() function, moved into find_neighbors()
- - ----------------------------
- - revision 1.20
- - date: 2002/04/11 14:28:54;  author: benkirk;  state: Exp;  lines: +9 -2
- - BoundaryMesh now works.  Moved DofMap into MeshBase, so the user need not concern herself with that any more.
- - ----------------------------
- - revision 1.19
- - date: 2002/04/11 04:57:34;  author: benkirk;  state: Exp;  lines: +2 -54
- - mucho changes.  better just ask Ben... Im a little too tired to write a useful comment now.  Suffice to say boundary conditions basically work, can have a 2D mesh in 3D space, etc...
- - ----------------------------
- - revision 1.18
- - date: 2002/04/03 23:25:33;  author: benkirk;  state: Exp;  lines: +1 -7
- - removerd order from fe
- - ----------------------------
- - revision 1.17
- - date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +3 -3
- - renamed config.h mesh_config.h and did some cleanup
- - ----------------------------
- - revision 1.16
- - date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +13 -11
- - changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
- - ----------------------------
- - revision 1.15
- - date: 2002/03/29 14:20:21;  author: benkirk;  state: Exp;  lines: +160 -44
- - split up mesh.C into logical, disjoint parts.
- - I also made edge a base-derived class, with Edge2 and Edge3 derived classes.
- - Tri, Quad, Tri6, Quad9, Hex, Tet, Prism, and Hex27 should work now.  Will double-check
- - the shape function calculation for the higher-order elements today.
- - ----------------------------
- - revision 1.14
- - date: 2002/03/08 19:45:05;  author: benkirk;  state: Exp;  lines: +15 -4
- - lots of changes
- - ----------------------------
- - revision 1.13
- - date: 2002/03/05 20:08:05;  author: benkirk;  state: Exp;  lines: +19 -2
- - errata
- - ----------------------------
- - revision 1.12
- - date: 2002/03/05 06:12:42;  author: benkirk;  state: Exp;  lines: +27 -1
- - added neighborhood computation, petsc matrix from deal.II
- - ----------------------------
- - revision 1.11
- - date: 2002/03/04 13:48:09;  author: benkirk;  state: Exp;  lines: +10 -1
- - Remade some make rules and split up the unwieldy fe.C
- - ----------------------------
- - revision 1.10
- - date: 2002/02/28 16:34:51;  author: benkirk;  state: Exp;  lines: +10 -5
- - errata
- - ----------------------------
- - revision 1.9
- - date: 2002/02/26 15:53:40;  author: benkirk;  state: Exp;  lines: +11 -3
- - Added pointers to neighbors within faces and cells, can now write UCD files
- - ----------------------------
- - revision 1.8
- - date: 2002/02/25 22:55:36;  author: benkirk;  state: Exp;  lines: +7 -6
- - errata
- - ----------------------------
- - revision 1.7
- - date: 2002/02/25 02:52:04;  author: benkirk;  state: Exp;  lines: +13 -10
- - errata
- - ----------------------------
- - revision 1.6
- - date: 2002/02/25 01:18:38;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.5
- - date: 2002/02/24 16:30:36;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.4
- - date: 2002/02/24 16:29:51;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.3
- - date: 2002/02/24 16:27:47;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.2
- - date: 2002/02/22 22:34:17;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.1
- - date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;
- - branches:  1.1.1;
- - Initial revision
- - ----------------------------
- - revision 1.1.1.1
- - date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;  lines: +0 -0
- - init
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/edge_edge2.h,v
- - Working file: include/edge_edge2.h
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +4 -3
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.2
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.1
- - date: 2002/12/24 14:41:35;  author: benkirk;  state: Exp;
- - face_refinement.C is deprecated.  The functionality is included in individual type implementations.  Also, removed some unnecessary #includes to hopefully simplify things
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/edge_edge3.h,v
- - Working file: include/edge_edge3.h
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +4 -3
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.2
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.1
- - date: 2002/12/24 14:41:35;  author: benkirk;  state: Exp;
- - face_refinement.C is deprecated.  The functionality is included in individual type implementations.  Also, removed some unnecessary #includes to hopefully simplify things
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/edge_inf_edge2.h,v
- - Working file: include/edge_inf_edge2.h
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +9 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.2
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.1
- - date: 2002/12/24 14:41:35;  author: benkirk;  state: Exp;
- - face_refinement.C is deprecated.  The functionality is included in individual type implementations.  Also, removed some unnecessary #includes to hopefully simplify things
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/elem.h,v
- - Working file: include/elem.h
- - head: 1.61
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 61;	selected revisions: 61
- - description:
- - ----------------------------
- - revision 1.61
- - date: 2003/01/17 13:25:13;  author: benkirk;  state: Exp;  lines: +24 -11
- - Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
- - ----------------------------
- - revision 1.60
- - date: 2003/01/16 19:22:01;  author: peterson;  state: Exp;  lines: +2 -2
- - Appended enum_ to a few more files.
- - ----------------------------
- - revision 1.59
- - date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +2 -2
- - Created separate file for the element type enumeration.
- - ----------------------------
- - revision 1.58
- - date: 2003/01/16 16:42:28;  author: peterson;  state: Exp;  lines: +2 -2
- - Removing unnecessary includes.  Changing headers which
- - simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
- - ----------------------------
- - revision 1.57
- - date: 2003/01/16 16:12:31;  author: benkirk;  state: Exp;  lines: +3 -21
- - reworked the reference counting to use C++ run-type identification
- - ----------------------------
- - revision 1.56
- - date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +24 -12
- - reworked the ReferenceCounter class
- - ----------------------------
- - revision 1.55
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +3 -4
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.54
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +27 -41
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.53
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +205 -77
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.52
- - date: 2003/01/10 22:21:25;  author: benkirk;  state: Exp;  lines: +1 -5
- - AutoPtr code unification
- - ----------------------------
- - revision 1.51
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +7 -6
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.50
- - date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +16 -10
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.49
- - date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +5 -1
- - auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
- - ----------------------------
- - revision 1.48
- - date: 2003/01/08 21:51:40;  author: benkirk;  state: Exp;  lines: +3 -4
- - updated documentation
- - ----------------------------
- - revision 1.47
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +3 -3
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.46
- - date: 2003/01/08 20:44:05;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.45
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +3 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.44
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +3 -3
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.43
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;  lines: +1 -3
- - split all the cell implementation into separate files.
- - ----------------------------
- - revision 1.42
- - date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +3 -3
- - added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
- - ----------------------------
- - revision 1.41
- - date: 2002/12/31 02:46:20;  author: benkirk;  state: Exp;  lines: +12 -61
- - added reference_counter
- - ----------------------------
- - revision 1.40
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +97 -32
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.39
- - date: 2002/12/23 15:00:45;  author: peterson;  state: Exp;  lines: +6 -2
- - Moved write_ucd and write_tecplot_connectivity routines into the Elem base class.
- - ----------------------------
- - revision 1.38
- - date: 2002/12/22 22:36:25;  author: benkirk;  state: Exp;  lines: +45 -38
- - made QBase pure virtual.  prefixing private variables with _ to distinguish from local variables.  Will make FEBase pure virtual and have templated classes derived from it for actual families of finite elements
- - ----------------------------
- - revision 1.37
- - date: 2002/12/22 03:12:17;  author: benkirk;  state: Exp;  lines: +18 -19
- - added Edge, Face, and Cell classes.  Will be useful in FE reimplementation
- - ----------------------------
- - revision 1.36
- - date: 2002/12/17 16:47:08;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed cvs2html to get the names right, fixed typeos in the documentation
- - ----------------------------
- - revision 1.35
- - date: 2002/12/04 22:52:50;  author: benkirk;  state: Exp;  lines: +14 -1
- - added vtk_connectivity support for primitive (non-infinite) elements
- - ----------------------------
- - revision 1.34
- - date: 2002/12/02 14:36:28;  author: benkirk;  state: Exp;  lines: +18 -9
- - added RefinementState enum.  This will be used to interpolate the old solution to new elements when projecting solution data between refinements
- - ----------------------------
- - revision 1.33
- - date: 2002/11/01 20:48:43;  author: benkirk;  state: Exp;  lines: +9 -1
- - split FE mapping from FE approximation.  made a lot of changes in the FE class that trickled down...
- - ----------------------------
- - revision 1.32
- - date: 2002/10/27 19:20:51;  author: benkirk;  state: Exp;  lines: +5 -1
- - compatibility changes.  Successfully builds on Linux with gcc 2.95.3, gcc 2.96 (RedHat), gcc 3.0, gcc 3.2, icc 6.0; on SGI with MipsPro 7.3; on Linux Alpha with Compaq cxx; and on IBM AIX with xlC
- - ----------------------------
- - revision 1.31
- - date: 2002/10/16 21:26:33;  author: benkirk;  state: Exp;  lines: +8 -1
- - Tree builds properly.  Now need to figure out which element contains a point
- - ----------------------------
- - revision 1.30
- - date: 2002/10/15 19:22:42;  author: benkirk;  state: Exp;  lines: +9 -18
- - removed class static pointers to the mesh in the finite element and element base classes.  This is necessary to support multiple meshes at the same time.
- - ----------------------------
- - revision 1.29
- - date: 2002/10/11 20:56:15;  author: benkirk;  state: Exp;  lines: +8 -1
- - The FEBase class now has a static pointer to the mesh rather than a reference passed via the constructor.  DofMap can _almost_ constrain degrees of freedom properly
- - ----------------------------
- - revision 1.28
- - date: 2002/09/30 22:44:42;  author: peterson;  state: Exp;  lines: +3 -2
- - More utility functions in the Quality namespace.
- - ----------------------------
- - revision 1.27
- - date: 2002/09/26 22:03:44;  author: peterson;  state: Exp;  lines: +11 -2
- - Added quality bounds for elements based on CUBIT docs.  Added the cut_below and cut_above functions to the StatVector.
- - ----------------------------
- - revision 1.26
- - date: 2002/09/24 23:54:57;  author: peterson;  state: Exp;  lines: +8 -1
- - Fixed strange bug with diva file, added taper and stretch quality measures for hexes.
- - ----------------------------
- - revision 1.25
- - date: 2002/09/24 20:05:07;  author: benkirk;  state: Exp;  lines: +17 -7
- - the element class now has a static pointer to a constant Mesh named mesh.  This pointer can be used instead of passing the mesh to methods that need vertex locations.  For sanity assert it is not null before you use it!
- - ----------------------------
- - revision 1.24
- - date: 2002/09/24 17:39:34;  author: benkirk;  state: Exp;  lines: +15 -5
- - find_neighbors now uses the minumum element necessary to find a neighbor.  This would be a quad4 in the case of hex{8,20,27}
- - ----------------------------
- - revision 1.23
- - date: 2002/09/23 16:46:51;  author: benkirk;  state: Exp;  lines: +24 -17
- - hmin, hmax, and centroid now computed using element vertices instead of all the nodes.  This will be fatser in the case of Hex27s and other many-noded elements
- - ----------------------------
- - revision 1.22
- - date: 2002/09/17 18:09:29;  author: benkirk;  state: Exp;  lines: +8 -1
- - incorporated Johns quality code for hexes based on diagonal ratio
- - ----------------------------
- - revision 1.21
- - date: 2002/09/17 17:41:12;  author: benkirk;  state: Exp;  lines: +19 -1
- - added Pyramid and Prism base classes.
- - ----------------------------
- - revision 1.20
- - date: 2002/08/21 14:44:46;  author: benkirk;  state: Exp;  lines: +14 -6
- - testing refinement some more.  Had to make the element parent a pointer (not a const pointer) due to some of the logic in the level-one enforcement.  Hopefully I can make it a const Elem* again in the future
- - ----------------------------
- - revision 1.19
- - date: 2002/08/15 15:49:52;  author: benkirk;  state: Exp;  lines: +38 -17
- - Elements now have subdomain IDs and processor IDs.  You can get to an elements parent even if AMR is disabled.  This is useful for derived elements...  If you build a side of an element the resulting side knows what element it came from.
- - ----------------------------
- - revision 1.18
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -2
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.17
- - date: 2002/07/28 21:14:30;  author: benkirk;  state: Exp;  lines: +27 -9
- - reworking internals of refinement
- - ----------------------------
- - revision 1.16
- - date: 2002/05/16 00:06:21;  author: benkirk;  state: Exp;  lines: +16 -6
- - preliminary unrefinement support
- - ----------------------------
- - revision 1.15
- - date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +4 -4
- - allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
- - ----------------------------
- - revision 1.14
- - date: 2002/05/06 21:15:22;  author: benkirk;  state: Exp;  lines: +3 -4
- - refinement works for all 2D element types
- - ----------------------------
- - revision 1.13
- - date: 2002/05/06 17:23:32;  author: benkirk;  state: Exp;  lines: +5 -2
- - refinement now works for linear triangles and quads
- - ----------------------------
- - revision 1.12
- - date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +9 -5
- - refinement (at least uniform) now works
- - ----------------------------
- - revision 1.11
- - date: 2002/05/02 13:40:18;  author: benkirk;  state: Exp;  lines: +14 -2
- - code clean up.  now compiles with g++, icc, cxx (alpha), and CC (SGI)
- - ----------------------------
- - revision 1.10
- - date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +4 -4
- - eliminated templates from everything except Petsc Interface
- - ----------------------------
- - revision 1.9
- - date: 2002/05/01 14:59:10;  author: benkirk;  state: Exp;  lines: +8 -14
- - elements do not allocate storage for their children until they are refined
- - ----------------------------
- - revision 1.8
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -3
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.7
- - date: 2002/04/30 22:16:33;  author: benkirk;  state: Exp;  lines: +3 -2
- - initial shared library support
- - ----------------------------
- - revision 1.6
- - date: 2002/04/30 13:33:54;  author: benkirk;  state: Exp;  lines: +19 -6
- - more on refinement
- - ----------------------------
- - revision 1.5
- - date: 2002/04/29 21:50:52;  author: benkirk;  state: Exp;  lines: +41 -13
- - initial support for AMR.  builds fine, old functionality still retained.  much more to do.
- - ----------------------------
- - revision 1.4
- - date: 2002/04/22 14:33:10;  author: benkirk;  state: Exp;  lines: +3 -1
- - initial support for pyramids.  still need shape functions and quadrature rules
- - ----------------------------
- - revision 1.3
- - date: 2002/04/18 19:24:24;  author: benkirk;  state: Exp;  lines: +3 -1
- - documentation
- - ----------------------------
- - revision 1.2
- - date: 2002/04/18 16:06:38;  author: benkirk;  state: Exp;  lines: +161 -25
- - documentation
- - ----------------------------
- - revision 1.1
- - date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;
- - many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/elem_quality.h,v
- - Working file: include/elem_quality.h
- - head: 1.8
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 8;	selected revisions: 8
- - description:
- - ----------------------------
- - revision 1.8
- - date: 2003/01/16 19:22:01;  author: peterson;  state: Exp;  lines: +1 -32
- - Appended enum_ to a few more files.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +2 -2
- - Created separate file for the element type enumeration.
- - ----------------------------
- - revision 1.6
- - date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +3 -2
- - Removing more unnecessary includes.
- - ----------------------------
- - revision 1.5
- - date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +43 -9
- - added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
- - ----------------------------
- - revision 1.4
- - date: 2002/11/03 23:45:52;  author: benkirk;  state: Exp;  lines: +2 -2
- - added support for multiple DOFs per node and element-based DOFs
- - ----------------------------
- - revision 1.3
- - date: 2002/09/30 22:44:42;  author: peterson;  state: Exp;  lines: +11 -2
- - More utility functions in the Quality namespace.
- - ----------------------------
- - revision 1.2
- - date: 2002/09/26 22:03:44;  author: peterson;  state: Exp;  lines: +19 -2
- - Added quality bounds for elements based on CUBIT docs.  Added the cut_below and cut_above functions to the StatVector.
- - ----------------------------
- - revision 1.1
- - date: 2002/09/17 18:09:29;  author: benkirk;  state: Exp;
- - incorporated Johns quality code for hexes based on diagonal ratio
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/elem_type.h,v
- - Working file: include/elem_type.h
- - head: 1.17
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 17;	selected revisions: 17
- - description:
- - ----------------------------
- - revision 1.17
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +2 -2
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.16
- - date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +1 -57
- - Created separate file for the element type enumeration.
- - ----------------------------
- - revision 1.15
- - date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +13 -1
- - added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
- - ----------------------------
- - revision 1.14
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +35 -11
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.13
- - date: 2002/11/30 18:45:19;  author: d.dreyer;  state: Exp;  lines: +24 -9
- - First stage of infinite elements: added geometric entities. Use them with --enable-ifem.
- - ----------------------------
- - revision 1.12
- - date: 2002/11/03 23:45:52;  author: benkirk;  state: Exp;  lines: +7 -7
- - added support for multiple DOFs per node and element-based DOFs
- - ----------------------------
- - revision 1.11
- - date: 2002/10/01 22:25:51;  author: peterson;  state: Exp;  lines: +11 -2
- - Added another type of naming system for element types.
- - ----------------------------
- - revision 1.10
- - date: 2002/10/01 22:13:37;  author: peterson;  state: Exp;  lines: +28 -1
- - Added some element type utility functions. More work on stat_window.
- - ----------------------------
- - revision 1.9
- - date: 2002/09/17 17:41:12;  author: benkirk;  state: Exp;  lines: +3 -3
- - added Pyramid and Prism base classes.
- - ----------------------------
- - revision 1.8
- - date: 2002/09/17 03:57:19;  author: benkirk;  state: Exp;  lines: +8 -4
- - added Edge, Tri, Quad, Tet, and Hex base classes for specific instances of those types of elements.  still need ones for Prism and Pyramid
- - ----------------------------
- - revision 1.7
- - date: 2002/09/09 13:53:54;  author: benkirk;  state: Exp;  lines: +9 -5
- - put enums in MeshEnums namespace.  Started using fluid for class design in the gui
- - ----------------------------
- - revision 1.6
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.5
- - date: 2002/04/23 16:34:00;  author: benkirk;  state: Exp;  lines: +3 -3
- - added initial support for quad8 and hex20.  no shape functions yet
- - ----------------------------
- - revision 1.4
- - date: 2002/04/22 14:33:10;  author: benkirk;  state: Exp;  lines: +2 -2
- - initial support for pyramids.  still need shape functions and quadrature rules
- - ----------------------------
- - revision 1.3
- - date: 2002/04/12 16:04:11;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.2
- - date: 2002/04/03 23:25:33;  author: benkirk;  state: Exp;  lines: +2 -2
- - removerd order from fe
- - ----------------------------
- - revision 1.1
- - date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;
- - changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/enum_elem_quality.h,v
- - Working file: include/enum_elem_quality.h
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/16 19:22:01;  author: peterson;  state: Exp;
- - Appended enum_ to a few more files.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/enum_elem_type.h,v
- - Working file: include/enum_elem_type.h
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/16 19:22:01;  author: peterson;  state: Exp;  lines: +2 -3
- - Appended enum_ to a few more files.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;
- - Created separate file for the element type enumeration.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/enum_fe_family.h,v
- - Working file: include/enum_fe_family.h
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +4 -5
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - ----------------------------
- - revision 1.1
- - date: 2003/01/16 16:42:28;  author: peterson;  state: Exp;
- - Removing unnecessary includes.  Changing headers which
- - simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/enum_inf_map_type.h,v
- - Working file: include/enum_inf_map_type.h
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/enum_order.h,v
- - Working file: include/enum_order.h
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +27 -38
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - ----------------------------
- - revision 1.3
- - date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +4 -2
- - Added documentation.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/16 19:22:01;  author: peterson;  state: Exp;  lines: +2 -2
- - Appended enum_ to a few more files.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/16 16:42:28;  author: peterson;  state: Exp;
- - Removing unnecessary includes.  Changing headers which
- - simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/equation_systems.h,v
- - Working file: include/equation_systems.h
- - head: 1.20
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 20;	selected revisions: 20
- - description:
- - ----------------------------
- - revision 1.20
- - date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +1 -3
- - Removing more unnecessary includes.
- - ----------------------------
- - revision 1.19
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +34 -29
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.18
- - date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +2 -2
- - complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
- - ----------------------------
- - revision 1.17
- - date: 2002/12/04 05:18:42;  author: benkirk;  state: Exp;  lines: +2 -2
- - equation_systems now supports inheritance
- - ----------------------------
- - revision 1.16
- - date: 2002/11/26 20:27:17;  author: benkirk;  state: Exp;  lines: +2 -1
- - have sucessfully integrated restart in s3, made minor changes in equation_systems_io.C
- - ----------------------------
- - revision 1.15
- - date: 2002/11/08 04:47:55;  author: benkirk;  state: Exp;  lines: +6 -1
- - errata
- - ----------------------------
- - revision 1.14
- - date: 2002/10/17 22:04:04;  author: peterson;  state: Exp;  lines: +14 -2
- - Initial support for themes added to gui.
- - ----------------------------
- - revision 1.13
- - date: 2002/09/09 13:53:54;  author: benkirk;  state: Exp;  lines: +11 -3
- - put enums in MeshEnums namespace.  Started using fluid for class design in the gui
- - ----------------------------
- - revision 1.12
- - date: 2002/09/06 20:24:04;  author: benkirk;  state: Exp;  lines: +12 -3
- - it is now possible to write an equation system class without data.
- - ----------------------------
- - revision 1.11
- - date: 2002/09/06 14:53:28;  author: benkirk;  state: Exp;  lines: +6 -3
- - added Xdr class to provide a uniform interface for Xdr and ASCII IO.  The equation_systems read & write is also based on these methods.  I have validated it for one processor.  Still need to be sure that in the case of multiple processors each proc gets te relevant piece of data.
- - ----------------------------
- - revision 1.10
- - date: 2002/08/30 15:54:54;  author: benkirk;  state: Exp;  lines: +13 -1
- - forsaking netCDF.  writing a C++ XDR interface instead
- - ----------------------------
- - revision 1.9
- - date: 2002/08/22 16:25:57;  author: benkirk;  state: Exp;  lines: +2 -2
- - separated netCDF from exodusII.  netCDF may be used by itself to provide an alternate binary mesh/solution output format.  Also changed the way system-dependent binary files are stored.  the configure variable host is now used instead of uname
- - ----------------------------
- - revision 1.8
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -3
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.7
- - date: 2002/06/10 21:05:28;  author: benkirk;  state: Exp;  lines: +13 -13
- - can now mix approximation order for variables in a system.  There is a strange bug that causes the send_list size to be larger than the total number of dofs for the tet meshes on 2 procs
- - ----------------------------
- - revision 1.6
- - date: 2002/06/06 22:56:14;  author: benkirk;  state: Exp;  lines: +11 -2
- - added EquationSystems reference inside SystemData.  SystemData solve now calls assemble
- - ----------------------------
- - revision 1.5
- - date: 2002/06/06 20:57:30;  author: benkirk;  state: Exp;  lines: +9 -4
- - added assemble() function in system_data which is capable of assembling the system and vector
- - ----------------------------
- - revision 1.4
- - date: 2002/06/04 15:08:28;  author: benkirk;  state: Exp;  lines: +2 -2
- - more work on equation system support.  Each SystemData now contains a matrix, rhs, and solution.  Can call the solve
- - ----------------------------
- - revision 1.3
- - date: 2002/05/30 18:37:31;  author: benkirk;  state: Exp;  lines: +6 -1
- - added print_info to equation systems
- - ----------------------------
- - revision 1.2
- - date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +77 -13
- - added equation system support
- - ----------------------------
- - revision 1.1
- - date: 2002/05/28 20:33:42;  author: benkirk;  state: Exp;
- - added initial support for simulation groups (systems) and equation systems
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/face.h,v
- - Working file: include/face.h
- - head: 1.70
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - 	start: 1.1.1.1
- - 	mesh: 1.1.1
- - keyword substitution: kv
- - total revisions: 71;	selected revisions: 71
- - description:
- - ----------------------------
- - revision 1.70
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -2
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.69
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +7 -1
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.68
- - date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;  lines: +1 -6
- - split all the cell implementation into separate files.
- - ----------------------------
- - revision 1.67
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +2 -2
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.66
- - date: 2002/12/24 14:50:05;  author: benkirk;  state: Exp;  lines: +6 -2
- - fixed invalid constructor calls.  SGI compiler caught the error
- - ----------------------------
- - revision 1.65
- - date: 2002/12/23 18:24:58;  author: peterson;  state: Exp;  lines: +1 -947
- - Split up all the 2D elements (including
- - infinite elements) into separate files.  Now trying to
- - maintain a one class per header file system ;)
- - ----------------------------
- - revision 1.64
- - date: 2002/12/23 15:18:39;  author: peterson;  state: Exp;  lines: +1 -13
- - Removed unnecessary write_tecplot function declarations.
- - ----------------------------
- - revision 1.63
- - date: 2002/12/23 15:00:45;  author: peterson;  state: Exp;  lines: +14 -14
- - Moved write_ucd and write_tecplot_connectivity routines into the Elem base class.
- - ----------------------------
- - revision 1.62
- - date: 2002/12/22 03:12:17;  author: benkirk;  state: Exp;  lines: +54 -23
- - added Edge, Face, and Cell classes.  Will be useful in FE reimplementation
- - ----------------------------
- - revision 1.61
- - date: 2002/12/04 22:52:50;  author: benkirk;  state: Exp;  lines: +46 -21
- - added vtk_connectivity support for primitive (non-infinite) elements
- - ----------------------------
- - revision 1.60
- - date: 2002/12/01 13:31:47;  author: d.dreyer;  state: Exp;  lines: +30 -1
- - minor changes to code for infinite elements; added some documentation; added in Makefile target doxy
- - ----------------------------
- - revision 1.59
- - date: 2002/11/30 18:45:19;  author: d.dreyer;  state: Exp;  lines: +238 -1
- - First stage of infinite elements: added geometric entities. Use them with --enable-ifem.
- - ----------------------------
- - revision 1.58
- - date: 2002/11/01 20:48:43;  author: benkirk;  state: Exp;  lines: +23 -19
- - split FE mapping from FE approximation.  made a lot of changes in the FE class that trickled down...
- - ----------------------------
- - revision 1.57
- - date: 2002/10/21 12:54:35;  author: benkirk;  state: Exp;  lines: +3 -3
- - fixed quality method call
- - ----------------------------
- - revision 1.56
- - date: 2002/10/18 15:10:05;  author: benkirk;  state: Exp;  lines: +22 -1
- - The fast element-containing-point search is now implemented using an OctTree.
- - ----------------------------
- - revision 1.55
- - date: 2002/09/26 22:03:44;  author: peterson;  state: Exp;  lines: +27 -1
- - Added quality bounds for elements based on CUBIT docs.  Added the cut_below and cut_above functions to the StatVector.
- - ----------------------------
- - revision 1.54
- - date: 2002/09/24 17:39:34;  author: benkirk;  state: Exp;  lines: +12 -11
- - find_neighbors now uses the minumum element necessary to find a neighbor.  This would be a quad4 in the case of hex{8,20,27}
- - ----------------------------
- - revision 1.53
- - date: 2002/09/23 16:46:51;  author: benkirk;  state: Exp;  lines: +3 -2
- - hmin, hmax, and centroid now computed using element vertices instead of all the nodes.  This will be fatser in the case of Hex27s and other many-noded elements
- - ----------------------------
- - revision 1.52
- - date: 2002/09/17 17:41:12;  author: benkirk;  state: Exp;  lines: +59 -14
- - added Pyramid and Prism base classes.
- - ----------------------------
- - revision 1.51
- - date: 2002/09/17 03:57:19;  author: benkirk;  state: Exp;  lines: +88 -138
- - added Edge, Tri, Quad, Tet, and Hex base classes for specific instances of those types of elements.  still need ones for Prism and Pyramid
- - ----------------------------
- - revision 1.50
- - date: 2002/08/21 14:44:46;  author: benkirk;  state: Exp;  lines: +11 -11
- - testing refinement some more.  Had to make the element parent a pointer (not a const pointer) due to some of the logic in the level-one enforcement.  Hopefully I can make it a const Elem* again in the future
- - ----------------------------
- - revision 1.49
- - date: 2002/08/20 19:26:20;  author: benkirk;  state: Exp;  lines: +86 -1
- - created embedding matrices for all 2D elements and all but Pyramid for the 3D elements
- - ----------------------------
- - revision 1.48
- - date: 2002/08/15 15:49:52;  author: benkirk;  state: Exp;  lines: +11 -11
- - Elements now have subdomain IDs and processor IDs.  You can get to an elements parent even if AMR is disabled.  This is useful for derived elements...  If you build a side of an element the resulting side knows what element it came from.
- - ----------------------------
- - revision 1.47
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.46
- - date: 2002/05/16 20:25:54;  author: benkirk;  state: Exp;  lines: +14 -43
- - moved testmesh to meshtool.  made it more user-friendly so I could give it to Owen since he is now working with cubit meshes
- - ----------------------------
- - revision 1.45
- - date: 2002/05/16 00:06:21;  author: benkirk;  state: Exp;  lines: +33 -29
- - preliminary unrefinement support
- - ----------------------------
- - revision 1.44
- - date: 2002/05/15 11:22:18;  author: benkirk;  state: Exp;  lines: +75 -9
- - working on coarsening
- - ----------------------------
- - revision 1.43
- - date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +14 -11
- - allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
- - ----------------------------
- - revision 1.42
- - date: 2002/05/06 21:15:22;  author: benkirk;  state: Exp;  lines: +6 -14
- - refinement works for all 2D element types
- - ----------------------------
- - revision 1.41
- - date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +24 -16
- - refinement (at least uniform) now works
- - ----------------------------
- - revision 1.40
- - date: 2002/05/02 13:40:18;  author: benkirk;  state: Exp;  lines: +71 -1
- - code clean up.  now compiles with g++, icc, cxx (alpha), and CC (SGI)
- - ----------------------------
- - revision 1.39
- - date: 2002/05/01 14:59:10;  author: benkirk;  state: Exp;  lines: +6 -6
- - elements do not allocate storage for their children until they are refined
- - ----------------------------
- - revision 1.38
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -2
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.37
- - date: 2002/04/30 21:44:15;  author: benkirk;  state: Exp;  lines: +2 -1
- - added some more includes to satisfy CC on the SGI
- - ----------------------------
- - revision 1.36
- - date: 2002/04/23 17:38:51;  author: benkirk;  state: Exp;  lines: +8 -8
- - Quad8 shape functions work now
- - ----------------------------
- - revision 1.35
- - date: 2002/04/23 16:34:00;  author: benkirk;  state: Exp;  lines: +110 -26
- - added initial support for quad8 and hex20.  no shape functions yet
- - ----------------------------
- - revision 1.34
- - date: 2002/04/18 16:06:38;  author: benkirk;  state: Exp;  lines: +125 -1
- - documentation
- - ----------------------------
- - revision 1.33
- - date: 2002/04/18 14:03:20;  author: benkirk;  state: Exp;  lines: +5 -5
- - added QuadratureOrder enum.  broke quadrature.C into multiple files for faster compiles
- - ----------------------------
- - revision 1.32
- - date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;  lines: +34 -291
- - many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
- - ----------------------------
- - revision 1.31
- - date: 2002/04/12 16:04:11;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.30
- - date: 2002/04/11 04:57:34;  author: benkirk;  state: Exp;  lines: +2 -679
- - mucho changes.  better just ask Ben... Im a little too tired to write a useful comment now.  Suffice to say boundary conditions basically work, can have a 2D mesh in 3D space, etc...
- - ----------------------------
- - revision 1.29
- - date: 2002/04/10 21:39:09;  author: benkirk;  state: Exp;  lines: +124 -1
- - working on boundary integral support
- - ----------------------------
- - revision 1.28
- - date: 2002/04/10 18:13:39;  author: benkirk;  state: Exp;  lines: +42 -1
- - working on boundary support
- - ----------------------------
- - revision 1.27
- - date: 2002/04/08 13:01:38;  author: benkirk;  state: Exp;  lines: +14 -14
- - more on sparsity structure.  changed n_tecplot_* to n_sub_* to be more generic.  added total_weight to mesh.h for partitioning hybrid meshes.
- - ----------------------------
- - revision 1.26
- - date: 2002/04/03 23:25:33;  author: benkirk;  state: Exp;  lines: +1 -11
- - removerd order from fe
- - ----------------------------
- - revision 1.25
- - date: 2002/04/03 02:26:27;  author: benkirk;  state: Exp;  lines: +33 -56
- - added GMV variable output support
- - ----------------------------
- - revision 1.24
- - date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +100 -82
- - renamed config.h mesh_config.h and did some cleanup
- - ----------------------------
- - revision 1.23
- - date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +35 -28
- - changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
- - ----------------------------
- - revision 1.22
- - date: 2002/03/31 05:58:42;  author: peterson;  state: Exp;  lines: +5 -5
- - Added a new Conversion class to the ExodusII support.  The purpose of this class is to encapsut naming scheme and node numbering scheme which is purely local to ExodusII.  This way, other parts of the code, espend face.h dont need to know anything about other specialized naming schemes.
- - ----------------------------
- - revision 1.21
- - date: 2002/03/29 21:22:51;  author: peterson;  state: Exp;  lines: +5 -5
- - Exodus support is working
- - ----------------------------
- - revision 1.20
- - date: 2002/03/29 14:20:21;  author: benkirk;  state: Exp;  lines: +21 -30
- - split up mesh.C into logical, disjoint parts.
- - I also made edge a base-derived class, with Edge2 and Edge3 derived classes.
- - Tri, Quad, Tri6, Quad9, Hex, Tet, Prism, and Hex27 should work now.  Will double-check
- - the shape function calculation for the higher-order elements today.
- - ----------------------------
- - revision 1.19
- - date: 2002/03/28 22:52:32;  author: benkirk;  state: Exp;  lines: +452 -16
- - added tri6, quad9, hex27.  will add prism17 and tet12 later.  I still need to make edge a base/derived class with edge2 and edge3 as derived classes
- - ----------------------------
- - revision 1.18
- - date: 2002/03/21 15:18:27;  author: benkirk;  state: Exp;  lines: +39 -2
- - added tecplot binary support
- - ----------------------------
- - revision 1.17
- - date: 2002/03/05 20:08:05;  author: benkirk;  state: Exp;  lines: +23 -1
- - errata
- - ----------------------------
- - revision 1.16
- - date: 2002/03/05 16:57:43;  author: benkirk;  state: Exp;  lines: +3 -1
- - errata
- - ----------------------------
- - revision 1.15
- - date: 2002/03/05 14:28:22;  author: benkirk;  state: Exp;  lines: +42 -16
- - adding more stuff
- - ----------------------------
- - revision 1.14
- - date: 2002/03/05 06:12:42;  author: benkirk;  state: Exp;  lines: +37 -8
- - added neighborhood computation, petsc matrix from deal.II
- - ----------------------------
- - revision 1.13
- - date: 2002/03/04 22:43:23;  author: benkirk;  state: Exp;  lines: +7 -2
- - added partitioning
- - ----------------------------
- - revision 1.12
- - date: 2002/03/03 00:31:36;  author: benkirk;  state: Exp;  lines: +8 -5
- - updates makefile and added some fe shape functions, quadrature rules
- - ----------------------------
- - revision 1.11
- - date: 2002/03/02 21:19:54;  author: benkirk;  state: Exp;  lines: +7 -1
- - updates makefile and added some fe shape functions, quadrature rules
- - ----------------------------
- - revision 1.10
- - date: 2002/02/26 15:53:40;  author: benkirk;  state: Exp;  lines: +73 -7
- - Added pointers to neighbors within faces and cells, can now write UCD files
- - ----------------------------
- - revision 1.9
- - date: 2002/02/25 22:55:36;  author: benkirk;  state: Exp;  lines: +63 -10
- - errata
- - ----------------------------
- - revision 1.8
- - date: 2002/02/25 14:36:03;  author: benkirk;  state: Exp;  lines: +76 -3
- - errata
- - ----------------------------
- - revision 1.7
- - date: 2002/02/25 05:23:04;  author: benkirk;  state: Exp;  lines: +5 -5
- - errata
- - ----------------------------
- - revision 1.6
- - date: 2002/02/25 02:52:04;  author: benkirk;  state: Exp;  lines: +110 -9
- - errata
- - ----------------------------
- - revision 1.5
- - date: 2002/02/25 01:18:38;  author: benkirk;  state: Exp;  lines: +35 -5
- - errata
- - ----------------------------
- - revision 1.4
- - date: 2002/02/24 16:30:36;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.3
- - date: 2002/02/24 16:29:51;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.2
- - date: 2002/02/24 16:27:47;  author: benkirk;  state: Exp;  lines: +96 -4
- - errata
- - ----------------------------
- - revision 1.1
- - date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;
- - branches:  1.1.1;
- - Initial revision
- - ----------------------------
- - revision 1.1.1.1
- - date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;  lines: +0 -0
- - init
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/face_inf_quad4.h,v
- - Working file: include/face_inf_quad4.h
- - head: 1.8
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 8;	selected revisions: 8
- - description:
- - ----------------------------
- - revision 1.8
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -5
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.7
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +11 -3
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.6
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.5
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.2
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.1
- - date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
- - Implemented the face_ naming scheme
- - suggested by Ben.  Files with face_ prepended to their
- - name indicate that they are implementing a 2D element, i.e. a face.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/face_inf_quad6.h,v
- - Working file: include/face_inf_quad6.h
- - head: 1.8
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 8;	selected revisions: 8
- - description:
- - ----------------------------
- - revision 1.8
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -4
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.7
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +9 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.6
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.5
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.2
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.1
- - date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
- - Implemented the face_ naming scheme
- - suggested by Ben.  Files with face_ prepended to their
- - name indicate that they are implementing a 2D element, i.e. a face.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/face_quad.h,v
- - Working file: include/face_quad.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +1 -2
- - Removing more unnecessary includes.
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -3
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.4
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.3
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -2
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.2
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +4 -4
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.1
- - date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
- - Implemented the face_ naming scheme
- - suggested by Ben.  Files with face_ prepended to their
- - name indicate that they are implementing a 2D element, i.e. a face.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/face_quad4.h,v
- - Working file: include/face_quad4.h
- - head: 1.8
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 8;	selected revisions: 8
- - description:
- - ----------------------------
- - revision 1.8
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -4
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.7
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.6
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.5
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.2
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.1
- - date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
- - Implemented the face_ naming scheme
- - suggested by Ben.  Files with face_ prepended to their
- - name indicate that they are implementing a 2D element, i.e. a face.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/face_quad8.h,v
- - Working file: include/face_quad8.h
- - head: 1.7
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 7;	selected revisions: 7
- - description:
- - ----------------------------
- - revision 1.7
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -3
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.6
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.5
- - date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.2
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +6 -6
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.1
- - date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
- - Implemented the face_ naming scheme
- - suggested by Ben.  Files with face_ prepended to their
- - name indicate that they are implementing a 2D element, i.e. a face.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/face_quad9.h,v
- - Working file: include/face_quad9.h
- - head: 1.8
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 8;	selected revisions: 8
- - description:
- - ----------------------------
- - revision 1.8
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -5
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.7
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.6
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.5
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.2
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.1
- - date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
- - Implemented the face_ naming scheme
- - suggested by Ben.  Files with face_ prepended to their
- - name indicate that they are implementing a 2D element, i.e. a face.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/face_tri.h,v
- - Working file: include/face_tri.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +1 -2
- - Removing more unnecessary includes.
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -3
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.4
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.3
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -2
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.2
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +4 -4
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.1
- - date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
- - Implemented the face_ naming scheme
- - suggested by Ben.  Files with face_ prepended to their
- - name indicate that they are implementing a 2D element, i.e. a face.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/face_tri3.h,v
- - Working file: include/face_tri3.h
- - head: 1.8
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 8;	selected revisions: 8
- - description:
- - ----------------------------
- - revision 1.8
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -4
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.7
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.6
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.5
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.2
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.1
- - date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
- - Implemented the face_ naming scheme
- - suggested by Ben.  Files with face_ prepended to their
- - name indicate that they are implementing a 2D element, i.e. a face.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/face_tri6.h,v
- - Working file: include/face_tri6.h
- - head: 1.8
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 8;	selected revisions: 8
- - description:
- - ----------------------------
- - revision 1.8
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -5
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.7
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -2
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.6
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.5
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +2 -2
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.2
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.1
- - date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
- - Implemented the face_ naming scheme
- - suggested by Ben.  Files with face_ prepended to their
- - name indicate that they are implementing a 2D element, i.e. a face.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/factory.h,v
- - Working file: include/factory.h
- - head: 1.5
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 5;	selected revisions: 5
- - description:
- - ----------------------------
- - revision 1.5
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +8 -8
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.4
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +7 -7
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.3
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +7 -7
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.2
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +17 -27
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.1
- - date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;
- - added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/fe.h,v
- - Working file: include/fe.h
- - head: 1.80
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 80;	selected revisions: 80
- - description:
- - ----------------------------
- - revision 1.80
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +20 -9
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - ----------------------------
- - revision 1.79
- - date: 2003/01/22 22:07:31;  author: d.dreyer;  state: Exp;  lines: +60 -625
- - Changes for inifinite elements: added some virtual members in FEBase; split fe_base.h from fe.h, but did not touch fe/src/fe*.C -- shall i change these, too?; changed normal vector of InfAbcXY::build_side(0) so that they point inwards; minor documentation issue in meshtool. -- All of this seems quite imperative to me for infinite elements. If anybody doesn't like - please feedback
- - ----------------------------
- - revision 1.78
- - date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +202 -18
- - Added documentation.
- - ----------------------------
- - revision 1.77
- - date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +6 -6
- - Created separate file for the element type enumeration.
- - ----------------------------
- - revision 1.76
- - date: 2003/01/16 16:12:31;  author: benkirk;  state: Exp;  lines: +6 -26
- - reworked the reference counting to use C++ run-type identification
- - ----------------------------
- - revision 1.75
- - date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +29 -14
- - reworked the ReferenceCounter class
- - ----------------------------
- - revision 1.74
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +5 -6
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.73
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +31 -53
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.72
- - date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +8 -8
- - switched from std::auto_ptr to AutoPtr
- - ----------------------------
- - revision 1.71
- - date: 2003/01/09 22:56:51;  author: benkirk;  state: Exp;  lines: +8 -11
- - oops...  FE<> constructor should be public for FELagrange3D etc... to work!
- - ----------------------------
- - revision 1.70
- - date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +56 -44
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.69
- - date: 2003/01/09 19:38:45;  author: benkirk;  state: Exp;  lines: +6 -5
- - documentation.  Fix for template instantiation with Compaq CXX
- - ----------------------------
- - revision 1.68
- - date: 2003/01/09 17:09:11;  author: benkirk;  state: Exp;  lines: +5 -8
- - added HOSTTYPE to object file names to facilitate cross-platform building. Added 1D (and tensor-product by extension) quadrature to order 23
- - ----------------------------
- - revision 1.67
- - date: 2003/01/09 16:10:23;  author: d.dreyer;  state: Exp;  lines: +9 -9
- - nomenclature
- - ----------------------------
- - revision 1.66
- - date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +7 -7
- - added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
- - ----------------------------
- - revision 1.65
- - date: 2003/01/08 21:51:40;  author: benkirk;  state: Exp;  lines: +8 -6
- - updated documentation
- - ----------------------------
- - revision 1.64
- - date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +6 -6
- - auto_ptr fixed (again, once and for all?)
- - ----------------------------
- - revision 1.63
- - date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +8 -8
- - fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
- - ----------------------------
- - revision 1.62
- - date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +14 -13
- - added auto_ptr<> to prevent memory leaks
- - ----------------------------
- - revision 1.61
- - date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +130 -4
- - added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
- - ----------------------------
- - revision 1.60
- - date: 2002/12/31 02:46:20;  author: benkirk;  state: Exp;  lines: +11 -60
- - added reference_counter
- - ----------------------------
- - revision 1.59
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +371 -231
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.58
- - date: 2002/12/22 22:36:25;  author: benkirk;  state: Exp;  lines: +67 -82
- - made QBase pure virtual.  prefixing private variables with _ to distinguish from local variables.  Will make FEBase pure virtual and have templated classes derived from it for actual families of finite elements
- - ----------------------------
- - revision 1.57
- - date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +3 -3
- - complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
- - ----------------------------
- - revision 1.56
- - date: 2002/12/12 21:00:31;  author: d.dreyer;  state: Exp;  lines: +92 -53
- - Preparations for truly various finite element concepts. Had to decide: either make a _lot_ of FEBase virtual and mess up several switch statements, or introduce the FEInterface class to encapsulate the static member functions of finite element classes (guess what i chose). For good code re-use, i had to move some members in FEBase from private to protected, but did not touch the class in any other way - except for abandoning the virtual shape and shape_deriv. These do not make sense, were never used, and as stand-alone would not allow code re-use.
- - ----------------------------
- - revision 1.55
- - date: 2002/11/27 20:58:50;  author: benkirk;  state: Exp;  lines: +8 -1
- - added trapezoidal quadrature.  Compute tangent directions _and_ normal on faces
- - ----------------------------
- - revision 1.54
- - date: 2002/11/18 23:20:49;  author: benkirk;  state: Exp;  lines: +25 -1
- - added code to get dphidx etc... directly from the FE.  may or may not last
- - ----------------------------
- - revision 1.53
- - date: 2002/11/08 20:50:38;  author: benkirk;  state: Exp;  lines: +3 -3
- - fixed quadrature mapping for faces on quads, tris, and hexes.  still need to fix tets, prisms, and pyramids
- - ----------------------------
- - revision 1.52
- - date: 2002/11/06 03:53:27;  author: benkirk;  state: Exp;  lines: +57 -16
- - initial support for hierarchic shape functions.  tested though 4th-order on quads.  need to implement hexes, tris, and tets.  need to figure out hanging node constraints.  Should run an exhaustive convergence test
- - ----------------------------
- - revision 1.51
- - date: 2002/11/03 23:45:52;  author: benkirk;  state: Exp;  lines: +23 -4
- - added support for multiple DOFs per node and element-based DOFs
- - ----------------------------
- - revision 1.50
- - date: 2002/11/01 20:48:43;  author: benkirk;  state: Exp;  lines: +109 -54
- - split FE mapping from FE approximation.  made a lot of changes in the FE class that trickled down...
- - ----------------------------
- - revision 1.49
- - date: 2002/10/28 17:29:47;  author: benkirk;  state: Exp;  lines: +12 -3
- - added code to compute normal vectors for face integration.  Now remove Make.common and force a re-configure when make distclean is executed
- - ----------------------------
- - revision 1.48
- - date: 2002/10/18 20:10:24;  author: benkirk;  state: Exp;  lines: +5 -3
- - added grid2grid code which is an example of mappings from one grid to another
- - ----------------------------
- - revision 1.47
- - date: 2002/10/18 13:12:24;  author: benkirk;  state: Exp;  lines: +7 -1
- - adding code that will report if a point is located in the reference element for a given type.  This is facilitating the grid2grid projection work.
- - ----------------------------
- - revision 1.46
- - date: 2002/10/15 19:22:42;  author: benkirk;  state: Exp;  lines: +10 -8
- - removed class static pointers to the mesh in the finite element and element base classes.  This is necessary to support multiple meshes at the same time.
- - ----------------------------
- - revision 1.45
- - date: 2002/10/11 20:56:15;  author: benkirk;  state: Exp;  lines: +9 -7
- - The FEBase class now has a static pointer to the mesh rather than a reference passed via the constructor.  DofMap can _almost_ constrain degrees of freedom properly
- - ----------------------------
- - revision 1.44
- - date: 2002/10/08 21:24:31;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.43
- - date: 2002/08/20 13:35:20;  author: benkirk;  state: Exp;  lines: +14 -10
- - optimizing Point performance, fe_map
- - ----------------------------
- - revision 1.42
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.41
- - date: 2002/06/11 20:06:39;  author: benkirk;  state: Exp;  lines: +17 -20
- - made the FE classes dof_index ignorant.  Now ask the dof map for the dof_indices associated with a cell
- - ----------------------------
- - revision 1.40
- - date: 2002/06/11 19:29:22;  author: benkirk;  state: Exp;  lines: +36 -5
- - added code to compute the inverse map for a FE, that is: given a point in physical space, find the point on the reference element that contains that point.
- - ----------------------------
- - revision 1.39
- - date: 2002/06/10 21:05:28;  author: benkirk;  state: Exp;  lines: +6 -1
- - can now mix approximation order for variables in a system.  There is a strange bug that causes the send_list size to be larger than the total number of dofs for the tet meshes on 2 procs
- - ----------------------------
- - revision 1.38
- - date: 2002/06/10 12:03:49;  author: benkirk;  state: Exp;  lines: +7 -1
- - adding FE order specification to SystemData
- - ----------------------------
- - revision 1.37
- - date: 2002/06/07 21:19:07;  author: benkirk;  state: Exp;  lines: +20 -13
- - added order enum.  Separating FE from mesh elements
- - ----------------------------
- - revision 1.36
- - date: 2002/06/03 21:26:10;  author: benkirk;  state: Exp;  lines: +25 -20
- - initial support for Petsc submatrices
- - ----------------------------
- - revision 1.35
- - date: 2002/05/31 15:59:28;  author: benkirk;  state: Exp;  lines: +2 -42
- - added TODO make target.  Allow user to optionally control DOF coupling for matrix allocation
- - ----------------------------
- - revision 1.34
- - date: 2002/05/31 02:55:31;  author: benkirk;  state: Exp;  lines: +41 -32
- - petsc_matrix can now add non-square element matrices to off-diagonal locations.  fe can report dof_indices for individual components
- - ----------------------------
- - revision 1.33
- - date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +20 -30
- - added equation system support
- - ----------------------------
- - revision 1.32
- - date: 2002/05/02 13:41:47;  author: benkirk;  state: Exp;  lines: +11 -19
- - CC fix.
- - ----------------------------
- - revision 1.31
- - date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +10 -10
- - changed cout to std::cout
- - ----------------------------
- - revision 1.30
- - date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +62 -70
- - eliminated templates from everything except Petsc Interface
- - ----------------------------
- - revision 1.29
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +22 -19
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.28
- - date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +9 -9
- - changes for compatibility with icc v6.0
- - ----------------------------
- - revision 1.27
- - date: 2002/04/18 19:24:24;  author: benkirk;  state: Exp;  lines: +3 -1
- - documentation
- - ----------------------------
- - revision 1.26
- - date: 2002/04/18 16:06:38;  author: benkirk;  state: Exp;  lines: +50 -32
- - documentation
- - ----------------------------
- - revision 1.25
- - date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;  lines: +64 -77
- - many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
- - ----------------------------
- - revision 1.24
- - date: 2002/04/15 21:53:14;  author: benkirk;  state: Exp;  lines: +22 -1
- - reworking boundary integration, not quite there yet
- - ----------------------------
- - revision 1.23
- - date: 2002/04/15 12:21:17;  author: benkirk;  state: Exp;  lines: +167 -61
- - reworking the internals of FE*
- - ----------------------------
- - revision 1.22
- - date: 2002/04/11 14:28:54;  author: benkirk;  state: Exp;  lines: +6 -6
- - BoundaryMesh now works.  Moved DofMap into MeshBase, so the user need not concern herself with that any more.
- - ----------------------------
- - revision 1.21
- - date: 2002/04/11 04:57:34;  author: benkirk;  state: Exp;  lines: +46 -143
- - mucho changes.  better just ask Ben... Im a little too tired to write a useful comment now.  Suffice to say boundary conditions basically work, can have a 2D mesh in 3D space, etc...
- - ----------------------------
- - revision 1.20
- - date: 2002/04/10 21:39:09;  author: benkirk;  state: Exp;  lines: +119 -109
- - working on boundary integral support
- - ----------------------------
- - revision 1.19
- - date: 2002/04/10 18:13:39;  author: benkirk;  state: Exp;  lines: +40 -40
- - working on boundary support
- - ----------------------------
- - revision 1.18
- - date: 2002/04/03 23:25:33;  author: benkirk;  state: Exp;  lines: +20 -12
- - removerd order from fe
- - ----------------------------
- - revision 1.17
- - date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +7 -3
- - renamed config.h mesh_config.h and did some cleanup
- - ----------------------------
- - revision 1.16
- - date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +51 -39
- - changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
- - ----------------------------
- - revision 1.15
- - date: 2002/03/21 04:27:32;  author: benkirk;  state: Exp;  lines: +8 -1
- - fixed a bug in petsc_vector that caused a false lock, thus prohibiting future calls to close()
- - ----------------------------
- - revision 1.14
- - date: 2002/03/18 23:27:36;  author: benkirk;  state: Exp;  lines: +12 -1
- - errata
- - ----------------------------
- - revision 1.13
- - date: 2002/03/18 23:20:54;  author: benkirk;  state: Exp;  lines: +14 -11
- - errata
- - ----------------------------
- - revision 1.12
- - date: 2002/03/18 23:13:07;  author: peterson;  state: Exp;  lines: +21 -2
- - Added print_xyx() to fe.h.
- - ----------------------------
- - revision 1.11
- - date: 2002/03/18 21:25:48;  author: peterson;  state: Exp;  lines: +52 -1
- - Added inlined functions print_JxW() print_phi() print_dphi() and print_info() to fe.h
- - ----------------------------
- - revision 1.10
- - date: 2002/03/08 19:45:05;  author: benkirk;  state: Exp;  lines: +7 -4
- - lots of changes
- - ----------------------------
- - revision 1.9
- - date: 2002/03/07 20:52:30;  author: benkirk;  state: Exp;  lines: +11 -7
- - added dof_indices computation
- - ----------------------------
- - revision 1.8
- - date: 2002/03/06 23:13:40;  author: benkirk;  state: Exp;  lines: +72 -3
- - actually starting to work
- - ----------------------------
- - revision 1.7
- - date: 2002/03/05 18:07:09;  author: benkirk;  state: Exp;  lines: +21 -1
- - errata
- - ----------------------------
- - revision 1.6
- - date: 2002/03/04 13:48:09;  author: benkirk;  state: Exp;  lines: +26 -5
- - Remade some make rules and split up the unwieldy fe.C
- - ----------------------------
- - revision 1.5
- - date: 2002/03/02 21:19:54;  author: benkirk;  state: Exp;  lines: +5 -5
- - updates makefile and added some fe shape functions, quadrature rules
- - ----------------------------
- - revision 1.4
- - date: 2002/03/01 01:05:46;  author: benkirk;  state: Exp;  lines: +4 -1
- - added 3D shape function calculation
- - ----------------------------
- - revision 1.3
- - date: 2002/02/28 16:34:51;  author: benkirk;  state: Exp;  lines: +23 -12
- - errata
- - ----------------------------
- - revision 1.2
- - date: 2002/02/28 03:52:05;  author: benkirk;  state: Exp;  lines: +7 -7
- - errata
- - ----------------------------
- - revision 1.1
- - date: 2002/02/28 00:19:42;  author: benkirk;  state: Exp;
- - errata
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/fe_base.h,v
- - Working file: include/fe_base.h
- - head: 1.3
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 3;	selected revisions: 3
- - description:
- - ----------------------------
- - revision 1.3
- - date: 2003/01/24 09:40:35;  author: d.dreyer;  state: Exp;  lines: +2 -2
- - first typos fixed
- - ----------------------------
- - revision 1.2
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +44 -2
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - ----------------------------
- - revision 1.1
- - date: 2003/01/22 22:07:31;  author: d.dreyer;  state: Exp;
- - Changes for inifinite elements: added some virtual members in FEBase; split fe_base.h from fe.h, but did not touch fe/src/fe*.C -- shall i change these, too?; changed normal vector of InfAbcXY::build_side(0) so that they point inwards; minor documentation issue in meshtool. -- All of this seems quite imperative to me for infinite elements. If anybody doesn't like - please feedback
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/fe_interface.h,v
- - Working file: include/fe_interface.h
- - head: 1.10
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 10;	selected revisions: 10
- - description:
- - ----------------------------
- - revision 1.10
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +1 -50
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - ----------------------------
- - revision 1.9
- - date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +2 -2
- - Created separate file for the element type enumeration.
- - ----------------------------
- - revision 1.8
- - date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +24 -11
- - reworked the reference counting to use C++ run-type identification
- - ----------------------------
- - revision 1.7
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +1 -3
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.6
- - date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +5 -11
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +11 -34
- - added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
- - ----------------------------
- - revision 1.4
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +67 -61
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.3
- - date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +3 -3
- - complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
- - ----------------------------
- - revision 1.2
- - date: 2002/12/12 21:24:38;  author: d.dreyer;  state: Exp;  lines: +9 -7
- - corrected return on void.  renice'd --disable-ifem target.
- - ----------------------------
- - revision 1.1
- - date: 2002/12/12 21:00:31;  author: d.dreyer;  state: Exp;
- - Preparations for truly various finite element concepts. Had to decide: either make a _lot_ of FEBase virtual and mess up several switch statements, or introduce the FEInterface class to encapsulate the static member functions of finite element classes (guess what i chose). For good code re-use, i had to move some members in FEBase from private to protected, but did not touch the class in any other way - except for abandoning the virtual shape and shape_deriv. These do not make sense, were never used, and as stand-alone would not allow code re-use.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/fe_type.h,v
- - Working file: include/fe_type.h
- - head: 1.10
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 10;	selected revisions: 10
- - description:
- - ----------------------------
- - revision 1.10
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +21 -22
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - ----------------------------
- - revision 1.9
- - date: 2003/01/16 16:42:28;  author: peterson;  state: Exp;  lines: +3 -29
- - Removing unnecessary includes.  Changing headers which
- - simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
- - ----------------------------
- - revision 1.8
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +22 -6
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/14 14:33:41;  author: d.dreyer;  state: Exp;  lines: +0 -3
- - typo
- - ----------------------------
- - revision 1.6
- - date: 2003/01/14 13:14:05;  author: d.dreyer;  state: Exp;  lines: +34 -43
- - updated FEType to match desired infinite element families
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +3 -4
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.4
- - date: 2003/01/09 19:38:45;  author: benkirk;  state: Exp;  lines: +66 -18
- - documentation.  Fix for template instantiation with Compaq CXX
- - ----------------------------
- - revision 1.3
- - date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +49 -2
- - added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
- - ----------------------------
- - revision 1.2
- - date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +8 -1
- - added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
- - ----------------------------
- - revision 1.1
- - date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/inf_fe.h,v
- - Working file: include/inf_fe.h
- - head: 1.8
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 8;	selected revisions: 8
- - description:
- - ----------------------------
- - revision 1.8
- - date: 2003/01/24 09:40:35;  author: d.dreyer;  state: Exp;  lines: +5 -5
- - first typos fixed
- - ----------------------------
- - revision 1.7
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +765 -139
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - ----------------------------
- - revision 1.6
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +5 -8
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.5
- - date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +8 -8
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.4
- - date: 2002/12/31 15:38:47;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed --enable-mgf-workaround ./configure option
- - ----------------------------
- - revision 1.3
- - date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +36 -16
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.2
- - date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +3 -3
- - complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
- - ----------------------------
- - revision 1.1
- - date: 2002/12/12 21:00:31;  author: d.dreyer;  state: Exp;
- - Preparations for truly various finite element concepts. Had to decide: either make a _lot_ of FEBase virtual and mess up several switch statements, or introduce the FEInterface class to encapsulate the static member functions of finite element classes (guess what i chose). For good code re-use, i had to move some members in FEBase from private to protected, but did not touch the class in any other way - except for abandoning the virtual shape and shape_deriv. These do not make sense, were never used, and as stand-alone would not allow code re-use.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/inf_fe_instantiate_1D.h,v
- - Working file: include/inf_fe_instantiate_1D.h
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/inf_fe_instantiate_2D.h,v
- - Working file: include/inf_fe_instantiate_2D.h
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/inf_fe_instantiate_3D.h,v
- - Working file: include/inf_fe_instantiate_3D.h
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/inf_fe_macro.h,v
- - Working file: include/inf_fe_macro.h
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/mesh.h,v
- - Working file: include/mesh.h
- - head: 1.86
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - 	start: 1.1.1.1
- - 	mesh: 1.1.1
- - keyword substitution: kv
- - total revisions: 87;	selected revisions: 87
- - description:
- - ----------------------------
- - revision 1.86
- - date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +1 -7
- - Removing more unnecessary includes.
- - ----------------------------
- - revision 1.85
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -3
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.84
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +15 -15
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.83
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +5 -4
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.82
- - date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +42 -22
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.81
- - date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +6 -6
- - complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
- - ----------------------------
- - revision 1.80
- - date: 2002/12/18 18:50:50;  author: d.dreyer;  state: Exp;  lines: +25 -10
- - shifted all istream/ostream methods to protected since these aren't used from outside Mesh/MeshBase; this enables smooth transition to supporting complex numbers; updated documentation
- - ----------------------------
- - revision 1.79
- - date: 2002/11/22 01:11:13;  author: d.dreyer;  state: Exp;  lines: +2 -2
- - Tammo's efforts: I-deas import seems to work. However, some problems with gcc 2.95.3, while gcc 3.2 works fine. Still need to include tet's.
- - ----------------------------
- - revision 1.78
- - date: 2002/11/12 23:09:33;  author: benkirk;  state: Exp;  lines: +15 -1
- - now set bc_ids when creating a cube
- - ----------------------------
- - revision 1.77
- - date: 2002/11/11 14:10:24;  author: benkirk;  state: Exp;  lines: +12 -6
- - added preliminary support for creating spherical meshes internally
- - ----------------------------
- - revision 1.76
- - date: 2002/10/14 20:07:15;  author: benkirk;  state: Exp;  lines: +7 -1
- - merged Ideas UNV support from Daniel Dreyer et. al.
- - ----------------------------
- - revision 1.75
- - date: 2002/09/24 20:05:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - the element class now has a static pointer to a constant Mesh named mesh.  This pointer can be used instead of passing the mesh to methods that need vertex locations.  For sanity assert it is not null before you use it!
- - ----------------------------
- - revision 1.74
- - date: 2002/09/17 03:57:19;  author: benkirk;  state: Exp;  lines: +2 -2
- - added Edge, Tri, Quad, Tet, and Hex base classes for specific instances of those types of elements.  still need ones for Prism and Pyramid
- - ----------------------------
- - revision 1.73
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.72
- - date: 2002/06/06 20:57:30;  author: benkirk;  state: Exp;  lines: +3 -1
- - added assemble() function in system_data which is capable of assembling the system and vector
- - ----------------------------
- - revision 1.71
- - date: 2002/05/30 18:06:39;  author: benkirk;  state: Exp;  lines: +1 -2
- - removed perf_log from MeshBase.  the user should log events in the applications code.
- - ----------------------------
- - revision 1.70
- - date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +3 -2
- - added equation system support
- - ----------------------------
- - revision 1.69
- - date: 2002/05/22 19:23:57;  author: benkirk;  state: Exp;  lines: +4 -1
- - added distort() to MeshBase that allows a mesh to be randomly distorted
- - ----------------------------
- - revision 1.68
- - date: 2002/05/17 19:10:22;  author: benkirk;  state: Exp;  lines: +3 -2
- - added pause and restart to perf_log.  put it in most of the major algorithms
- - ----------------------------
- - revision 1.67
- - date: 2002/05/17 16:45:55;  author: benkirk;  state: Exp;  lines: +6 -1
- - added performance logging utility
- - ----------------------------
- - revision 1.66
- - date: 2002/05/16 20:25:54;  author: benkirk;  state: Exp;  lines: +23 -5
- - moved testmesh to meshtool.  made it more user-friendly so I could give it to Owen since he is now working with cubit meshes
- - ----------------------------
- - revision 1.65
- - date: 2002/05/16 00:06:21;  author: benkirk;  state: Exp;  lines: +3 -5
- - preliminary unrefinement support
- - ----------------------------
- - revision 1.64
- - date: 2002/05/14 23:05:57;  author: benkirk;  state: Exp;  lines: +21 -1
- - added new_nodes and new_element database for mesh_refinement
- - ----------------------------
- - revision 1.63
- - date: 2002/05/13 18:47:35;  author: benkirk;  state: Exp;  lines: +13 -1
- - Added DIVA output support
- - ----------------------------
- - revision 1.62
- - date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +10 -1
- - allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
- - ----------------------------
- - revision 1.61
- - date: 2002/05/10 21:05:19;  author: benkirk;  state: Exp;  lines: +14 -1
- - added hex20 refinement rules.  completely rewrote main.cc to be much more flexible
- - ----------------------------
- - revision 1.60
- - date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +2 -2
- - refinement (at least uniform) now works
- - ----------------------------
- - revision 1.59
- - date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +5 -428
- - eliminated templates from everything except Petsc Interface
- - ----------------------------
- - revision 1.58
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +19 -101
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.57
- - date: 2002/04/30 18:09:01;  author: peterson;  state: Exp;  lines: +1 -12
- - Removed unneeded filename stuff, pared down the size of objects.
- - ----------------------------
- - revision 1.56
- - date: 2002/04/29 21:50:52;  author: benkirk;  state: Exp;  lines: +58 -13
- - initial support for AMR.  builds fine, old functionality still retained.  much more to do.
- - ----------------------------
- - revision 1.55
- - date: 2002/04/26 21:49:02;  author: peterson;  state: Exp;  lines: +2 -2
- - Added pyramid quadrature rule.
- - ----------------------------
- - revision 1.54
- - date: 2002/04/25 21:50:54;  author: benkirk;  state: Exp;  lines: +2 -1
- - added includes to fix compile under gcc2.*
- - ----------------------------
- - revision 1.53
- - date: 2002/04/23 13:12:49;  author: benkirk;  state: Exp;  lines: +3 -3
- - added face quadrature rules for pyramids.  mesh_metis_support now can compute the graph and call the graph partitioners
- - ----------------------------
- - revision 1.52
- - date: 2002/04/18 19:24:24;  author: benkirk;  state: Exp;  lines: +32 -116
- - documentation
- - ----------------------------
- - revision 1.51
- - date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;  lines: +69 -137
- - many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
- - ----------------------------
- - revision 1.50
- - date: 2002/04/16 22:57:03;  author: peterson;  state: Exp;  lines: +6 -1
- - Found bug in XDR output, still not ready for prime time.
- - ----------------------------
- - revision 1.49
- - date: 2002/04/12 21:48:33;  author: benkirk;  state: Exp;  lines: +8 -1
- - metic works for linear elements, I know what to do to fix it for quadratics, but it isnt there yet
- - ----------------------------
- - revision 1.48
- - date: 2002/04/12 16:04:11;  author: benkirk;  state: Exp;  lines: +13 -1
- - errata
- - ----------------------------
- - revision 1.47
- - date: 2002/04/12 06:53:20;  author: peterson;  state: Exp;  lines: +7 -1
- - Added initial support for the augmented mesh headers in the xdr format.
- - ----------------------------
- - revision 1.46
- - date: 2002/04/12 03:32:36;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed empty numBCs in the case of writing xdr files
- - ----------------------------
- - revision 1.45
- - date: 2002/04/11 17:37:45;  author: benkirk;  state: Exp;  lines: +4 -2
- - dofs_per_vertex is 0 until distribute_dofs is called, then is either user-specified or 1
- - ----------------------------
- - revision 1.44
- - date: 2002/04/11 16:09:28;  author: benkirk;  state: Exp;  lines: +1 -8
- - fixed exodusII side maps.  eliminated mesh rebuild_maps() function, moved into find_neighbors()
- - ----------------------------
- - revision 1.43
- - date: 2002/04/11 14:28:54;  author: benkirk;  state: Exp;  lines: +17 -15
- - BoundaryMesh now works.  Moved DofMap into MeshBase, so the user need not concern herself with that any more.
- - ----------------------------
- - revision 1.42
- - date: 2002/04/11 04:57:34;  author: benkirk;  state: Exp;  lines: +166 -403
- - mucho changes.  better just ask Ben... Im a little too tired to write a useful comment now.  Suffice to say boundary conditions basically work, can have a 2D mesh in 3D space, etc...
- - ----------------------------
- - revision 1.41
- - date: 2002/04/10 18:13:39;  author: benkirk;  state: Exp;  lines: +7 -2
- - working on boundary support
- - ----------------------------
- - revision 1.40
- - date: 2002/04/10 01:53:21;  author: benkirk;  state: Exp;  lines: +2 -1
- - working on boundary output.  cleaned up some code in shape_function calculations. probably going to change the way side boundary conditions are stored
- - ----------------------------
- - revision 1.39
- - date: 2002/04/09 19:27:53;  author: benkirk;  state: Exp;  lines: +56 -1
- - added n_elem_of_type(ElemType type)
- - ----------------------------
- - revision 1.38
- - date: 2002/04/09 18:56:41;  author: benkirk;  state: Exp;  lines: +24 -1
- - added clear() function to mesh that frees all data
- - ----------------------------
- - revision 1.37
- - date: 2002/04/09 01:01:45;  author: peterson;  state: Exp;  lines: +31 -14
- - Now reads meshes in XDR format created by MGF
- - and created by itself.  Gets the same answer
- - both ways!  Still a little buggy though, I wouldn't
- - use the XDR support for anything important yet.
- - One thing that does not work: There seems to be
- - a problem with opening AND closing the SAME
- - file in a single program ...
- - ----------------------------
- - revision 1.36
- - date: 2002/04/08 13:01:38;  author: benkirk;  state: Exp;  lines: +56 -5
- - more on sparsity structure.  changed n_tecplot_* to n_sub_* to be more generic.  added total_weight to mesh.h for partitioning hybrid meshes.
- - ----------------------------
- - revision 1.35
- - date: 2002/04/06 14:25:38;  author: benkirk;  state: Exp;  lines: +21 -11
- - added an optional flag to write_gmv* that allows the partitioning information to be written.  Useful for viewing the effectiveness of various partitioning schemes
- - ----------------------------
- - revision 1.34
- - date: 2002/04/05 22:48:13;  author: peterson;  state: Exp;  lines: +15 -1
- - Initial merge of XDR read/write capabilities.
- - ----------------------------
- - revision 1.33
- - date: 2002/04/05 22:38:18;  author: benkirk;  state: Exp;  lines: +113 -1
- - added a lot of documentation and re-ordered the quadratic 1D basis functions
- - ----------------------------
- - revision 1.32
- - date: 2002/04/04 22:02:09;  author: benkirk;  state: Exp;  lines: +2 -2
- - documentation
- - ----------------------------
- - revision 1.31
- - date: 2002/04/04 16:28:47;  author: benkirk;  state: Exp;  lines: +163 -100
- - removed the separate data & mesh output functions for GMV and Tecplot, documented mesh.h
- - ----------------------------
- - revision 1.30
- - date: 2002/04/04 05:24:21;  author: benkirk;  state: Exp;  lines: +89 -12
- - added initial hooks for kdoc
- - ----------------------------
- - revision 1.29
- - date: 2002/04/03 23:19:21;  author: peterson;  state: Exp;  lines: +39 -1
- - working on GMV binary support
- - ----------------------------
- - revision 1.28
- - date: 2002/04/03 02:26:27;  author: benkirk;  state: Exp;  lines: +78 -32
- - added GMV variable output support
- - ----------------------------
- - revision 1.27
- - date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +7 -6
- - renamed config.h mesh_config.h and did some cleanup
- - ----------------------------
- - revision 1.26
- - date: 2002/04/02 06:27:25;  author: peterson;  state: Exp;  lines: +4 -2
- - Initial merge of gmv support.  This includes both mesh_gmv_support.C and mesh_gmv_support.h.  Nothing really works yet except possibly ReadGMV::open.  I have also added a file called acronyms.txt which contains possible names for the code, mainly as a joke. The pre-processor variable HAVE_GMV is configured for and is disabled by default.  It can be enabled in the usual -- manner.
- - ----------------------------
- - revision 1.25
- - date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +8 -8
- - changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
- - ----------------------------
- - revision 1.24
- - date: 2002/03/29 15:51:49;  author: peterson;  state: Exp;  lines: +15 -1
- - initial merge of exodus support, changed configure for lsfcurves, lpapi, lperfctr
- - ----------------------------
- - revision 1.23
- - date: 2002/03/28 22:52:32;  author: benkirk;  state: Exp;  lines: +47 -2
- - added tri6, quad9, hex27.  will add prism17 and tet12 later.  I still need to make edge a base/derived class with edge2 and edge3 as derived classes
- - ----------------------------
- - revision 1.22
- - date: 2002/03/27 22:38:45;  author: peterson;  state: Exp;  lines: +15 -1
- - Added mesh.read_matlab(), PetscVector.add_petsc_vector(),PetscVector.print(), and the beginnings of PetscMatrix.print()
- - ----------------------------
- - revision 1.21
- - date: 2002/03/21 15:18:27;  author: benkirk;  state: Exp;  lines: +7 -1
- - added tecplot binary support
- - ----------------------------
- - revision 1.20
- - date: 2002/03/08 19:45:05;  author: benkirk;  state: Exp;  lines: +19 -3
- - lots of changes
- - ----------------------------
- - revision 1.19
- - date: 2002/03/07 16:32:13;  author: benkirk;  state: Exp;  lines: +9 -94
- - works in parallel
- - ----------------------------
- - revision 1.18
- - date: 2002/03/06 23:13:40;  author: benkirk;  state: Exp;  lines: +99 -2
- - actually starting to work
- - ----------------------------
- - revision 1.17
- - date: 2002/03/05 20:08:05;  author: benkirk;  state: Exp;  lines: +7 -1
- - errata
- - ----------------------------
- - revision 1.16
- - date: 2002/03/05 18:07:09;  author: benkirk;  state: Exp;  lines: +1 -10
- - errata
- - ----------------------------
- - revision 1.15
- - date: 2002/03/05 16:57:43;  author: benkirk;  state: Exp;  lines: +4 -4
- - errata
- - ----------------------------
- - revision 1.14
- - date: 2002/03/04 22:43:23;  author: benkirk;  state: Exp;  lines: +4 -1
- - added partitioning
- - ----------------------------
- - revision 1.13
- - date: 2002/03/04 15:17:38;  author: benkirk;  state: Exp;  lines: +3 -3
- - errata
- - ----------------------------
- - revision 1.12
- - date: 2002/03/03 00:31:36;  author: benkirk;  state: Exp;  lines: +4 -2
- - updates makefile and added some fe shape functions, quadrature rules
- - ----------------------------
- - revision 1.11
- - date: 2002/02/28 16:34:51;  author: benkirk;  state: Exp;  lines: +8 -1
- - errata
- - ----------------------------
- - revision 1.10
- - date: 2002/02/28 03:52:05;  author: benkirk;  state: Exp;  lines: +19 -5
- - errata
- - ----------------------------
- - revision 1.9
- - date: 2002/02/27 23:22:21;  author: benkirk;  state: Exp;  lines: +8 -8
- - errata
- - ----------------------------
- - revision 1.8
- - date: 2002/02/26 15:53:40;  author: benkirk;  state: Exp;  lines: +10 -1
- - Added pointers to neighbors within faces and cells, can now write UCD files
- - ----------------------------
- - revision 1.7
- - date: 2002/02/25 14:36:03;  author: benkirk;  state: Exp;  lines: +94 -1
- - errata
- - ----------------------------
- - revision 1.6
- - date: 2002/02/25 05:23:04;  author: benkirk;  state: Exp;  lines: +72 -6
- - errata
- - ----------------------------
- - revision 1.5
- - date: 2002/02/25 02:52:04;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.4
- - date: 2002/02/24 16:30:36;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.3
- - date: 2002/02/24 16:29:51;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.2
- - date: 2002/02/24 16:27:47;  author: benkirk;  state: Exp;  lines: +62 -4
- - errata
- - ----------------------------
- - revision 1.1
- - date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;
- - branches:  1.1.1;
- - Initial revision
- - ----------------------------
- - revision 1.1.1.1
- - date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;  lines: +0 -0
- - init
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/mesh_base.h,v
- - Working file: include/mesh_base.h
- - head: 1.49
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 49;	selected revisions: 49
- - description:
- - ----------------------------
- - revision 1.49
- - date: 2003/01/16 20:43:46;  author: peterson;  state: Exp;  lines: +2 -3
- - Removing more unnecessary #includes.
- - ----------------------------
- - revision 1.48
- - date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +3 -3
- - Created separate file for the element type enumeration.
- - ----------------------------
- - revision 1.47
- - date: 2003/01/16 16:42:28;  author: peterson;  state: Exp;  lines: +3 -3
- - Removing unnecessary includes.  Changing headers which
- - simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
- - ----------------------------
- - revision 1.46
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +808 -813
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.45
- - date: 2003/01/15 23:20:40;  author: hendrik;  state: Exp;  lines: +813 -782
- - added MeshBase::add_inf_elem() method
- - ----------------------------
- - revision 1.44
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +21 -21
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.43
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +95 -18
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.42
- - date: 2003/01/09 19:38:45;  author: benkirk;  state: Exp;  lines: +2 -16
- - documentation.  Fix for template instantiation with Compaq CXX
- - ----------------------------
- - revision 1.41
- - date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +19 -3
- - added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
- - ----------------------------
- - revision 1.40
- - date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +70 -72
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.39
- - date: 2002/12/22 22:36:25;  author: benkirk;  state: Exp;  lines: +22 -22
- - made QBase pure virtual.  prefixing private variables with _ to distinguish from local variables.  Will make FEBase pure virtual and have templated classes derived from it for actual families of finite elements
- - ----------------------------
- - revision 1.38
- - date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +38 -8
- - complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
- - ----------------------------
- - revision 1.37
- - date: 2002/12/18 18:50:50;  author: d.dreyer;  state: Exp;  lines: +131 -78
- - shifted all istream/ostream methods to protected since these aren't used from outside Mesh/MeshBase; this enables smooth transition to supporting complex numbers; updated documentation
- - ----------------------------
- - revision 1.36
- - date: 2002/12/17 16:47:08;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed cvs2html to get the names right, fixed typeos in the documentation
- - ----------------------------
- - revision 1.35
- - date: 2002/11/12 23:09:33;  author: benkirk;  state: Exp;  lines: +1 -15
- - now set bc_ids when creating a cube
- - ----------------------------
- - revision 1.34
- - date: 2002/11/11 14:10:24;  author: benkirk;  state: Exp;  lines: +13 -1
- - added preliminary support for creating spherical meshes internally
- - ----------------------------
- - revision 1.33
- - date: 2002/11/06 22:44:07;  author: benkirk;  state: Exp;  lines: +2 -2
- - adding hierarchic basis functions
- - ----------------------------
- - revision 1.32
- - date: 2002/11/04 23:05:12;  author: benkirk;  state: Exp;  lines: +4 -2
- - can generate quad9 and hex27 bricks internally.  added code in DofMap to only allocate space for element dofs if any elements _have_ dofs
- - ----------------------------
- - revision 1.31
- - date: 2002/10/17 22:04:04;  author: peterson;  state: Exp;  lines: +7 -3
- - Initial support for themes added to gui.
- - ----------------------------
- - revision 1.30
- - date: 2002/10/07 02:48:10;  author: benkirk;  state: Exp;  lines: +8 -1
- - added the get_log member function.  Allows the logging stream to be captured directly and displayed in a window.
- - ----------------------------
- - revision 1.29
- - date: 2002/10/04 17:03:12;  author: benkirk;  state: Exp;  lines: +7 -2
- - the mesh now can log performance.  configure with --enable-perflog.  also, amr is enabled by default
- - ----------------------------
- - revision 1.28
- - date: 2002/10/03 19:14:16;  author: benkirk;  state: Exp;  lines: +7 -1
- - added uniform refinement to the alter menu.  created get_info function in mesh base class that returns info about the mesh as a string.  this contains the same information printed by print_info
- - ----------------------------
- - revision 1.27
- - date: 2002/09/27 16:03:07;  author: benkirk;  state: Exp;  lines: +19 -1
- - split the mesh.C file into mesh.C and mesh_base.C because it was getting _way_ too big.
- - ----------------------------
- - revision 1.26
- - date: 2002/09/25 17:53:41;  author: benkirk;  state: Exp;  lines: +16 -2
- - added initial surface support.  I have already implemented a plane and a sphere, more to follow.  added support for bounding-box computation on a subdomain-by-subdomain and processor-by-processor basis.
- - ----------------------------
- - revision 1.25
- - date: 2002/09/24 20:05:07;  author: benkirk;  state: Exp;  lines: +29 -1
- - the element class now has a static pointer to a constant Mesh named mesh.  This pointer can be used instead of passing the mesh to methods that need vertex locations.  For sanity assert it is not null before you use it!
- - ----------------------------
- - revision 1.24
- - date: 2002/08/15 21:24:05;  author: benkirk;  state: Exp;  lines: +5 -5
- - made the partition functions virtual for GUI reasons.  added a colormap class
- - ----------------------------
- - revision 1.23
- - date: 2002/08/15 15:49:52;  author: benkirk;  state: Exp;  lines: +13 -1
- - Elements now have subdomain IDs and processor IDs.  You can get to an elements parent even if AMR is disabled.  This is useful for derived elements...  If you build a side of an element the resulting side knows what element it came from.
- - ----------------------------
- - revision 1.22
- - date: 2002/08/12 20:02:10;  author: benkirk;  state: Exp;  lines: +10 -1
- - added bounding box computation
- - ----------------------------
- - revision 1.21
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.20
- - date: 2002/07/29 19:17:33;  author: benkirk;  state: Exp;  lines: +1 -11
- - added absolute pathnames to shared libraries to avoid LD_LIBRARY_PATH problems
- - ----------------------------
- - revision 1.19
- - date: 2002/07/28 21:14:30;  author: benkirk;  state: Exp;  lines: +14 -4
- - reworking internals of refinement
- - ----------------------------
- - revision 1.18
- - date: 2002/06/21 01:55:02;  author: benkirk;  state: Exp;  lines: +23 -1
- - added rotate, translate, and scale.  Need to finish rotate
- - ----------------------------
- - revision 1.17
- - date: 2002/06/06 20:57:30;  author: benkirk;  state: Exp;  lines: +2 -2
- - added assemble() function in system_data which is capable of assembling the system and vector
- - ----------------------------
- - revision 1.16
- - date: 2002/06/06 18:43:42;  author: benkirk;  state: Exp;  lines: +18 -1
- - added all_tri() function that converts a 2D mesh so that is composed completely of triangles
- - ----------------------------
- - revision 1.15
- - date: 2002/05/30 18:06:39;  author: benkirk;  state: Exp;  lines: +3 -9
- - removed perf_log from MeshBase.  the user should log events in the applications code.
- - ----------------------------
- - revision 1.14
- - date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +38 -9
- - added equation system support
- - ----------------------------
- - revision 1.13
- - date: 2002/05/22 19:23:57;  author: benkirk;  state: Exp;  lines: +11 -1
- - added distort() to MeshBase that allows a mesh to be randomly distorted
- - ----------------------------
- - revision 1.12
- - date: 2002/05/17 19:10:22;  author: benkirk;  state: Exp;  lines: +5 -2
- - added pause and restart to perf_log.  put it in most of the major algorithms
- - ----------------------------
- - revision 1.11
- - date: 2002/05/17 16:45:55;  author: benkirk;  state: Exp;  lines: +15 -1
- - added performance logging utility
- - ----------------------------
- - revision 1.10
- - date: 2002/05/16 20:25:54;  author: benkirk;  state: Exp;  lines: +2 -2
- - moved testmesh to meshtool.  made it more user-friendly so I could give it to Owen since he is now working with cubit meshes
- - ----------------------------
- - revision 1.9
- - date: 2002/05/14 23:05:57;  author: benkirk;  state: Exp;  lines: +11 -4
- - added new_nodes and new_element database for mesh_refinement
- - ----------------------------
- - revision 1.8
- - date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +1 -10
- - allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
- - ----------------------------
- - revision 1.7
- - date: 2002/05/10 21:05:19;  author: benkirk;  state: Exp;  lines: +18 -5
- - added hex20 refinement rules.  completely rewrote main.cc to be much more flexible
- - ----------------------------
- - revision 1.6
- - date: 2002/05/08 14:09:18;  author: benkirk;  state: Exp;  lines: +5 -46
- - put refinement support in its own class, split the element refinement implementations into separate files to aviod clutter
- - ----------------------------
- - revision 1.5
- - date: 2002/05/07 22:02:57;  author: benkirk;  state: Exp;  lines: +7 -2
- - refinement now works for all 2D elements, the Tet, and the Hex
- - ----------------------------
- - revision 1.4
- - date: 2002/05/06 21:15:22;  author: benkirk;  state: Exp;  lines: +9 -2
- - refinement works for all 2D element types
- - ----------------------------
- - revision 1.3
- - date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +12 -4
- - refinement (at least uniform) now works
- - ----------------------------
- - revision 1.2
- - date: 2002/05/02 03:18:18;  author: benkirk;  state: Exp;  lines: +2 -2
- - added point.h to mesh_base.h
- - ----------------------------
- - revision 1.1
- - date: 2002/05/01 22:24:54;  author: benkirk;  state: Exp;
- - forgot to add some files
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/mesh_common.h,v
- - Working file: include/mesh_common.h
- - head: 1.24
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 24;	selected revisions: 24
- - description:
- - ----------------------------
- - revision 1.24
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +10 -4
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.23
- - date: 2003/01/08 17:13:03;  author: benkirk;  state: Exp;  lines: +4 -7
- - forget that...
- - ----------------------------
- - revision 1.22
- - date: 2003/01/08 17:01:58;  author: benkirk;  state: Exp;  lines: +6 -3
- - fix for IBM xlC
- - ----------------------------
- - revision 1.21
- - date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +26 -1
- - complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
- - ----------------------------
- - revision 1.20
- - date: 2002/10/27 14:39:44;  author: benkirk;  state: Exp;  lines: +2 -1
- - portability fixes
- - ----------------------------
- - revision 1.19
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.18
- - date: 2002/07/28 21:14:30;  author: benkirk;  state: Exp;  lines: +4 -3
- - reworking internals of refinement
- - ----------------------------
- - revision 1.17
- - date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +7 -5
- - refinement (at least uniform) now works
- - ----------------------------
- - revision 1.16
- - date: 2002/05/02 15:36:49;  author: benkirk;  state: Exp;  lines: +2 -2
- - cxx errata
- - ----------------------------
- - revision 1.15
- - date: 2002/05/02 15:29:21;  author: benkirk;  state: Exp;  lines: +2 -2
- - added configure rules to support muptiple compilers
- - ----------------------------
- - revision 1.14
- - date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +2 -2
- - changed cout to std::cout
- - ----------------------------
- - revision 1.13
- - date: 2002/05/02 02:52:20;  author: benkirk;  state: Exp;  lines: +2 -2
- - changed iostream.h to iostream in mesh_common.h
- - ----------------------------
- - revision 1.12
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +9 -1
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.11
- - date: 2002/04/30 18:09:01;  author: peterson;  state: Exp;  lines: +1 -1
- - Removed unneeded filename stuff, pared down the size of objects.
- - ----------------------------
- - revision 1.10
- - date: 2002/04/30 16:19:57;  author: benkirk;  state: Exp;  lines: +5 -5
- -  hooks to add triangle support, reworked configure to only substitute paths if they are correctly located
- - ----------------------------
- - revision 1.9
- - date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +1 -1
- - changes for compatibility with icc v6.0
- - ----------------------------
- - revision 1.8
- - date: 2002/04/08 13:01:38;  author: benkirk;  state: Exp;  lines: +0 -2
- - more on sparsity structure.  changed n_tecplot_* to n_sub_* to be more generic.  added total_weight to mesh.h for partitioning hybrid meshes.
- - ----------------------------
- - revision 1.7
- - date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +1 -3
- - changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
- - ----------------------------
- - revision 1.6
- - date: 2002/02/27 23:22:21;  author: benkirk;  state: Exp;  lines: +2 -4
- - errata
- - ----------------------------
- - revision 1.5
- - date: 2002/02/25 14:36:03;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.4
- - date: 2002/02/25 05:23:04;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.3
- - date: 2002/02/25 02:52:04;  author: benkirk;  state: Exp;  lines: +4 -23
- - errata
- - ----------------------------
- - revision 1.2
- - date: 2002/02/22 22:36:39;  author: benkirk;  state: Exp;  lines: +6 -0
- - errata
- - ----------------------------
- - revision 1.1
- - date: 2002/02/22 22:34:17;  author: benkirk;  state: Exp;
- - errata
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/mesh_documentation.h,v
- - Working file: include/mesh_documentation.h
- - head: 1.7
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 7;	selected revisions: 7
- - description:
- - ----------------------------
- - revision 1.7
- - date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +1 -1
- - Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
- - ----------------------------
- - revision 1.6
- - date: 2003/01/24 00:04:50;  author: d.dreyer;  state: Exp;  lines: +3 -3
- - just a german umlaut
- - ----------------------------
- - revision 1.5
- - date: 2003/01/22 14:07:52;  author: benkirk;  state: Exp;  lines: +28 -23
- - documentation
- - ----------------------------
- - revision 1.4
- - date: 2003/01/22 02:04:18;  author: benkirk;  state: Exp;  lines: +2 -2
- - documentation
- - ----------------------------
- - revision 1.3
- - date: 2003/01/22 00:40:49;  author: benkirk;  state: Exp;  lines: +55 -15
- - documentation
- - ----------------------------
- - revision 1.2
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -4
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/09 19:38:45;  author: benkirk;  state: Exp;
- - documentation.  Fix for template instantiation with Compaq CXX
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/mesh_exodus_support.h,v
- - Working file: include/mesh_exodus_support.h
- - head: 1.17
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 17;	selected revisions: 17
- - description:
- - ----------------------------
- - revision 1.17
- - date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +35 -1
- - Added documentation.
- - ----------------------------
- - revision 1.16
- - date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +91 -54
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.15
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +21 -0
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.14
- - date: 2002/07/28 21:14:30;  author: benkirk;  state: Exp;  lines: +2 -0
- - reworking internals of refinement
- - ----------------------------
- - revision 1.13
- - date: 2002/05/17 19:10:22;  author: benkirk;  state: Exp;  lines: +0 -40
- - added pause and restart to perf_log.  put it in most of the major algorithms
- - ----------------------------
- - revision 1.12
- - date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +2 -0
- - refinement (at least uniform) now works
- - ----------------------------
- - revision 1.11
- - date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +3 -3
- - changed cout to std::cout
- - ----------------------------
- - revision 1.10
- - date: 2002/04/24 21:32:55;  author: benkirk;  state: Exp;  lines: +11 -1
- - working on tet10 basis functions
- - ----------------------------
- - revision 1.9
- - date: 2002/04/23 16:34:00;  author: benkirk;  state: Exp;  lines: +19 -0
- - added initial support for quad8 and hex20.  no shape functions yet
- - ----------------------------
- - revision 1.8
- - date: 2002/04/11 16:09:28;  author: benkirk;  state: Exp;  lines: +4 -9
- - fixed exodusII side maps.  eliminated mesh rebuild_maps() function, moved into find_neighbors()
- - ----------------------------
- - revision 1.7
- - date: 2002/04/10 18:13:39;  author: benkirk;  state: Exp;  lines: +4 -4
- - working on boundary support
- - ----------------------------
- - revision 1.6
- - date: 2002/04/10 01:53:21;  author: benkirk;  state: Exp;  lines: +1 -1
- - working on boundary output.  cleaned up some code in shape_function calculations. probably going to change the way side boundary conditions are stored
- - ----------------------------
- - revision 1.5
- - date: 2002/04/09 21:13:20;  author: peterson;  state: Exp;  lines: +59 -6
- - working on XDR support, boundary support in exodusII
- - ----------------------------
- - revision 1.4
- - date: 2002/04/05 06:51:15;  author: peterson;  state: Exp;  lines: +22 -20
- - Added configure check for rpc/rpc.h, the header file responsible for including xdr support.
- - ----------------------------
- - revision 1.3
- - date: 2002/04/05 03:21:44;  author: benkirk;  state: Exp;  lines: +9 -3
- - cleaned up ./configure some.  Reversed-engineered the Tri6 connectivity.  Documented some.  Added hooks for n_nz & n_oz in dof_map
- - ----------------------------
- - revision 1.2
- - date: 2002/04/04 18:48:48;  author: peterson;  state: Exp;  lines: +433 -134
- - Commented exodus support, added new make dependency.
- - ----------------------------
- - revision 1.1
- - date: 2002/04/04 06:12:54;  author: peterson;  state: Exp;
- - Split exodus support into a .C and a .h file. Made main.cc comply with new FE constructor.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/mesh_refinement.h,v
- - Working file: include/mesh_refinement.h
- - head: 1.14
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 14;	selected revisions: 14
- - description:
- - ----------------------------
- - revision 1.14
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -5
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.13
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +8 -8
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.12
- - date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +8 -8
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.11
- - date: 2002/12/12 21:00:31;  author: d.dreyer;  state: Exp;  lines: +2 -2
- - Preparations for truly various finite element concepts. Had to decide: either make a _lot_ of FEBase virtual and mess up several switch statements, or introduce the FEInterface class to encapsulate the static member functions of finite element classes (guess what i chose). For good code re-use, i had to move some members in FEBase from private to protected, but did not touch the class in any other way - except for abandoning the virtual shape and shape_deriv. These do not make sense, were never used, and as stand-alone would not allow code re-use.
- - ----------------------------
- - revision 1.10
- - date: 2002/10/11 20:56:15;  author: benkirk;  state: Exp;  lines: +4 -1
- - The FEBase class now has a static pointer to the mesh rather than a reference passed via the constructor.  DofMap can _almost_ constrain degrees of freedom properly
- - ----------------------------
- - revision 1.9
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.8
- - date: 2002/07/28 21:14:30;  author: benkirk;  state: Exp;  lines: +3 -11
- - reworking internals of refinement
- - ----------------------------
- - revision 1.7
- - date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +4 -4
- - added equation system support
- - ----------------------------
- - revision 1.6
- - date: 2002/05/16 00:06:21;  author: benkirk;  state: Exp;  lines: +1 -9
- - preliminary unrefinement support
- - ----------------------------
- - revision 1.5
- - date: 2002/05/14 23:05:57;  author: benkirk;  state: Exp;  lines: +44 -7
- - added new_nodes and new_element database for mesh_refinement
- - ----------------------------
- - revision 1.4
- - date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +4 -4
- - allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
- - ----------------------------
- - revision 1.3
- - date: 2002/05/10 21:05:19;  author: benkirk;  state: Exp;  lines: +5 -2
- - added hex20 refinement rules.  completely rewrote main.cc to be much more flexible
- - ----------------------------
- - revision 1.2
- - date: 2002/05/10 03:06:44;  author: benkirk;  state: Exp;  lines: +15 -1
- - redid cell refinement support
- - ----------------------------
- - revision 1.1
- - date: 2002/05/08 14:09:18;  author: benkirk;  state: Exp;
- - put refinement support in its own class, split the element refinement implementations into separate files to aviod clutter
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/mesh_unv_support.h,v
- - Working file: include/mesh_unv_support.h
- - head: 1.9
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 9;	selected revisions: 9
- - description:
- - ----------------------------
- - revision 1.9
- - date: 2003/01/21 15:41:58;  author: steffen;  state: Exp;  lines: +16 -6
- - extended UNV support to import analysis datasets (used for boundary conditions)
- - ----------------------------
- - revision 1.8
- - date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +39 -13
- - Added documentation.
- - ----------------------------
- - revision 1.7
- - date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +4 -4
- - More unnecessary includes.
- - ----------------------------
- - revision 1.6
- - date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +1 -5
- - Removing more unnecessary includes.
- - ----------------------------
- - revision 1.5
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +7 -7
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.4
- - date: 2002/12/29 13:27:23;  author: d.dreyer;  state: Exp;  lines: +12 -22
- - fixed UNV import for gcc 2.95.3; forsook the std::stringstream mem_file to avoid overly compiler dependencies. library now builds successfully both dbg and opt with gcc 2.95.3 and 3.2.
- - ----------------------------
- - revision 1.3
- - date: 2002/12/17 13:10:55;  author: tammo;  state: Exp;  lines: +12 -2
- - Added workaround for bug in gcc2.95.3
- - ----------------------------
- - revision 1.2
- - date: 2002/11/22 01:11:13;  author: d.dreyer;  state: Exp;  lines: +42 -30
- - Tammo's efforts: I-deas import seems to work. However, some problems with gcc 2.95.3, while gcc 3.2 works fine. Still need to include tet's.
- - ----------------------------
- - revision 1.1
- - date: 2002/10/14 20:07:15;  author: benkirk;  state: Exp;
- - merged Ideas UNV support from Daniel Dreyer et. al.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/mesh_xdr_support.h,v
- - Working file: include/mesh_xdr_support.h
- - head: 1.15
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 15;	selected revisions: 15
- - description:
- - ----------------------------
- - revision 1.15
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +5 -5
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.14
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -2
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.13
- - date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +12 -2
- - complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
- - ----------------------------
- - revision 1.12
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.11
- - date: 2002/05/16 20:25:54;  author: benkirk;  state: Exp;  lines: +10 -1
- - moved testmesh to meshtool.  made it more user-friendly so I could give it to Owen since he is now working with cubit meshes
- - ----------------------------
- - revision 1.10
- - date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +2 -5
- - refinement (at least uniform) now works
- - ----------------------------
- - revision 1.9
- - date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +6 -6
- - eliminated templates from everything except Petsc Interface
- - ----------------------------
- - revision 1.8
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +3 -3
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.7
- - date: 2002/04/30 18:09:01;  author: peterson;  state: Exp;  lines: +11 -0
- - Removed unneeded filename stuff, pared down the size of objects.
- - ----------------------------
- - revision 1.6
- - date: 2002/04/20 04:51:59;  author: peterson;  state: Exp;  lines: +2 -2
- - Cosmetic changes.  Removed dependence on the filename.h
- - header file and the FileName class.  They can now be
- - removed at any time in the future.  Removed a bunch
- - of debugging print statements.  Everywhere changed
- - the name XdrMGF to the more generic name, XdrIO.
- - You might need to rebuild dependencies and/or make clean.
- - ----------------------------
- - revision 1.5
- - date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;  lines: +1 -3
- - many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
- - ----------------------------
- - revision 1.4
- - date: 2002/04/09 21:13:20;  author: peterson;  state: Exp;  lines: +6 -6
- - working on XDR support, boundary support in exodusII
- - ----------------------------
- - revision 1.3
- - date: 2002/04/09 01:01:45;  author: peterson;  state: Exp;  lines: +33 -115
- - Now reads meshes in XDR format created by MGF
- - and created by itself.  Gets the same answer
- - both ways!  Still a little buggy though, I wouldn't
- - use the XDR support for anything important yet.
- - One thing that does not work: There seems to be
- - a problem with opening AND closing the SAME
- - file in a single program ...
- - ----------------------------
- - revision 1.2
- - date: 2002/04/06 00:17:55;  author: peterson;  state: dead;  lines: +0 -0
- - Got rid of the layer of indirection I was thinking of putting in.  read_xdr now calls functions in xdrMGF.h directly.  Took out a chunk of code from the init function in xdrMGF which automatically appended .mesh.#### to the filename before trying to open it. This is not the behavior we want, obviously we want people to be able to choose their own file naming system.
- - ----------------------------
- - revision 1.1
- - date: 2002/04/05 22:48:13;  author: peterson;  state: Exp;
- - Initial merge of XDR read/write capabilities.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/node.h,v
- - Working file: include/node.h
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +3 -23
- - reworked the reference counting to use C++ run-type identification
- - ----------------------------
- - revision 1.3
- - date: 2003/01/16 03:38:18;  author: benkirk;  state: Exp;  lines: +4 -3
- - -W warning fix
- - ----------------------------
- - revision 1.2
- - date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +29 -16
- - reworked the ReferenceCounter class
- - ----------------------------
- - revision 1.1
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/perf_log.h,v
- - Working file: include/perf_log.h
- - head: 1.14
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 14;	selected revisions: 14
- - description:
- - ----------------------------
- - revision 1.14
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +3 -5
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.13
- - date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +20 -19
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.12
- - date: 2002/10/27 13:55:01;  author: benkirk;  state: Exp;  lines: +8 -1
- - added ifdefs to work around missing locale and broken sstream in gcc-2.9*-series compilers
- - ----------------------------
- - revision 1.11
- - date: 2002/10/15 23:56:51;  author: peterson;  state: Exp;  lines: +16 -3
- - Added beginning of ImageMagick stuff, but it is commented out so uncomment it first if you need it.
- - ----------------------------
- - revision 1.10
- - date: 2002/10/09 02:05:20;  author: benkirk;  state: Exp;  lines: +5 -2
- - now using time_facet for time format
- - ----------------------------
- - revision 1.9
- - date: 2002/10/07 14:36:54;  author: peterson;  state: Exp;  lines: +1 -5
- - Fixed formatting in perf_log.
- - ----------------------------
- - revision 1.8
- - date: 2002/10/07 02:48:10;  author: benkirk;  state: Exp;  lines: +6 -1
- - added the get_log member function.  Allows the logging stream to be captured directly and displayed in a window.
- - ----------------------------
- - revision 1.7
- - date: 2002/10/06 17:14:41;  author: peterson;  state: Exp;  lines: +6 -2
- - Removed C code from performance monitoring class.  Now uses the locale for time formatting and does not use printf.
- - ----------------------------
- - revision 1.6
- - date: 2002/10/04 17:03:12;  author: benkirk;  state: Exp;  lines: +107 -1
- - the mesh now can log performance.  configure with --enable-perflog.  also, amr is enabled by default
- - ----------------------------
- - revision 1.5
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +19 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.4
- - date: 2002/06/06 21:34:44;  author: benkirk;  state: Exp;  lines: +6 -1
- - added some documentation and changed some functions to constant that should have been all along
- - ----------------------------
- - revision 1.3
- - date: 2002/05/21 16:08:40;  author: benkirk;  state: Exp;  lines: +7 -7
- - minor changes for cxx compatibility
- - ----------------------------
- - revision 1.2
- - date: 2002/05/17 19:10:22;  author: benkirk;  state: Exp;  lines: +13 -2
- - added pause and restart to perf_log.  put it in most of the major algorithms
- - ----------------------------
- - revision 1.1
- - date: 2002/05/17 16:45:55;  author: benkirk;  state: Exp;
- - added performance logging utility
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/perfmon.h,v
- - Working file: include/perfmon.h
- - head: 1.23
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - 	start: 1.1.1.1
- - 	mesh: 1.1.1
- - keyword substitution: kv
- - total revisions: 24;	selected revisions: 24
- - description:
- - ----------------------------
- - revision 1.23
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -2
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.22
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +19 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.21
- - date: 2002/05/22 21:17:26;  author: benkirk;  state: Exp;  lines: +2 -2
- - added proper namespaces to perfmon and petsc_interface
- - ----------------------------
- - revision 1.20
- - date: 2002/05/13 22:55:32;  author: benkirk;  state: Exp;  lines: +2 -2
- - wrapped all external library includes in anonymous namespaces rather than named namespaces.  makes it easier to work with
- - ----------------------------
- - revision 1.19
- - date: 2002/05/10 21:05:19;  author: benkirk;  state: Exp;  lines: +34 -24
- - added hex20 refinement rules.  completely rewrote main.cc to be much more flexible
- - ----------------------------
- - revision 1.18
- - date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +5 -5
- - changed cout to std::cout
- - ----------------------------
- - revision 1.17
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -2
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.16
- - date: 2002/04/27 14:59:55;  author: benkirk;  state: Exp;  lines: +5 -3
- - wrapped all external library APIs inside namespaces to avoid conflicts with application codes, just like Jeremy did with the Petsc interface
- - ----------------------------
- - revision 1.15
- - date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +5 -5
- - changes for compatibility with icc v6.0
- - ----------------------------
- - revision 1.14
- - date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - renamed config.h mesh_config.h and did some cleanup
- - ----------------------------
- - revision 1.13
- - date: 2002/03/27 22:38:45;  author: peterson;  state: Exp;  lines: +2 -2
- - Added mesh.read_matlab(), PetscVector.add_petsc_vector(),PetscVector.print(), and the beginnings of PetscMatrix.print()
- - ----------------------------
- - revision 1.12
- - date: 2002/03/26 01:26:56;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.11
- - date: 2002/03/26 00:16:48;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.10
- - date: 2002/03/26 00:06:06;  author: benkirk;  state: Exp;  lines: +35 -1
- - cleaned up duplicate index sets, added papi (maybe) to perfmon
- - ----------------------------
- - revision 1.9
- - date: 2002/03/23 04:09:10;  author: benkirk;  state: Exp;  lines: +22 -15
- - added an optional constructor argument to perfmon that stores the processor ID, and then only prints timing information if it is processor 0
- - ----------------------------
- - revision 1.8
- - date: 2002/03/18 21:25:48;  author: peterson;  state: Exp;  lines: +1 -2
- - Added inlined functions print_JxW() print_phi() print_dphi() and print_info() to fe.h
- - ----------------------------
- - revision 1.7
- - date: 2002/03/07 18:37:35;  author: peterson;  state: Exp;  lines: +14 -8
- - Added petsc-2.1.0 compatibility and perfmon features.
- - ----------------------------
- - revision 1.6
- - date: 2002/02/25 05:26:41;  author: benkirk;  state: Exp;  lines: +19 -16
- - errata
- - ----------------------------
- - revision 1.5
- - date: 2002/02/25 05:23:04;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.4
- - date: 2002/02/24 16:30:36;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.3
- - date: 2002/02/24 16:29:51;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.2
- - date: 2002/02/24 16:27:47;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.1
- - date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;
- - branches:  1.1.1;
- - Initial revision
- - ----------------------------
- - revision 1.1.1.1
- - date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;  lines: +0 -0
- - init
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/petsc_interface.h,v
- - Working file: include/petsc_interface.h
- - head: 1.25
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 25;	selected revisions: 25
- - description:
- - ----------------------------
- - revision 1.25
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -2
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.24
- - date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +7 -2
- - complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
- - ----------------------------
- - revision 1.23
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.22
- - date: 2002/06/05 22:01:27;  author: benkirk;  state: Exp;  lines: +23 -23
- - got Petsc working on tejas
- - ----------------------------
- - revision 1.21
- - date: 2002/06/04 15:08:28;  author: benkirk;  state: Exp;  lines: +62 -78
- - more work on equation system support.  Each SystemData now contains a matrix, rhs, and solution.  Can call the solve
- - ----------------------------
- - revision 1.20
- - date: 2002/06/03 21:41:55;  author: benkirk;  state: Exp;  lines: +13 -20
- - moved PetscInterface options setup to the constructor, removed unused variable in PetscMatrix
- - ----------------------------
- - revision 1.19
- - date: 2002/05/30 12:26:06;  author: benkirk;  state: Exp;  lines: +4 -4
- - modified Petsc support to be compatible with Petsc 2.1.2
- - ----------------------------
- - revision 1.18
- - date: 2002/05/22 21:17:27;  author: benkirk;  state: Exp;  lines: +5 -2
- - added proper namespaces to perfmon and petsc_interface
- - ----------------------------
- - revision 1.17
- - date: 2002/05/13 22:55:32;  author: benkirk;  state: Exp;  lines: +9 -9
- - wrapped all external library includes in anonymous namespaces rather than named namespaces.  makes it easier to work with
- - ----------------------------
- - revision 1.16
- - date: 2002/05/01 23:10:57;  author: benkirk;  state: Exp;  lines: +14 -16
- - un-templated everything
- - ----------------------------
- - revision 1.15
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -4
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.14
- - date: 2002/04/27 02:42:56;  author: benkirk;  state: Exp;  lines: +5 -24
- - working with icc
- - ----------------------------
- - revision 1.13
- - date: 2002/04/26 17:11:12;  author: jeremy;  state: Exp;  lines: +8 -6
- - Added namespace Petsc {} wrapper to the petsc include files.
- - This prevents unnecessary pollution of the global namespace.
- - ----------------------------
- - revision 1.12
- - date: 2002/04/09 13:59:13;  author: benkirk;  state: Exp;  lines: +16 -12
- - sparsity pattern computation works well in 3D, serial and parallel.  Will implement in 2D after rethinking the underlying STL container
- - ----------------------------
- - revision 1.11
- - date: 2002/04/05 03:21:44;  author: benkirk;  state: Exp;  lines: +144 -157
- - cleaned up ./configure some.  Reversed-engineered the Tri6 connectivity.  Documented some.  Added hooks for n_nz & n_oz in dof_map
- - ----------------------------
- - revision 1.10
- - date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +5 -5
- - renamed config.h mesh_config.h and did some cleanup
- - ----------------------------
- - revision 1.9
- - date: 2002/03/21 04:27:32;  author: benkirk;  state: Exp;  lines: +2 -2
- - fixed a bug in petsc_vector that caused a false lock, thus prohibiting future calls to close()
- - ----------------------------
- - revision 1.8
- - date: 2002/03/20 22:22:41;  author: benkirk;  state: Exp;  lines: +4 -4
- - errata
- - ----------------------------
- - revision 1.7
- - date: 2002/03/19 05:20:10;  author: benkirk;  state: Exp;  lines: +3 -3
- - took out a print statement
- - ----------------------------
- - revision 1.6
- - date: 2002/03/07 18:37:35;  author: peterson;  state: Exp;  lines: +3 -2
- - Added petsc-2.1.0 compatibility and perfmon features.
- - ----------------------------
- - revision 1.5
- - date: 2002/03/07 16:32:13;  author: benkirk;  state: Exp;  lines: +6 -3
- - works in parallel
- - ----------------------------
- - revision 1.4
- - date: 2002/03/06 23:13:40;  author: benkirk;  state: Exp;  lines: +7 -7
- - actually starting to work
- - ----------------------------
- - revision 1.3
- - date: 2002/03/04 23:23:56;  author: peterson;  state: Exp;  lines: +10 -6
- - took solve out of petsc_interface for the time being
- - ----------------------------
- - revision 1.2
- - date: 2002/03/04 23:07:02;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.1
- - date: 2002/03/04 23:04:54;  author: benkirk;  state: Exp;
- - errata
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/petsc_matrix.h,v
- - Working file: include/petsc_matrix.h
- - head: 1.36
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 36;	selected revisions: 36
- - description:
- - ----------------------------
- - revision 1.36
- - date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +3 -5
- - Removing more unnecessary includes.
- - ----------------------------
- - revision 1.35
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -2
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.34
- - date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +24 -20
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.33
- - date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +46 -14
- - complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
- - ----------------------------
- - revision 1.32
- - date: 2002/09/06 14:53:28;  author: benkirk;  state: Exp;  lines: +22 -15
- - added Xdr class to provide a uniform interface for Xdr and ASCII IO.  The equation_systems read & write is also based on these methods.  I have validated it for one processor.  Still need to be sure that in the case of multiple processors each proc gets te relevant piece of data.
- - ----------------------------
- - revision 1.31
- - date: 2002/09/06 00:31:54;  author: benkirk;  state: Exp;  lines: +4 -1
- - added cmath to the petsc_matrix and petsc_vector includes.  This is required on the IBM Power3s at NERSC.  This will need to be wrapped in an ifdef later.
- - ----------------------------
- - revision 1.30
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.29
- - date: 2002/06/03 21:26:10;  author: benkirk;  state: Exp;  lines: +21 -6
- - initial support for Petsc submatrices
- - ----------------------------
- - revision 1.28
- - date: 2002/05/31 15:59:28;  author: benkirk;  state: Exp;  lines: +6 -6
- - added TODO make target.  Allow user to optionally control DOF coupling for matrix allocation
- - ----------------------------
- - revision 1.27
- - date: 2002/05/31 02:55:31;  author: benkirk;  state: Exp;  lines: +23 -5
- - petsc_matrix can now add non-square element matrices to off-diagonal locations.  fe can report dof_indices for individual components
- - ----------------------------
- - revision 1.26
- - date: 2002/05/30 12:26:06;  author: benkirk;  state: Exp;  lines: +2 -2
- - modified Petsc support to be compatible with Petsc 2.1.2
- - ----------------------------
- - revision 1.25
- - date: 2002/05/28 20:33:42;  author: benkirk;  state: Exp;  lines: +58 -216
- - added initial support for simulation groups (systems) and equation systems
- - ----------------------------
- - revision 1.24
- - date: 2002/05/18 17:32:57;  author: benkirk;  state: Exp;  lines: +7 -2
- - fixed some namespace issues and added some includes for ICC compatibility (compileability?)
- - ----------------------------
- - revision 1.23
- - date: 2002/05/13 22:55:32;  author: benkirk;  state: Exp;  lines: +16 -16
- - wrapped all external library includes in anonymous namespaces rather than named namespaces.  makes it easier to work with
- - ----------------------------
- - revision 1.22
- - date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +3 -3
- - changed cout to std::cout
- - ----------------------------
- - revision 1.21
- - date: 2002/05/02 02:19:05;  author: benkirk;  state: Exp;  lines: +7 -7
- - errata
- - ----------------------------
- - revision 1.20
- - date: 2002/05/01 23:10:57;  author: benkirk;  state: Exp;  lines: +71 -81
- - un-templated everything
- - ----------------------------
- - revision 1.19
- - date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +3 -3
- - eliminated templates from everything except Petsc Interface
- - ----------------------------
- - revision 1.18
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -3
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.17
- - date: 2002/04/27 02:42:56;  author: benkirk;  state: Exp;  lines: +9 -10
- - working with icc
- - ----------------------------
- - revision 1.16
- - date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +2 -2
- - changes for compatibility with icc v6.0
- - ----------------------------
- - revision 1.15
- - date: 2002/04/26 17:11:12;  author: jeremy;  state: Exp;  lines: +11 -10
- - Added namespace Petsc {} wrapper to the petsc include files.
- - This prevents unnecessary pollution of the global namespace.
- - ----------------------------
- - revision 1.14
- - date: 2002/04/22 13:11:00;  author: benkirk;  state: Exp;  lines: +7 -18
- - fixed a bug that computed the incorrect sparsity pattern in the case of multiple dofs per vertex
- - ----------------------------
- - revision 1.13
- - date: 2002/04/18 19:24:25;  author: benkirk;  state: Exp;  lines: +5 -17
- - documentation
- - ----------------------------
- - revision 1.12
- - date: 2002/04/09 13:59:13;  author: benkirk;  state: Exp;  lines: +8 -1
- - sparsity pattern computation works well in 3D, serial and parallel.  Will implement in 2D after rethinking the underlying STL container
- - ----------------------------
- - revision 1.11
- - date: 2002/04/05 03:21:44;  author: benkirk;  state: Exp;  lines: +366 -365
- - cleaned up ./configure some.  Reversed-engineered the Tri6 connectivity.  Documented some.  Added hooks for n_nz & n_oz in dof_map
- - ----------------------------
- - revision 1.10
- - date: 2002/04/04 05:24:21;  author: benkirk;  state: Exp;  lines: +6 -6
- - added initial hooks for kdoc
- - ----------------------------
- - revision 1.9
- - date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +6 -6
- - renamed config.h mesh_config.h and did some cleanup
- - ----------------------------
- - revision 1.8
- - date: 2002/04/01 22:26:16;  author: benkirk;  state: Exp;  lines: +3 -27
- - changed petsc_matrix to accept a variable # of nonzeros per row based on constructor argument, defaults to 30
- - ----------------------------
- - revision 1.7
- - date: 2002/03/27 22:38:45;  author: peterson;  state: Exp;  lines: +19 -3
- - Added mesh.read_matlab(), PetscVector.add_petsc_vector(),PetscVector.print(), and the beginnings of PetscMatrix.print()
- - ----------------------------
- - revision 1.6
- - date: 2002/03/07 20:52:30;  author: benkirk;  state: Exp;  lines: +3 -3
- - added dof_indices computation
- - ----------------------------
- - revision 1.5
- - date: 2002/03/07 16:32:13;  author: benkirk;  state: Exp;  lines: +9 -1
- - works in parallel
- - ----------------------------
- - revision 1.4
- - date: 2002/03/06 23:13:40;  author: benkirk;  state: Exp;  lines: +5 -2
- - actually starting to work
- - ----------------------------
- - revision 1.3
- - date: 2002/03/05 16:57:43;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.2
- - date: 2002/03/05 14:28:22;  author: benkirk;  state: Exp;  lines: +27 -74
- - adding more stuff
- - ----------------------------
- - revision 1.1
- - date: 2002/03/05 06:12:42;  author: benkirk;  state: Exp;
- - added neighborhood computation, petsc matrix from deal.II
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/petsc_vector.h,v
- - Working file: include/petsc_vector.h
- - head: 1.35
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 35;	selected revisions: 35
- - description:
- - ----------------------------
- - revision 1.35
- - date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +60 -65
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.34
- - date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +48 -20
- - complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
- - ----------------------------
- - revision 1.33
- - date: 2002/11/28 01:05:41;  author: benkirk;  state: Exp;  lines: +41 -1
- - should have sped up find_neighbors routine.  added full_screen to GUI
- - ----------------------------
- - revision 1.32
- - date: 2002/09/06 14:53:28;  author: benkirk;  state: Exp;  lines: +6 -4
- - added Xdr class to provide a uniform interface for Xdr and ASCII IO.  The equation_systems read & write is also based on these methods.  I have validated it for one processor.  Still need to be sure that in the case of multiple processors each proc gets te relevant piece of data.
- - ----------------------------
- - revision 1.31
- - date: 2002/09/06 00:31:54;  author: benkirk;  state: Exp;  lines: +4 -1
- - added cmath to the petsc_matrix and petsc_vector includes.  This is required on the IBM Power3s at NERSC.  This will need to be wrapped in an ifdef later.
- - ----------------------------
- - revision 1.30
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +19 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.29
- - date: 2002/06/25 20:24:57;  author: benkirk;  state: Exp;  lines: +2 -2
- - Changed std::cout << ERROR...  to  std::cerr << ERROR... everywhere it occured.  Also fixed a bug in write_tecplot_binary that caused a segfault when just writing a mesh (with no data).
- - ----------------------------
- - revision 1.28
- - date: 2002/06/20 19:20:04;  author: peterson;  state: Exp;  lines: +3 -3
- - Can now configure for petsc version, and test against the version in the Makefile.
- - ----------------------------
- - revision 1.27
- - date: 2002/05/30 12:26:06;  author: benkirk;  state: Exp;  lines: +2 -2
- - modified Petsc support to be compatible with Petsc 2.1.2
- - ----------------------------
- - revision 1.26
- - date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +7 -3
- - added equation system support
- - ----------------------------
- - revision 1.25
- - date: 2002/05/28 20:33:42;  author: benkirk;  state: Exp;  lines: +72 -148
- - added initial support for simulation groups (systems) and equation systems
- - ----------------------------
- - revision 1.24
- - date: 2002/05/18 17:32:57;  author: benkirk;  state: Exp;  lines: +4 -2
- - fixed some namespace issues and added some includes for ICC compatibility (compileability?)
- - ----------------------------
- - revision 1.23
- - date: 2002/05/13 22:55:32;  author: benkirk;  state: Exp;  lines: +8 -8
- - wrapped all external library includes in anonymous namespaces rather than named namespaces.  makes it easier to work with
- - ----------------------------
- - revision 1.22
- - date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +2 -2
- - changed cout to std::cout
- - ----------------------------
- - revision 1.21
- - date: 2002/05/01 23:10:57;  author: benkirk;  state: Exp;  lines: +74 -92
- - un-templated everything
- - ----------------------------
- - revision 1.20
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -5
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.19
- - date: 2002/04/30 16:19:57;  author: benkirk;  state: Exp;  lines: +1 -2
- -  hooks to add triangle support, reworked configure to only substitute paths if they are correctly located
- - ----------------------------
- - revision 1.18
- - date: 2002/04/27 02:42:56;  author: benkirk;  state: Exp;  lines: +6 -5
- - working with icc
- - ----------------------------
- - revision 1.17
- - date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +2 -2
- - changes for compatibility with icc v6.0
- - ----------------------------
- - revision 1.16
- - date: 2002/04/26 17:11:12;  author: jeremy;  state: Exp;  lines: +7 -6
- - Added namespace Petsc {} wrapper to the petsc include files.
- - This prevents unnecessary pollution of the global namespace.
- - ----------------------------
- - revision 1.15
- - date: 2002/04/22 13:11:00;  author: benkirk;  state: Exp;  lines: +4 -4
- - fixed a bug that computed the incorrect sparsity pattern in the case of multiple dofs per vertex
- - ----------------------------
- - revision 1.14
- - date: 2002/04/18 19:24:25;  author: benkirk;  state: Exp;  lines: +4 -16
- - documentation
- - ----------------------------
- - revision 1.13
- - date: 2002/04/13 04:57:46;  author: benkirk;  state: Exp;  lines: +2 -1
- - now support --en/disable-metis.  checked the lib with different combinations of the enable flags to make sure everything works.  fixed some bugs when features were disabled
- - ----------------------------
- - revision 1.12
- - date: 2002/04/05 03:21:44;  author: benkirk;  state: Exp;  lines: +372 -384
- - cleaned up ./configure some.  Reversed-engineered the Tri6 connectivity.  Documented some.  Added hooks for n_nz & n_oz in dof_map
- - ----------------------------
- - revision 1.11
- - date: 2002/04/04 05:24:21;  author: benkirk;  state: Exp;  lines: +10 -10
- - added initial hooks for kdoc
- - ----------------------------
- - revision 1.10
- - date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +3 -3
- - renamed config.h mesh_config.h and did some cleanup
- - ----------------------------
- - revision 1.9
- - date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +2 -2
- - changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
- - ----------------------------
- - revision 1.8
- - date: 2002/03/27 22:38:45;  author: peterson;  state: Exp;  lines: +26 -2
- - Added mesh.read_matlab(), PetscVector.add_petsc_vector(),PetscVector.print(), and the beginnings of PetscMatrix.print()
- - ----------------------------
- - revision 1.7
- - date: 2002/03/25 22:25:16;  author: benkirk;  state: Exp;  lines: +4 -1
- - added send_list computation to dof_map.distribute()
- - ----------------------------
- - revision 1.6
- - date: 2002/03/21 04:27:32;  author: benkirk;  state: Exp;  lines: +3 -3
- - fixed a bug in petsc_vector that caused a false lock, thus prohibiting future calls to close()
- - ----------------------------
- - revision 1.5
- - date: 2002/03/20 22:22:41;  author: benkirk;  state: Exp;  lines: +4 -2
- - errata
- - ----------------------------
- - revision 1.4
- - date: 2002/03/07 20:52:30;  author: benkirk;  state: Exp;  lines: +6 -1
- - added dof_indices computation
- - ----------------------------
- - revision 1.3
- - date: 2002/03/07 16:32:13;  author: benkirk;  state: Exp;  lines: +22 -20
- - works in parallel
- - ----------------------------
- - revision 1.2
- - date: 2002/03/06 23:13:40;  author: benkirk;  state: Exp;  lines: +15 -13
- - actually starting to work
- - ----------------------------
- - revision 1.1
- - date: 2002/03/04 15:52:46;  author: benkirk;  state: Exp;
- - porting petsc support from deal.II
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/plane.h,v
- - Working file: include/plane.h
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2002/09/25 17:53:41;  author: benkirk;  state: Exp;
- - added initial surface support.  I have already implemented a plane and a sphere, more to follow.  added support for bounding-box computation on a subdomain-by-subdomain and processor-by-processor basis.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/point.h,v
- - Working file: include/point.h
- - head: 1.35
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - 	start: 1.1.1.1
- - 	mesh: 1.1.1
- - keyword substitution: kv
- - total revisions: 36;	selected revisions: 36
- - description:
- - ----------------------------
- - revision 1.35
- - date: 2003/01/15 19:06:48;  author: benkirk;  state: Exp;  lines: +5 -2
- - forgot math.h
- - ----------------------------
- - revision 1.34
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +24 -3
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.33
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +23 -7
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.32
- - date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +11 -11
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.31
- - date: 2002/11/19 21:14:26;  author: peterson;  state: Exp;  lines: +78 -30
- - Added return value optimization to the point class.
- - ----------------------------
- - revision 1.30
- - date: 2002/11/05 03:58:10;  author: benkirk;  state: Exp;  lines: +2 -4
- - minor changes.  removed -funroll-all-loops from GCC optimized flags
- - ----------------------------
- - revision 1.29
- - date: 2002/09/23 20:02:02;  author: benkirk;  state: Exp;  lines: +15 -1
- - added copy-constructor for points
- - ----------------------------
- - revision 1.28
- - date: 2002/09/23 17:14:21;  author: benkirk;  state: Exp;  lines: +3 -3
- - formatting
- - ----------------------------
- - revision 1.27
- - date: 2002/08/20 13:35:20;  author: benkirk;  state: Exp;  lines: +9 -9
- - optimizing Point performance, fe_map
- - ----------------------------
- - revision 1.26
- - date: 2002/08/13 19:56:20;  author: benkirk;  state: Exp;  lines: +6 -1
- - added cross() method to point.  returns the cross product of the point with another point
- - ----------------------------
- - revision 1.25
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.24
- - date: 2002/07/28 21:14:30;  author: benkirk;  state: Exp;  lines: +39 -1
- - reworking internals of refinement
- - ----------------------------
- - revision 1.23
- - date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +7 -2
- - refinement (at least uniform) now works
- - ----------------------------
- - revision 1.22
- - date: 2002/05/02 13:41:47;  author: benkirk;  state: Exp;  lines: +4 -4
- - CC fix.
- - ----------------------------
- - revision 1.21
- - date: 2002/05/01 23:10:57;  author: benkirk;  state: Exp;  lines: +1 -4
- - un-templated everything
- - ----------------------------
- - revision 1.20
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +47 -82
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.19
- - date: 2002/04/30 22:16:33;  author: benkirk;  state: Exp;  lines: +4 -4
- - initial shared library support
- - ----------------------------
- - revision 1.18
- - date: 2002/04/29 21:50:52;  author: benkirk;  state: Exp;  lines: +15 -48
- - initial support for AMR.  builds fine, old functionality still retained.  much more to do.
- - ----------------------------
- - revision 1.17
- - date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +11 -11
- - changes for compatibility with icc v6.0
- - ----------------------------
- - revision 1.16
- - date: 2002/04/10 01:53:21;  author: benkirk;  state: Exp;  lines: +22 -89
- - working on boundary output.  cleaned up some code in shape_function calculations. probably going to change the way side boundary conditions are stored
- - ----------------------------
- - revision 1.15
- - date: 2002/04/05 22:38:18;  author: benkirk;  state: Exp;  lines: +71 -7
- - added a lot of documentation and re-ordered the quadratic 1D basis functions
- - ----------------------------
- - revision 1.14
- - date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - renamed config.h mesh_config.h and did some cleanup
- - ----------------------------
- - revision 1.13
- - date: 2002/03/05 23:28:17;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.12
- - date: 2002/03/05 18:07:09;  author: benkirk;  state: Exp;  lines: +3 -3
- - errata
- - ----------------------------
- - revision 1.11
- - date: 2002/03/04 13:48:09;  author: benkirk;  state: Exp;  lines: +18 -1
- - Remade some make rules and split up the unwieldy fe.C
- - ----------------------------
- - revision 1.10
- - date: 2002/02/27 23:22:21;  author: benkirk;  state: Exp;  lines: +13 -1
- - errata
- - ----------------------------
- - revision 1.9
- - date: 2002/02/26 15:53:40;  author: benkirk;  state: Exp;  lines: +31 -10
- - Added pointers to neighbors within faces and cells, can now write UCD files
- - ----------------------------
- - revision 1.8
- - date: 2002/02/25 14:36:03;  author: benkirk;  state: Exp;  lines: +33 -1
- - errata
- - ----------------------------
- - revision 1.7
- - date: 2002/02/25 05:23:04;  author: benkirk;  state: Exp;  lines: +1 -5
- - errata
- - ----------------------------
- - revision 1.6
- - date: 2002/02/25 01:18:38;  author: benkirk;  state: Exp;  lines: +2 -2
- - errata
- - ----------------------------
- - revision 1.5
- - date: 2002/02/24 16:30:36;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.4
- - date: 2002/02/24 16:29:51;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.3
- - date: 2002/02/24 16:27:47;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.2
- - date: 2002/02/22 22:34:17;  author: benkirk;  state: Exp;  lines: +1 -1
- - errata
- - ----------------------------
- - revision 1.1
- - date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;
- - branches:  1.1.1;
- - Initial revision
- - ----------------------------
- - revision 1.1.1.1
- - date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;  lines: +0 -0
- - init
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/quadrature.h,v
- - Working file: include/quadrature.h
- - head: 1.28
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 28;	selected revisions: 28
- - description:
- - ----------------------------
- - revision 1.28
- - date: 2003/01/19 04:15:50;  author: peterson;  state: Exp;  lines: +20 -2
- - Moved a few more functions into the quadrature
- - base class to promote code re-use.  This should also compile
- - faster since the functions are now only compiled once in
- - quadrature.C instead of in every rule separately. Have not tested
- - with prismatic elements (no mesh available) but it should
- - work fine.
- - ----------------------------
- - revision 1.27
- - date: 2003/01/18 19:48:29;  author: peterson;  state: Exp;  lines: +95 -5
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - ----------------------------
- - revision 1.26
- - date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +2 -2
- - Created separate file for the element type enumeration.
- - ----------------------------
- - revision 1.25
- - date: 2003/01/16 16:42:28;  author: peterson;  state: Exp;  lines: +2 -2
- - Removing unnecessary includes.  Changing headers which
- - simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
- - ----------------------------
- - revision 1.24
- - date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;  lines: +1 -150
- - Split up quadrature classes into
- - separate files.  Removed the quadrature header from
- - dof_map.C as it did not seem to be using it.
- - ----------------------------
- - revision 1.23
- - date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +10 -7
- - added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
- - ----------------------------
- - revision 1.22
- - date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +15 -15
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.21
- - date: 2002/12/22 22:36:25;  author: benkirk;  state: Exp;  lines: +49 -51
- - made QBase pure virtual.  prefixing private variables with _ to distinguish from local variables.  Will make FEBase pure virtual and have templated classes derived from it for actual families of finite elements
- - ----------------------------
- - revision 1.20
- - date: 2002/11/27 20:58:50;  author: benkirk;  state: Exp;  lines: +75 -2
- - added trapezoidal quadrature.  Compute tangent directions _and_ normal on faces
- - ----------------------------
- - revision 1.19
- - date: 2002/09/17 03:57:19;  author: benkirk;  state: Exp;  lines: +2 -2
- - added Edge, Tri, Quad, Tet, and Hex base classes for specific instances of those types of elements.  still need ones for Prism and Pyramid
- - ----------------------------
- - revision 1.18
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.17
- - date: 2002/06/11 19:29:22;  author: benkirk;  state: Exp;  lines: +2 -2
- - added code to compute the inverse map for a FE, that is: given a point in physical space, find the point on the reference element that contains that point.
- - ----------------------------
- - revision 1.16
- - date: 2002/06/07 21:19:07;  author: benkirk;  state: Exp;  lines: +8 -17
- - added order enum.  Separating FE from mesh elements
- - ----------------------------
- - revision 1.15
- - date: 2002/05/02 13:40:18;  author: benkirk;  state: Exp;  lines: +2 -3
- - code clean up.  now compiles with g++, icc, cxx (alpha), and CC (SGI)
- - ----------------------------
- - revision 1.14
- - date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +5 -5
- - changed cout to std::cout
- - ----------------------------
- - revision 1.13
- - date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +26 -15
- - eliminated templates from everything except Petsc Interface
- - ----------------------------
- - revision 1.12
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +4 -4
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.11
- - date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +5 -5
- - changes for compatibility with icc v6.0
- - ----------------------------
- - revision 1.10
- - date: 2002/04/18 19:24:25;  author: benkirk;  state: Exp;  lines: +3 -1
- - documentation
- - ----------------------------
- - revision 1.9
- - date: 2002/04/18 14:03:20;  author: benkirk;  state: Exp;  lines: +41 -8
- - added QuadratureOrder enum.  broke quadrature.C into multiple files for faster compiles
- - ----------------------------
- - revision 1.8
- - date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;  lines: +4 -3
- - many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
- - ----------------------------
- - revision 1.7
- - date: 2002/04/16 13:21:29;  author: benkirk;  state: Exp;  lines: +16 -8
- - errata
- - ----------------------------
- - revision 1.6
- - date: 2002/04/15 21:53:14;  author: benkirk;  state: Exp;  lines: +79 -10
- - reworking boundary integration, not quite there yet
- - ----------------------------
- - revision 1.5
- - date: 2002/04/12 16:04:11;  author: benkirk;  state: Exp;  lines: +4 -4
- - errata
- - ----------------------------
- - revision 1.4
- - date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +2 -2
- - renamed config.h mesh_config.h and did some cleanup
- - ----------------------------
- - revision 1.3
- - date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +8 -7
- - changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
- - ----------------------------
- - revision 1.2
- - date: 2002/02/28 03:52:05;  author: benkirk;  state: Exp;  lines: +16 -13
- - errata
- - ----------------------------
- - revision 1.1
- - date: 2002/02/26 21:22:29;  author: benkirk;  state: Exp;
- - added Gauss quadrature rules in 1D, 2D quad, 3D hex by tensor product
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/quadrature_gauss.h,v
- - Working file: include/quadrature_gauss.h
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/18 19:48:29;  author: peterson;  state: Exp;  lines: +1 -12
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
- - Split up quadrature classes into
- - separate files.  Removed the quadrature header from
- - dof_map.C as it did not seem to be using it.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/quadrature_simpson.h,v
- - Working file: include/quadrature_simpson.h
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/19 04:15:50;  author: peterson;  state: Exp;  lines: +3 -1
- - Moved a few more functions into the quadrature
- - base class to promote code re-use.  This should also compile
- - faster since the functions are now only compiled once in
- - quadrature.C instead of in every rule separately. Have not tested
- - with prismatic elements (no mesh available) but it should
- - work fine.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/18 19:48:29;  author: peterson;  state: Exp;
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/quadrature_trap.h,v
- - Working file: include/quadrature_trap.h
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/18 19:48:29;  author: peterson;  state: Exp;  lines: +8 -28
- - Added simpson quadrature rule, still
- - working on simpson for triangles/tets. Also, restructured
- - the QBase class so that there is less code duplication
- - when you want to create additional quadrature rules.
- - ----------------------------
- - revision 1.1
- - date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
- - Split up quadrature classes into
- - separate files.  Removed the quadrature header from
- - dof_map.C as it did not seem to be using it.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/reference_counted_object.h,v
- - Working file: include/reference_counted_object.h
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;
- - reworked the reference counting to use C++ run-type identification
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/reference_counter.h,v
- - Working file: include/reference_counter.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +41 -85
- - reworked the reference counting to use C++ run-type identification
- - ----------------------------
- - revision 1.5
- - date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +104 -43
- - reworked the ReferenceCounter class
- - ----------------------------
- - revision 1.4
- - date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +2 -3
- - Removed some unnecessary headers.
- - Added support for a new compiling METHOD called syn.
- - This stands for -fsyntax-only and ive only got the
- - flags for g++.  Hopefully if you are just testing
- - small changes it is faster than compiling for real.
- - Maybe ?
- - ----------------------------
- - revision 1.3
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +10 -27
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.2
- - date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +37 -36
- - added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
- - ----------------------------
- - revision 1.1
- - date: 2002/12/31 02:46:20;  author: benkirk;  state: Exp;
- - added reference_counter
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/sphere.h,v
- - Working file: include/sphere.h
- - head: 1.4
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 4;	selected revisions: 4
- - description:
- - ----------------------------
- - revision 1.4
- - date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +11 -2
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.3
- - date: 2002/10/01 21:03:22;  author: benkirk;  state: Exp;  lines: +10 -3
- - added bounding sphere drawing.
- - ----------------------------
- - revision 1.2
- - date: 2002/09/27 16:03:07;  author: benkirk;  state: Exp;  lines: +7 -1
- - split the mesh.C file into mesh.C and mesh_base.C because it was getting _way_ too big.
- - ----------------------------
- - revision 1.1
- - date: 2002/09/25 17:53:41;  author: benkirk;  state: Exp;
- - added initial surface support.  I have already implemented a plane and a sphere, more to follow.  added support for bounding-box computation on a subdomain-by-subdomain and processor-by-processor basis.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/statistics.h,v
- - Working file: include/statistics.h
- - head: 1.5
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 5;	selected revisions: 5
- - description:
- - ----------------------------
- - revision 1.5
- - date: 2002/09/29 23:47:06;  author: peterson;  state: Exp;  lines: +1 -2
- - Fixed a conflict in statistics header.
- - ----------------------------
- - revision 1.4
- - date: 2002/09/29 23:44:27;  author: peterson;  state: Exp;  lines: +13 -6
- - New constructor for StatisticsVector.
- - ----------------------------
- - revision 1.3
- - date: 2002/09/27 15:36:28;  author: benkirk;  state: Exp;  lines: +3 -3
- - fixes for SGI C++ compatibility.  Have now successfully built the GUI on milagros!
- - ----------------------------
- - revision 1.2
- - date: 2002/09/26 22:03:44;  author: peterson;  state: Exp;  lines: +18 -1
- - Added quality bounds for elements based on CUBIT docs.  Added the cut_below and cut_above functions to the StatVector.
- - ----------------------------
- - revision 1.1
- - date: 2002/09/26 01:16:30;  author: peterson;  state: Exp;
- - Initial merge of StatVector.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/surface.h,v
- - Working file: include/surface.h
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +10 -11
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.1
- - date: 2002/09/25 17:53:41;  author: benkirk;  state: Exp;
- - added initial surface support.  I have already implemented a plane and a sphere, more to follow.  added support for bounding-box computation on a subdomain-by-subdomain and processor-by-processor basis.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/system_data.h,v
- - Working file: include/system_data.h
- - head: 1.35
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 35;	selected revisions: 35
- - description:
- - ----------------------------
- - revision 1.35
- - date: 2003/01/16 20:43:46;  author: peterson;  state: Exp;  lines: +3 -5
- - Removing more unnecessary #includes.
- - ----------------------------
- - revision 1.34
- - date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +2 -4
- - More unnecessary includes. Also added a source file for the
- - ----------------------------
- - revision 1.33
- - date: 2003/01/16 16:42:28;  author: peterson;  state: Exp;  lines: +2 -5
- - Removing unnecessary includes.  Changing headers which
- - simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
- - ----------------------------
- - revision 1.32
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +5 -5
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.31
- - date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +6 -13
- - removed kdoc. added order to FEType
- - ----------------------------
- - revision 1.30
- - date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +16 -8
- - added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
- - ----------------------------
- - revision 1.29
- - date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +2 -2
- - added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
- - ----------------------------
- - revision 1.28
- - date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +95 -57
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.27
- - date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +81 -81
- - complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
- - ----------------------------
- - revision 1.26
- - date: 2002/12/01 22:19:16;  author: d.dreyer;  state: Exp;  lines: +14 -1
- - some fixes for --disable-amr target
- - ----------------------------
- - revision 1.25
- - date: 2002/11/27 20:58:50;  author: benkirk;  state: Exp;  lines: +6 -1
- - added trapezoidal quadrature.  Compute tangent directions _and_ normal on faces
- - ----------------------------
- - revision 1.24
- - date: 2002/11/21 00:12:02;  author: benkirk;  state: Exp;  lines: +140 -6
- - added older_soln support
- - ----------------------------
- - revision 1.23
- - date: 2002/11/05 03:58:10;  author: benkirk;  state: Exp;  lines: +5 -40
- - minor changes.  removed -funroll-all-loops from GCC optimized flags
- - ----------------------------
- - revision 1.22
- - date: 2002/11/04 16:39:16;  author: benkirk;  state: Exp;  lines: +195 -21
- - fixes in fe_project
- - ----------------------------
- - revision 1.21
- - date: 2002/11/03 23:45:52;  author: benkirk;  state: Exp;  lines: +4 -19
- - added support for multiple DOFs per node and element-based DOFs
- - ----------------------------
- - revision 1.20
- - date: 2002/11/01 15:49:56;  author: benkirk;  state: Exp;  lines: +1 -12
- - moved the coupling matrix dof_coupling into the DofMap class where it belongs
- - ----------------------------
- - revision 1.19
- - date: 2002/10/31 20:22:41;  author: benkirk;  state: Exp;  lines: +6 -4
- - re-implemented the dof_coupling as a matrix
- - ----------------------------
- - revision 1.18
- - date: 2002/10/29 16:03:40;  author: benkirk;  state: Exp;  lines: +15 -1
- - formatting
- - ----------------------------
- - revision 1.17
- - date: 2002/09/09 13:53:54;  author: benkirk;  state: Exp;  lines: +70 -3
- - put enums in MeshEnums namespace.  Started using fluid for class design in the gui
- - ----------------------------
- - revision 1.16
- - date: 2002/09/06 14:53:28;  author: benkirk;  state: Exp;  lines: +10 -3
- - added Xdr class to provide a uniform interface for Xdr and ASCII IO.  The equation_systems read & write is also based on these methods.  I have validated it for one processor.  Still need to be sure that in the case of multiple processors each proc gets te relevant piece of data.
- - ----------------------------
- - revision 1.15
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -3
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.14
- - date: 2002/07/03 21:14:41;  author: benkirk;  state: Exp;  lines: +1 -33
- - removed shared_matrix support because it cannot do what I thought it could
- - ----------------------------
- - revision 1.13
- - date: 2002/06/21 01:55:02;  author: benkirk;  state: Exp;  lines: +27 -1
- - added rotate, translate, and scale.  Need to finish rotate
- - ----------------------------
- - revision 1.12
- - date: 2002/06/12 21:49:57;  author: benkirk;  state: Exp;  lines: +21 -25
- - making equation_system more usable from a user point of view
- - ----------------------------
- - revision 1.11
- - date: 2002/06/11 20:06:39;  author: benkirk;  state: Exp;  lines: +7 -2
- - made the FE classes dof_index ignorant.  Now ask the dof map for the dof_indices associated with a cell
- - ----------------------------
- - revision 1.10
- - date: 2002/06/10 21:05:28;  author: benkirk;  state: Exp;  lines: +39 -21
- - can now mix approximation order for variables in a system.  There is a strange bug that causes the send_list size to be larger than the total number of dofs for the tet meshes on 2 procs
- - ----------------------------
- - revision 1.9
- - date: 2002/06/10 12:03:49;  author: benkirk;  state: Exp;  lines: +22 -15
- - adding FE order specification to SystemData
- - ----------------------------
- - revision 1.8
- - date: 2002/06/06 22:56:14;  author: benkirk;  state: Exp;  lines: +10 -3
- - added EquationSystems reference inside SystemData.  SystemData solve now calls assemble
- - ----------------------------
- - revision 1.7
- - date: 2002/06/06 21:34:44;  author: benkirk;  state: Exp;  lines: +17 -1
- - added some documentation and changed some functions to constant that should have been all along
- - ----------------------------
- - revision 1.6
- - date: 2002/06/06 20:57:30;  author: benkirk;  state: Exp;  lines: +14 -4
- - added assemble() function in system_data which is capable of assembling the system and vector
- - ----------------------------
- - revision 1.5
- - date: 2002/06/04 15:08:28;  author: benkirk;  state: Exp;  lines: +24 -2
- - more work on equation system support.  Each SystemData now contains a matrix, rhs, and solution.  Can call the solve
- - ----------------------------
- - revision 1.4
- - date: 2002/05/31 15:59:28;  author: benkirk;  state: Exp;  lines: +10 -1
- - added TODO make target.  Allow user to optionally control DOF coupling for matrix allocation
- - ----------------------------
- - revision 1.3
- - date: 2002/05/30 20:24:03;  author: benkirk;  state: Exp;  lines: +4 -4
- - icc v5.0 caught a prototype/implementation mismatch
- - ----------------------------
- - revision 1.2
- - date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +77 -17
- - added equation system support
- - ----------------------------
- - revision 1.1
- - date: 2002/05/28 20:33:42;  author: benkirk;  state: Exp;
- - added initial support for simulation groups (systems) and equation systems
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/tree.h,v
- - Working file: include/tree.h
- - head: 1.7
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 7;	selected revisions: 7
- - description:
- - ----------------------------
- - revision 1.7
- - date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +2 -222
- - Removing more unnecessary includes.
- - ----------------------------
- - revision 1.6
- - date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -8
- - The internals of the mesh have been significantly reworked.  The mesh
- - now contains pointers to elements and pointers to nodes.  The elements
- - contain pointers to the nodes they are connected to.  A node is like a
- - point with more information...  A node knows its global index and will
- - soon know what degrees of freedom are attached to it.
- - 
- -  - The Mesh::vertex() member has been replaced with the Mesh::point()
- -    member
- -  - Elem::point() has been added, now elements can access the points they
- -    are connected to directly.
- -  - Many function calls have been changed to reflect this...  For example,
- -    the Elem::centriod() method no longer requires a mesh object
- -  - A lot of asserts have been added to, um..., assert things.
- - 
- -  I have tested the new code with everything I could think of, but that
- -  does not mean it is perfect...
- - 
- - Soon, the DOF enumeration lists will move from the DofMap class to the
- - individual nodes and elements.  Also, the Elem class will become pure
- - virtual soon.
- - ----------------------------
- - revision 1.5
- - date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +10 -1
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.4
- - date: 2002/10/18 16:53:11;  author: benkirk;  state: Exp;  lines: +4 -4
- - grid2grid mapping now works
- - ----------------------------
- - revision 1.3
- - date: 2002/10/17 19:01:03;  author: benkirk;  state: Exp;  lines: +13 -12
- - Tree lookup basically working
- - ----------------------------
- - revision 1.2
- - date: 2002/10/16 21:26:33;  author: benkirk;  state: Exp;  lines: +112 -54
- - Tree builds properly.  Now need to figure out which element contains a point
- - ----------------------------
- - revision 1.1
- - date: 2002/10/15 21:14:18;  author: benkirk;  state: Exp;
- - creating tree data structure
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/tree_node.h,v
- - Working file: include/tree_node.h
- - head: 1.1
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 1;	selected revisions: 1
- - description:
- - ----------------------------
- - revision 1.1
- - date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;
- - Removing more unnecessary includes.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/utility.h,v
- - Working file: include/utility.h
- - head: 1.2
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 2;	selected revisions: 2
- - description:
- - ----------------------------
- - revision 1.2
- - date: 2002/10/27 14:39:44;  author: benkirk;  state: Exp;  lines: +16 -4
- - portability fixes
- - ----------------------------
- - revision 1.1
- - date: 2002/10/15 23:56:51;  author: peterson;  state: Exp;
- - Added beginning of ImageMagick stuff, but it is commented out so uncomment it first if you need it.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/xdrIO.h,v
- - Working file: include/xdrIO.h
- - head: 1.25
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 25;	selected revisions: 25
- - description:
- - ----------------------------
- - revision 1.25
- - date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +5 -1
- - Added documentation.
- - ----------------------------
- - revision 1.24
- - date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +2 -2
- - Created separate file for the element type enumeration.
- - ----------------------------
- - revision 1.23
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +7 -5
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.22
- - date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +72 -72
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.21
- - date: 2002/12/20 21:01:08;  author: benkirk;  state: Exp;  lines: +5 -5
- - fixed a memory leak in XdrIO.  passed the code through Valgrind, seems really clean.  Allow for << chaining in xdr_cxx.
- - ----------------------------
- - revision 1.20
- - date: 2002/09/06 14:53:28;  author: benkirk;  state: Exp;  lines: +1 -239
- - added Xdr class to provide a uniform interface for Xdr and ASCII IO.  The equation_systems read & write is also based on these methods.  I have validated it for one processor.  Still need to be sure that in the case of multiple processors each proc gets te relevant piece of data.
- - ----------------------------
- - revision 1.19
- - date: 2002/08/30 18:57:01;  author: benkirk;  state: Exp;  lines: +188 -4
- - working on C++ XDR wrapper
- - ----------------------------
- - revision 1.18
- - date: 2002/08/30 15:54:54;  author: benkirk;  state: Exp;  lines: +56 -1
- - forsaking netCDF.  writing a C++ XDR interface instead
- - ----------------------------
- - revision 1.17
- - date: 2002/08/22 18:25:36;  author: benkirk;  state: Exp;  lines: +9 -9
- - oops...  xdr.h is wrong.  use rpc.h
- - ----------------------------
- - revision 1.16
- - date: 2002/08/22 17:27:15;  author: benkirk;  state: Exp;  lines: +3 -3
- - include xdr.h, not rpc.h.  mostly for AIX compatibility
- - ----------------------------
- - revision 1.15
- - date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
- - added LGPL information to all files.  The library is now protected under the GNU LGPL.
- - ----------------------------
- - revision 1.14
- - date: 2002/06/06 13:03:00;  author: benkirk;  state: Exp;  lines: +3 -5
- - made xdrIO dimension-aware and the connectivity output is now more human-readable
- - ----------------------------
- - revision 1.13
- - date: 2002/05/21 23:20:23;  author: benkirk;  state: Exp;  lines: +2 -2
- - changed includes to comply with C++ standard
- - ----------------------------
- - revision 1.12
- - date: 2002/05/21 23:15:27;  author: benkirk;  state: Exp;  lines: +2 -2
- - changed includes to comply with C++ standard
- - ----------------------------
- - revision 1.11
- - date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +14 -8
- - refinement (at least uniform) now works
- - ----------------------------
- - revision 1.10
- - date: 2002/05/02 15:29:21;  author: benkirk;  state: Exp;  lines: +3 -3
- - added configure rules to support muptiple compilers
- - ----------------------------
- - revision 1.9
- - date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +3 -3
- - changed cout to std::cout
- - ----------------------------
- - revision 1.8
- - date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +3 -3
- - eliminated templates from everything except Petsc Interface
- - ----------------------------
- - revision 1.7
- - date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -3
- - better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
- - ----------------------------
- - revision 1.6
- - date: 2002/04/30 18:09:01;  author: peterson;  state: Exp;  lines: +6 -1
- - Removed unneeded filename stuff, pared down the size of objects.
- - ----------------------------
- - revision 1.5
- - date: 2002/04/30 16:19:58;  author: benkirk;  state: Exp;  lines: +14 -18
- -  hooks to add triangle support, reworked configure to only substitute paths if they are correctly located
- - ----------------------------
- - revision 1.4
- - date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +3 -3
- - changes for compatibility with icc v6.0
- - ----------------------------
- - revision 1.3
- - date: 2002/04/26 20:09:23;  author: benkirk;  state: Exp;  lines: +3 -3
- - change in xdrIO to be happy with Intel icc
- - ----------------------------
- - revision 1.2
- - date: 2002/04/25 21:50:54;  author: benkirk;  state: Exp;  lines: +2 -1
- - added includes to fix compile under gcc2.*
- - ----------------------------
- - revision 1.1
- - date: 2002/04/20 04:51:59;  author: peterson;  state: Exp;
- - Cosmetic changes.  Removed dependence on the filename.h
- - header file and the FileName class.  They can now be
- - removed at any time in the future.  Removed a bunch
- - of debugging print statements.  Everywhere changed
- - the name XdrMGF to the more generic name, XdrIO.
- - You might need to rebuild dependencies and/or make clean.
- - =============================================================================
- - 
- - RCS file: /home/benkirk/SOURCE/mesh/include/xdr_cxx.h,v
- - Working file: include/xdr_cxx.h
- - head: 1.6
- - branch:
- - locks: strict
- - access list:
- - symbolic names:
- - keyword substitution: kv
- - total revisions: 6;	selected revisions: 6
- - description:
- - ----------------------------
- - revision 1.6
- - date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +3 -1
- - Removing <iostream> from a bunch
- - of files where it was already included.
- - ----------------------------
- - revision 1.5
- - date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -3
- - compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
- - ----------------------------
- - revision 1.4
- - date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +138 -3
- - templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
- - ----------------------------
- - revision 1.3
- - date: 2002/12/20 21:01:08;  author: benkirk;  state: Exp;  lines: +35 -35
- - fixed a memory leak in XdrIO.  passed the code through Valgrind, seems really clean.  Allow for << chaining in xdr_cxx.
- - ----------------------------
- - revision 1.2
- - date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +44 -2
- - complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
- - ----------------------------
- - revision 1.1
- - date: 2002/09/06 14:53:28;  author: benkirk;  state: Exp;
- - added Xdr class to provide a uniform interface for Xdr and ASCII IO.  The equation_systems read & write is also based on these methods.  I have validated it for one processor.  Still need to be sure that in the case of multiple processors each proc gets te relevant piece of data.
- - =============================================================================
- --- 0 ----
- Index: Make.common.in
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/Make.common.in,v
- retrieving revision 1.10
- retrieving revision 1.15
- diff -c -r1.10 -r1.15
- *** Make.common.in	4 Feb 2003 16:29:49 -0000	1.10
- --- Make.common.in	20 Feb 2003 05:13:41 -0000	1.15
- ***************
- *** 1,4 ****
- ! # $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   
-   ###############################################################################
- --- 1,4 ----
- ! # $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   
-   ###############################################################################
- ***************
- *** 91,129 ****
-   GXX-VERSION          = @GXX_VERSION@
-   CXXDEPFLAG           = @CXXDEPFLAG@
-   CXXSHAREDFLAG        = @CXXSHAREDFLAG@
-   
-   enable-netcdf 	     = @enablenetcdf@
-   NETCDF_INCLUDE	     = @NETCDF_INCLUDE_PATH@
-   NETCDF_LIBRARY	     = @LIBNETCDF@ 
-   
-   enable-hdf4          = @enablehdf4@
-   HDF4_INCLUDE	     = @HDF4_INCLUDE_PATH@
-   HDF4_LIB_DIR	     = @HDF4_LIB_PATH@ 
-   HDF4_LIBS            = @HDF4_LIB_NAMES@
-   
-   enable-exodus        = @enableexodus@
-   EXODUS_INCLUDE       = @EXODUS_INCLUDE_PATH@
-   EXODUS_LIBRARY       = @LIBEXOII@
-   
-   enable-metis         = @enablemetis@
-   METIS_INCLUDE	     = @METIS_INCLUDE_PATH@
-   
-   enable-petsc         = @enablepetsc@
-   petsc-version        = @petscversion@
-   PETSC_DIR            = @PETSC_DIR@
-   
- ! enable-complex       = @enablecomplex@
-   
-   enable-sfc	     = @enablesfc@
-   SFC_INCLUDE	     = @SFC_INCLUDE_PATH@
-   
-   enable-tecplot       = @enabletecplot@
-   TECIO_INCLUDE        = @TECPLOT_INCLUDE_PATH@
-   TECIO_LIBRARY        = @TECPLOT_LIBRARY@
-   
-   doxygen		     = @DOXYGEN@
-   perl                 = @PERL@
-   
-   enable-optional      = @enableoptional@
-   
-   
- --- 91,157 ----
-   GXX-VERSION          = @GXX_VERSION@
-   CXXDEPFLAG           = @CXXDEPFLAG@
-   CXXSHAREDFLAG        = @CXXSHAREDFLAG@
- + CSHAREDFLAG          = @CXXSHAREDFLAG@
-   
- + # Complex variable support
- + enable-complex       = @enablecomplex@
- + 
- + # NetCDF platform-independent binary file support.
- + # Needed for ExodusII support
-   enable-netcdf 	     = @enablenetcdf@
-   NETCDF_INCLUDE	     = @NETCDF_INCLUDE_PATH@
-   NETCDF_LIBRARY	     = @LIBNETCDF@ 
-   
- + # HDF Version 4 support for platform-independent
- + # binary files.  Precludes (because it includes) NetCDF
-   enable-hdf4          = @enablehdf4@
-   HDF4_INCLUDE	     = @HDF4_INCLUDE_PATH@
-   HDF4_LIB_DIR	     = @HDF4_LIB_PATH@ 
-   HDF4_LIBS            = @HDF4_LIB_NAMES@
-   
- + # ExodusII binary file support for reading meshes in 
- + # Sandia National Lab's ExodusII format
-   enable-exodus        = @enableexodus@
-   EXODUS_INCLUDE       = @EXODUS_INCLUDE_PATH@
-   EXODUS_LIBRARY       = @LIBEXOII@
-   
- + # Metis graph partitiong software for domain decomposition
-   enable-metis         = @enablemetis@
-   METIS_INCLUDE	     = @METIS_INCLUDE_PATH@
-   
- + # Laspack iterative solvers for uniprocessor applications
- + enable-laspack       = @enablelaspack@
- + LASPACK_INCLUDE	     = @LASPACK_INCLUDE_PATH@
- + 
- + # Petsc iterative solvers for parallel and uniprocessor
- + # applications
-   enable-petsc         = @enablepetsc@
-   petsc-version        = @petscversion@
-   PETSC_DIR            = @PETSC_DIR@
-   
- ! # MPI message passing interface for parallel communication.
- ! # Only configured explicitly if Petsc is absent, otherwise
- ! # just snoop Petsc's MPI configuration
- ! enable-mpi           = @enablempi@
- ! MPI_INCLUDE          = @MPI_INCLUDE_PATH@
- ! MPI_LIBRARY          = @MPI_LIBRARY_PATH@
-   
- + # Hilbert and Morton space filling curves for domain decomposition
-   enable-sfc	     = @enablesfc@
-   SFC_INCLUDE	     = @SFC_INCLUDE_PATH@
-   
- + # Tecplot binary API support
-   enable-tecplot       = @enabletecplot@
-   TECIO_INCLUDE        = @TECPLOT_INCLUDE_PATH@
-   TECIO_LIBRARY        = @TECPLOT_LIBRARY@
-   
- + # Doxygen for generating documentation
-   doxygen		     = @DOXYGEN@
- + 
- + # Perl for making .depend
-   perl                 = @PERL@
-   
- + # Flag to disable all optional packages
-   enable-optional      = @enableoptional@
-   
-   
- ***************
- *** 141,155 ****
-   mesh_library_dir := $(pwd)/lib/$(hosttype)_$(METHOD)
-   
-   mesh_library     := $(mesh_library_dir)/libmesh.a
- - 
-   ifeq ($(enable-shared),yes) 
-     mesh_library   := $(mesh_library_dir)/libmesh.so
-   endif
-   
-   LIBS += $(mesh_library)
-   
- - 
- - 
-   ###############################################################################
-   # Compiler flags, different for optimized, debug, and profiler modes.
-   ifeq ($(debug-mode),on)
- --- 169,181 ----
-   mesh_library_dir := $(pwd)/lib/$(hosttype)_$(METHOD)
-   
-   mesh_library     := $(mesh_library_dir)/libmesh.a
-   ifeq ($(enable-shared),yes) 
-     mesh_library   := $(mesh_library_dir)/libmesh.so
- +   LDFLAGS += -Wl,-rpath,$(mesh_library_dir)
-   endif
-   
-   LIBS += $(mesh_library)
-   
-   ###############################################################################
-   # Compiler flags, different for optimized, debug, and profiler modes.
-   ifeq ($(debug-mode),on)
- ***************
- *** 175,182 ****
-     CFLAGS   += @CFLAGSS@ 
-   endif
-   
- - LIBS += $(LDFLAGS)
- - 
-   ifeq ($(prof-mode),on)
-     LIBS += -pg
-   endif
- --- 201,206 ----
- ***************
- *** 189,233 ****
-   
-   INCLUDE += -I$(pwd)/include
-   
-   
-   #
-   # Optional packages
-   ifeq ($(enable-optional),yes)
-   
-     # if Metis is used we need the header path
-     # and the lib
-     ifeq ($(enable-metis),yes)
- !     ifeq ($(enable-shared),yes)
- !       LIBS += $(pwd)/contrib/lib/$(hosttype)_$(METHOD)/libmetis.so
- !     else
- !       LIBS += $(pwd)/contrib/lib/$(hosttype)_$(METHOD)/libmetis.a
- !     endif
-       INCLUDE += -I$(METIS_INCLUDE)
-     endif
-   
-     # if Space filling curves are used we need the
-     # header path and the lib
-     ifeq ($(enable-sfc),yes)
- !     ifeq ($(enable-shared),yes)
- !       LIBS += $(pwd)/contrib/lib/$(hosttype)_$(METHOD)/libsfcurves.so
- !     else
- !       LIBS += $(pwd)/contrib/lib/$(hosttype)_$(METHOD)/libsfcurves.a
- !     endif
-       INCLUDE += -I$(SFC_INCLUDE)
-     endif
-   
-     #if Tecplot is used, link against tecio.a
-     ifeq ($(enable-tecplot),yes)
- !     LIBS += $(TECIO_LIBRARY)
-       INCLUDE += -I$(TECIO_INCLUDE)
-     endif	
-   
- -   #if Exodus is used, link against libexoIIv2c.a
- -   ifeq ($(enable-exodus),yes)
- -     LIBS += $(EXODUS_LIBRARY)
- -     INCLUDE += -I$(EXODUS_INCLUDE)
- -   endif
- - 
-     #############################################################################
-     # Petsc
-     ifeq ($(enable-petsc),yes)
- --- 213,259 ----
-   
-   INCLUDE += -I$(pwd)/include
-   
- + #
- + # Contributed source & libraries
- + EXTERNAL_LIBDIR := $(pwd)/contrib/lib/$(hosttype)_$(METHOD)
- + EXTERNAL_LIBEXT := .a
- + ifeq ($(enable-shared),yes) 
- +   EXTERNAL_LIBEXT := .so
- +   LDFLAGS += -Wl,-rpath,$(EXTERNAL_LIBDIR)
- + endif
- + 
-   
-   #
-   # Optional packages
-   ifeq ($(enable-optional),yes)
-   
- +   # if Laspack is used we need the header path
- +   # and the lib
- +   ifeq ($(enable-laspack),yes)
- +     LIBS    += $(EXTERNAL_LIBDIR)/liblaspack$(EXTERNAL_LIBEXT)
- +     INCLUDE += -I$(LASPACK_INCLUDE)
- +   endif
- + 
-     # if Metis is used we need the header path
-     # and the lib
-     ifeq ($(enable-metis),yes)
- !     LIBS    += $(EXTERNAL_LIBDIR)/libmetis$(EXTERNAL_LIBEXT)
-       INCLUDE += -I$(METIS_INCLUDE)
-     endif
-   
-     # if Space filling curves are used we need the
-     # header path and the lib
-     ifeq ($(enable-sfc),yes)
- !     LIBS    += $(EXTERNAL_LIBDIR)/libsfcurves$(EXTERNAL_LIBEXT)
-       INCLUDE += -I$(SFC_INCLUDE)
-     endif
-   
-     #if Tecplot is used, link against tecio.a
-     ifeq ($(enable-tecplot),yes)
- !     LIBS    += $(TECIO_LIBRARY)
-       INCLUDE += -I$(TECIO_INCLUDE)
-     endif	
-   
-     #############################################################################
-     # Petsc
-     ifeq ($(enable-petsc),yes)
- ***************
- *** 285,296 ****
-       LIBS += $(libs-PETSC) $(BLOCKSOLVE_LIB) $(SPOOLES_LIB) \
-   	    $(HYPRE_LIB) $(BLASLAPACK_LIB) $(MPI_LIB) \
-   	    $(X11_LIB) $(MATLAB_LIB) $(FLIBS)
- !   endif
-   
- ! endif # End of disable-all test
-   
-   
-   
-   #if netCDF is used, link against libnetcdf.a
-   # (note that netCDF is required by exodus if available,
-   # so we need to link to this _after_ exodus.
- --- 311,336 ----
-       LIBS += $(libs-PETSC) $(BLOCKSOLVE_LIB) $(SPOOLES_LIB) \
-   	    $(HYPRE_LIB) $(BLASLAPACK_LIB) $(MPI_LIB) \
-   	    $(X11_LIB) $(MATLAB_LIB) $(FLIBS)
- !   else
- ! 
- !     # MPI configuration when Petsc is absent
- !     ifeq ($(enable-mpi),yes)
- !       LIBS    += $(MPI_LIBRARY)
- !       INCLUDE += -I$(MPI_INCLUDE)
- !     endif
- ! 
- !   endif #end ifeq ($(enable-petsc),yes)
-   
- ! endif # End of disable-optional test
-   
-   
-   
- + #if Exodus is used, link against libexoIIv2c.a
- + ifeq ($(enable-exodus),yes)
- +   LIBS += $(EXODUS_LIBRARY)
- +   INCLUDE += -I$(EXODUS_INCLUDE)
- + endif
- + 
-   #if netCDF is used, link against libnetcdf.a
-   # (note that netCDF is required by exodus if available,
-   # so we need to link to this _after_ exodus.
- ***************
- *** 306,315 ****
-   endif
-   
-   
-   
-   ###############################################################################
-   # Build rules
- - 
-   
-   ##################################
-   # C++ rules                      #
- --- 346,359 ----
-   endif
-   
-   
- + #
- + # Finally, Append the linker flags to the libraries
- + LIBS += $(LDFLAGS)
- + 
- + 
-   
-   ###############################################################################
-   # Build rules
-   
-   ##################################
-   # C++ rules                      #
- Index: Makefile
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/Makefile,v
- retrieving revision 1.10
- diff -c -r1.10 Makefile
- *** Makefile	4 Feb 2003 16:29:49 -0000	1.10
- --- Makefile	21 Feb 2003 20:53:39 -0000
- ***************
- *** 1,4 ****
- ! # $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   #
-   # This is the Makefile for the libMesh library and helper
-   # applications.  This file is specific to the project.
- --- 1,4 ----
- ! # $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   #
-   # This is the Makefile for the libMesh library and helper
-   # applications.  This file is specific to the project.
- ***************
- *** 24,29 ****
- --- 24,33 ----
-   srcfiles 	:= $(wildcard src/*/*.C)
-   
-   #
- + # examples source files
- + examplesrcfiles	:= $(wildcard examples/ex?/ex?.C)
- + 
- + #
-   # object files
-   objects		:= $(patsubst %.C, %.$(obj-suffix), $(srcfiles))
-   
- ***************
- *** 74,82 ****
-   #
-   # Build the examples
-   #
- ! examples: $(mesh_library)
-   	@$(MAKE) -C examples
-   
-   
-   #
-   # Useful for checking make rules
- --- 78,92 ----
-   #
-   # Build the examples
-   #
- ! examples: $(mesh_library) $(examplesrcfiles)
-   	@$(MAKE) -C examples
-   
- + #
- + # Run the examples
- + #
- + run_examples: $(mesh_library)
- + 	@$(MAKE) -C examples run
- + 
-   
-   #
-   # Useful for checking make rules
- ***************
- *** 85,90 ****
- --- 95,101 ----
-   	@echo -e "Source Files:\n$(srcfiles)\n"
-   	@echo -e "Object Files:\n$(objects)\n"
-   	@echo -e "Target:\n$(target)\n"
- + 	@echo -e "Examples Source Files:\n$(examplesrcfiles)\n"
-   	@echo -e "CFLAGS:\n$(CXXFLAGS)\n"
-   	@echo -e "CXXFLAGS:\n$(CXXFLAGS)\n"
-   	@echo -e "INCLUDE:\n$(INCLUDE)\n"
- ***************
- *** 113,119 ****
-   	@$(MAKE) clobber
-   	@$(MAKE) -C contrib $(MAKECMDGOALS)
-   	@$(MAKE) -C examples $(MAKECMDGOALS)
- ! 	@rm -rf doc/html doc/latex doc/kdoc/*.html \
-                   doc/man/man3 doc/cvshtml/*.html doc/cvshtml/diff \
-   	        src/*/*.o src/*/*.g.o src/*/*.pg.o \
-   	        lib/*_opt lib/*_dbg lib/*_pro
- --- 124,130 ----
-   	@$(MAKE) clobber
-   	@$(MAKE) -C contrib $(MAKECMDGOALS)
-   	@$(MAKE) -C examples $(MAKECMDGOALS)
- ! 	@rm -rf doc/html/*.html doc/html/*.png doc/latex doc/kdoc/*.html \
-                   doc/man/man3 doc/cvshtml/*.html doc/cvshtml/diff \
-   	        src/*/*.o src/*/*.g.o src/*/*.pg.o \
-   	        lib/*_opt lib/*_dbg lib/*_pro
- ***************
- *** 121,127 ****
-   
-   
-   #
- ! # kdoc and doxygen documentation
-   #
-   doc:
-   	$(doxygen) ./doc/Doxyfile
- --- 132,138 ----
-   
-   
-   #
- ! # doxygen documentation
-   #
-   doc:
-   	$(doxygen) ./doc/Doxyfile
- ***************
- *** 150,156 ****
-   	$(CXX) $(CXXFLAGS) $(INCLUDE) src/apps/read_dat.cc -o bin/$@ $(LIBS) $(LDFLAGS)
-   
-   #
- ! # foo
-   #
-   foo: $(mesh_library) src/apps/foo.cc
-   	$(CXX) $(CXXFLAGS) $(INCLUDE) src/apps/foo.cc -o bin/$@ $(LIBS) $(LDFLAGS)
- --- 161,174 ----
-   	$(CXX) $(CXXFLAGS) $(INCLUDE) src/apps/read_dat.cc -o bin/$@ $(LIBS) $(LDFLAGS)
-   
-   #
- ! # test amr utility program
- ! #
- ! amr: $(mesh_library) src/apps/amr.cc
- ! 	$(CXX) $(CXXFLAGS) $(INCLUDE) src/apps/amr.cc -o bin/$@ $(LIBS) $(LDFLAGS)
- ! 
- ! 
- ! #
- ! # test foo utility program
-   #
-   foo: $(mesh_library) src/apps/foo.cc
-   	$(CXX) $(CXXFLAGS) $(INCLUDE) src/apps/foo.cc -o bin/$@ $(LIBS) $(LDFLAGS)
- ***************
- *** 167,172 ****
- --- 185,196 ----
-   #
-   testexodus: $(mesh_library) src/apps/testexodus.cc
-   	$(CXX) $(CXXFLAGS) $(INCLUDE) src/apps/testexodus.cc -o bin/$@ $(LIBS) $(LDFLAGS)
- + 
- + #
- + # Test program -- Remove this!
- + #
- + it_test: $(mesh_library) it_test.cc
- + 	$(CXX) $(CXXFLAGS) $(INCLUDE) it_test.cc -o it_test $(LIBS) $(LDFLAGS)
-   
-   #
-   # Make a TODO list
- Index: aclocal.m4
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/aclocal.m4,v
- retrieving revision 1.8
- retrieving revision 1.14
- diff -c -r1.8 -r1.14
- *** aclocal.m4	24 Jan 2003 17:24:35 -0000	1.8
- --- aclocal.m4	20 Feb 2003 04:59:57 -0000	1.14
- ***************
- *** 1,6 ****
-   
-   dnl -------------------------------------------------------------
- ! dnl $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   dnl -------------------------------------------------------------
-   dnl
-   
- --- 1,6 ----
-   
-   dnl -------------------------------------------------------------
- ! dnl $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   dnl -------------------------------------------------------------
-   dnl
-   
- ***************
- *** 99,105 ****
-             dnl Intel's ICC C++ compiler for Itanium?
-             is_intel_ecc="`($CXX -V 2>&1) | grep 'Intel(R) C++ Itanium(TM) Compiler'`"
-             if test "x$is_intel_ecc" != "x" ; then
- !             AC_MSG_RESULT(<<< C++ compiler is Intel Itanium ECC)
-               GXX_VERSION=intel_ecc
-             else
-     
- --- 99,105 ----
-             dnl Intel's ICC C++ compiler for Itanium?
-             is_intel_ecc="`($CXX -V 2>&1) | grep 'Intel(R) C++ Itanium(TM) Compiler'`"
-             if test "x$is_intel_ecc" != "x" ; then
- !             AC_MSG_RESULT(<<< C++ compiler is Intel Itanium ECC >>>)
-               GXX_VERSION=intel_ecc
-             else
-     
- ***************
- *** 273,279 ****
-             ;;
-     
-         MIPSpro)
- !           CXXFLAGSG="-DDEBUG -LANG:std -no_auto_include -ansi -g -woff 1355,1460"
-             CXXFLAGSO="-DNDEBUG -LANG:std -no_auto_include -ansi -O2 -w"
-             CFLAGSG="-DDEBUG"
-             CFLAGSO="-DNDEBUG -w"
- --- 273,279 ----
-             ;;
-     
-         MIPSpro)
- !           CXXFLAGSG="-DDEBUG -LANG:std -no_auto_include -ansi -g -woff 1460"
-             CXXFLAGSO="-DNDEBUG -LANG:std -no_auto_include -ansi -O2 -w"
-             CFLAGSG="-DDEBUG"
-             CFLAGSO="-DNDEBUG -w"
- ***************
- *** 317,324 ****
-             dnl #236 and
-             dnl #237: `controlling expression is constant' (in while(true), or
-             dnl       switch(dim))
- -           dnl #381: `extra ";" ignored' (at function or namespace closing
- -           dnl       brace)
-             dnl #487: `Inline function ... cannot be explicitly instantiated'
-             dnl       (also reported when we instantiate the entire class)
-             dnl #1136:`conversion to integral type of smaller size could lose data'
- --- 317,322 ----
- ***************
- *** 351,357 ****
-             CFLAGSG="-w1 -msg_display_number -timplicit_local -DDEBUG"
-             CFLAGSO="-w2 -msg_display_number -timplicit_local -DNDEBUG -O2 -fast"
-     
- !           for i in 175 236 237 381 487 1136 1156 111 1182 265 ; do
-               CXXFLAGSG="$CXXFLAGSG -msg_disable $i"
-               CXXFLAGSO="$CXXFLAGSO -msg_disable $i"
-               dnl CFLAGSG="$CXXFLAGSG -msg_disable $i"
- --- 349,355 ----
-             CFLAGSG="-w1 -msg_display_number -timplicit_local -DDEBUG"
-             CFLAGSO="-w2 -msg_display_number -timplicit_local -DNDEBUG -O2 -fast"
-     
- !           for i in 175 236 237 487 1136 1156 111 1182 265 ; do
-               CXXFLAGSG="$CXXFLAGSG -msg_disable $i"
-               CXXFLAGSO="$CXXFLAGSO -msg_disable $i"
-               dnl CFLAGSG="$CXXFLAGSG -msg_disable $i"
- ***************
- *** 433,444 ****
-       AC_PROG_F77            dnl Petsc requires linking with FORTRAN libraries 
-       AC_F77_LIBRARY_LDFLAGS
-       AC_SUBST(PETSC_DIR)
- !     AC_DEFINE(HAVE_PETSC, 1, [Flag indicating whether or not Petsc is available])
-       petscmajor=`grep "define PETSC_VERSION_MAJOR" $PETSC_DIR/include/petscversion.h | sed -e "s/#define PETSC_VERSION_MAJOR[ ]*//g"`
-       petscminor=`grep "define PETSC_VERSION_MINOR" $PETSC_DIR/include/petscversion.h | sed -e "s/#define PETSC_VERSION_MINOR[ ]*//g"`
-       petscsubminor=`grep "define PETSC_VERSION_SUBMINOR" $PETSC_DIR/include/petscversion.h | sed -e "s/#define PETSC_VERSION_SUBMINOR[ ]*//g"`
-       petscversion=$petscmajor.$petscminor.$petscsubminor
- !     echo "<<< Configuring library with petsc version " $petscversion " support >>>"
-       AC_SUBST(petscversion)
-     else
-       enablepetsc=no  
- --- 431,445 ----
-       AC_PROG_F77            dnl Petsc requires linking with FORTRAN libraries 
-       AC_F77_LIBRARY_LDFLAGS
-       AC_SUBST(PETSC_DIR)
- !     AC_DEFINE(HAVE_PETSC, 1,
- ! 	      [Flag indicating whether or not Petsc is available])
- !     AC_DEFINE(HAVE_MPI, 1,
- ! 	      [Flag indicating whether or not MPI is available])
-       petscmajor=`grep "define PETSC_VERSION_MAJOR" $PETSC_DIR/include/petscversion.h | sed -e "s/#define PETSC_VERSION_MAJOR[ ]*//g"`
-       petscminor=`grep "define PETSC_VERSION_MINOR" $PETSC_DIR/include/petscversion.h | sed -e "s/#define PETSC_VERSION_MINOR[ ]*//g"`
-       petscsubminor=`grep "define PETSC_VERSION_SUBMINOR" $PETSC_DIR/include/petscversion.h | sed -e "s/#define PETSC_VERSION_SUBMINOR[ ]*//g"`
-       petscversion=$petscmajor.$petscminor.$petscsubminor
- !     AC_MSG_RESULT(<<< Configuring library with petsc version $petscversion support >>>)
-       AC_SUBST(petscversion)
-     else
-       enablepetsc=no  
- ***************
- *** 451,456 ****
- --- 452,485 ----
-   
-   
-   dnl -------------------------------------------------------------
- + dnl Mpi
- + dnl -------------------------------------------------------------
- + AC_DEFUN(CONFIGURE_MPI, 
- + [
- +   AC_CHECK_FILE($MPIHOME/include/mpi.h,
- +                 MPI_INCLUDE_PATH=$MPIHOME/include)
- + 
- +   AC_CHECK_FILE($MPIHOME/lib/libmpich.a,
- +                 MPI_LIBRARY_PATH=$MPIHOME/lib/libmpich.a,
- +                 MPI_LIBRARY_PATH=/mpich_bar_not_there)
- + 
- +   if (test -r $MPI_INCLUDE_PATH/mpi.h -a -r $MPI_LIBRARY_PATH) ; then
- +     AC_SUBST(MPI_INCLUDE_PATH)
- +     AC_SUBST(MPI_LIBRARY_PATH)
- +     AC_DEFINE(HAVE_MPI, 1,
- + 	      [Flag indicating whether or not MPI is available])
- +     AC_MSG_RESULT(<<< Configuring library with MPI support >>>)
- +   else
- +     enablempi=no
- +   fi
- + 
- +   AC_SUBST(enablempi)	
- + ])
- + dnl -------------------------------------------------------------
- + 
- + 
- + 
- + dnl -------------------------------------------------------------
-   dnl Space Filling Curves
-   dnl -------------------------------------------------------------
-   AC_DEFUN(CONFIGURE_SFC, 
- ***************
- *** 468,473 ****
- --- 497,526 ----
-     fi
-   
-     AC_SUBST(enablesfc)
- + ])
- + dnl -------------------------------------------------------------
- + 
- + 
- + 
- + dnl -------------------------------------------------------------
- + dnl LASPACK Iterative Solvers
- + dnl -------------------------------------------------------------
- + AC_DEFUN(CONFIGURE_LASPACK, 
- + [
- +   AC_CHECK_FILE(./contrib/laspack/lastypes.h,
- +                 LASPACK_INCLUDE_PATH=$PWD/contrib/laspack)
- + 
- +   if (test -r $LASPACK_INCLUDE_PATH/lastypes.h) ; then
- +     AC_SUBST(LASPACK_INCLUDE_PATH)
- +     AC_DEFINE(HAVE_LASPACK, 1,
- +               [Flag indicating whether or not LASPACK iterative solvers are available])
- +     laspack_version=`grep "define LASPACK_VERSION " $LASPACK_INCLUDE_PATH/version.h | sed -e "s/[[^0-9.]]*//g"`
- +     AC_MSG_RESULT(<<< Configuring library with LASPACK version $laspack_version support >>>)
- +   else
- +     enablelaspack=no
- +   fi
- + 
- +   AC_SUBST(enablelaspack)
-   ])
-   dnl -------------------------------------------------------------
-   
- Index: configure
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/configure,v
- retrieving revision 1.7
- retrieving revision 1.15
- diff -c -r1.7 -r1.15
- *** configure	27 Jan 2003 13:46:18 -0000	1.7
- --- configure	21 Feb 2003 18:31:19 -0000	1.15
- ***************
- *** 1,5 ****
-   #! /bin/sh
- ! # From configure.in Revision: 1.6 .
-   # Guess values for system-dependent variables and create Makefiles.
-   # Generated by GNU Autoconf 2.53.
-   #
- --- 1,5 ----
-   #! /bin/sh
- ! # From configure.in Revision: 1.13 .
-   # Guess values for system-dependent variables and create Makefiles.
-   # Generated by GNU Autoconf 2.53.
-   #
- ***************
- *** 850,867 ****
-     --enable-ifem build with infinite elements
-     --enable-xdr Set compiler flags to enable xdr binary I/O
-     --enable-mgf-workaround Set compiler flags to work around MGF bc problem
-     --enable-hdf4 Set compiler flags to enable HDF4 binary I/O
-     --enable-netcdf Set compiler flags to enable netCDF binary I/O
-     --enable-exodus build with ExodusII binary support
-     --enable-optional Set compiler flags to disable optional external libraries
- -   --enable-sfc Set compiler flags to build with Sfc suppport
-     --enable-metis Set compiler flags to build with Metis suppport
-     --enable-tecplot build with Tecplot binary support
- -   --enable-papi Set compiler flags to build with Papi suppport
-     --enable-petsc Set compiler flags to build with Petsc suppport
- !   --enable-complex Set compiler flags to build with complex number support
- !   --enable-reference-counting build with reference counting suppport
- !   --enable-perflog build with performance logging turned on
-   
-   Optional Packages:
-     --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
- --- 850,868 ----
-     --enable-ifem build with infinite elements
-     --enable-xdr Set compiler flags to enable xdr binary I/O
-     --enable-mgf-workaround Set compiler flags to work around MGF bc problem
- +   --enable-complex Set compiler flags to build with complex number support
- +   --enable-laspack Set compiler flags to build with LASPACK suppport
- +   --enable-reference-counting build with reference counting suppport
- +   --enable-perflog build with performance logging turned on
-     --enable-hdf4 Set compiler flags to enable HDF4 binary I/O
-     --enable-netcdf Set compiler flags to enable netCDF binary I/O
-     --enable-exodus build with ExodusII binary support
-     --enable-optional Set compiler flags to disable optional external libraries
-     --enable-metis Set compiler flags to build with Metis suppport
- +   --enable-sfc Set compiler flags to build with Sfc suppport
-     --enable-tecplot build with Tecplot binary support
-     --enable-petsc Set compiler flags to build with Petsc suppport
- !   --enable-mpi build with MPI message passing support
-   
-   Optional Packages:
-     --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
- ***************
- *** 2503,2510 ****
-   
-                       is_intel_ecc="`($CXX -V 2>&1) | grep 'Intel(R) C++ Itanium(TM) Compiler'`"
-             if test "x$is_intel_ecc" != "x" ; then
- !             echo "$as_me:$LINENO: result: <<< C++ compiler is Intel Itanium ECC" >&5
- ! echo "${ECHO_T}<<< C++ compiler is Intel Itanium ECC" >&6
-               GXX_VERSION=intel_ecc
-             else
-   
- --- 2504,2511 ----
-   
-                       is_intel_ecc="`($CXX -V 2>&1) | grep 'Intel(R) C++ Itanium(TM) Compiler'`"
-             if test "x$is_intel_ecc" != "x" ; then
- !             echo "$as_me:$LINENO: result: <<< C++ compiler is Intel Itanium ECC >>>" >&5
- ! echo "${ECHO_T}<<< C++ compiler is Intel Itanium ECC >>>" >&6
-               GXX_VERSION=intel_ecc
-             else
-   
- ***************
- *** 2634,2640 ****
-             ;;
-   
-         MIPSpro)
- !           CXXFLAGSG="-DDEBUG -LANG:std -no_auto_include -ansi -g -woff 1355,1460"
-             CXXFLAGSO="-DNDEBUG -LANG:std -no_auto_include -ansi -O2 -w"
-             CFLAGSG="-DDEBUG"
-             CFLAGSO="-DNDEBUG -w"
- --- 2635,2641 ----
-             ;;
-   
-         MIPSpro)
- !           CXXFLAGSG="-DDEBUG -LANG:std -no_auto_include -ansi -g -woff 1460"
-             CXXFLAGSO="-DNDEBUG -LANG:std -no_auto_include -ansi -O2 -w"
-             CFLAGSG="-DDEBUG"
-             CFLAGSO="-DNDEBUG -w"
- ***************
- *** 2666,2672 ****
-             CFLAGSG="-w1 -msg_display_number -timplicit_local -DDEBUG"
-             CFLAGSO="-w2 -msg_display_number -timplicit_local -DNDEBUG -O2 -fast"
-   
- !           for i in 175 236 237 381 487 1136 1156 111 1182 265 ; do
-               CXXFLAGSG="$CXXFLAGSG -msg_disable $i"
-               CXXFLAGSO="$CXXFLAGSO -msg_disable $i"
-                                     done
- --- 2667,2673 ----
-             CFLAGSG="-w1 -msg_display_number -timplicit_local -DDEBUG"
-             CFLAGSO="-w2 -msg_display_number -timplicit_local -DNDEBUG -O2 -fast"
-   
- !           for i in 175 236 237 487 1136 1156 111 1182 265 ; do
-               CXXFLAGSG="$CXXFLAGSG -msg_disable $i"
-               CXXFLAGSO="$CXXFLAGSO -msg_disable $i"
-                                     done
- ***************
- *** 3467,3472 ****
- --- 3468,3586 ----
-   done
-   
-   
- + for ac_header in ostream
- + do
- + as_ac_Header=`echo "ac_cv_header_$ac_header" | $as_tr_sh`
- + if eval "test \"\${$as_ac_Header+set}\" = set"; then
- +   echo "$as_me:$LINENO: checking for $ac_header" >&5
- + echo $ECHO_N "checking for $ac_header... $ECHO_C" >&6
- + if eval "test \"\${$as_ac_Header+set}\" = set"; then
- +   echo $ECHO_N "(cached) $ECHO_C" >&6
- + fi
- + echo "$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`" >&5
- + echo "${ECHO_T}`eval echo '${'$as_ac_Header'}'`" >&6
- + else
- +   # Is the header compilable?
- + echo "$as_me:$LINENO: checking $ac_header usability" >&5
- + echo $ECHO_N "checking $ac_header usability... $ECHO_C" >&6
- + cat >conftest.$ac_ext <<_ACEOF
- + #line $LINENO "configure"
- + #include "confdefs.h"
- + $ac_includes_default
- + #include <$ac_header>
- + _ACEOF
- + rm -f conftest.$ac_objext
- + if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
- +   (eval $ac_compile) 2>&5
- +   ac_status=$?
- +   echo "$as_me:$LINENO: \$? = $ac_status" >&5
- +   (exit $ac_status); } &&
- +          { ac_try='test -s conftest.$ac_objext'
- +   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
- +   (eval $ac_try) 2>&5
- +   ac_status=$?
- +   echo "$as_me:$LINENO: \$? = $ac_status" >&5
- +   (exit $ac_status); }; }; then
- +   ac_header_compiler=yes
- + else
- +   echo "$as_me: failed program was:" >&5
- + cat conftest.$ac_ext >&5
- + ac_header_compiler=no
- + fi
- + rm -f conftest.$ac_objext conftest.$ac_ext
- + echo "$as_me:$LINENO: result: $ac_header_compiler" >&5
- + echo "${ECHO_T}$ac_header_compiler" >&6
- + 
- + # Is the header present?
- + echo "$as_me:$LINENO: checking $ac_header presence" >&5
- + echo $ECHO_N "checking $ac_header presence... $ECHO_C" >&6
- + cat >conftest.$ac_ext <<_ACEOF
- + #line $LINENO "configure"
- + #include "confdefs.h"
- + #include <$ac_header>
- + _ACEOF
- + if { (eval echo "$as_me:$LINENO: \"$ac_cpp conftest.$ac_ext\"") >&5
- +   (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1
- +   ac_status=$?
- +   egrep -v '^ *\+' conftest.er1 >conftest.err
- +   rm -f conftest.er1
- +   cat conftest.err >&5
- +   echo "$as_me:$LINENO: \$? = $ac_status" >&5
- +   (exit $ac_status); } >/dev/null; then
- +   if test -s conftest.err; then
- +     ac_cpp_err=$ac_cxx_preproc_warn_flag
- +   else
- +     ac_cpp_err=
- +   fi
- + else
- +   ac_cpp_err=yes
- + fi
- + if test -z "$ac_cpp_err"; then
- +   ac_header_preproc=yes
- + else
- +   echo "$as_me: failed program was:" >&5
- +   cat conftest.$ac_ext >&5
- +   ac_header_preproc=no
- + fi
- + rm -f conftest.err conftest.$ac_ext
- + echo "$as_me:$LINENO: result: $ac_header_preproc" >&5
- + echo "${ECHO_T}$ac_header_preproc" >&6
- + 
- + # So?  What about this header?
- + case $ac_header_compiler:$ac_header_preproc in
- +   yes:no )
- +     { echo "$as_me:$LINENO: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!" >&5
- + echo "$as_me: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!" >&2;}
- +     { echo "$as_me:$LINENO: WARNING: $ac_header: proceeding with the preprocessor's result" >&5
- + echo "$as_me: WARNING: $ac_header: proceeding with the preprocessor's result" >&2;};;
- +   no:yes )
- +     { echo "$as_me:$LINENO: WARNING: $ac_header: present but cannot be compiled" >&5
- + echo "$as_me: WARNING: $ac_header: present but cannot be compiled" >&2;}
- +     { echo "$as_me:$LINENO: WARNING: $ac_header: check for missing prerequisite headers?" >&5
- + echo "$as_me: WARNING: $ac_header: check for missing prerequisite headers?" >&2;}
- +     { echo "$as_me:$LINENO: WARNING: $ac_header: proceeding with the preprocessor's result" >&5
- + echo "$as_me: WARNING: $ac_header: proceeding with the preprocessor's result" >&2;};;
- + esac
- + echo "$as_me:$LINENO: checking for $ac_header" >&5
- + echo $ECHO_N "checking for $ac_header... $ECHO_C" >&6
- + if eval "test \"\${$as_ac_Header+set}\" = set"; then
- +   echo $ECHO_N "(cached) $ECHO_C" >&6
- + else
- +   eval "$as_ac_Header=$ac_header_preproc"
- + fi
- + echo "$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`" >&5
- + echo "${ECHO_T}`eval echo '${'$as_ac_Header'}'`" >&6
- + 
- + fi
- + if test `eval echo '${'$as_ac_Header'}'` = yes; then
- +   cat >>confdefs.h <<_ACEOF
- + #define `echo "HAVE_$ac_header" | $as_tr_cpp` 1
- + _ACEOF
- + 
- + fi
- + 
- + done
- + 
-   
-   PWD=`pwd`
-   
- ***************
- *** 3520,3528 ****
- --- 3634,3646 ----
-   
-     echo "$as_me:$LINENO: result: <<< Configuring library with expensive data structures enabled >>>" >&5
-   echo "${ECHO_T}<<< Configuring library with expensive data structures enabled >>>" >&6
- + else
- +   echo "$as_me:$LINENO: result: <<< Configuring library with lightweight data structures >>>" >&5
- + echo "${ECHO_T}<<< Configuring library with lightweight data structures >>>" >&6
-   fi
-   
-   
- + 
-   # Check whether --enable-ifem or --disable-ifem was given.
-   if test "${enable_ifem+set}" = set; then
-     enableval="$enable_ifem"
- ***************
- *** 3543,3551 ****
-   
-   
-   
- - 
- - 
- - 
-   # Check whether --enable-xdr or --disable-xdr was given.
-   if test "${enable_xdr+set}" = set; then
-     enableval="$enable_xdr"
- --- 3661,3666 ----
- ***************
- *** 3690,3695 ****
- --- 3805,3935 ----
-      fi
-   
-   
- + 
- + # Check whether --enable-complex or --disable-complex was given.
- + if test "${enable_complex+set}" = set; then
- +   enableval="$enable_complex"
- +   enablecomplex=$enableval
- + else
- +   enablecomplex=no
- + fi;
- + 
- + if test "$enablecomplex" != no ; then
- + 
- + cat >>confdefs.h <<\_ACEOF
- + #define USE_COMPLEX_NUMBERS 1
- + _ACEOF
- + 
- +   echo "$as_me:$LINENO: result: <<< Configuring library with complex number support >>>" >&5
- + echo "${ECHO_T}<<< Configuring library with complex number support >>>" >&6
- + 
- + 
- + else
- + 
- + cat >>confdefs.h <<\_ACEOF
- + #define USE_REAL_NUMBERS 1
- + _ACEOF
- + 
- +   echo "$as_me:$LINENO: result: <<< Configuring library with real number support >>>" >&5
- + echo "${ECHO_T}<<< Configuring library with real number support >>>" >&6
- + 
- + 
- + # Check whether --enable-laspack or --disable-laspack was given.
- + if test "${enable_laspack+set}" = set; then
- +   enableval="$enable_laspack"
- +   enablelaspack=$enableval
- + else
- +   enablelaspack=yes
- + fi;
- + 
- + if test "$enablelaspack" != no ; then
- + 
- +   echo "$as_me:$LINENO: checking for ./contrib/laspack/lastypes.h" >&5
- + echo $ECHO_N "checking for ./contrib/laspack/lastypes.h... $ECHO_C" >&6
- + if test "${ac_cv_file___contrib_laspack_lastypes_h+set}" = set; then
- +   echo $ECHO_N "(cached) $ECHO_C" >&6
- + else
- +   test "$cross_compiling" = yes &&
- +   { { echo "$as_me:$LINENO: error: cannot check for file existence when cross compiling" >&5
- + echo "$as_me: error: cannot check for file existence when cross compiling" >&2;}
- +    { (exit 1); exit 1; }; }
- + if test -r "./contrib/laspack/lastypes.h"; then
- +   ac_cv_file___contrib_laspack_lastypes_h=yes
- + else
- +   ac_cv_file___contrib_laspack_lastypes_h=no
- + fi
- + fi
- + echo "$as_me:$LINENO: result: $ac_cv_file___contrib_laspack_lastypes_h" >&5
- + echo "${ECHO_T}$ac_cv_file___contrib_laspack_lastypes_h" >&6
- + if test $ac_cv_file___contrib_laspack_lastypes_h = yes; then
- +   LASPACK_INCLUDE_PATH=$PWD/contrib/laspack
- + fi
- + 
- + 
- +   if (test -r $LASPACK_INCLUDE_PATH/lastypes.h) ; then
- + 
- + 
- + cat >>confdefs.h <<\_ACEOF
- + #define HAVE_LASPACK 1
- + _ACEOF
- + 
- +     laspack_version=`grep "define LASPACK_VERSION " $LASPACK_INCLUDE_PATH/version.h | sed -e "s/[^0-9.]*//g"`
- +     echo "$as_me:$LINENO: result: <<< Configuring library with LASPACK version $laspack_version support >>>" >&5
- + echo "${ECHO_T}<<< Configuring library with LASPACK version $laspack_version support >>>" >&6
- +   else
- +     enablelaspack=no
- +   fi
- + 
- + 
- + 
- + fi
- + 
- + fi
- + 
- + 
- + 
- + # Check whether --enable-reference-counting or --disable-reference-counting was given.
- + if test "${enable_reference_counting+set}" = set; then
- +   enableval="$enable_reference_counting"
- +   enablerefct=$enableval
- + else
- +   enablerefct=yes
- + fi;
- + 
- + if test "$enablerefct" != no ; then
- + 
- + cat >>confdefs.h <<\_ACEOF
- + #define ENABLE_REFERENCE_COUNTING 1
- + _ACEOF
- + 
- +   echo "$as_me:$LINENO: result: <<< Configuring library with reference counting support >>>" >&5
- + echo "${ECHO_T}<<< Configuring library with reference counting support >>>" >&6
- + fi
- + 
- + 
- + 
- + # Check whether --enable-perflog or --disable-perflog was given.
- + if test "${enable_perflog+set}" = set; then
- +   enableval="$enable_perflog"
- +   enableperflog=$enableval
- + else
- +   enableperflog=no
- + fi;
- + 
- + if test "$enableperflog" != no ; then
- + 
- + cat >>confdefs.h <<\_ACEOF
- + #define ENABLE_PERFORMANCE_LOGGING 1
- + _ACEOF
- + 
- +   echo "$as_me:$LINENO: result: <<< Configuring library with performance logging support >>>" >&5
- + echo "${ECHO_T}<<< Configuring library with performance logging support >>>" >&6
- + fi
- + 
- + 
- + 
- + 
- + 
-   # Check whether --enable-hdf4 or --disable-hdf4 was given.
-   if test "${enable_hdf4+set}" = set; then
-     enableval="$enable_hdf4"
- ***************
- *** 3763,3769 ****
-   
-   
-   
- - 
-   else
-   
-   # Check whether --enable-netcdf or --disable-netcdf was given.
- --- 4003,4008 ----
- ***************
- *** 3922,3928 ****
-   
-   
-   
- - 
-   # Check whether --enable-optional or --disable-optional was given.
-   if test "${enable_optional+set}" = set; then
-     enableval="$enable_optional"
- --- 4161,4166 ----
- ***************
- *** 3941,3989 ****
-   echo "${ECHO_T}---------------------------------------------" >&6
-   
-   
- ! # Check whether --enable-sfc or --disable-sfc was given.
- ! if test "${enable_sfc+set}" = set; then
- !   enableval="$enable_sfc"
- !   enablesfc=$enableval
-   else
- !   enablesfc=yes
-   fi;
-   
- ! if test "$enablesfc" != no ; then
-   
- !   echo "$as_me:$LINENO: checking for ./contrib/sfcurves/sfcurves.h" >&5
- ! echo $ECHO_N "checking for ./contrib/sfcurves/sfcurves.h... $ECHO_C" >&6
- ! if test "${ac_cv_file___contrib_sfcurves_sfcurves_h+set}" = set; then
-     echo $ECHO_N "(cached) $ECHO_C" >&6
-   else
-     test "$cross_compiling" = yes &&
-     { { echo "$as_me:$LINENO: error: cannot check for file existence when cross compiling" >&5
-   echo "$as_me: error: cannot check for file existence when cross compiling" >&2;}
-      { (exit 1); exit 1; }; }
- ! if test -r "./contrib/sfcurves/sfcurves.h"; then
- !   ac_cv_file___contrib_sfcurves_sfcurves_h=yes
-   else
- !   ac_cv_file___contrib_sfcurves_sfcurves_h=no
-   fi
-   fi
- ! echo "$as_me:$LINENO: result: $ac_cv_file___contrib_sfcurves_sfcurves_h" >&5
- ! echo "${ECHO_T}$ac_cv_file___contrib_sfcurves_sfcurves_h" >&6
- ! if test $ac_cv_file___contrib_sfcurves_sfcurves_h = yes; then
- !   SFC_INCLUDE_PATH=$PWD/contrib/sfcurves
-   fi
-   
-   
- !   if (test -r $SFC_INCLUDE_PATH/sfcurves.h) ; then
-   
-   
-   cat >>confdefs.h <<\_ACEOF
- ! #define HAVE_SFCURVES 1
-   _ACEOF
-   
- !     echo "$as_me:$LINENO: result: <<< Configuring library with SFC support >>>" >&5
- ! echo "${ECHO_T}<<< Configuring library with SFC support >>>" >&6
-     else
- !     enablesfc=no
-     fi
-   
-   
- --- 4179,4228 ----
-   echo "${ECHO_T}---------------------------------------------" >&6
-   
-   
- ! 
- ! # Check whether --enable-metis or --disable-metis was given.
- ! if test "${enable_metis+set}" = set; then
- !   enableval="$enable_metis"
- !   enablemetis=$enableval
-   else
- !   enablemetis=yes
-   fi;
-   
- ! if test "$enablemetis" != no ; then
-   
- !   echo "$as_me:$LINENO: checking for ./contrib/metis/Lib/metis.h" >&5
- ! echo $ECHO_N "checking for ./contrib/metis/Lib/metis.h... $ECHO_C" >&6
- ! if test "${ac_cv_file___contrib_metis_Lib_metis_h+set}" = set; then
-     echo $ECHO_N "(cached) $ECHO_C" >&6
-   else
-     test "$cross_compiling" = yes &&
-     { { echo "$as_me:$LINENO: error: cannot check for file existence when cross compiling" >&5
-   echo "$as_me: error: cannot check for file existence when cross compiling" >&2;}
-      { (exit 1); exit 1; }; }
- ! if test -r "./contrib/metis/Lib/metis.h"; then
- !   ac_cv_file___contrib_metis_Lib_metis_h=yes
-   else
- !   ac_cv_file___contrib_metis_Lib_metis_h=no
-   fi
-   fi
- ! echo "$as_me:$LINENO: result: $ac_cv_file___contrib_metis_Lib_metis_h" >&5
- ! echo "${ECHO_T}$ac_cv_file___contrib_metis_Lib_metis_h" >&6
- ! if test $ac_cv_file___contrib_metis_Lib_metis_h = yes; then
- !   METIS_INCLUDE_PATH=$PWD/contrib/metis/Lib
-   fi
-   
-   
- !   if (test -r $METIS_INCLUDE_PATH/metis.h) ; then
-   
-   
-   cat >>confdefs.h <<\_ACEOF
- ! #define HAVE_METIS 1
-   _ACEOF
-   
- !     echo "$as_me:$LINENO: result: <<< Configuring library with Metis support >>>" >&5
- ! echo "${ECHO_T}<<< Configuring library with Metis support >>>" >&6
-     else
- !     enablemetis=no
-     fi
-   
-   
- ***************
- *** 3991,4040 ****
-   fi
-   
-   
- ! 
- ! # Check whether --enable-metis or --disable-metis was given.
- ! if test "${enable_metis+set}" = set; then
- !   enableval="$enable_metis"
- !   enablemetis=$enableval
-   else
- !   enablemetis=yes
-   fi;
-   
- ! if test "$enablemetis" != no ; then
-   
- !   echo "$as_me:$LINENO: checking for ./contrib/metis/Lib/metis.h" >&5
- ! echo $ECHO_N "checking for ./contrib/metis/Lib/metis.h... $ECHO_C" >&6
- ! if test "${ac_cv_file___contrib_metis_Lib_metis_h+set}" = set; then
-     echo $ECHO_N "(cached) $ECHO_C" >&6
-   else
-     test "$cross_compiling" = yes &&
-     { { echo "$as_me:$LINENO: error: cannot check for file existence when cross compiling" >&5
-   echo "$as_me: error: cannot check for file existence when cross compiling" >&2;}
-      { (exit 1); exit 1; }; }
- ! if test -r "./contrib/metis/Lib/metis.h"; then
- !   ac_cv_file___contrib_metis_Lib_metis_h=yes
-   else
- !   ac_cv_file___contrib_metis_Lib_metis_h=no
-   fi
-   fi
- ! echo "$as_me:$LINENO: result: $ac_cv_file___contrib_metis_Lib_metis_h" >&5
- ! echo "${ECHO_T}$ac_cv_file___contrib_metis_Lib_metis_h" >&6
- ! if test $ac_cv_file___contrib_metis_Lib_metis_h = yes; then
- !   METIS_INCLUDE_PATH=$PWD/contrib/metis/Lib
-   fi
-   
-   
- !   if (test -r $METIS_INCLUDE_PATH/metis.h) ; then
-   
-   
-   cat >>confdefs.h <<\_ACEOF
- ! #define HAVE_METIS 1
-   _ACEOF
-   
- !     echo "$as_me:$LINENO: result: <<< Configuring library with Metis support >>>" >&5
- ! echo "${ECHO_T}<<< Configuring library with Metis support >>>" >&6
-     else
- !     enablemetis=no
-     fi
-   
-   
- --- 4230,4278 ----
-   fi
-   
-   
- ! # Check whether --enable-sfc or --disable-sfc was given.
- ! if test "${enable_sfc+set}" = set; then
- !   enableval="$enable_sfc"
- !   enablesfc=$enableval
-   else
- !   enablesfc=yes
-   fi;
-   
- ! if test "$enablesfc" != no ; then
-   
- !   echo "$as_me:$LINENO: checking for ./contrib/sfcurves/sfcurves.h" >&5
- ! echo $ECHO_N "checking for ./contrib/sfcurves/sfcurves.h... $ECHO_C" >&6
- ! if test "${ac_cv_file___contrib_sfcurves_sfcurves_h+set}" = set; then
-     echo $ECHO_N "(cached) $ECHO_C" >&6
-   else
-     test "$cross_compiling" = yes &&
-     { { echo "$as_me:$LINENO: error: cannot check for file existence when cross compiling" >&5
-   echo "$as_me: error: cannot check for file existence when cross compiling" >&2;}
-      { (exit 1); exit 1; }; }
- ! if test -r "./contrib/sfcurves/sfcurves.h"; then
- !   ac_cv_file___contrib_sfcurves_sfcurves_h=yes
-   else
- !   ac_cv_file___contrib_sfcurves_sfcurves_h=no
-   fi
-   fi
- ! echo "$as_me:$LINENO: result: $ac_cv_file___contrib_sfcurves_sfcurves_h" >&5
- ! echo "${ECHO_T}$ac_cv_file___contrib_sfcurves_sfcurves_h" >&6
- ! if test $ac_cv_file___contrib_sfcurves_sfcurves_h = yes; then
- !   SFC_INCLUDE_PATH=$PWD/contrib/sfcurves
-   fi
-   
-   
- !   if (test -r $SFC_INCLUDE_PATH/sfcurves.h) ; then
-   
-   
-   cat >>confdefs.h <<\_ACEOF
- ! #define HAVE_SFCURVES 1
-   _ACEOF
-   
- !     echo "$as_me:$LINENO: result: <<< Configuring library with SFC support >>>" >&5
- ! echo "${ECHO_T}<<< Configuring library with SFC support >>>" >&6
-     else
- !     enablesfc=no
-     fi
-   
-   
- ***************
- *** 4174,4425 ****
-   
-   
-   
- - # Check whether --enable-papi or --disable-papi was given.
- - if test "${enable_papi+set}" = set; then
- -   enableval="$enable_papi"
- -   enablepapi=$enableval
- - else
- -   enablepapi=no
- - fi;
- - 
- - if test "$enablepapi" != no ; then
- - 
- - 
- - echo "$as_me:$LINENO: checking for main in -lperfctr" >&5
- - echo $ECHO_N "checking for main in -lperfctr... $ECHO_C" >&6
- - if test "${ac_cv_lib_perfctr_main+set}" = set; then
- -   echo $ECHO_N "(cached) $ECHO_C" >&6
- - else
- -   ac_check_lib_save_LIBS=$LIBS
- - LIBS="-lperfctr  $LIBS"
- - cat >conftest.$ac_ext <<_ACEOF
- - #line $LINENO "configure"
- - #include "confdefs.h"
- - 
- - 
- - #ifdef F77_DUMMY_MAIN
- - #  ifdef __cplusplus
- -      extern "C"
- - #  endif
- -    int F77_DUMMY_MAIN() { return 1; }
- - #endif
- - int
- - main ()
- - {
- - main ();
- -   ;
- -   return 0;
- - }
- - _ACEOF
- - rm -f conftest.$ac_objext conftest$ac_exeext
- - if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
- -   (eval $ac_link) 2>&5
- -   ac_status=$?
- -   echo "$as_me:$LINENO: \$? = $ac_status" >&5
- -   (exit $ac_status); } &&
- -          { ac_try='test -s conftest$ac_exeext'
- -   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
- -   (eval $ac_try) 2>&5
- -   ac_status=$?
- -   echo "$as_me:$LINENO: \$? = $ac_status" >&5
- -   (exit $ac_status); }; }; then
- -   ac_cv_lib_perfctr_main=yes
- - else
- -   echo "$as_me: failed program was:" >&5
- - cat conftest.$ac_ext >&5
- - ac_cv_lib_perfctr_main=no
- - fi
- - rm -f conftest.$ac_objext conftest$ac_exeext conftest.$ac_ext
- - LIBS=$ac_check_lib_save_LIBS
- - fi
- - echo "$as_me:$LINENO: result: $ac_cv_lib_perfctr_main" >&5
- - echo "${ECHO_T}$ac_cv_lib_perfctr_main" >&6
- - if test $ac_cv_lib_perfctr_main = yes; then
- -   cat >>confdefs.h <<_ACEOF
- - #define HAVE_LIBPERFCTR 1
- - _ACEOF
- - 
- -   LIBS="-lperfctr $LIBS"
- - 
- - fi
- - 
- - 
- - echo "$as_me:$LINENO: checking for main in -lpapi" >&5
- - echo $ECHO_N "checking for main in -lpapi... $ECHO_C" >&6
- - if test "${ac_cv_lib_papi_main+set}" = set; then
- -   echo $ECHO_N "(cached) $ECHO_C" >&6
- - else
- -   ac_check_lib_save_LIBS=$LIBS
- - LIBS="-lpapi  $LIBS"
- - cat >conftest.$ac_ext <<_ACEOF
- - #line $LINENO "configure"
- - #include "confdefs.h"
- - 
- - 
- - #ifdef F77_DUMMY_MAIN
- - #  ifdef __cplusplus
- -      extern "C"
- - #  endif
- -    int F77_DUMMY_MAIN() { return 1; }
- - #endif
- - int
- - main ()
- - {
- - main ();
- -   ;
- -   return 0;
- - }
- - _ACEOF
- - rm -f conftest.$ac_objext conftest$ac_exeext
- - if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
- -   (eval $ac_link) 2>&5
- -   ac_status=$?
- -   echo "$as_me:$LINENO: \$? = $ac_status" >&5
- -   (exit $ac_status); } &&
- -          { ac_try='test -s conftest$ac_exeext'
- -   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
- -   (eval $ac_try) 2>&5
- -   ac_status=$?
- -   echo "$as_me:$LINENO: \$? = $ac_status" >&5
- -   (exit $ac_status); }; }; then
- -   ac_cv_lib_papi_main=yes
- - else
- -   echo "$as_me: failed program was:" >&5
- - cat conftest.$ac_ext >&5
- - ac_cv_lib_papi_main=no
- - fi
- - rm -f conftest.$ac_objext conftest$ac_exeext conftest.$ac_ext
- - LIBS=$ac_check_lib_save_LIBS
- - fi
- - echo "$as_me:$LINENO: result: $ac_cv_lib_papi_main" >&5
- - echo "${ECHO_T}$ac_cv_lib_papi_main" >&6
- - if test $ac_cv_lib_papi_main = yes; then
- -   cat >>confdefs.h <<_ACEOF
- - #define HAVE_LIBPAPI 1
- - _ACEOF
- - 
- -   LIBS="-lpapi $LIBS"
- - 
- - fi
- - 
- - 
- - for ac_header in papi.h
- - do
- - as_ac_Header=`echo "ac_cv_header_$ac_header" | $as_tr_sh`
- - if eval "test \"\${$as_ac_Header+set}\" = set"; then
- -   echo "$as_me:$LINENO: checking for $ac_header" >&5
- - echo $ECHO_N "checking for $ac_header... $ECHO_C" >&6
- - if eval "test \"\${$as_ac_Header+set}\" = set"; then
- -   echo $ECHO_N "(cached) $ECHO_C" >&6
- - fi
- - echo "$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`" >&5
- - echo "${ECHO_T}`eval echo '${'$as_ac_Header'}'`" >&6
- - else
- -   # Is the header compilable?
- - echo "$as_me:$LINENO: checking $ac_header usability" >&5
- - echo $ECHO_N "checking $ac_header usability... $ECHO_C" >&6
- - cat >conftest.$ac_ext <<_ACEOF
- - #line $LINENO "configure"
- - #include "confdefs.h"
- - $ac_includes_default
- - #include <$ac_header>
- - _ACEOF
- - rm -f conftest.$ac_objext
- - if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
- -   (eval $ac_compile) 2>&5
- -   ac_status=$?
- -   echo "$as_me:$LINENO: \$? = $ac_status" >&5
- -   (exit $ac_status); } &&
- -          { ac_try='test -s conftest.$ac_objext'
- -   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
- -   (eval $ac_try) 2>&5
- -   ac_status=$?
- -   echo "$as_me:$LINENO: \$? = $ac_status" >&5
- -   (exit $ac_status); }; }; then
- -   ac_header_compiler=yes
- - else
- -   echo "$as_me: failed program was:" >&5
- - cat conftest.$ac_ext >&5
- - ac_header_compiler=no
- - fi
- - rm -f conftest.$ac_objext conftest.$ac_ext
- - echo "$as_me:$LINENO: result: $ac_header_compiler" >&5
- - echo "${ECHO_T}$ac_header_compiler" >&6
- - 
- - # Is the header present?
- - echo "$as_me:$LINENO: checking $ac_header presence" >&5
- - echo $ECHO_N "checking $ac_header presence... $ECHO_C" >&6
- - cat >conftest.$ac_ext <<_ACEOF
- - #line $LINENO "configure"
- - #include "confdefs.h"
- - #include <$ac_header>
- - _ACEOF
- - if { (eval echo "$as_me:$LINENO: \"$ac_cpp conftest.$ac_ext\"") >&5
- -   (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1
- -   ac_status=$?
- -   egrep -v '^ *\+' conftest.er1 >conftest.err
- -   rm -f conftest.er1
- -   cat conftest.err >&5
- -   echo "$as_me:$LINENO: \$? = $ac_status" >&5
- -   (exit $ac_status); } >/dev/null; then
- -   if test -s conftest.err; then
- -     ac_cpp_err=$ac_cxx_preproc_warn_flag
- -   else
- -     ac_cpp_err=
- -   fi
- - else
- -   ac_cpp_err=yes
- - fi
- - if test -z "$ac_cpp_err"; then
- -   ac_header_preproc=yes
- - else
- -   echo "$as_me: failed program was:" >&5
- -   cat conftest.$ac_ext >&5
- -   ac_header_preproc=no
- - fi
- - rm -f conftest.err conftest.$ac_ext
- - echo "$as_me:$LINENO: result: $ac_header_preproc" >&5
- - echo "${ECHO_T}$ac_header_preproc" >&6
- - 
- - # So?  What about this header?
- - case $ac_header_compiler:$ac_header_preproc in
- -   yes:no )
- -     { echo "$as_me:$LINENO: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!" >&5
- - echo "$as_me: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!" >&2;}
- -     { echo "$as_me:$LINENO: WARNING: $ac_header: proceeding with the preprocessor's result" >&5
- - echo "$as_me: WARNING: $ac_header: proceeding with the preprocessor's result" >&2;};;
- -   no:yes )
- -     { echo "$as_me:$LINENO: WARNING: $ac_header: present but cannot be compiled" >&5
- - echo "$as_me: WARNING: $ac_header: present but cannot be compiled" >&2;}
- -     { echo "$as_me:$LINENO: WARNING: $ac_header: check for missing prerequisite headers?" >&5
- - echo "$as_me: WARNING: $ac_header: check for missing prerequisite headers?" >&2;}
- -     { echo "$as_me:$LINENO: WARNING: $ac_header: proceeding with the preprocessor's result" >&5
- - echo "$as_me: WARNING: $ac_header: proceeding with the preprocessor's result" >&2;};;
- - esac
- - echo "$as_me:$LINENO: checking for $ac_header" >&5
- - echo $ECHO_N "checking for $ac_header... $ECHO_C" >&6
- - if eval "test \"\${$as_ac_Header+set}\" = set"; then
- -   echo $ECHO_N "(cached) $ECHO_C" >&6
- - else
- -   eval "$as_ac_Header=$ac_header_preproc"
- - fi
- - echo "$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`" >&5
- - echo "${ECHO_T}`eval echo '${'$as_ac_Header'}'`" >&6
- - 
- - fi
- - if test `eval echo '${'$as_ac_Header'}'` = yes; then
- -   cat >>confdefs.h <<_ACEOF
- - #define `echo "HAVE_$ac_header" | $as_tr_cpp` 1
- - _ACEOF
- - 
- - fi
- - 
- - done
- - 
- - fi
- - 
- - 
- - 
-   # Check whether --enable-petsc or --disable-petsc was given.
-   if test "${enable_petsc+set}" = set; then
-     enableval="$enable_petsc"
- --- 4412,4417 ----
- ***************
- *** 4547,4553 ****
-   
-   
-   # Provide some information about the compiler.
- ! echo "$as_me:4550:" \
-        "checking for Fortran 77 compiler version" >&5
-   ac_compiler=`set X $ac_compile; echo $2`
-   { (eval echo "$as_me:$LINENO: \"$ac_compiler --version </dev/null >&5\"") >&5
- --- 4539,4545 ----
-   
-   
-   # Provide some information about the compiler.
- ! echo "$as_me:4542:" \
-        "checking for Fortran 77 compiler version" >&5
-   ac_compiler=`set X $ac_compile; echo $2`
-   { (eval echo "$as_me:$LINENO: \"$ac_compiler --version </dev/null >&5\"") >&5
- ***************
- *** 4713,4719 ****
-   # flags.
-   ac_save_FFLAGS=$FFLAGS
-   FFLAGS="$FFLAGS $ac_verb"
- ! (eval echo $as_me:4716: \"$ac_link\") >&5
-   ac_f77_v_output=`eval $ac_link 5>&1 2>&1 | grep -v 'Driving:'`
-   echo "$ac_f77_v_output" >&5
-   FFLAGS=$ac_save_FFLAGS
- --- 4705,4711 ----
-   # flags.
-   ac_save_FFLAGS=$FFLAGS
-   FFLAGS="$FFLAGS $ac_verb"
- ! (eval echo $as_me:4708: \"$ac_link\") >&5
-   ac_f77_v_output=`eval $ac_link 5>&1 2>&1 | grep -v 'Driving:'`
-   echo "$ac_f77_v_output" >&5
-   FFLAGS=$ac_save_FFLAGS
- ***************
- *** 4792,4798 ****
-   # flags.
-   ac_save_FFLAGS=$FFLAGS
-   FFLAGS="$FFLAGS $ac_cv_prog_f77_v"
- ! (eval echo $as_me:4795: \"$ac_link\") >&5
-   ac_f77_v_output=`eval $ac_link 5>&1 2>&1 | grep -v 'Driving:'`
-   echo "$ac_f77_v_output" >&5
-   FFLAGS=$ac_save_FFLAGS
- --- 4784,4790 ----
-   # flags.
-   ac_save_FFLAGS=$FFLAGS
-   FFLAGS="$FFLAGS $ac_cv_prog_f77_v"
- ! (eval echo $as_me:4787: \"$ac_link\") >&5
-   ac_f77_v_output=`eval $ac_link 5>&1 2>&1 | grep -v 'Driving:'`
-   echo "$ac_f77_v_output" >&5
-   FFLAGS=$ac_save_FFLAGS
- ***************
- *** 4966,4976 ****
-   #define HAVE_PETSC 1
-   _ACEOF
-   
-       petscmajor=`grep "define PETSC_VERSION_MAJOR" $PETSC_DIR/include/petscversion.h | sed -e "s/#define PETSC_VERSION_MAJOR[ ]*//g"`
-       petscminor=`grep "define PETSC_VERSION_MINOR" $PETSC_DIR/include/petscversion.h | sed -e "s/#define PETSC_VERSION_MINOR[ ]*//g"`
-       petscsubminor=`grep "define PETSC_VERSION_SUBMINOR" $PETSC_DIR/include/petscversion.h | sed -e "s/#define PETSC_VERSION_SUBMINOR[ ]*//g"`
-       petscversion=$petscmajor.$petscminor.$petscsubminor
- !     echo "<<< Configuring library with petsc version " $petscversion " support >>>"
-   
-     else
-       enablepetsc=no
- --- 4958,4974 ----
-   #define HAVE_PETSC 1
-   _ACEOF
-   
- + 
- + cat >>confdefs.h <<\_ACEOF
- + #define HAVE_MPI 1
- + _ACEOF
- + 
-       petscmajor=`grep "define PETSC_VERSION_MAJOR" $PETSC_DIR/include/petscversion.h | sed -e "s/#define PETSC_VERSION_MAJOR[ ]*//g"`
-       petscminor=`grep "define PETSC_VERSION_MINOR" $PETSC_DIR/include/petscversion.h | sed -e "s/#define PETSC_VERSION_MINOR[ ]*//g"`
-       petscsubminor=`grep "define PETSC_VERSION_SUBMINOR" $PETSC_DIR/include/petscversion.h | sed -e "s/#define PETSC_VERSION_SUBMINOR[ ]*//g"`
-       petscversion=$petscmajor.$petscminor.$petscsubminor
- !     echo "$as_me:$LINENO: result: <<< Configuring library with petsc version $petscversion support >>>" >&5
- ! echo "${ECHO_T}<<< Configuring library with petsc version $petscversion support >>>" >&6
-   
-     else
-       enablepetsc=no
- ***************
- *** 4978,5044 ****
-   
-   
-   
- ! fi
- ! 
-   
-   
- ! # Check whether --enable-complex or --disable-complex was given.
- ! if test "${enable_complex+set}" = set; then
- !   enableval="$enable_complex"
- !   enablecomplex=$enableval
-   else
- !   enablecomplex=no
-   fi;
-   
- ! if test "$enablecomplex" != no ; then
-   
- ! cat >>confdefs.h <<\_ACEOF
- ! #define USE_COMPLEX_NUMBERS 1
- ! _ACEOF
-   
- -   echo "$as_me:$LINENO: result: <<< Configuring library with complex number support >>>" >&5
- - echo "${ECHO_T}<<< Configuring library with complex number support >>>" >&6
-   
-   fi
-   
-   
-   
- - # Check whether --enable-reference-counting or --disable-reference-counting was given.
- - if test "${enable_reference_counting+set}" = set; then
- -   enableval="$enable_reference_counting"
- -   enablerefct=$enableval
- - else
- -   enablerefct=yes
- - fi;
-   
- - if test "$enablerefct" != no ; then
-   
-   cat >>confdefs.h <<\_ACEOF
- ! #define ENABLE_REFERENCE_COUNTING 1
-   _ACEOF
-   
- !   echo "$as_me:$LINENO: result: <<< Configuring library with reference counting support >>>" >&5
- ! echo "${ECHO_T}<<< Configuring library with reference counting support >>>" >&6
- ! fi
-   
-   
-   
- ! # Check whether --enable-perflog or --disable-perflog was given.
- ! if test "${enable_perflog+set}" = set; then
- !   enableval="$enable_perflog"
- !   enableperflog=$enableval
- ! else
- !   enableperflog=no
- ! fi;
-   
- - if test "$enableperflog" != no ; then
-   
- - cat >>confdefs.h <<\_ACEOF
- - #define ENABLE_PERFORMANCE_LOGGING 1
- - _ACEOF
-   
- -   echo "$as_me:$LINENO: result: <<< Configuring library with performance logging support >>>" >&5
- - echo "${ECHO_T}<<< Configuring library with performance logging support >>>" >&6
-   fi
-   
-   
- --- 4976,5062 ----
-   
-   
-   
- ! else
-   
-   
- ! # Check whether --enable-mpi or --disable-mpi was given.
- ! if test "${enable_mpi+set}" = set; then
- !   enableval="$enable_mpi"
- !   enablempi=$enableval
-   else
- !   enablempi=yes
-   fi;
-   
- ! if test "$enablempi" != no ; then
-   
- !   as_ac_File=`echo "ac_cv_file_$MPIHOME/include/mpi.h" | $as_tr_sh`
- ! echo "$as_me:$LINENO: checking for $MPIHOME/include/mpi.h" >&5
- ! echo $ECHO_N "checking for $MPIHOME/include/mpi.h... $ECHO_C" >&6
- ! if eval "test \"\${$as_ac_File+set}\" = set"; then
- !   echo $ECHO_N "(cached) $ECHO_C" >&6
- ! else
- !   test "$cross_compiling" = yes &&
- !   { { echo "$as_me:$LINENO: error: cannot check for file existence when cross compiling" >&5
- ! echo "$as_me: error: cannot check for file existence when cross compiling" >&2;}
- !    { (exit 1); exit 1; }; }
- ! if test -r "$MPIHOME/include/mpi.h"; then
- !   eval "$as_ac_File=yes"
- ! else
- !   eval "$as_ac_File=no"
- ! fi
- ! fi
- ! echo "$as_me:$LINENO: result: `eval echo '${'$as_ac_File'}'`" >&5
- ! echo "${ECHO_T}`eval echo '${'$as_ac_File'}'`" >&6
- ! if test `eval echo '${'$as_ac_File'}'` = yes; then
- !   MPI_INCLUDE_PATH=$MPIHOME/include
- ! fi
-   
-   
- +   as_ac_File=`echo "ac_cv_file_$MPIHOME/lib/libmpich.a" | $as_tr_sh`
- + echo "$as_me:$LINENO: checking for $MPIHOME/lib/libmpich.a" >&5
- + echo $ECHO_N "checking for $MPIHOME/lib/libmpich.a... $ECHO_C" >&6
- + if eval "test \"\${$as_ac_File+set}\" = set"; then
- +   echo $ECHO_N "(cached) $ECHO_C" >&6
- + else
- +   test "$cross_compiling" = yes &&
- +   { { echo "$as_me:$LINENO: error: cannot check for file existence when cross compiling" >&5
- + echo "$as_me: error: cannot check for file existence when cross compiling" >&2;}
- +    { (exit 1); exit 1; }; }
- + if test -r "$MPIHOME/lib/libmpich.a"; then
- +   eval "$as_ac_File=yes"
- + else
- +   eval "$as_ac_File=no"
- + fi
- + fi
- + echo "$as_me:$LINENO: result: `eval echo '${'$as_ac_File'}'`" >&5
- + echo "${ECHO_T}`eval echo '${'$as_ac_File'}'`" >&6
- + if test `eval echo '${'$as_ac_File'}'` = yes; then
- +   MPI_LIBRARY_PATH=$MPIHOME/lib/libmpich.a
- + else
- +   MPI_LIBRARY_PATH=/mpich_bar_not_there
-   fi
-   
-   
- +   if (test -r $MPI_INCLUDE_PATH/mpi.h -a -r $MPI_LIBRARY_PATH) ; then
-   
-   
-   
-   cat >>confdefs.h <<\_ACEOF
- ! #define HAVE_MPI 1
-   _ACEOF
-   
- !     echo "$as_me:$LINENO: result: <<< Configuring library with MPI support >>>" >&5
- ! echo "${ECHO_T}<<< Configuring library with MPI support >>>" >&6
- !   else
- !     enablempi=no
- !   fi
-   
-   
-   
- ! fi
-   
-   
-   
-   fi
-   
-   
- ***************
- *** 5723,5728 ****
- --- 5741,5749 ----
-   s,@PWD@,$PWD,;t t
-   s,@enableshared@,$enableshared,;t t
-   s,@enablexdr@,$enablexdr,;t t
- + s,@enablecomplex@,$enablecomplex,;t t
- + s,@LASPACK_INCLUDE_PATH@,$LASPACK_INCLUDE_PATH,;t t
- + s,@enablelaspack@,$enablelaspack,;t t
-   s,@HDF4_INCLUDE_PATH@,$HDF4_INCLUDE_PATH,;t t
-   s,@HDF4_LIB_PATH@,$HDF4_LIB_PATH,;t t
-   s,@HDF4_LIB_NAMES@,$HDF4_LIB_NAMES,;t t
- ***************
- *** 5734,5747 ****
-   s,@EXODUS_INCLUDE_PATH@,$EXODUS_INCLUDE_PATH,;t t
-   s,@enableexodus@,$enableexodus,;t t
-   s,@enableoptional@,$enableoptional,;t t
- - s,@SFC_INCLUDE_PATH@,$SFC_INCLUDE_PATH,;t t
- - s,@enablesfc@,$enablesfc,;t t
-   s,@METIS_INCLUDE_PATH@,$METIS_INCLUDE_PATH,;t t
-   s,@enablemetis@,$enablemetis,;t t
-   s,@TECPLOT_LIBRARY@,$TECPLOT_LIBRARY,;t t
-   s,@TECPLOT_INCLUDE_PATH@,$TECPLOT_INCLUDE_PATH,;t t
-   s,@enabletecplot@,$enabletecplot,;t t
- - s,@enablepapi@,$enablepapi,;t t
-   s,@F77@,$F77,;t t
-   s,@FFLAGS@,$FFLAGS,;t t
-   s,@ac_ct_F77@,$ac_ct_F77,;t t
- --- 5755,5767 ----
-   s,@EXODUS_INCLUDE_PATH@,$EXODUS_INCLUDE_PATH,;t t
-   s,@enableexodus@,$enableexodus,;t t
-   s,@enableoptional@,$enableoptional,;t t
-   s,@METIS_INCLUDE_PATH@,$METIS_INCLUDE_PATH,;t t
-   s,@enablemetis@,$enablemetis,;t t
- + s,@SFC_INCLUDE_PATH@,$SFC_INCLUDE_PATH,;t t
- + s,@enablesfc@,$enablesfc,;t t
-   s,@TECPLOT_LIBRARY@,$TECPLOT_LIBRARY,;t t
-   s,@TECPLOT_INCLUDE_PATH@,$TECPLOT_INCLUDE_PATH,;t t
-   s,@enabletecplot@,$enabletecplot,;t t
-   s,@F77@,$F77,;t t
-   s,@FFLAGS@,$FFLAGS,;t t
-   s,@ac_ct_F77@,$ac_ct_F77,;t t
- ***************
- *** 5749,5755 ****
-   s,@PETSC_DIR@,$PETSC_DIR,;t t
-   s,@petscversion@,$petscversion,;t t
-   s,@enablepetsc@,$enablepetsc,;t t
- ! s,@enablecomplex@,$enablecomplex,;t t
-   s,@DOXYGEN@,$DOXYGEN,;t t
-   s,@DOT@,$DOT,;t t
-   s,@DOTPATH@,$DOTPATH,;t t
- --- 5769,5777 ----
-   s,@PETSC_DIR@,$PETSC_DIR,;t t
-   s,@petscversion@,$petscversion,;t t
-   s,@enablepetsc@,$enablepetsc,;t t
- ! s,@MPI_INCLUDE_PATH@,$MPI_INCLUDE_PATH,;t t
- ! s,@MPI_LIBRARY_PATH@,$MPI_LIBRARY_PATH,;t t
- ! s,@enablempi@,$enablempi,;t t
-   s,@DOXYGEN@,$DOXYGEN,;t t
-   s,@DOT@,$DOT,;t t
-   s,@DOTPATH@,$DOTPATH,;t t
- ***************
- *** 6733,6738 ****
- --- 6755,6763 ----
-   s,@PWD@,$PWD,;t t
-   s,@enableshared@,$enableshared,;t t
-   s,@enablexdr@,$enablexdr,;t t
- + s,@enablecomplex@,$enablecomplex,;t t
- + s,@LASPACK_INCLUDE_PATH@,$LASPACK_INCLUDE_PATH,;t t
- + s,@enablelaspack@,$enablelaspack,;t t
-   s,@HDF4_INCLUDE_PATH@,$HDF4_INCLUDE_PATH,;t t
-   s,@HDF4_LIB_PATH@,$HDF4_LIB_PATH,;t t
-   s,@HDF4_LIB_NAMES@,$HDF4_LIB_NAMES,;t t
- ***************
- *** 6744,6757 ****
-   s,@EXODUS_INCLUDE_PATH@,$EXODUS_INCLUDE_PATH,;t t
-   s,@enableexodus@,$enableexodus,;t t
-   s,@enableoptional@,$enableoptional,;t t
- - s,@SFC_INCLUDE_PATH@,$SFC_INCLUDE_PATH,;t t
- - s,@enablesfc@,$enablesfc,;t t
-   s,@METIS_INCLUDE_PATH@,$METIS_INCLUDE_PATH,;t t
-   s,@enablemetis@,$enablemetis,;t t
-   s,@TECPLOT_LIBRARY@,$TECPLOT_LIBRARY,;t t
-   s,@TECPLOT_INCLUDE_PATH@,$TECPLOT_INCLUDE_PATH,;t t
-   s,@enabletecplot@,$enabletecplot,;t t
- - s,@enablepapi@,$enablepapi,;t t
-   s,@F77@,$F77,;t t
-   s,@FFLAGS@,$FFLAGS,;t t
-   s,@ac_ct_F77@,$ac_ct_F77,;t t
- --- 6769,6781 ----
-   s,@EXODUS_INCLUDE_PATH@,$EXODUS_INCLUDE_PATH,;t t
-   s,@enableexodus@,$enableexodus,;t t
-   s,@enableoptional@,$enableoptional,;t t
-   s,@METIS_INCLUDE_PATH@,$METIS_INCLUDE_PATH,;t t
-   s,@enablemetis@,$enablemetis,;t t
- + s,@SFC_INCLUDE_PATH@,$SFC_INCLUDE_PATH,;t t
- + s,@enablesfc@,$enablesfc,;t t
-   s,@TECPLOT_LIBRARY@,$TECPLOT_LIBRARY,;t t
-   s,@TECPLOT_INCLUDE_PATH@,$TECPLOT_INCLUDE_PATH,;t t
-   s,@enabletecplot@,$enabletecplot,;t t
-   s,@F77@,$F77,;t t
-   s,@FFLAGS@,$FFLAGS,;t t
-   s,@ac_ct_F77@,$ac_ct_F77,;t t
- ***************
- *** 6759,6765 ****
-   s,@PETSC_DIR@,$PETSC_DIR,;t t
-   s,@petscversion@,$petscversion,;t t
-   s,@enablepetsc@,$enablepetsc,;t t
- ! s,@enablecomplex@,$enablecomplex,;t t
-   s,@DOXYGEN@,$DOXYGEN,;t t
-   s,@DOT@,$DOT,;t t
-   s,@DOTPATH@,$DOTPATH,;t t
- --- 6783,6791 ----
-   s,@PETSC_DIR@,$PETSC_DIR,;t t
-   s,@petscversion@,$petscversion,;t t
-   s,@enablepetsc@,$enablepetsc,;t t
- ! s,@MPI_INCLUDE_PATH@,$MPI_INCLUDE_PATH,;t t
- ! s,@MPI_LIBRARY_PATH@,$MPI_LIBRARY_PATH,;t t
- ! s,@enablempi@,$enablempi,;t t
-   s,@DOXYGEN@,$DOXYGEN,;t t
-   s,@DOT@,$DOT,;t t
-   s,@DOTPATH@,$DOTPATH,;t t
- Index: configure.in
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/configure.in,v
- retrieving revision 1.6
- retrieving revision 1.13
- diff -c -r1.6 -r1.13
- *** configure.in	24 Jan 2003 17:24:35 -0000	1.6
- --- configure.in	20 Feb 2003 04:59:57 -0000	1.13
- ***************
- *** 1,5 ****
-   dnl --------------------------------------------------------------
- ! dnl $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   dnl --------------------------------------------------------------
-   dnl Process this file with autoconf to produce a configure script.
-   
- --- 1,5 ----
-   dnl --------------------------------------------------------------
- ! dnl $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   dnl --------------------------------------------------------------
-   dnl Process this file with autoconf to produce a configure script.
-   
- ***************
- *** 9,15 ****
-   dnl clearing the cache 
-   define([AC_CACHE_LOAD], )dnl
-   define([AC_CACHE_SAVE], )dnl
- ! AC_REVISION($Revision: 1.4 $)
-   
-   
-   AC_INIT(Make.common.in)
- --- 9,15 ----
-   dnl clearing the cache 
-   define([AC_CACHE_LOAD], )dnl
-   define([AC_CACHE_SAVE], )dnl
- ! AC_REVISION($Revision: 1.4 $)
-   
-   
-   AC_INIT(Make.common.in)
- ***************
- *** 44,50 ****
-   AC_CHECK_HEADERS(getopt.h)
-   AC_CHECK_HEADERS(locale)
-   AC_CHECK_HEADERS(sstream)
- ! 
-   
-   dnl --------------------------------------------------------------
-   dnl Get the source tree directory
- --- 44,50 ----
-   AC_CHECK_HEADERS(getopt.h)
-   AC_CHECK_HEADERS(locale)
-   AC_CHECK_HEADERS(sstream)
- ! AC_CHECK_HEADERS(ostream)
-   
-   dnl --------------------------------------------------------------
-   dnl Get the source tree directory
- ***************
- *** 95,104 ****
- --- 95,107 ----
-     AC_DEFINE(ENABLE_EXPENSIVE_DATA_STRUCTURES, 1,
-              [Flag indicating if the library should be built with expensive data structures])
-     AC_MSG_RESULT(<<< Configuring library with expensive data structures enabled >>>)
- + else
- +   AC_MSG_RESULT(<<< Configuring library with lightweight data structures >>>)
-   fi
-   dnl -------------------------------------------------------------
-   
-   
- + 
-   dnl -------------------------------------------------------------
-   dnl Infinite Elements  -- disabled by default
-   dnl -------------------------------------------------------------
- ***************
- *** 116,124 ****
-   
-   
-   
- -   
- - 
- - 
-   dnl --------------------------------------------------------------
-   dnl XDR binary IO support - enabled by default
-   dnl --------------------------------------------------------------
- --- 119,124 ----
- ***************
- *** 150,155 ****
- --- 150,232 ----
-   dnl -------------------------------------------------------------
-   
-   
- + 
- + dnl -------------------------------------------------------------
- + dnl complex numbers -- disabled by default
- + dnl -------------------------------------------------------------
- + AC_ARG_ENABLE(complex,
- + [  --enable-complex Set compiler flags to build with complex number support],
- +      enablecomplex=$enableval,
- +      enablecomplex=no)
- + 
- + if test "$enablecomplex" != no ; then
- +   AC_DEFINE(USE_COMPLEX_NUMBERS, 1,
- +      [Flag indicating if the library should be built using complex numbers])
- +   AC_MSG_RESULT(<<< Configuring library with complex number support >>>)
- +   AC_SUBST(enablecomplex)
- + 
- + else
- +   AC_DEFINE(USE_REAL_NUMBERS, 1,
- +      [Flag indicating if the library should be built using real numbers])
- +   AC_MSG_RESULT(<<< Configuring library with real number support >>>)
- +   AC_SUBST(enablecomplex)
- + 
- + dnl LASPACK currently does not work with complex, so put it in the
- + dnl else section.
- + dnl -------------------------------------------------------------
- + dnl LASPACK iterative solvers -- enabled by default
- + dnl -------------------------------------------------------------
- + AC_ARG_ENABLE(laspack,
- + [  --enable-laspack Set compiler flags to build with LASPACK suppport],
- +      enablelaspack=$enableval,
- +      enablelaspack=yes)
- + 
- + if test "$enablelaspack" != no ; then
- +    CONFIGURE_LASPACK
- + fi
- + dnl -------------------------------------------------------------
- + 
- + fi
- + dnl -------------------------------------------------------------
- + 
- + 
- + 
- + dnl -------------------------------------------------------------
- + dnl Reference Counting -- enabled by default
- + dnl -------------------------------------------------------------
- + AC_ARG_ENABLE(reference-counting,
- + [  --enable-reference-counting build with reference counting suppport],
- +      enablerefct=$enableval,
- +      enablerefct=yes)
- + 
- + if test "$enablerefct" != no ; then
- +   AC_DEFINE(ENABLE_REFERENCE_COUNTING, 1,
- +            [Flag indicating if the library should be built with reference counting support])
- +   AC_MSG_RESULT(<<< Configuring library with reference counting support >>>)
- + fi
- + dnl -------------------------------------------------------------
- + 
- + 
- + 
- + dnl -------------------------------------------------------------
- + dnl Performance Logging -- disabled by default
- + dnl -------------------------------------------------------------
- + AC_ARG_ENABLE(perflog,
- + [  --enable-perflog build with performance logging turned on],
- +      enableperflog=$enableval,
- +      enableperflog=no)
- + 
- + if test "$enableperflog" != no ; then
- +   AC_DEFINE(ENABLE_PERFORMANCE_LOGGING, 1,
- +            [Flag indicating if the library should be built with performance logging support])
- +   AC_MSG_RESULT(<<< Configuring library with performance logging support >>>)
- + fi
- + dnl ------------------------------------------------------------
- + 
- + 
- + 
- + 
- + 
-   dnl --------------------------------------------------------------
-   dnl HDF4 IO support - disabled by default
-   dnl 
- ***************
- *** 167,173 ****
-   
-   if test "$enablehdf4" != no ; then
-      CONFIGURE_HDF4
- - 
-   else
-   
-   dnl --------------------------------------------------------------
- --- 244,249 ----
- ***************
- *** 207,213 ****
-   
-   
-   
- - 
-   dnl --------------------------------------------------------------
-   dnl Allow for disable-optional
-   dnl --------------------------------------------------------------
- --- 283,288 ----
- ***************
- *** 223,242 ****
-      AC_MSG_RESULT(---------------------------------------------)
-   
-   
- - dnl -------------------------------------------------------------
- - dnl Space filling curves -- enabled by default
- - dnl -------------------------------------------------------------
- - AC_ARG_ENABLE(sfc,
- - [  --enable-sfc Set compiler flags to build with Sfc suppport],
- -      enablesfc=$enableval,
- -      enablesfc=yes)
- - 
- - if test "$enablesfc" != no ; then
- -    CONFIGURE_SFC
- - fi
- - dnl -------------------------------------------------------------
- - 
- - 
-   
-   dnl -------------------------------------------------------------
-   dnl Metis Partitioning -- enabled by default
- --- 298,303 ----
- ***************
- *** 252,257 ****
- --- 313,332 ----
-   dnl -------------------------------------------------------------
-   
-   
- + dnl -------------------------------------------------------------
- + dnl Space filling curves -- enabled by default
- + dnl -------------------------------------------------------------
- + AC_ARG_ENABLE(sfc,
- + [  --enable-sfc Set compiler flags to build with Sfc suppport],
- +      enablesfc=$enableval,
- +      enablesfc=yes)
- + 
- + if test "$enablesfc" != no ; then
- +    CONFIGURE_SFC
- + fi
- + dnl -------------------------------------------------------------
- + 
- + 
-   
-   dnl -------------------------------------------------------------
-   dnl Tecplot -- enabled by default
- ***************
- *** 269,292 ****
-   
-    
-   dnl -------------------------------------------------------------
- - dnl Papi -- disabled by default
- - dnl -------------------------------------------------------------
- - AC_ARG_ENABLE(papi,
- - [  --enable-papi Set compiler flags to build with Papi suppport],
- -      enablepapi=$enableval,
- -      enablepapi=no)
- - 
- - if test "$enablepapi" != no ; then
- -    AC_SUBST(enablepapi)
- -    AC_CHECK_LIB(perfctr,main)
- -    AC_CHECK_LIB(papi,main)
- -    AC_CHECK_HEADERS(papi.h)  
- - fi
- - dnl -------------------------------------------------------------
- - 
- - 
- - 
- - dnl -------------------------------------------------------------
-   dnl Petsc -- enabled by default
-   dnl -------------------------------------------------------------
-   AC_ARG_ENABLE(petsc,
- --- 344,349 ----
- ***************
- *** 296,355 ****
-   
-   if test "$enablepetsc" != no ; then
-     CONFIGURE_PETSC
- ! fi
- ! dnl -------------------------------------------------------------
- !   
-   
-   
-   dnl -------------------------------------------------------------
- ! dnl complex numbers -- disabled by default
- ! dnl -------------------------------------------------------------
- ! AC_ARG_ENABLE(complex,
- ! [  --enable-complex Set compiler flags to build with complex number support],
- !      enablecomplex=$enableval,
- !      enablecomplex=no)
-   
- ! if test "$enablecomplex" != no ; then
- !   AC_DEFINE(USE_COMPLEX_NUMBERS, 1,
- !      [Flag indicating if the library should be built using complex numbers])
- !   AC_MSG_RESULT(<<< Configuring library with complex number support >>>)
- !   AC_SUBST(enablecomplex)
-   fi
-   dnl -------------------------------------------------------------
-   
-   
-   
- - dnl -------------------------------------------------------------
- - dnl Reference Counting -- enabled by default
- - dnl -------------------------------------------------------------
- - AC_ARG_ENABLE(reference-counting,
- - [  --enable-reference-counting build with reference counting suppport],
- -      enablerefct=$enableval,
- -      enablerefct=yes)
- - 
- - if test "$enablerefct" != no ; then
- -   AC_DEFINE(ENABLE_REFERENCE_COUNTING, 1,
- -            [Flag indicating if the library should be built with reference counting support])
- -   AC_MSG_RESULT(<<< Configuring library with reference counting support >>>)
-   fi
-   dnl -------------------------------------------------------------
- - 
- - 
- - 
- - dnl -------------------------------------------------------------
- - dnl Performance Logging -- disabled by default
- - dnl -------------------------------------------------------------
- - AC_ARG_ENABLE(perflog,
- - [  --enable-perflog build with performance logging turned on],
- -      enableperflog=$enableval,
- -      enableperflog=no)
- - 
- - if test "$enableperflog" != no ; then
- -   AC_DEFINE(ENABLE_PERFORMANCE_LOGGING, 1,
- -            [Flag indicating if the library should be built with performance logging support])
- -   AC_MSG_RESULT(<<< Configuring library with performance logging support >>>)
- - fi
- - dnl ------------------------------------------------------------
-    
-   
-   
- --- 353,382 ----
-   
-   if test "$enablepetsc" != no ; then
-     CONFIGURE_PETSC
- ! else
-   
-   
-   dnl -------------------------------------------------------------
- ! dnl MPI -- enabled by default
- ! dnl 
- ! dnl        If configured with Petsc support we will get our
- ! dnl        Mpi configuration from it.  Otherwise we need to
- ! dnl        explicitly look for Mpi
- ! dnl -------------------------------------------------------------
- ! AC_ARG_ENABLE(mpi,
- ! [  --enable-mpi build with MPI message passing support],
- !      enablempi=$enableval,
- !      enablempi=yes)
-   
- ! if test "$enablempi" != no ; then
- !   CONFIGURE_MPI
-   fi
-   dnl -------------------------------------------------------------
-   
-   
-   
-   fi
-   dnl -------------------------------------------------------------
-    
-   
-   
- ***************
- *** 359,367 ****
-   AC_PATH_PROG(DOXYGEN, doxygen)
-   AC_SUBST(DOXYGEN)
-   if test x$DOXYGEN != x ; then
- !   dnl -------------------------------------------------------------
-     dnl Dot -- lets doxygen generate pretty class diagrams
- !   dnl -------------------------------------------------------------
-     AC_PATH_PROG(DOT, dot)
-     HAVE_DOT=NO
-     if test x$DOT != x ; then
- --- 386,394 ----
-   AC_PATH_PROG(DOXYGEN, doxygen)
-   AC_SUBST(DOXYGEN)
-   if test x$DOXYGEN != x ; then
- !   dnl -----------------------------------------------------------
-     dnl Dot -- lets doxygen generate pretty class diagrams
- !   dnl -----------------------------------------------------------
-     AC_PATH_PROG(DOT, dot)
-     HAVE_DOT=NO
-     if test x$DOT != x ; then
- Index: keywords
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/keywords,v
- retrieving revision 1.3
- retrieving revision 1.4
- diff -c -r1.3 -r1.4
- *** keywords	4 Feb 2003 00:49:08 -0000	1.3
- --- keywords	20 Feb 2003 04:59:57 -0000	1.4
- ***************
- *** 18,24 ****
-   # Write the elisp file header
-   echo    "(provide 'keywords)" > $elisp_file
-   echo    "(font-lock-add-keywords 'c++-mode " >> $elisp_file
- ! echo -n " '( (\"\\\\<\\\\(Real\\\\|Complex\\\\|" >> $elisp_file
-   
-   # Get the class list and declare an array of class names
-   class_list=`/usr/bin/ebrowse --very-verbose --output-file=/dev/null ../s3/include/*.h ../vtk_gui/include/*.h include/*.h`
- --- 18,24 ----
-   # Write the elisp file header
-   echo    "(provide 'keywords)" > $elisp_file
-   echo    "(font-lock-add-keywords 'c++-mode " >> $elisp_file
- ! echo -n " '( (\"\\\\<\\\\(Real\\\\|Complex\\\\|Number\\\\|" >> $elisp_file
-   
-   # Get the class list and declare an array of class names
-   class_list=`/usr/bin/ebrowse --very-verbose --output-file=/dev/null ../s3/include/*.h ../vtk_gui/include/*.h include/*.h`
- Index: contrib/Makefile
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/contrib/Makefile,v
- retrieving revision 1.5
- retrieving revision 1.7
- diff -c -r1.5 -r1.7
- *** contrib/Makefile	21 Jan 2003 19:24:23 -0000	1.5
- --- contrib/Makefile	7 Feb 2003 19:25:38 -0000	1.7
- ***************
- *** 2,9 ****
-   # How to make the dependencies
-   #
-   all:
-   	@$(MAKE) -C metis/Lib $(MAKECMDGOALS)
- ! 	@$(MAKE) -C sfcurves $(MAKECMDGOALS)
-   
-   
-   
- --- 2,16 ----
-   # How to make the dependencies
-   #
-   all:
- + 	@echo "----------------------------------------------"
- + 	@echo "------- Building Contributed Packages --------"
- + 	@echo "----------------------------------------------"
- + 	@$(MAKE) -C laspack   $(MAKECMDGOALS)
-   	@$(MAKE) -C metis/Lib $(MAKECMDGOALS)
- ! 	@$(MAKE) -C sfcurves  $(MAKECMDGOALS)
- ! 	@echo "----------------------------------------------"
- ! 	@echo "----- Done Building Contributed Packages -----"
- ! 	@echo "----------------------------------------------"
-   
-   
-   
- ***************
- *** 12,33 ****
-   #
-   clean:
-   	@rm -f *~
-   	@$(MAKE) -C metis/Lib $(MAKECMDGOALS)
- ! 	@$(MAKE) -C sfcurves $(MAKECMDGOALS)
-   
-   #
-   # How to clobber the packages
-   #
-   clobber:
-   	@$(MAKE) clean
-   	@$(MAKE) -C metis/Lib $(MAKECMDGOALS)
- ! 	@$(MAKE) -C sfcurves $(MAKECMDGOALS)
-   
-   #
-   # How to distclean the packages
-   #
-   distclean:
-   	@$(MAKE) clobber
-   	@$(MAKE) -C metis/Lib $(MAKECMDGOALS)
- ! 	@$(MAKE) -C sfcurves $(MAKECMDGOALS)
-   	@rm -rf lib/*_dbg lib/*_opt lib/*_pro
- --- 19,43 ----
-   #
-   clean:
-   	@rm -f *~
- + 	@$(MAKE) -C laspack   $(MAKECMDGOALS)
-   	@$(MAKE) -C metis/Lib $(MAKECMDGOALS)
- ! 	@$(MAKE) -C sfcurves  $(MAKECMDGOALS)
-   
-   #
-   # How to clobber the packages
-   #
-   clobber:
-   	@$(MAKE) clean
- + 	@$(MAKE) -C laspack   $(MAKECMDGOALS)
-   	@$(MAKE) -C metis/Lib $(MAKECMDGOALS)
- ! 	@$(MAKE) -C sfcurves  $(MAKECMDGOALS)
-   
-   #
-   # How to distclean the packages
-   #
-   distclean:
-   	@$(MAKE) clobber
- + 	@$(MAKE) -C laspack   $(MAKECMDGOALS)
-   	@$(MAKE) -C metis/Lib $(MAKECMDGOALS)
- ! 	@$(MAKE) -C sfcurves  $(MAKECMDGOALS)
-   	@rm -rf lib/*_dbg lib/*_opt lib/*_pro
- Index: contrib/lib/.cvsignore
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/contrib/lib/.cvsignore,v
- retrieving revision 1.3
- retrieving revision 1.4
- diff -c -r1.3 -r1.4
- *** contrib/lib/.cvsignore	21 Jan 2003 19:24:23 -0000	1.3
- --- contrib/lib/.cvsignore	13 Feb 2003 22:56:06 -0000	1.4
- ***************
- *** 1,2 ****
- --- 1,3 ----
-   i686-pc-linux-gnu*
-   powerpc-ibm-aix5.1.0.0*
- + alphaev56-unknown-linux-gnu*
- Index: contrib/metis/Lib/.cvsignore
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/contrib/metis/Lib/.cvsignore,v
- retrieving revision 1.1
- retrieving revision 1.2
- diff -c -r1.1 -r1.2
- *** contrib/metis/Lib/.cvsignore	21 Jan 2003 17:35:24 -0000	1.1
- --- contrib/metis/Lib/.cvsignore	7 Feb 2003 18:05:59 -0000	1.2
- ***************
- *** 1,3 ****
-   *.o
- ! *.go
- ! *.pgo
- --- 1,3 ----
-   *.o
- ! *.g.o
- ! *.pg.o
- Index: contrib/sfcurves/.cvsignore
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/contrib/sfcurves/.cvsignore,v
- retrieving revision 1.2
- retrieving revision 1.3
- diff -c -r1.2 -r1.3
- *** contrib/sfcurves/.cvsignore	21 Jan 2003 18:06:56 -0000	1.2
- --- contrib/sfcurves/.cvsignore	7 Feb 2003 18:06:00 -0000	1.3
- ***************
- *** 1,3 ****
-   *.o
- ! *.go
- ! *.pgo
- --- 1,3 ----
-   *.o
- ! *.g.o
- ! *.pg.o
- Index: contrib/sfcurves/Makefile
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/contrib/sfcurves/Makefile,v
- retrieving revision 1.4
- retrieving revision 1.5
- diff -c -r1.4 -r1.5
- *** contrib/sfcurves/Makefile	4 Feb 2003 16:29:50 -0000	1.4
- --- contrib/sfcurves/Makefile	7 Feb 2003 18:06:00 -0000	1.5
- ***************
- *** 18,30 ****
-   
-   ../lib/$(hosttype)_$(METHOD)/libsfcurves.a: $(OBJS)
-   	@echo "Linking "$@
- ! 	$(shell mkdir -p ../lib/$(hosttype)_$(METHOD))
-   	@$(AR) rv $@ $(OBJS)
-   
-   ../lib/$(hosttype)_$(METHOD)/libsfcurves.so: $(OBJS)
-   	@echo "Linking "$@
- ! 	$(shell mkdir -p ../lib/$(hosttype)_$(METHOD))
- ! 	@$(CC) -shared -o $@ $(OBJS)
-   
-   
-   .PHONY: clean clobber distclean
- --- 18,30 ----
-   
-   ../lib/$(hosttype)_$(METHOD)/libsfcurves.a: $(OBJS)
-   	@echo "Linking "$@
- ! 	@$(shell mkdir -p ../lib/$(hosttype)_$(METHOD))
-   	@$(AR) rv $@ $(OBJS)
-   
-   ../lib/$(hosttype)_$(METHOD)/libsfcurves.so: $(OBJS)
-   	@echo "Linking "$@
- ! 	@$(shell mkdir -p ../lib/$(hosttype)_$(METHOD))
- ! 	@$(CC) $(CSHAREDFLAG) -o $@ $(OBJS)
-   
-   
-   .PHONY: clean clobber distclean
- ***************
- *** 35,40 ****
- --- 35,41 ----
-   	@rm -f $(OBJS) *~
-   
-   clobber:
- + 	@$(MAKE) clean
-   	@rm -f *.o *.g.o *.pg.o *.sy.o
-   	@rm -f ../lib/$(hosttype)_$(METHOD)/libsfcurves.*
-   
- Index: doc/.cvsignore
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/doc/.cvsignore,v
- retrieving revision 1.1
- retrieving revision 1.2
- diff -c -r1.1 -r1.2
- *** doc/.cvsignore	20 Jan 2003 17:01:56 -0000	1.1
- --- doc/.cvsignore	4 Feb 2003 17:33:21 -0000	1.2
- ***************
- *** 1,4 ****
- - *.html
-   html
-   latex
-   Doxyfile
- --- 1,3 ----
- Index: doc/Doxyfile.in
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/doc/Doxyfile.in,v
- retrieving revision 1.2
- diff -c -r1.2 Doxyfile.in
- *** doc/Doxyfile.in	21 Jan 2003 22:45:41 -0000	1.2
- --- doc/Doxyfile.in	21 Feb 2003 20:53:39 -0000
- ***************
- *** 128,134 ****
-   # Setting the INLINE_SOURCES tag to YES will include the body 
-   # of functions and classes directly in the documentation.
-   
- ! INLINE_SOURCES         = NO
-   
-   # Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct 
-   # doxygen to hide any special comment blocks from generated source code 
- --- 128,134 ----
-   # Setting the INLINE_SOURCES tag to YES will include the body 
-   # of functions and classes directly in the documentation.
-   
- ! INLINE_SOURCES         = YES
-   
-   # Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct 
-   # doxygen to hide any special comment blocks from generated source code 
- ***************
- *** 407,413 ****
-   # each generated HTML page. If it is left blank doxygen will generate a 
-   # standard header.
-   
- ! HTML_HEADER            = 
-   
-   # The HTML_FOOTER tag can be used to specify a personal HTML footer for 
-   # each generated HTML page. If it is left blank doxygen will generate a 
- --- 407,413 ----
-   # each generated HTML page. If it is left blank doxygen will generate a 
-   # standard header.
-   
- ! HTML_HEADER            = ./doc/header.html
-   
-   # The HTML_FOOTER tag can be used to specify a personal HTML footer for 
-   # each generated HTML page. If it is left blank doxygen will generate a 
- ***************
- *** 420,426 ****
-   # fine-tune the look of the HTML output. If the tag is left blank doxygen 
-   # will generate a default style sheet
-   
- ! HTML_STYLESHEET        = 
-   
-   # If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes, 
-   # files or namespaces will be aligned in HTML using tables. If set to 
- --- 420,426 ----
-   # fine-tune the look of the HTML output. If the tag is left blank doxygen 
-   # will generate a default style sheet
-   
- ! HTML_STYLESHEET        = ./doc/stylesheet.css
-   
-   # If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes, 
-   # files or namespaces will be aligned in HTML using tables. If set to 
- ***************
- *** 521,527 ****
-   # contain links (just like the HTML output) instead of page references 
-   # This makes the output suitable for online browsing using a pdf viewer.
-   
- ! PDF_HYPERLINKS         = YES
-   
-   # If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of 
-   # plain latex in the generated Makefile. Set this option to YES to get a 
- --- 521,527 ----
-   # contain links (just like the HTML output) instead of page references 
-   # This makes the output suitable for online browsing using a pdf viewer.
-   
- ! PDF_HYPERLINKS         = NO
-   
-   # If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of 
-   # plain latex in the generated Makefile. Set this option to YES to get a 
- ***************
- *** 614,620 ****
-   # evaluate all C-preprocessor directives found in the sources and include 
-   # files.
-   
- ! ENABLE_PREPROCESSING   = YES
-   
-   # If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro 
-   # names in the source code. If set to NO (the default) only conditional 
- --- 614,620 ----
-   # evaluate all C-preprocessor directives found in the sources and include 
-   # files.
-   
- ! ENABLE_PREPROCESSING   = NO
-   
-   # If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro 
-   # names in the source code. If set to NO (the default) only conditional 
- ***************
- *** 734,739 ****
- --- 734,744 ----
-   # found. If left blank, it is assumed the dot tool can be found on the path.
-   
-   DOT_PATH               = @DOTPATH@
- + 
- + # Tell dot to generate pngs
- + 
- + DOT_IMAGE_FORMAT       = png
- + 
-   
-   # The MAX_DOT_GRAPH_WIDTH tag can be used to set the maximum allowed width 
-   # (in pixels) of the graphs generated by dot. If a graph becomes larger than 
- Index: doc/footer.html
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/doc/footer.html,v
- retrieving revision 1.1
- diff -c -r1.1 footer.html
- *** doc/footer.html	21 Jan 2003 22:45:42 -0000	1.1
- --- doc/footer.html	21 Feb 2003 20:53:39 -0000
- ***************
- *** 1,3 ****
- --- 1,4 ----
- + </DIV>
-   <br>
-   <br>
-   <hr>
- ***************
- *** 5,8 ****
-   <br>
-   <A href="http://sourceforge.net"> <IMG src="http://sourceforge.net/sflogo.php?group_id=71130&amp;type=5" width="210" height="62" border="0" alt="SourceForge.net Logo"></A>
-   </BODY>
- ! </HTML>
- \ No newline at end of file
- --- 6,9 ----
-   <br>
-   <A href="http://sourceforge.net"> <IMG src="http://sourceforge.net/sflogo.php?group_id=71130&amp;type=5" width="210" height="62" border="0" alt="SourceForge.net Logo"></A>
-   </BODY>
- ! </HTML>
- Index: examples/Makefile
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/examples/Makefile,v
- retrieving revision 1.3
- retrieving revision 1.9
- diff -c -r1.3 -r1.9
- *** examples/Makefile	4 Feb 2003 16:29:50 -0000	1.3
- --- examples/Makefile	10 Feb 2003 11:50:55 -0000	1.9
- ***************
- *** 3,12 ****
- --- 3,20 ----
-   #
-   # Build the example programs
-   examples:
- + 	@echo "----------------------------------------------"
- + 	@echo "--------- Building Example Programs ----------"
- + 	@echo "----------------------------------------------"
-   	@$(MAKE) -C ex1 $(MAKECMDGOALS)
-   	@$(MAKE) -C ex2 $(MAKECMDGOALS)
-   	@$(MAKE) -C ex3 $(MAKECMDGOALS)
-   	@$(MAKE) -C ex4 $(MAKECMDGOALS)
- + 	@$(MAKE) -C ex5 $(MAKECMDGOALS)
- + 	@$(MAKE) -C ex7 $(MAKECMDGOALS)
- + 	@echo "----------------------------------------------"
- + 	@echo "------- Done Building Example Programs -------"
- + 	@echo "----------------------------------------------"
-   
-   
-   .PHONY: clean clobber distclean
- ***************
- *** 18,23 ****
- --- 26,33 ----
-   	@$(MAKE) -C ex2 $(MAKECMDGOALS)
-   	@$(MAKE) -C ex3 $(MAKECMDGOALS)
-   	@$(MAKE) -C ex4 $(MAKECMDGOALS)
- + 	@$(MAKE) -C ex5 $(MAKECMDGOALS)
- + 	@$(MAKE) -C ex7 $(MAKECMDGOALS)
-   
-   
-   #
- ***************
- *** 27,32 ****
- --- 37,44 ----
-   	@$(MAKE) -C ex2 $(MAKECMDGOALS)
-   	@$(MAKE) -C ex3 $(MAKECMDGOALS)
-   	@$(MAKE) -C ex4 $(MAKECMDGOALS)
- + 	@$(MAKE) -C ex5 $(MAKECMDGOALS)
- + 	@$(MAKE) -C ex7 $(MAKECMDGOALS)
-   
-   #
-   # Make the example program directories look
- ***************
- *** 36,40 ****
- --- 48,63 ----
-   	@$(MAKE) -C ex2 $(MAKECMDGOALS)
-   	@$(MAKE) -C ex3 $(MAKECMDGOALS)
-   	@$(MAKE) -C ex4 $(MAKECMDGOALS)
- + 	@$(MAKE) -C ex5 $(MAKECMDGOALS)
- + 	@$(MAKE) -C ex7 $(MAKECMDGOALS)
-   
- + #
- + # Run the example programs to see if shared lib's get properly loaded
- + run: $(wildcard examples/ex?/ex?.C)
- + 	@$(MAKE) -C ex1 $(MAKECMDGOALS)
- + 	@$(MAKE) -C ex2 $(MAKECMDGOALS)
- + 	@$(MAKE) -C ex3 $(MAKECMDGOALS)
- + 	@$(MAKE) -C ex4 $(MAKECMDGOALS)
- + 	@$(MAKE) -C ex5 $(MAKECMDGOALS)
- + 	@$(MAKE) -C ex7 $(MAKECMDGOALS)
-   
- Index: examples/ex1/Makefile
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/examples/ex1/Makefile,v
- retrieving revision 1.4
- retrieving revision 1.8
- diff -c -r1.4 -r1.8
- *** examples/ex1/Makefile	4 Feb 2003 16:29:50 -0000	1.4
- --- examples/ex1/Makefile	21 Feb 2003 18:31:24 -0000	1.8
- ***************
- *** 1,4 ****
- ! # $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   
-   # The location of the mesh library
- --- 1,4 ----
- ! # $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   
-   # The location of the mesh library
- ***************
- *** 9,14 ****
- --- 9,17 ----
-   # link with the library.
-   include $(meshdir)/Make.common
-   
- + # include the dependency list
- + include .depend
- + 
-   
-   ###############################################################################
-   # File management.  This is where the source, header, and object files are
- ***************
- *** 38,44 ****
-   # Production rules:  how to make the target
-   $(target): $(objects)
-   	@echo "Linking "$@"..."
- ! 	$(CXX) $(CXXFLAGS) $(objects) -o $@ $(LIBS) $(LDFLAGS)
-   
-   
-   # Useful rules.
- --- 41,47 ----
-   # Production rules:  how to make the target
-   $(target): $(objects)
-   	@echo "Linking "$@"..."
- ! 	@$(CXX) $(CXXFLAGS) $(objects) -o $@ $(LIBS) $(LDFLAGS)
-   
-   
-   # Useful rules.
- ***************
- *** 52,55 ****
- --- 55,76 ----
-   distclean:
-   	@$(MAKE) clobber
-   	@rm -f *.o *.g.o *.pg.o
- + 
- + run: $(target)
- + 	@echo "***************************************************************"
- + 	@echo "* Running Example " $(target)
- + 	@echo "***************************************************************"
- + 	@echo " "
- + 	@$(target) -d 3 $(meshdir)/reference_elements/3D/one_hex27.xda
- + 	@echo " "
- + 	@echo "***************************************************************"
- + 	@echo "* Done Running Example " $(target)
- + 	@echo "***************************************************************"
- + #
- + # Dependencies
- + #
- + .depend:
- + 	@$(perl) $(meshdir)/contrib/bin/make_dependencies.pl -I$(meshdir)/include "-S\$$(obj-suffix)" $(srcfiles) > .depend
- + 	@echo "Updated .depend"
- + 
-   ###############################################################################
- Index: examples/ex1/ex1.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/examples/ex1/ex1.C,v
- retrieving revision 1.1
- retrieving revision 1.2
- diff -c -r1.1 -r1.2
- *** examples/ex1/ex1.C	30 Jan 2003 19:15:23 -0000	1.1
- --- examples/ex1/ex1.C	14 Feb 2003 15:22:33 -0000	1.2
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2003  Benjamin S. Kirk
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2003  Benjamin S. Kirk
- ***************
- *** 26,31 ****
- --- 26,36 ----
-   #include <iostream>
-   
-   /**
- +  * Functions to initialize the library.
- +  */
- + #include "libmesh.h"
- + 
- + /**
-    * Basic include files needed for the mesh functionality.
-    */
-   #include "mesh.h"
- ***************
- *** 45,94 ****
-   int main (int argc, char** argv)
-   {
-     /**
- !    * Check for proper usage.
- !    */
- !   if (argc < 4)
- !     {
- !       std::cerr << "Usage: " << argv[0] << " -d 2 in.mesh [out.mesh]"
- ! 		<< std::endl;
- ! 
- !       /**
- !        * This handy function will print the file name, line number,
- !        * and then abort.  Currrently the library does not use C++
- !        * exception handling.
- !        */
- !       error();
- !     };
- ! 
- !   /**
- !    * Get the dimensionality of the mesh from argv[2]
- !    */
- !   const unsigned int dim = atoi(argv[2]);
- ! 
- !   /**
- !    * Create a mesh with the requested dimension.
- !    */
- !   Mesh mesh(dim);
- ! 
- !   /**
- !    * Read the input mesh.
- !    */
- !   mesh.read (argv[3]);
- ! 
- !   /**
- !    * Print information about the mesh to the screen.
- !    */
- !   mesh.print_info();
- !   
- !   /**
- !    * Write the output mesh if the user specified an
- !    * output file name.
- !    */
- !   if (argc == 5)
- !     mesh.write (argv[4]);
- ! 
- !   /**
- !    * All done.  
-      */
- !   return 0;
-   };
- --- 50,130 ----
-   int main (int argc, char** argv)
-   {
-     /**
- !    * Initialize the library.  This is necessary because the library
- !    * may depend on a number of other libraries (i.e. MPI  and Petsc)
- !    * that require initialization before use.
- !    */
- !   libMesh::init (argc, argv);
- ! 
- !   /**
- !    * Force all our objects to have local scope.  By declaring
- !    * libMesh objects in the next pair of braces we can assert
- !    * that they will go out of scope (and should have been deleted)
- !    * before we return from main.  This allows the library to do
- !    * internal reference counting and assure memory is not leaked.
- !    */  
- !   {    
- !     /**
- !      * Check for proper usage. The program is designed to be run
- !      * as follows:
- !      *
- !      * ./ex1 -d DIM input_mesh_name [output_mesh_name]
- !      *
- !      * where [output_mesh_name] is an optional parameter giving
- !      * a filename to write the mesh into.
- !      */
- !     if (argc < 4)
- !       {
- ! 	std::cerr << "Usage: " << argv[0] << " -d 2 in.mesh [out.mesh]"
- ! 		  << std::endl;
- ! 	
- ! 	/**
- ! 	 * This handy function will print the file name, line number,
- ! 	 * and then abort.  Currrently the library does not use C++
- ! 	 * exception handling.
- ! 	 */
- ! 	error();
- !       }
- !     
- !     /**
- !      * Get the dimensionality of the mesh from argv[2]
- !      */
- !     const unsigned int dim = atoi(argv[2]);
- !     
- !     /**
- !      * Create a mesh with the requested dimension.
- !      */
- !     Mesh mesh(dim);
- !     
- !     /**
- !      * Read the input mesh.
- !      */
- !     mesh.read (argv[3]);
- !     
- !     /**
- !      * Print information about the mesh to the screen.
- !      */
- !     mesh.print_info();
- !     
- !     /**
- !      * Write the output mesh if the user specified an
- !      * output file name.
- !      */
- !     if (argc == 5)
- !       mesh.write (argv[4]);
- ! 
- !     /**
- !      * At this closing brace all of our objects will be forced
- !      * out of scope and will get deconstructed.
- !      */
- !   }
- ! 
- !   /**
- !    * All done.  Call the libMesh::close() function to close any
- !    * external libraries and check for leaked memory.  To be absolutey
- !    * certain this is called last we will return its value.  This
- !    * also allows main to return nonzero if memory is leaked, which
- !    * can be useful for testing purposes.
-      */
- !   return libMesh::close();
-   };
- Index: examples/ex2/Makefile
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/examples/ex2/Makefile,v
- retrieving revision 1.5
- retrieving revision 1.8
- diff -c -r1.5 -r1.8
- *** examples/ex2/Makefile	4 Feb 2003 16:29:50 -0000	1.5
- --- examples/ex2/Makefile	21 Feb 2003 18:31:24 -0000	1.8
- ***************
- *** 1,4 ****
- ! # $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   
-   # The location of the mesh library
- --- 1,4 ----
- ! # $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   
-   # The location of the mesh library
- ***************
- *** 9,14 ****
- --- 9,17 ----
-   # link with the library.
-   include $(meshdir)/Make.common
-   
- + # include the dependency list
- + include .depend
- + 
-   
-   ###############################################################################
-   # File management.  This is where the source, header, and object files are
- ***************
- *** 35,42 ****
-   
-   all:: $(target)
-   
- ! # Production rules:  how to make the target
- ! $(target): $(objects)
-   	@echo "Linking "$@"..."
-   	@$(CXX) $(CXXFLAGS) $(objects) -o $@ $(LIBS) $(LDFLAGS)
-   
- --- 38,45 ----
-   
-   all:: $(target)
-   
- ! # Production rules:  how to make the target - depends on library configuration 
- ! $(target): $(objects) $(meshdir)/include/mesh_config.h
-   	@echo "Linking "$@"..."
-   	@$(CXX) $(CXXFLAGS) $(objects) -o $@ $(LIBS) $(LDFLAGS)
-   
- ***************
- *** 52,55 ****
- --- 55,76 ----
-   distclean:
-   	@$(MAKE) clobber
-   	@rm -f *.o *.g.o *.pg.o
- + 
- + run: $(target)
- + 	@echo "***************************************************************"
- + 	@echo "* Running Example " $(target)
- + 	@echo "***************************************************************"
- + 	@echo " "
- + 	@$(target)
- + 	@echo " "
- + 	@echo "***************************************************************"
- + 	@echo "* Done Running Example " $(target)
- + 	@echo "***************************************************************"
- + #
- + # Dependencies
- + #
- + .depend:
- + 	@$(perl) $(meshdir)/contrib/bin/make_dependencies.pl -I$(meshdir)/include "-S\$$(obj-suffix)" $(srcfiles) > .depend
- + 	@echo "Updated .depend"
- + 
-   ###############################################################################
- Index: examples/ex2/ex2.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/examples/ex2/ex2.C,v
- retrieving revision 1.2
- retrieving revision 1.5
- diff -c -r1.2 -r1.5
- *** examples/ex2/ex2.C	31 Jan 2003 21:22:10 -0000	1.2
- --- examples/ex2/ex2.C	14 Feb 2003 15:22:33 -0000	1.5
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2003  Benjamin S. Kirk
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2003  Benjamin S. Kirk
- ***************
- *** 28,39 ****
-   /**
-    * Basic include file needed for the mesh functionality.
-    */
-   #include "mesh.h"
-   
-   /**
-    * Include file that defines a system
-    */
- ! #include "system_data.h"
-   
-   /**
-    * Include file that defines (possibly multiple) systems of equations.
- --- 28,40 ----
-   /**
-    * Basic include file needed for the mesh functionality.
-    */
- + #include "libmesh.h"
-   #include "mesh.h"
-   
-   /**
-    * Include file that defines a system
-    */
- ! #include "general_system.h"
-   
-   /**
-    * Include file that defines (possibly multiple) systems of equations.
- ***************
- *** 77,92 ****
-      * communications library on your system if you haven't already
-      * done so.
-      */
- ! #ifdef HAVE_PETSC
- !   
- !   const bool have_petsc = true;
- !   PetscInitialize (&argc, &argv, NULL, NULL);
- !   
- ! #else
- !   
- !   const bool have_petsc = false;
- !   
- ! #endif
-   
-   
-     /**
- --- 78,84 ----
-      * communications library on your system if you haven't already
-      * done so.
-      */
- !   libMesh::init (argc, argv);
-   
-   
-     /**
- ***************
- *** 136,142 ****
-        * The EquationSystems object needs a reference to the mesh
-        * object, so the order of construction here is important.
-        */
- !     EquationSystems equation_systems (mesh, have_petsc);
-       
-       /**
-        * Declare the system and its variables.
- --- 128,134 ----
-        * The EquationSystems object needs a reference to the mesh
-        * object, so the order of construction here is important.
-        */
- !     EquationSystems equation_systems (mesh);
-       
-       /**
-        * Declare the system and its variables.
- ***************
- *** 222,236 ****
-      * Call PetscFinalize() to allow Petsc to clean up after
-      * itself.
-      */  
- ! #ifdef HAVE_PETSC
- ! 
- !   PetscFinalize();
- !   
- ! #endif
- ! 
- !   
- !   /**
- !    * All done.  
- !    */
- !   return 0;
-   };
- --- 214,218 ----
-      * Call PetscFinalize() to allow Petsc to clean up after
-      * itself.
-      */  
- !   return libMesh::close();
-   };
- Index: examples/ex3/Makefile
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/examples/ex3/Makefile,v
- retrieving revision 1.5
- retrieving revision 1.8
- diff -c -r1.5 -r1.8
- *** examples/ex3/Makefile	4 Feb 2003 16:29:50 -0000	1.5
- --- examples/ex3/Makefile	21 Feb 2003 18:31:25 -0000	1.8
- ***************
- *** 1,4 ****
- ! # $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   
-   # The location of the mesh library
- --- 1,4 ----
- ! # $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   
-   # The location of the mesh library
- ***************
- *** 9,14 ****
- --- 9,17 ----
-   # link with the library.
-   include $(meshdir)/Make.common
-   
- + # include the dependency list
- + include .depend
- + 
-   
-   ###############################################################################
-   # File management.  This is where the source, header, and object files are
- ***************
- *** 35,42 ****
-   
-   all:: $(target)
-   
- ! # Production rules:  how to make the target
- ! $(target): $(objects)
-   	@echo "Linking "$@"..."
-   	@$(CXX) $(CXXFLAGS) $(objects) -o $@ $(LIBS) $(LDFLAGS)
-   
- --- 38,45 ----
-   
-   all:: $(target)
-   
- ! # Production rules:  how to make the target - depends on library configuration
- ! $(target): $(objects) $(meshdir)/include/mesh_config.h
-   	@echo "Linking "$@"..."
-   	@$(CXX) $(CXXFLAGS) $(objects) -o $@ $(LIBS) $(LDFLAGS)
-   
- ***************
- *** 52,55 ****
- --- 55,76 ----
-   distclean:
-   	@$(MAKE) clobber
-   	@rm -f *.o *.g.o *.pg.o
- + 
- + run: $(target)
- + 	@echo "***************************************************************"
- + 	@echo "* Running Example " $(target)
- + 	@echo "***************************************************************"
- + 	@echo " "
- + 	@$(target)
- + 	@echo " "
- + 	@echo "***************************************************************"
- + 	@echo "* Done Running Example " $(target)
- + 	@echo "***************************************************************"
- + #
- + # Dependencies
- + #
- + .depend:
- + 	@$(perl) $(meshdir)/contrib/bin/make_dependencies.pl -I$(meshdir)/include "-S\$$(obj-suffix)" $(srcfiles) > .depend
- + 	@echo "Updated .depend"
- + 
-   ###############################################################################
- Index: examples/ex3/ex3.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/examples/ex3/ex3.C,v
- retrieving revision 1.6
- retrieving revision 1.14
- diff -c -r1.6 -r1.14
- *** examples/ex3/ex3.C	4 Feb 2003 02:02:23 -0000	1.6
- --- examples/ex3/ex3.C	20 Feb 2003 04:59:58 -0000	1.14
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2003  Benjamin S. Kirk
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2003  Benjamin S. Kirk
- ***************
- *** 30,37 ****
-   /**
-    * Basic include file needed for the mesh functionality.
-    */
-   #include "mesh.h"
- ! #include "system_data.h"
-   #include "equation_systems.h"
-   
-   /**
- --- 30,38 ----
-   /**
-    * Basic include file needed for the mesh functionality.
-    */
- + #include "libmesh.h"
-   #include "mesh.h"
- ! #include "general_system.h"
-   #include "equation_systems.h"
-   
-   /**
- ***************
- *** 96,123 ****
-     /**
-      * Initialize Petsc, like in example 2.
-      */
- ! #ifdef HAVE_PETSC
- !   
- !   const bool have_petsc = true;
- !   PetscInitialize (&argc, &argv, NULL, NULL);
- !   
- ! #else
- !   
- !   const bool have_petsc = false;
- !   
- ! #endif
- ! 
- !   /**
- !    * This example is designed for real numbers only.
- !    */
- ! #ifdef USE_COMPLEX_NUMBERS
- ! 
- !   std::cerr << "ERROR: This example is not intended for " << std::endl
- ! 	    << " use with complex numbers." << std::endl;
- !   error();
- ! 
- ! #endif
- ! 
-   
-     /**
-      * Braces are used to force object scope, like in example 2
- --- 97,103 ----
-     /**
-      * Initialize Petsc, like in example 2.
-      */
- !   libMesh::init (argc, argv);
-   
-     /**
-      * Braces are used to force object scope, like in example 2
- ***************
- *** 144,154 ****
-       /**
-        * Use the internal mesh generator to create a uniform
-        * grid on the square [-1,1]^2.  We instruct the mesh generator
- !      * to build a mesh of 5x5 \p Quad9 elements.  Building \p Quad9
-        * elements instead of the default \p Quad4's we used in example 2
-        * allow us to use higher-order approximation.
-        */
- !     mesh.build_square (5, 5,
-   		       -1., 1.,
-   		       -1., 1.,
-   		       QUAD9);
- --- 124,134 ----
-       /**
-        * Use the internal mesh generator to create a uniform
-        * grid on the square [-1,1]^2.  We instruct the mesh generator
- !      * to build a mesh of 8x8 \p Quad9 elements.  Building \p Quad9
-        * elements instead of the default \p Quad4's we used in example 2
-        * allow us to use higher-order approximation.
-        */
- !     mesh.build_square (8, 8,
-   		       -1., 1.,
-   		       -1., 1.,
-   		       QUAD9);
- ***************
- *** 175,181 ****
-       /**
-        * Create an equation systems object.
-        */
- !     EquationSystems equation_systems (mesh, have_petsc);
-       
-       /**
-        * Declare the system and its variables.
- --- 155,161 ----
-       /**
-        * Create an equation systems object.
-        */
- !     EquationSystems equation_systems (mesh);
-       
-       /**
-        * Declare the system and its variables.
- ***************
- *** 236,252 ****
-     };
-   
-   
- - #ifdef HAVE_PETSC
- - 
- -   PetscFinalize();
- -   
- - #endif
- - 
- -   
-     /**
-      * All done.  
-      */
- !   return 0;
-   };
-   
-   
- --- 216,225 ----
-     };
-   
-   
-     /**
-      * All done.  
-      */
- !   return libMesh::close();
-   };
-   
-   
- ***************
- *** 275,287 ****
-      * Get a constant reference to the Finite Element type
-      * for the first (and only) variable in the system.
-      */
- !   FEType fe_type = es("Poisson").dof_map.component_type(0);
-   
-     /**
-      * Build a Finite Element object of the specified type.  Since the
-      * \p FEBase::build() member dynamically creates memory we will
-      * store the object as an \p AutoPtr<FEBase>.  This can be thought
- !    * of as a pointer that will clean up after itself.
-      */
-     AutoPtr<FEBase> fe (FEBase::build(dim, fe_type));
-     
- --- 248,262 ----
-      * Get a constant reference to the Finite Element type
-      * for the first (and only) variable in the system.
-      */
- !   FEType fe_type = es("Poisson").get_dof_map().variable_type(0);
-   
-     /**
-      * Build a Finite Element object of the specified type.  Since the
-      * \p FEBase::build() member dynamically creates memory we will
-      * store the object as an \p AutoPtr<FEBase>.  This can be thought
- !    * of as a pointer that will clean up after itself.  Example 4
- !    * describes some advantages of \p AutoPtr's in the context of
- !    * quadrature rules.
-      */
-     AutoPtr<FEBase> fe (FEBase::build(dim, fe_type));
-     
- ***************
- *** 341,348 ****
-      * this example compiles successfully, and the error 
-      * message in \p main() can catch this irregularity.
-      */
- !   ComplexDenseMatrix   Ke;
- !   std::vector<Complex> Fe;
-   
-     /**
-      * This vector will hold the degree of freedom indices for
- --- 316,323 ----
-      * this example compiles successfully, and the error 
-      * message in \p main() can catch this irregularity.
-      */
- !   DenseMatrix<Number> Ke;
- !   std::vector<Number> Fe;
-   
-     /**
-      * This vector will hold the degree of freedom indices for
- ***************
- *** 374,380 ****
-          * matrix and right-hand-side this element will
-          * contribute to.
-          */
- !       dof_map.dof_indices (e, dof_indices);
-   
-         /**
-          * Compute the element-specific data for the current
- --- 349,355 ----
-          * matrix and right-hand-side this element will
-          * contribute to.
-          */
- !       dof_map.dof_indices (elem, dof_indices);
-   
-         /**
-          * Compute the element-specific data for the current
- ***************
- *** 602,609 ****
-          * right-hand-side vector.  The \p PetscMatrix::add_matrix()
-          * and \p PetscVector::add_vector() members do this for us.
-          */
- !       es("Poisson").matrix.add_matrix (Ke, dof_indices);
- !       es("Poisson").rhs.add_vector (Fe, dof_indices);
-         
-       }; // end of element loop
-   
- --- 577,584 ----
-          * right-hand-side vector.  The \p PetscMatrix::add_matrix()
-          * and \p PetscVector::add_vector() members do this for us.
-          */
- !       es("Poisson").matrix->add_matrix (Ke, dof_indices);
- !       es("Poisson").rhs->add_vector (Fe, dof_indices);
-         
-       }; // end of element loop
-   
- Index: examples/ex4/.cvsignore
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/examples/ex4/.cvsignore,v
- retrieving revision 1.1
- retrieving revision 1.2
- diff -c -r1.1 -r1.2
- *** examples/ex4/.cvsignore	4 Feb 2003 01:57:17 -0000	1.1
- --- examples/ex4/.cvsignore	10 Feb 2003 03:55:49 -0000	1.2
- ***************
- *** 4,7 ****
-   *.pgo
-   *.syo
-   ex4
- ! out.gmv
- --- 4,7 ----
-   *.pgo
-   *.syo
-   ex4
- ! out_*.gmv
- Index: examples/ex4/Makefile
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/examples/ex4/Makefile,v
- retrieving revision 1.3
- retrieving revision 1.7
- diff -c -r1.3 -r1.7
- *** examples/ex4/Makefile	4 Feb 2003 16:29:50 -0000	1.3
- --- examples/ex4/Makefile	21 Feb 2003 18:31:26 -0000	1.7
- ***************
- *** 1,4 ****
- ! # $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   
-   # The location of the mesh library
- --- 1,4 ----
- ! # $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   
-   # The location of the mesh library
- ***************
- *** 9,14 ****
- --- 9,17 ----
-   # link with the library.
-   include $(meshdir)/Make.common
-   
- + # include the dependency list
- + include .depend
- + 
-   
-   ###############################################################################
-   # File management.  This is where the source, header, and object files are
- ***************
- *** 35,42 ****
-   
-   all:: $(target)
-   
- ! # Production rules:  how to make the target
- ! $(target): $(objects)
-   	@echo "Linking "$@"..."
-   	@$(CXX) $(CXXFLAGS) $(objects) -o $@ $(LIBS) $(LDFLAGS)
-   
- --- 38,45 ----
-   
-   all:: $(target)
-   
- ! # Production rules:  how to make the target - depends on library configuration
- ! $(target): $(objects) $(meshdir)/include/mesh_config.h
-   	@echo "Linking "$@"..."
-   	@$(CXX) $(CXXFLAGS) $(objects) -o $@ $(LIBS) $(LDFLAGS)
-   
- ***************
- *** 47,55 ****
-   
-   clobber:
-   	@$(MAKE) clean
- ! 	@rm -f $(target) out.gmv
-   
-   distclean:
-   	@$(MAKE) clobber
-   	@rm -f *.o *.g.o *.pg.o
-   ###############################################################################
- --- 50,77 ----
-   
-   clobber:
-   	@$(MAKE) clean
- ! 	@rm -f $(target) out_*.gmv
-   
-   distclean:
-   	@$(MAKE) clobber
-   	@rm -f *.o *.g.o *.pg.o
- + 
- + run: $(target)
- + 	@echo "***************************************************************"
- + 	@echo "* Running Example " $(target)
- + 	@echo "***************************************************************"
- + 	@echo " "
- + 	@$(target) -d 2
- + 	@$(target) -d 3
- + 	@echo " "
- + 	@echo "***************************************************************"
- + 	@echo "* Done Running Example " $(target)
- + 	@echo "***************************************************************"
- + #
- + # Dependencies
- + #
- + .depend:
- + 	@$(perl) $(meshdir)/contrib/bin/make_dependencies.pl -I$(meshdir)/include "-S\$$(obj-suffix)" $(srcfiles) > .depend
- + 	@echo "Updated .depend"
- + 
-   ###############################################################################
- Index: examples/ex4/ex4.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/examples/ex4/ex4.C,v
- retrieving revision 1.2
- retrieving revision 1.12
- diff -c -r1.2 -r1.12
- *** examples/ex4/ex4.C	4 Feb 2003 02:02:23 -0000	1.2
- --- examples/ex4/ex4.C	20 Feb 2003 04:59:58 -0000	1.12
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2003  Benjamin S. Kirk
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2003  Benjamin S. Kirk
- ***************
- *** 30,37 ****
-   /**
-    * Basic include file needed for the mesh functionality.
-    */
-   #include "mesh.h"
- ! #include "system_data.h"
-   #include "equation_systems.h"
-   
-   /**
- --- 30,38 ----
-   /**
-    * Basic include file needed for the mesh functionality.
-    */
- + #include "libmesh.h"
-   #include "mesh.h"
- ! #include "general_system.h"
-   #include "equation_systems.h"
-   
-   /**
- ***************
- *** 50,56 ****
-    */
-   #include "dof_map.h"
-   
- ! 
-   
-   
-   
- --- 51,62 ----
-    */
-   #include "dof_map.h"
-   
- ! /**
- !  * Define the PerfLog, a performance logging utility.
- !  * It is useful for timing events in a code and giving
- !  * you an idea where bottlenecks lie.
- !  */
- ! #include "perf_log.h"
-   
-   
-   
- ***************
- *** 65,70 ****
- --- 71,81 ----
-    * the code in a dimension-independent way.  Very minor
-    * changes to the example will allow the problem to be
-    * solved in two or three dimensions.
- +  *
- +  * This example will also introduce the \p PerfLog class
- +  * as a way to monitor your code's performance.  We will
- +  * use it to instrument the matrix assembly code and look
- +  * for bottlenecks where we should focus optimization efforts.
-    */
-   
-   
- ***************
- *** 97,124 ****
-     /**
-      * Initialize Petsc, like in example 2.
-      */
- ! #ifdef HAVE_PETSC
- !   
- !   const bool have_petsc = true;
- !   PetscInitialize (&argc, &argv, NULL, NULL);
- !   
- ! #else
- !   
- !   const bool have_petsc = false;
- !   
- ! #endif
- ! 
- !   /**
- !    * This example is designed for real numbers only.
- !    */
- ! #ifdef USE_COMPLEX_NUMBERS
- ! 
- !   std::cerr << "ERROR: This example is not intended for " << std::endl
- ! 	    << " use with complex numbers." << std::endl;
- !   error();
- ! 
- ! #endif
- ! 
-   
-     /**
-      * Braces are used to force object scope, like in example 2
- --- 108,114 ----
-     /**
-      * Initialize Petsc, like in example 2.
-      */
- !   libMesh::init (argc, argv);
-   
-     /**
-      * Braces are used to force object scope, like in example 2
- ***************
- *** 127,133 ****
-       /**
-        * Check for proper usage.
-        */
- !     if (argc != 3)
-         {
-   	std::cerr << "Usage: " << argv[0] << " -d 2"
-   		  << std::endl;
- --- 117,123 ----
-       /**
-        * Check for proper usage.
-        */
- !     if (argc < 3)
-         {
-   	std::cerr << "Usage: " << argv[0] << " -d 2"
-   		  << std::endl;
- ***************
- *** 160,177 ****
-       const unsigned int dim = atoi(argv[2]);     
-       
-       /**
- !      * Create a 2D mesh.
-        */
-       Mesh mesh (dim);
-       
-       /**
-        * Use the internal mesh generator to create a uniform
-        * grid on the square [-1,1]^D.  We instruct the mesh generator
- !      * to build a mesh of 5x5 \p Quad9 elements in 2D, or \p Hex27
-        * elements in 3D.  Building these higher-order elements allows
-        * us to use higher-order approximation, as in example 3.
-        */
- !     mesh.build_cube (5, 5, 5,
-   		     -1., 1.,
-   		     -1., 1.,
-   		     -1., 1.,
- --- 150,167 ----
-       const unsigned int dim = atoi(argv[2]);     
-       
-       /**
- !      * Create a mesh with user-defined dimension.
-        */
-       Mesh mesh (dim);
-       
-       /**
-        * Use the internal mesh generator to create a uniform
-        * grid on the square [-1,1]^D.  We instruct the mesh generator
- !      * to build a mesh of 8x8 \p Quad9 elements in 2D, or \p Hex27
-        * elements in 3D.  Building these higher-order elements allows
-        * us to use higher-order approximation, as in example 3.
-        */
- !     mesh.build_cube (15, 15, 15,
-   		     -1., 1.,
-   		     -1., 1.,
-   		     -1., 1.,
- ***************
- *** 190,196 ****
-       /**
-        * Create an equation systems object.
-        */
- !     EquationSystems equation_systems (mesh, have_petsc);
-       
-       /**
-        * Declare the system and its variables.
- --- 180,186 ----
-       /**
-        * Create an equation systems object.
-        */
- !     EquationSystems equation_systems (mesh);
-       
-       /**
-        * Declare the system and its variables.
- ***************
- *** 235,255 ****
-        * After solving the system write the solution
-        * to a GMV-formatted plot file.
-        */
- !     mesh.write_gmv ("out.gmv", equation_systems);
-     };
-   
-   
- - #ifdef HAVE_PETSC
- - 
- -   PetscFinalize();
- -   
- - #endif
- - 
- -   
-     /**
-      * All done.  
-      */
- !   return 0;
-   };
-   
-   
- --- 225,239 ----
-        * After solving the system write the solution
-        * to a GMV-formatted plot file.
-        */
- !     mesh.write_gmv ((dim == 3) ? "out_3.gmv" : "out_2.gmv",
- ! 		    equation_systems);
-     };
-   
-   
-     /**
-      * All done.  
-      */
- !   return libMesh::close ();
-   };
-   
-   
- ***************
- *** 265,270 ****
- --- 249,262 ----
-     assert (system_name == "Poisson");
-   
-     /**
- +    * Declare a performance log.  Give it a descriptive
- +    * string to identify what part of the code we are
- +    * logging, since there may be many PerfLogs in an
- +    * application.
- +    */
- +   PerfLog perf_log ("Matrix Assembly");
- +   
- +   /**
-      * Get a constant reference to the mesh object.
-      */
-     const Mesh& mesh = es.get_mesh();
- ***************
- *** 278,284 ****
-      * Get a constant reference to the Finite Element type
-      * for the first (and only) variable in the system.
-      */
- !   FEType fe_type = es("Poisson").dof_map.component_type(0);
-   
-     /**
-      * Build a Finite Element object of the specified type.  Since the
- --- 270,276 ----
-      * Get a constant reference to the Finite Element type
-      * for the first (and only) variable in the system.
-      */
- !   FEType fe_type = es("Poisson").get_dof_map().variable_type(0);
-   
-     /**
-      * Build a Finite Element object of the specified type.  Since the
- ***************
- *** 344,351 ****
-      * this example compiles successfully, and the error 
-      * message in \p main() can catch this irregularity.
-      */
- !   ComplexDenseMatrix   Ke;
- !   std::vector<Complex> Fe;
-   
-     /**
-      * This vector will hold the degree of freedom indices for
- --- 336,343 ----
-      * this example compiles successfully, and the error 
-      * message in \p main() can catch this irregularity.
-      */
- !   DenseMatrix<Number> Ke;
- !   std::vector<Number> Fe;
-   
-     /**
-      * This vector will hold the degree of freedom indices for
- ***************
- *** 366,371 ****
- --- 358,370 ----
-     for (unsigned int e=0; e<mesh.n_elem(); e++)
-       {
-         /**
- +        * Start logging the shape function initialization.
- +        * This is done through a simple function call with
- +        * the name of the event to log.
- +        */
- +       perf_log.start_event("elem init");      
- +       
- +       /**
-          * Store a pointer to the element we are currently
-          * working on.  This allows for nicer syntax later.
-          */
- ***************
- *** 377,383 ****
-          * matrix and right-hand-side this element will
-          * contribute to.
-          */
- !       dof_map.dof_indices (e, dof_indices);
-   
-         /**
-          * Compute the element-specific data for the current
- --- 376,382 ----
-          * matrix and right-hand-side this element will
-          * contribute to.
-          */
- !       dof_map.dof_indices (elem, dof_indices);
-   
-         /**
-          * Compute the element-specific data for the current
- ***************
- *** 407,474 ****
-   
-         std::fill (Fe.begin(), Fe.end(), 0.);
-   
-   
-   
-         /**
- !        *----------------------------------------------------------------
- !        * Now loop over the quadrature points.  This handles
- !        * the numeric integration.
-          */
-         for (unsigned int qp=0; qp<qrule.n_points(); qp++)
- ! 	{
- ! 
- ! 	  /**
- ! 	   * Now we will build the element matrix.  This involves
- ! 	   * a double loop to integrate the test funcions (i) against
- ! 	   * the trial functions (j).
- ! 	   */
- ! 	  for (unsigned int i=0; i<phi.size(); i++)
- ! 	    for (unsigned int j=0; j<phi.size(); j++)
- ! 	      {
- ! 		Ke(i,j) += JxW[qp]*(dphi[i][qp]*dphi[j][qp]);
- ! 	      }; // end of the matrix summation loop
- ! 
- ! 
- ! 	  /**
- ! 	   * Now we build the element right-hand-side contribution.
- ! 	   * This involves a single loop in which we integrate the
- ! 	   * "forcing function" in the PDE against the test functions.
- ! 	   */
- ! 	  for (unsigned int i=0; i<phi.size(); i++)
-   	    {
- ! 	      const Real x = q_point[qp](0);
- ! 	      const Real y = q_point[qp](1);
- ! 	      const Real z = q_point[qp](2);
- ! 	      const Real eps = 1.e-3;
- ! 
- ! 	      /**
- ! 	       * fxy is the forcing function for the Poisson equation.
- ! 	       * In this case we set fxy to be a finite difference
- ! 	       * Laplacian approximation to the (known) exact solution.
- ! 	       *
- ! 	       * Note that in 2D the Laplacian of u = u_xx + u_yy,
- ! 	       * but in 3D Laplacian of u = u_xx + u_yy + u_zz
- ! 	       */
- ! 	      const Real uxx = (exact_solution(x-eps,y,z) +
- ! 				exact_solution(x+eps,y,z) +
- ! 				-2.*exact_solution(x,y,z))/eps/eps;
- ! 	      
- ! 	      const Real uyy = (exact_solution(x,y-eps,z) +
- ! 				exact_solution(x,y+eps,z) +
- ! 				-2.*exact_solution(x,y,z))/eps/eps;
- ! 	      
- ! 	      const Real uzz = (exact_solution(x,y,z-eps) +
- ! 				exact_solution(x,y,z+eps) +
- ! 				-2.*exact_solution(x,y,z))/eps/eps;
-   
- ! 	      const Real fxy = - (uxx + uyy + ((dim==2) ? 0. : uzz));
- ! 	      
- ! 	      Fe[i] += JxW[qp]*fxy*phi[i][qp];
- ! 	    }; // end of the RHS summation loop
- ! 	  
- ! 	}; // end of quadrature point loop
-   
-   
-   
-   
-         
- --- 406,497 ----
-   
-         std::fill (Fe.begin(), Fe.end(), 0.);
-   
- +       /**
- +        * Stop logging the shape function initialization.
- +        * If you forget to stop logging an event the PerfLog
- +        * object will probably catch the error and abort.
- +        */
- +       perf_log.stop_event("elem init");      
-   
-   
- +       
-         /**
- !        * Now we will build the element matrix.  This involves
- !        * a double loop to integrate the test funcions (i) against
- !        * the trial functions (j).
- !        *
- !        * We have split the numeric integration into two loops
- !        * so that we can log the matrix and right-hand-side
- !        * computation seperately.
- !        */
- !       
- !       /**
- !        * Start logging the matrix computation
-          */
- +       perf_log.start_event ("Ke");
- +       
-         for (unsigned int qp=0; qp<qrule.n_points(); qp++)
- ! 	for (unsigned int i=0; i<phi.size(); i++)
- ! 	  for (unsigned int j=0; j<phi.size(); j++)
-   	    {
- ! 	      Ke(i,j) += JxW[qp]*(dphi[i][qp]*dphi[j][qp]);
- ! 	    }; // end of the matrix summation loop
-   
- !       /**
- !        * Stop logging the matrix computation
- !        */
- !       perf_log.stop_event ("Ke");
-   
-   
- +       
- +       /**
- +        * Now we build the element right-hand-side contribution.
- +        * This involves a single loop in which we integrate the
- +        * "forcing function" in the PDE against the test functions.
- +        */
- + 	  
- +       /**
- +        * Start logging the right-hand-side computation
- +        */
- +       perf_log.start_event ("Fe");
- +       
- +       for (unsigned int qp=0; qp<qrule.n_points(); qp++)
- + 	for (unsigned int i=0; i<phi.size(); i++)
- + 	  {
- + 	    const Real x = q_point[qp](0);
- + 	    const Real y = q_point[qp](1);
- + 	    const Real z = q_point[qp](2);
- + 	    const Real eps = 1.e-3;
- + 	    
- + 	    /**
- + 	     * fxy is the forcing function for the Poisson equation.
- + 	     * In this case we set fxy to be a finite difference
- + 	     * Laplacian approximation to the (known) exact solution.
- + 	     *
- + 	     * Note that in 2D the Laplacian of u = u_xx + u_yy,
- + 	     * but in 3D Laplacian of u = u_xx + u_yy + u_zz
- + 	     */
- + 	    const Real uxx = (exact_solution(x-eps,y,z) +
- + 			      exact_solution(x+eps,y,z) +
- + 			      -2.*exact_solution(x,y,z))/eps/eps;
- + 	    
- + 	    const Real uyy = (exact_solution(x,y-eps,z) +
- + 			      exact_solution(x,y+eps,z) +
- + 			      -2.*exact_solution(x,y,z))/eps/eps;
- + 	    
- + 	    const Real uzz = (exact_solution(x,y,z-eps) +
- + 			      exact_solution(x,y,z+eps) +
- + 			      -2.*exact_solution(x,y,z))/eps/eps;
- + 	    
- + 	    const Real fxy = - (uxx + uyy + ((dim==2) ? 0. : uzz));
- + 	    
- + 	    Fe[i] += JxW[qp]*fxy*phi[i][qp];
- + 	  }; // end of the RHS summation loop
- + 	  
- +       /**
- +        * Stop logging the right-hand-side computation
- +        */
- +       perf_log.stop_event ("Fe");
-   
-   
-         
- ***************
- *** 480,488 ****
-          * consider simple Dirichlet boundary conditions imposed
-          * via the penalty method. This is discussed at length in
-          * example 3.
- !        */
-         {
-   	/**
-   	 * The following loops over the sides of the element.
-   	 * If the element has no neighbor on a side then that
-   	 * side MUST live on a boundary of the domain.
- --- 503,516 ----
-          * consider simple Dirichlet boundary conditions imposed
-          * via the penalty method. This is discussed at length in
-          * example 3.
- !        */      
-         {
-   	/**
- + 	 * Start logging the boundary condition computation
- + 	 */
- + 	perf_log.start_event ("BCs");
- + 	
- + 	/**
-   	 * The following loops over the sides of the element.
-   	 * If the element has no neighbor on a side then that
-   	 * side MUST live on a boundary of the domain.
- ***************
- *** 579,584 ****
- --- 607,618 ----
-   		  
-   		}; // end face quadrature point loop	  
-   	    }; // end if (elem->neighbor(side) == NULL)
- + 	
- + 	/**
- + 	 * Start logging the boundary condition computation
- + 	 */
- + 	perf_log.stop_event ("BCs");
- + 
-         }; // end boundary condition section	  
-   
-   
- ***************
- *** 592,606 ****
-          * right-hand-side vector.  The \p PetscMatrix::add_matrix()
-          * and \p PetscVector::add_vector() members do this for us.
-          */
- !       es("Poisson").matrix.add_matrix (Ke, dof_indices);
- !       es("Poisson").rhs.add_vector    (Fe, dof_indices);
-         
-       }; // end of element loop
-   
-   
-     
-     /**
- !    * All done!
-      */
-     return;
-   };
- --- 626,656 ----
-          * right-hand-side vector.  The \p PetscMatrix::add_matrix()
-          * and \p PetscVector::add_vector() members do this for us.
-          */
- !       
- !       /**
- !        * Start logging the insertion of the local (element)
- !        * matrix and vector into the global matrix and vector
- !        */
- !       perf_log.start_event ("matrix insertion");
- !       
- !       es("Poisson").matrix->add_matrix (Ke, dof_indices);
- !       es("Poisson").rhs->add_vector    (Fe, dof_indices);
- ! 
- !       /**
- !        * Start logging the insertion of the local (element)
- !        * matrix and vector into the global matrix and vector
- !        */
- !       perf_log.stop_event ("matrix insertion");
-         
-       }; // end of element loop
-   
-   
- + 
-     
-     /**
- !    * That's it.  We don't need to do anything else to the
- !    * PerfLog.  When it goes out of scope (at this function return)
- !    * it will print its log to the screen. Pretty easy, huh?
-      */
-     return;
-   };
- Index: include/auto_ptr.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/auto_ptr.h,v
- retrieving revision 1.4
- retrieving revision 1.7
- diff -c -r1.4 -r1.7
- *** include/auto_ptr.h	24 Jan 2003 17:24:37 -0000	1.4
- --- include/auto_ptr.h	13 Feb 2003 22:56:06 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // Copyright (C) 2001, 2002 Free Software Foundation, Inc.
-   //
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // Copyright (C) 2001, 2002 Free Software Foundation, Inc.
-   //
- ***************
- *** 68,74 ****
-      */
-     explicit
-     AutoPtrRef(Tp1* p)
- !     : _ptr(p) {};
-   };
-     
-     
- --- 68,74 ----
-      */
-     explicit
-     AutoPtrRef(Tp1* p)
- !     : _ptr(p) {}
-   };
-     
-     
- ***************
- *** 123,129 ****
-      */
-     explicit
-     AutoPtr(element_type* p = 0) 
- !     : _ptr(p) {};
-   
-     /**
-      *  @brief  An %AutoPtr can be constructed from another %AutoPtr.
- --- 123,129 ----
-      */
-     explicit
-     AutoPtr(element_type* p = 0) 
- !     : _ptr(p) {}
-   
-     /**
-      *  @brief  An %AutoPtr can be constructed from another %AutoPtr.
- ***************
- *** 133,139 ****
-      *  given up ownsership.
-      */
-     AutoPtr(AutoPtr& a) 
- !     : _ptr(a.release()) {};
-   
-     /**
-      *  @brief  An %AutoPtr can be constructed from another %AutoPtr.
- --- 133,139 ----
-      *  given up ownsership.
-      */
-     AutoPtr(AutoPtr& a) 
- !     : _ptr(a.release()) {}
-   
-     /**
-      *  @brief  An %AutoPtr can be constructed from another %AutoPtr.
- ***************
- *** 146,152 ****
-      */
-     template<typename Tp1>
-     AutoPtr(AutoPtr<Tp1>& a) 
- !     : _ptr(a.release()) {};
-   
-     /**
-      *  @brief  %AutoPtr assignment operator.
- --- 146,152 ----
-      */
-     template<typename Tp1>
-     AutoPtr(AutoPtr<Tp1>& a) 
- !     : _ptr(a.release()) {}
-   
-     /**
-      *  @brief  %AutoPtr assignment operator.
- ***************
- *** 161,167 ****
-     {
-       reset(a.release());
-       return *this;
- !   };
-       
-     /**
-      *  @brief  %AutoPtr assignment operator.
- --- 161,167 ----
-     {
-       reset(a.release());
-       return *this;
- !   }
-       
-     /**
-      *  @brief  %AutoPtr assignment operator.
- ***************
- *** 179,185 ****
-     {
-       reset(a.release());
-       return *this;
- !   };
-   
-     /**
-      *  When the %AutoPtr goes out of scope, the object it owns is deleted.
- --- 179,185 ----
-     {
-       reset(a.release());
-       return *this;
- !   }
-   
-     /**
-      *  When the %AutoPtr goes out of scope, the object it owns is deleted.
- ***************
- *** 191,199 ****
-      *  specification here, but omitting it is standard conforming.  Its
-      *  presence can be detected only if _Tp::~_Tp() throws, but this is
-      *  prohibited.  [17.4.3.6]/2
- !    *  @end maint
-      */
- !   ~AutoPtr() { delete _ptr; };
-       
-     /**
-      *  @brief  Smart pointer dereferencing.
- --- 191,199 ----
-      *  specification here, but omitting it is standard conforming.  Its
-      *  presence can be detected only if _Tp::~_Tp() throws, but this is
-      *  prohibited.  [17.4.3.6]/2
- !    *  @endif maint
-      */
- !   ~AutoPtr() { delete _ptr; }
-       
-     /**
-      *  @brief  Smart pointer dereferencing.
- ***************
- *** 204,210 ****
-      *  one of those...)
-      */
-     element_type&
- !   operator*() const  { return *_ptr; };
-       
-     /**
-      *  @brief  Smart pointer dereferencing.
- --- 204,210 ----
-      *  one of those...)
-      */
-     element_type&
- !   operator*() const  { return *_ptr; }
-       
-     /**
-      *  @brief  Smart pointer dereferencing.
- ***************
- *** 213,219 ****
-      *  automatically cause to be dereferenced.
-      */
-     element_type*
- !   operator->() const  { return _ptr; };
-       
-     /**
-      *  @brief  Bypassing the smart pointer.
- --- 213,219 ----
-      *  automatically cause to be dereferenced.
-      */
-     element_type*
- !   operator->() const  { return _ptr; }
-       
-     /**
-      *  @brief  Bypassing the smart pointer.
- ***************
- *** 226,232 ****
-      *  @note  This %AutoPtr still owns the memory.
-      */
-     element_type*
- !   get() const  { return _ptr; };
-       
-     /**
-      *  @brief  Bypassing the smart pointer.
- --- 226,232 ----
-      *  @note  This %AutoPtr still owns the memory.
-      */
-     element_type*
- !   get() const  { return _ptr; }
-       
-     /**
-      *  @brief  Bypassing the smart pointer.
- ***************
- *** 245,251 ****
-       element_type* tmp = _ptr;
-       _ptr = 0;
-       return tmp;
- !   };
-       
-     /**
-      *  @brief  Forcibly deletes the managed object.
- --- 245,251 ----
-       element_type* tmp = _ptr;
-       _ptr = 0;
-       return tmp;
- !   }
-       
-     /**
-      *  @brief  Forcibly deletes the managed object.
- ***************
- *** 261,268 ****
-         {
-   	delete _ptr;
-   	_ptr = p;
- !       };
- !   };
-       
-     /** @{
-      *  @brief  Automatic conversions
- --- 261,268 ----
-         {
-   	delete _ptr;
-   	_ptr = p;
- !       }
- !   }
-       
-     /** @{
-      *  @brief  Automatic conversions
- ***************
- *** 276,288 ****
-      *  @endcode
-      */
-     AutoPtr(AutoPtrRef<element_type> ref) 
- !     : _ptr(ref._ptr) {};
-   
-     /**
-      * op= for AutoPtr.  Allows you to write:
-      * @code
-      * AutoPtr<Base> ptr = func_returning_AutoPtr(.....);
- !    * @encode
-      */
-     AutoPtr&
-     operator=(AutoPtrRef<element_type> ref) 
- --- 276,288 ----
-      *  @endcode
-      */
-     AutoPtr(AutoPtrRef<element_type> ref) 
- !     : _ptr(ref._ptr) {}
-   
-     /**
-      * op= for AutoPtr.  Allows you to write:
-      * @code
-      * AutoPtr<Base> ptr = func_returning_AutoPtr(.....);
- !    * @endcode
-      */
-     AutoPtr&
-     operator=(AutoPtrRef<element_type> ref) 
- ***************
- *** 291,313 ****
-         {
-   	delete _ptr;
-   	_ptr = ref._ptr;
- !       };
-       return *this;
- !   };
-   
-     /**
-      * op() for AutoPtrRef<Tp1>.  Calls the release member.
-      */
-     template<typename Tp1>
-     operator AutoPtrRef<Tp1>() 
- !   { return AutoPtrRef<Tp1>(this->release()); };
-       
-     /**
-      * op() for AutoPtr<Tp1>.  Calls the release member.
-      */
-     template<typename Tp1>
-     operator AutoPtr<Tp1>() 
- !   { return AutoPtr<Tp1>(this->release()); };
-   };
-   
-   
- --- 291,313 ----
-         {
-   	delete _ptr;
-   	_ptr = ref._ptr;
- !       }
-       return *this;
- !   }
-   
-     /**
-      * op() for AutoPtrRef<Tp1>.  Calls the release member.
-      */
-     template<typename Tp1>
-     operator AutoPtrRef<Tp1>() 
- !   { return AutoPtrRef<Tp1>(this->release()); }
-       
-     /**
-      * op() for AutoPtr<Tp1>.  Calls the release member.
-      */
-     template<typename Tp1>
-     operator AutoPtr<Tp1>() 
- !   { return AutoPtr<Tp1>(this->release()); }
-   };
-   
-   
- Index: include/boundary_info.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/boundary_info.h,v
- retrieving revision 1.8
- retrieving revision 1.10
- diff -c -r1.8 -r1.10
- *** include/boundary_info.h	3 Feb 2003 03:51:48 -0000	1.8
- --- include/boundary_info.h	13 Feb 2003 22:56:06 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 155,193 ****
-      * @returns a list of nodes that have boundary conditions.
-      */
-     const std::vector<unsigned int>& get_node_list() const
- !   { assert(node_list.size() == node_id_list.size()); return node_list; };
-   
-     /**
-      * @returns a list of elements that have boundary conditions.
-      */
-      const std::vector<unsigned int>& get_elem_list() const
- !   { assert(elem_list.size() == elem_id_list.size()); return elem_list; };
-   
-     /**
-      * @returns the side of each element that has a boundary condition.
-      */
-     const std::vector<unsigned short int>& get_side_list() const
- !   { assert(elem_list.size() == side_list.size()); return side_list; };
-   
-     /**
-      * @returns a list of boundary condition ids for the nodes.  This
-      * vector is the same size as \p node_list.
-      */
-     const std::vector<short int>& get_node_id_list() const
- !   { assert(node_list.size() == node_id_list.size()); return node_id_list; };
-   
-     /**
-      * @returns a list of boundary condition ids for the elements.
-      * This vector is the same size as \p elem_list.
-      */
-     const std::vector<short int>& get_elem_id_list() const
- !   {  assert(elem_list.size() == elem_id_list.size()); return elem_id_list; };
-   
-     /**
-      * @returns the user-specified boundary ids.
-      */
-     const std::set<short int>& get_boundary_ids() const
- !   { return boundary_ids; };
-   
-     /**
-      * Add boundary values for node \p node with id \p id to the boundary
- --- 155,193 ----
-      * @returns a list of nodes that have boundary conditions.
-      */
-     const std::vector<unsigned int>& get_node_list() const
- !   { assert(node_list.size() == node_id_list.size()); return node_list; }
-   
-     /**
-      * @returns a list of elements that have boundary conditions.
-      */
-      const std::vector<unsigned int>& get_elem_list() const
- !   { assert(elem_list.size() == elem_id_list.size()); return elem_list; }
-   
-     /**
-      * @returns the side of each element that has a boundary condition.
-      */
-     const std::vector<unsigned short int>& get_side_list() const
- !   { assert(elem_list.size() == side_list.size()); return side_list; }
-   
-     /**
-      * @returns a list of boundary condition ids for the nodes.  This
-      * vector is the same size as \p node_list.
-      */
-     const std::vector<short int>& get_node_id_list() const
- !   { assert(node_list.size() == node_id_list.size()); return node_id_list; }
-   
-     /**
-      * @returns a list of boundary condition ids for the elements.
-      * This vector is the same size as \p elem_list.
-      */
-     const std::vector<short int>& get_elem_id_list() const
- !   {  assert(elem_list.size() == elem_id_list.size()); return elem_id_list; }
-   
-     /**
-      * @returns the user-specified boundary ids.
-      */
-     const std::set<short int>& get_boundary_ids() const
- !   { return boundary_ids; }
-   
-     /**
-      * Add boundary values for node \p node with id \p id to the boundary
- ***************
- *** 196,208 ****
-     void add_boundary_values(const unsigned int node,
-   			   const std::vector<Real> values,
-   			   const short int id);
- - 
- -   /**
- -    * @returns a reference to the user-specified boundary values.
- -    */
- -   const std::vector<std::pair<unsigned int,
- -                  std::vector<Real> > >& get_boundary_values() const
- -   { return  boundary_values; };
-   
-     /**
-      * @returns the boundary values specified for node \p node.
- --- 196,201 ----
- Index: include/cell.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell.h,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** include/cell.h	24 Jan 2003 17:24:37 -0000	1.5
- --- include/cell.h	13 Feb 2003 22:56:06 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 51,62 ****
-   	const unsigned int ns,
-   	Cell* p) :
-       Elem (nn, ns, p)
- !   {};
-   
-     /**
-      * @returns 3, the dimensionality of the object.
-      */
- !   unsigned int dim () const { return 3; };
-   };
-   
-   
- --- 51,62 ----
-   	const unsigned int ns,
-   	Cell* p) :
-       Elem (nn, ns, p)
- !   {}
-   
-     /**
-      * @returns 3, the dimensionality of the object.
-      */
- !   unsigned int dim () const { return 3; }
-   };
-   
-   
- Index: include/cell_hex.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_hex.h,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** include/cell_hex.h	3 Feb 2003 03:51:48 -0000	1.6
- --- include/cell_hex.h	13 Feb 2003 22:56:06 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 50,76 ****
-      * @returns 8.  All hex-derivatives are guaranteed to have at
-      * least 8 nodes.
-      */
- !   unsigned int n_nodes() const { return 8; };
-   
-     /**
-      * @returns 6
-      */
- !   unsigned int n_sides() const { return 6; };
-   
-     /**
-      * @returns 8.  All hexahedrals have 8 vertices.
-      */
- !   unsigned int n_vertices() const { return 8; };
-   
-     /**
-      * @returns 12.  All hexahedrals have 12 edges.
-      */
- !   unsigned int n_edges() const { return 12; };
-   
-     /**
-      * @returns 6.  All hexahedrals have 6 faces.
-      */
- !   unsigned int n_faces() const { return 6; };
-     
-     /**
-      * @returns 8
- --- 50,76 ----
-      * @returns 8.  All hex-derivatives are guaranteed to have at
-      * least 8 nodes.
-      */
- !   unsigned int n_nodes() const { return 8; }
-   
-     /**
-      * @returns 6
-      */
- !   unsigned int n_sides() const { return 6; }
-   
-     /**
-      * @returns 8.  All hexahedrals have 8 vertices.
-      */
- !   unsigned int n_vertices() const { return 8; }
-   
-     /**
-      * @returns 12.  All hexahedrals have 12 edges.
-      */
- !   unsigned int n_edges() const { return 12; }
-   
-     /**
-      * @returns 6.  All hexahedrals have 6 faces.
-      */
- !   unsigned int n_faces() const { return 6; }
-     
-     /**
-      * @returns 8
- ***************
- *** 108,114 ****
-   Hex::Hex(const unsigned int nn, Cell* p) :
-     Cell(nn, Hex::n_sides(), p) 
-   {
- ! };
-   
-   
-   
- --- 108,114 ----
-   Hex::Hex(const unsigned int nn, Cell* p) :
-     Cell(nn, Hex::n_sides(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/cell_hex20.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_hex20.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/cell_hex20.h	3 Feb 2003 03:51:48 -0000	1.6
- --- include/cell_hex20.h	20 Feb 2003 23:17:59 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 78,99 ****
-     /**
-      * @returns \p HEX20
-      */
- !   ElemType     type ()   const { return HEX20; };
-   
-     /**
-      * @returns 20
-      */
- !   unsigned int n_nodes() const { return 20; };
-     
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; };
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; };
-     
-     /**
-      * Builds a QUAD8 built coincident with face i.  This
- --- 78,99 ----
-     /**
-      * @returns \p HEX20
-      */
- !   ElemType     type ()   const { return HEX20; }
-   
-     /**
-      * @returns 20
-      */
- !   unsigned int n_nodes() const { return 20; }
-     
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; }
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; }
-     
-     /**
-      * Builds a QUAD8 built coincident with face i.  This
- ***************
- *** 109,115 ****
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 12; };
-     
-   #ifdef ENABLE_AMR
-   
- --- 109,115 ----
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 12; }
-     
-   #ifdef ENABLE_AMR
-   
- ***************
- *** 117,127 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Coarsen the element.
- -    */
- -   void coarsen();
-   
-   #endif
-     
- --- 117,122 ----
- ***************
- *** 134,140 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[8][20][20];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 129,135 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[8][20][20];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 154,160 ****
-   Hex20::Hex20(Cell* p) :
-     Hex(Hex20::n_nodes(), p) 
-   {
- ! };
-   
-   
-   
- --- 149,155 ----
-   Hex20::Hex20(Cell* p) :
-     Hex(Hex20::n_nodes(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/cell_hex27.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_hex27.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/cell_hex27.h	3 Feb 2003 03:51:48 -0000	1.6
- --- include/cell_hex27.h	20 Feb 2003 23:17:59 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 78,99 ****
-     /**
-      * @returns \p HEX27
-      */
- !   ElemType     type ()   const { return HEX27; };
-   
-     /**
-      * @returns 27
-      */
- !   unsigned int n_nodes() const { return 27; };
-     
-     /**
-      * @returns 8
-      */
- !   unsigned int n_sub_elem() const { return 8; };
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; };
-   
-     /**
-      * Builds a QUAD9 built coincident with face i.  This
- --- 78,99 ----
-     /**
-      * @returns \p HEX27
-      */
- !   ElemType     type ()   const { return HEX27; }
-   
-     /**
-      * @returns 27
-      */
- !   unsigned int n_nodes() const { return 27; }
-     
-     /**
-      * @returns 8
-      */
- !   unsigned int n_sub_elem() const { return 8; }
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; }
-   
-     /**
-      * Builds a QUAD9 built coincident with face i.  This
- ***************
- *** 109,115 ****
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 12; };
-     
-   #ifdef ENABLE_AMR
-   
- --- 109,115 ----
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 12; }
-     
-   #ifdef ENABLE_AMR
-   
- ***************
- *** 117,127 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Coarsen the element.
- -    */
- -   void coarsen();
-   
-   #endif
-     
- --- 117,122 ----
- ***************
- *** 134,140 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[8][27][27];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 129,135 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[8][27][27];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 154,160 ****
-   Hex27::Hex27(Cell* p) :
-     Hex(Hex27::n_nodes(), p) 
-   {
- ! };
-   
-   
-   
- --- 149,155 ----
-   Hex27::Hex27(Cell* p) :
-     Hex(Hex27::n_nodes(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/cell_hex8.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_hex8.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/cell_hex8.h	3 Feb 2003 03:51:48 -0000	1.6
- --- include/cell_hex8.h	20 Feb 2003 23:18:00 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 64,80 ****
-     /**
-      * @returns \p HEX8
-      */
- !   ElemType type () const { return HEX8; };
-   
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; };
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; };
-     
-     /**
-      * Builds a QUAD4 built coincident with face i.  This
- --- 64,80 ----
-     /**
-      * @returns \p HEX8
-      */
- !   ElemType type () const { return HEX8; }
-   
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; }
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; }
-     
-     /**
-      * Builds a QUAD4 built coincident with face i.  This
- ***************
- *** 89,95 ****
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 12; };
-     
-   #ifdef ENABLE_AMR
-   
- --- 89,95 ----
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 12; }
-     
-   #ifdef ENABLE_AMR
-   
- ***************
- *** 98,108 ****
-      */
-     void refine(Mesh& mesh);
-     
- -   /**
- -    * Coarsen the element.
- -    */
- -   void coarsen();
- -   
-   #endif
-   
-     
- --- 98,103 ----
- ***************
- *** 115,121 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[8][8][8];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 110,116 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[8][8][8];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 135,141 ****
-   Hex8::Hex8(Cell* p) :
-     Hex(Hex8::n_nodes(), p) 
-   {
- ! };
-   
-   
-   
- --- 130,136 ----
-   Hex8::Hex8(Cell* p) :
-     Hex(Hex8::n_nodes(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/cell_inf_hex16.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_inf_hex16.h,v
- retrieving revision 1.6
- retrieving revision 1.9
- diff -c -r1.6 -r1.9
- *** include/cell_inf_hex16.h	3 Feb 2003 03:51:48 -0000	1.6
- --- include/cell_inf_hex16.h	20 Feb 2003 23:18:00 -0000	1.9
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 81,102 ****
-     /**
-      * @returns \p INFHEX16
-      */
- !   ElemType     type ()   const { return INFHEX16; };
-   
-     /**
-      * @returns 16
-      */
- !   unsigned int n_nodes() const { return 16; };
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sub_elem() const { return 4; };
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; };
-     
-     /**
-      * Returns a QUAD8 built coincident with face 0, an INFQUAD6 
- --- 81,102 ----
-     /**
-      * @returns \p INFHEX16
-      */
- !   ElemType     type ()   const { return INFHEX16; }
-   
-     /**
-      * @returns 16
-      */
- !   unsigned int n_nodes() const { return 16; }
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sub_elem() const { return 1; }
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; }
-     
-     /**
-      * Returns a QUAD8 built coincident with face 0, an INFQUAD6 
- ***************
- *** 110,119 ****
-     
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); };
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 12; };
-     
-     void write_tecplot_connectivity(std::ostream &out) const;
-     
- --- 110,119 ----
-     
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); }
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 12; }
-     
-     void write_tecplot_connectivity(std::ostream &out) const;
-     
- ***************
- *** 123,133 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Coarsen the element.
- -    */
- -   void coarsen();
-   
-   #endif
-     
- --- 123,128 ----
- ***************
- *** 140,146 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[4][16][16];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 135,141 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[4][16][16];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 161,167 ****
-   InfHex16::InfHex16(Cell* p) :
-     Hex(InfHex16::n_nodes(), p) 
-   {
- ! };
-   
-   
-   
- --- 156,162 ----
-   InfHex16::InfHex16(Cell* p) :
-     Hex(InfHex16::n_nodes(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/cell_inf_hex18.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_inf_hex18.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/cell_inf_hex18.h	3 Feb 2003 03:51:48 -0000	1.6
- --- include/cell_inf_hex18.h	20 Feb 2003 23:18:00 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 81,102 ****
-     /**
-      * @returns \p INFHEX18
-      */
- !   ElemType     type ()   const { return INFHEX18; };
-   
-     /**
-      * @returns 18
-      */
- !   unsigned int n_nodes() const { return 18; };
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sub_elem() const { return 4; };
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; };
-   
-     /**
-      * Returns a QUAD9 built coincident with face 0, an INFQUAD6 
- --- 81,102 ----
-     /**
-      * @returns \p INFHEX18
-      */
- !   ElemType     type ()   const { return INFHEX18; }
-   
-     /**
-      * @returns 18
-      */
- !   unsigned int n_nodes() const { return 18; }
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sub_elem() const { return 4; }
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; }
-   
-     /**
-      * Returns a QUAD9 built coincident with face 0, an INFQUAD6 
- ***************
- *** 110,119 ****
-   
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); };
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 12; };
-     
-     void write_tecplot_connectivity(std::ostream &out) const;
-     
- --- 110,119 ----
-   
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); }
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 12; }
-     
-     void write_tecplot_connectivity(std::ostream &out) const;
-     
- ***************
- *** 123,133 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Coarsen the element.
- -    */
- -   void coarsen();
-   
-   #endif
-     
- --- 123,128 ----
- ***************
- *** 140,146 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[4][18][18];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 135,141 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[4][18][18];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 161,167 ****
-   InfHex18::InfHex18(Cell* p) :
-     Hex(InfHex18::n_nodes(), p) 
-   {
- ! };
-   
-   
-   
- --- 156,162 ----
-   InfHex18::InfHex18(Cell* p) :
-     Hex(InfHex18::n_nodes(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/cell_inf_hex8.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_inf_hex8.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/cell_inf_hex8.h	3 Feb 2003 03:51:48 -0000	1.6
- --- include/cell_inf_hex8.h	20 Feb 2003 23:18:00 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 67,83 ****
-     /**
-      * @returns \p INFHEX8
-      */
- !   ElemType type () const { return INFHEX8; };
-   
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; };
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; };
-     
-     /**
-      * Returns a QUAD4 built coincident with face 0, an INFQUAD4 
- --- 67,83 ----
-     /**
-      * @returns \p INFHEX8
-      */
- !   ElemType type () const { return INFHEX8; }
-   
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; }
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; }
-     
-     /**
-      * Returns a QUAD4 built coincident with face 0, an INFQUAD4 
- ***************
- *** 91,100 ****
-     
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); };
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 12; };
-     
-     void write_tecplot_connectivity(std::ostream &out) const;
-     
- --- 91,100 ----
-     
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); }
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 12; }
-     
-     void write_tecplot_connectivity(std::ostream &out) const;
-     
- ***************
- *** 105,115 ****
-      */
-     void refine(Mesh& mesh);
-     
- -   /**
- -    * Coarsen the element.
- -    */
- -   void coarsen();
- -   
-   #endif
-   
-     
- --- 105,110 ----
- ***************
- *** 122,128 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[4][8][8];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 117,123 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[4][8][8];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 143,149 ****
-   InfHex8::InfHex8(Cell* p) :
-     Hex(InfHex8::n_nodes(), p) 
-   {
- ! };
-   
-   
-   
- --- 138,144 ----
-   InfHex8::InfHex8(Cell* p) :
-     Hex(InfHex8::n_nodes(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/cell_inf_prism12.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_inf_prism12.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/cell_inf_prism12.h	3 Feb 2003 03:51:48 -0000	1.6
- --- include/cell_inf_prism12.h	20 Feb 2003 23:18:00 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 72,93 ****
-     /**
-      * @returns \p INFPRISM12
-      */
- !   ElemType     type () const   { return INFPRISM12; };
-   
-     /**
-      * @returns 12
-      */
- !   unsigned int n_nodes() const { return 12; };
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sub_elem() const { return 4; };
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; };
-     
-     /**
-      * Returns a TRI6 built coincident with face 0, an INFQUAD6 
- --- 72,93 ----
-     /**
-      * @returns \p INFPRISM12
-      */
- !   ElemType     type () const   { return INFPRISM12; }
-   
-     /**
-      * @returns 12
-      */
- !   unsigned int n_nodes() const { return 12; }
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sub_elem() const { return 4; }
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; }
-     
-     /**
-      * Returns a TRI6 built coincident with face 0, an INFQUAD6 
- ***************
- *** 101,110 ****
-     
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); };
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 13; };
-     
-     void write_tecplot_connectivity(std::ostream &out) const;
-     
- --- 101,110 ----
-     
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); }
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 13; }
-     
-     void write_tecplot_connectivity(std::ostream &out) const;
-     
- ***************
- *** 114,124 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Coarsen the element.
- -    */
- -   void coarsen();
-   
-   #endif
-     
- --- 114,119 ----
- ***************
- *** 132,138 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[4][12][12];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 127,133 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[4][12][12];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 153,159 ****
-   InfPrism12::InfPrism12(Cell* p) :
-     Prism(InfPrism12::n_nodes(), p) 
-   {
- ! };
-   
-   
-   
- --- 148,154 ----
-   InfPrism12::InfPrism12(Cell* p) :
-     Prism(InfPrism12::n_nodes(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/cell_inf_prism6.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_inf_prism6.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/cell_inf_prism6.h	3 Feb 2003 03:51:48 -0000	1.6
- --- include/cell_inf_prism6.h	20 Feb 2003 23:18:00 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 65,81 ****
-     /**
-      * @returns \p INFPRISM6
-      */
- !   ElemType     type () const   { return INFPRISM6; };
-   
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; };
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; };
-     
-     /**
-      * Returns a TRI3 built coincident with face 0, an INFQUAD4 
- --- 65,81 ----
-     /**
-      * @returns \p INFPRISM6
-      */
- !   ElemType     type () const   { return INFPRISM6; }
-   
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; }
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; }
-     
-     /**
-      * Returns a TRI3 built coincident with face 0, an INFQUAD4 
- ***************
- *** 89,98 ****
-     
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); };
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 13; };
-     
-     void write_tecplot_connectivity(std::ostream &out) const;
-     
- --- 89,98 ----
-     
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); }
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 13; }
-     
-     void write_tecplot_connectivity(std::ostream &out) const;
-     
- ***************
- *** 102,112 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Coarsen the element.
- -    */
- -   void coarsen();
-   
-   #endif
-     
- --- 102,107 ----
- ***************
- *** 120,126 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[4][6][6];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 115,121 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[4][6][6];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 141,147 ****
-   InfPrism6::InfPrism6(Cell* p) :
-     Prism(InfPrism6::n_nodes(), p) 
-   {
- ! };
-   
-   
-   
- --- 136,142 ----
-   InfPrism6::InfPrism6(Cell* p) :
-     Prism(InfPrism6::n_nodes(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/cell_prism.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_prism.h,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** include/cell_prism.h	24 Jan 2003 17:24:37 -0000	1.5
- --- include/cell_prism.h	13 Feb 2003 22:56:06 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 50,81 ****
-      * @returns 6.  All prism-derivatives are guaranteed to have at
-      * least 6 nodes.
-      */
- !   unsigned int n_nodes() const { return 6; };
-   
-     /**
-      * @returns 5
-      */
- !   unsigned int n_sides() const { return 5; };
-   
-     /**
-      * @returns 6.  All prisms have 6 vertices.
-      */
- !   unsigned int n_vertices() const { return 6; };
-   
-     /**
-      * @returns 9.  All prisms have 9 edges.
-      */
- !   unsigned int n_edges() const { return 9; };
-   
-     /**
-      * @returns 5.  All prisms have 5 faces.
-      */
- !   unsigned int n_faces() const { return 5; };
-     
-     /**
-      * @returns 8
-      */
- !   unsigned int n_children() const { return 8; };
-   
-     /**
-      * @returns a primitive triangle or quad for 
- --- 50,81 ----
-      * @returns 6.  All prism-derivatives are guaranteed to have at
-      * least 6 nodes.
-      */
- !   unsigned int n_nodes() const { return 6; }
-   
-     /**
-      * @returns 5
-      */
- !   unsigned int n_sides() const { return 5; }
-   
-     /**
-      * @returns 6.  All prisms have 6 vertices.
-      */
- !   unsigned int n_vertices() const { return 6; }
-   
-     /**
-      * @returns 9.  All prisms have 9 edges.
-      */
- !   unsigned int n_edges() const { return 9; }
-   
-     /**
-      * @returns 5.  All prisms have 5 faces.
-      */
- !   unsigned int n_faces() const { return 5; }
-     
-     /**
-      * @returns 8
-      */
- !   unsigned int n_children() const { return 8; }
-   
-     /**
-      * @returns a primitive triangle or quad for 
- ***************
- *** 95,101 ****
-   Prism::Prism(const unsigned int nn, Cell* p) :
-     Cell(nn, Prism::n_sides(), p) 
-   {
- ! };
-   
-   
-   
- --- 95,101 ----
-   Prism::Prism(const unsigned int nn, Cell* p) :
-     Cell(nn, Prism::n_sides(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/cell_prism6.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_prism6.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/cell_prism6.h	3 Feb 2003 03:51:48 -0000	1.6
- --- include/cell_prism6.h	20 Feb 2003 23:18:01 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 62,78 ****
-     /**
-      * @returns \p PRISM6
-      */
- !   ElemType     type () const   { return PRISM6; };
-   
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; };
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; };
-     
-     /**
-      * Builds a QUAD4 or TRI3 built coincident with face i.  This
- --- 62,78 ----
-     /**
-      * @returns \p PRISM6
-      */
- !   ElemType     type () const   { return PRISM6; }
-   
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; }
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; }
-     
-     /**
-      * Builds a QUAD4 or TRI3 built coincident with face i.  This
- ***************
- *** 88,94 ****
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 13; };
-     
-   #ifdef ENABLE_AMR
-   
- --- 88,94 ----
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 13; }
-     
-   #ifdef ENABLE_AMR
-   
- ***************
- *** 96,106 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Coarsen the element.
- -    */
- -   void coarsen();
-   
-   #endif
-     
- --- 96,101 ----
- ***************
- *** 114,120 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[8][6][6];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 109,115 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[8][6][6];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 134,140 ****
-   Prism6::Prism6(Cell* p) :
-     Prism(Prism6::n_nodes(), p) 
-   {
- ! };
-   
-   
-   
- --- 129,135 ----
-   Prism6::Prism6(Cell* p) :
-     Prism(Prism6::n_nodes(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/cell_pyramid.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_pyramid.h,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** include/cell_pyramid.h	24 Jan 2003 17:24:37 -0000	1.5
- --- include/cell_pyramid.h	13 Feb 2003 22:56:06 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 51,82 ****
-      * @returns 5.  All pyramid-derivatives are guaranteed to have at
-      * least 5 nodes.
-      */
- !   unsigned int n_nodes() const { return 5; };
-   
-     /**
-      * @returns 5
-      */
- !   unsigned int n_sides() const { return 5; };
-   
-     /**
-      * @returns 5.  All pyramids have 5 vertices.
-      */
- !   unsigned int n_vertices() const { return 5; };
-   
-     /**
-      * @returns 8.  All pyramids have 8 edges.
-      */
- !   unsigned int n_edges() const { return 8; };
-   
-     /**
-      * @returns 5.  All pyramids have 5 faces.
-      */
- !   unsigned int n_faces() const { return 5; };
-     
-     /**
-      * @returns 10
-      */
- !   unsigned int n_children() const { return 10; };
-   
-     /**
-      * @returns a primitive triangle or quad for 
- --- 51,82 ----
-      * @returns 5.  All pyramid-derivatives are guaranteed to have at
-      * least 5 nodes.
-      */
- !   unsigned int n_nodes() const { return 5; }
-   
-     /**
-      * @returns 5
-      */
- !   unsigned int n_sides() const { return 5; }
-   
-     /**
-      * @returns 5.  All pyramids have 5 vertices.
-      */
- !   unsigned int n_vertices() const { return 5; }
-   
-     /**
-      * @returns 8.  All pyramids have 8 edges.
-      */
- !   unsigned int n_edges() const { return 8; }
-   
-     /**
-      * @returns 5.  All pyramids have 5 faces.
-      */
- !   unsigned int n_faces() const { return 5; }
-     
-     /**
-      * @returns 10
-      */
- !   unsigned int n_children() const { return 10; }
-   
-     /**
-      * @returns a primitive triangle or quad for 
- ***************
- *** 96,102 ****
-   Pyramid::Pyramid(const unsigned int nn, Cell* p) :
-     Cell(nn, Pyramid::n_sides(), p) 
-   {
- ! };
-   
-   
-   
- --- 96,102 ----
-   Pyramid::Pyramid(const unsigned int nn, Cell* p) :
-     Cell(nn, Pyramid::n_sides(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/cell_pyramid5.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_pyramid5.h,v
- retrieving revision 1.5
- retrieving revision 1.7
- diff -c -r1.5 -r1.7
- *** include/cell_pyramid5.h	24 Jan 2003 17:24:37 -0000	1.5
- --- include/cell_pyramid5.h	20 Feb 2003 23:18:02 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 62,78 ****
-     /**
-      * @returns \p PRYAMID
-      */
- !   ElemType     type () const   { return PYRAMID5; };
-   
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; };
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; };
-     
-     /**
-      * Builds a QUAD4 or TRI3 built coincident with face i.  This
- --- 62,78 ----
-     /**
-      * @returns \p PRYAMID
-      */
- !   ElemType     type () const   { return PYRAMID5; }
-   
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; }
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; }
-     
-     /**
-      * Builds a QUAD4 or TRI3 built coincident with face i.  This
- ***************
- *** 88,94 ****
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 14; };
-     
-   #ifdef ENABLE_AMR
-   
- --- 88,94 ----
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 14; }
-     
-   #ifdef ENABLE_AMR
-   
- ***************
- *** 96,106 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Coarsen the element.
- -    */
- -   void coarsen();
-   
-   #endif
-     
- --- 96,101 ----
- ***************
- *** 116,122 ****
-   Pyramid5::Pyramid5(Cell* p) :
-     Pyramid(Pyramid5::n_nodes(), p) 
-   {
- ! };
-   
-   
-   
- --- 111,117 ----
-   Pyramid5::Pyramid5(Cell* p) :
-     Pyramid(Pyramid5::n_nodes(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/cell_tet.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_tet.h,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** include/cell_tet.h	3 Feb 2003 03:51:48 -0000	1.6
- --- include/cell_tet.h	13 Feb 2003 22:56:06 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 50,81 ****
-      * @returns 4.  All tet-derivatives are guaranteed to have at
-      * least 4 nodes.
-      */
- !   unsigned int n_nodes() const { return 4; };
-   
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sides() const { return 4; };
-   
-     /**
-      * @returns 4.  All tetrahedrals have 4 vertices.
-      */
- !   unsigned int n_vertices() const { return 4; };
-   
-     /**
-      * @returns 6.  All tetrahedrals have 6 edges.
-      */
- !   unsigned int n_edges() const { return 6; };
-   
-     /**
-      * @returns 4.  All tetrahedrals have 4 faces.
-      */
- !   unsigned int n_faces() const { return 4; };
-   
-     /**
-      * @returns 8
-      */
- !   unsigned int n_children() const { return 8; }; 
-   
-     /**
-      * @returns a primitive (3-noded) triangle for 
- --- 50,81 ----
-      * @returns 4.  All tet-derivatives are guaranteed to have at
-      * least 4 nodes.
-      */
- !   unsigned int n_nodes() const { return 4; }
-   
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sides() const { return 4; }
-   
-     /**
-      * @returns 4.  All tetrahedrals have 4 vertices.
-      */
- !   unsigned int n_vertices() const { return 4; }
-   
-     /**
-      * @returns 6.  All tetrahedrals have 6 edges.
-      */
- !   unsigned int n_edges() const { return 6; }
-   
-     /**
-      * @returns 4.  All tetrahedrals have 4 faces.
-      */
- !   unsigned int n_faces() const { return 4; }
-   
-     /**
-      * @returns 8
-      */
- !   unsigned int n_children() const { return 8; } 
-   
-     /**
-      * @returns a primitive (3-noded) triangle for 
- ***************
- *** 108,114 ****
-   Tet::Tet(const unsigned int nn, Cell* p) :
-     Cell(nn, Tet::n_sides(), p) 
-   {
- ! };
-   
-   
-   
- --- 108,114 ----
-   Tet::Tet(const unsigned int nn, Cell* p) :
-     Cell(nn, Tet::n_sides(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/cell_tet10.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_tet10.h,v
- retrieving revision 1.5
- retrieving revision 1.7
- diff -c -r1.5 -r1.7
- *** include/cell_tet10.h	24 Jan 2003 17:24:37 -0000	1.5
- --- include/cell_tet10.h	20 Feb 2003 23:18:02 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 70,91 ****
-     /**
-      * @returns \p TET10
-      */
- !   ElemType     type ()   const { return TET10; };
-   
-     /**
-      * @returns 10
-      */
- !   unsigned int n_nodes() const { return 10; };
-   
-     /**
-      * @returns 8
-      */
- !   unsigned int n_sub_elem() const { return 8; };
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; };
-     
-     /**
-      * Builds a TRI6 built coincident with face i.  This
- --- 70,91 ----
-     /**
-      * @returns \p TET10
-      */
- !   ElemType     type ()   const { return TET10; }
-   
-     /**
-      * @returns 10
-      */
- !   unsigned int n_nodes() const { return 10; }
-   
-     /**
-      * @returns 8
-      */
- !   unsigned int n_sub_elem() const { return 8; }
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; }
-     
-     /**
-      * Builds a TRI6 built coincident with face i.  This
- ***************
- *** 101,126 ****
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 10; };
-     
-   #ifdef ENABLE_AMR
-   
-     /**
-      * Refine the element.
-      */
- !   void refine(Mesh&)
- !   { error(); return; };
-     
-     /**
- !    * Coarsen the element.
-      */
- !   void coarsen()
- !   { error(); return; };
- ! 
- ! #endif
-     
- ! private:
-     
-   };
-   
-   
- --- 101,137 ----
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 10; }
-     
-   #ifdef ENABLE_AMR
-   
-     /**
-      * Refine the element.
-      */
- !   void refine(Mesh& mesh);
- ! 
- ! #endif
- ! 
- !   
- ! private:  
- ! 
- !   
- ! #ifdef ENABLE_AMR
-     
-     /**
- !    * Matrix that computes new nodal locations/solution values
- !    * from current nodes/solution.
-      */
- !   static const float embedding_matrix[8][10][10];
-     
- !   /**
- !    * Matrix that tells which children share which of
- !    * my sides.
- !    */
- !   static const unsigned int side_children_matrix[4][4];
-     
- + #endif
- + 
-   };
-   
-   
- ***************
- *** 131,137 ****
-   Tet10::Tet10(Cell* p) :
-     Tet(Tet10::n_nodes(), p) 
-   {
- ! };
-   
-   
-   
- --- 142,148 ----
-   Tet10::Tet10(Cell* p) :
-     Tet(Tet10::n_nodes(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/cell_tet4.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/cell_tet4.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/cell_tet4.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/cell_tet4.h	20 Feb 2003 23:18:02 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 63,79 ****
-     /**
-      * @returns \p TET4
-      */
- !   ElemType type () const { return TET4; };
-   
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; };
-       
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; };
-     
-     /**
-      * Builds a TRI3 built coincident with face i.  This
- --- 63,79 ----
-     /**
-      * @returns \p TET4
-      */
- !   ElemType type () const { return TET4; }
-   
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; }
-       
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; }
-     
-     /**
-      * Builds a TRI3 built coincident with face i.  This
- ***************
- *** 89,95 ****
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 10; };
-     
-   #ifdef ENABLE_AMR
-   
- --- 89,95 ----
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 10; }
-     
-   #ifdef ENABLE_AMR
-   
- ***************
- *** 97,107 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Coarsen the element.
- -    */
- -   void coarsen();
-   
-   #endif
-   
- --- 97,102 ----
- ***************
- *** 115,121 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[8][4][4];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 110,116 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[8][4][4];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 135,141 ****
-   Tet4::Tet4(Cell* p) :
-     Tet(Tet4::n_nodes(), p) 
-   {
- ! };
-   
-   
-   
- --- 130,136 ----
-   Tet4::Tet4(Cell* p) :
-     Tet(Tet4::n_nodes(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/coupling_matrix.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/coupling_matrix.h,v
- retrieving revision 1.4
- retrieving revision 1.5
- diff -c -r1.4 -r1.5
- *** include/coupling_matrix.h	24 Jan 2003 17:24:37 -0000	1.4
- --- include/coupling_matrix.h	13 Feb 2003 22:56:06 -0000	1.5
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 110,116 ****
-     _size(n)
-   {
-     resize(n);
- ! };
-   
-   
-   
- --- 110,116 ----
-     _size(n)
-   {
-     resize(n);
- ! }
-   
-   
-   
- ***************
- *** 122,128 ****
-     assert (j < _size);
-   
-     return values[i*_size + j];
- ! };
-   
-   
-   
- --- 122,128 ----
-     assert (j < _size);
-   
-     return values[i*_size + j];
- ! }
-   
-   
-   
- ***************
- *** 134,140 ****
-     assert (j < _size);
-   
-     return values[i*_size + j];
- ! };
-   
-   
-   
- --- 134,140 ----
-     assert (j < _size);
-   
-     return values[i*_size + j];
- ! }
-   
-   
-   
- ***************
- *** 142,148 ****
-   unsigned int CouplingMatrix::size() const
-   {
-     return _size;
- ! };
-   
-   
-   
- --- 142,148 ----
-   unsigned int CouplingMatrix::size() const
-   {
-     return _size;
- ! }
-   
-   
-   
- ***************
- *** 155,161 ****
-   
-     for (unsigned int i=0; i<values.size(); i++)
-       values[i] = 0;
- ! };
-   
-   
-   
- --- 155,161 ----
-   
-     for (unsigned int i=0; i<values.size(); i++)
-       values[i] = 0;
- ! }
-   
-   
-   
- ***************
- *** 165,171 ****
-     _size = 0;
-   
-     values.clear();
- ! };
-   
-   
-   
- --- 165,171 ----
-     _size = 0;
-   
-     values.clear();
- ! }
-   
-   
-   
- ***************
- *** 173,179 ****
-   bool CouplingMatrix::empty() const
-   {
-     return (_size == 0);
- ! };
-   
-   
-   
- --- 173,179 ----
-   bool CouplingMatrix::empty() const
-   {
-     return (_size == 0);
- ! }
-   
-   
-   
- Index: include/dense_matrix.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/dense_matrix.h,v
- retrieving revision 1.6
- diff -c -r1.6 dense_matrix.h
- *** include/dense_matrix.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/dense_matrix.h	21 Feb 2003 20:53:40 -0000
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 30,35 ****
- --- 30,41 ----
-   #include "mesh_common.h"
-   
-   
- + // Forward Declarations
- + template <typename T> class PetscMatrix;
- + 
- + 
- + 
- + 
-   /**
-    * Defines a dense matrix for use in Finite Element-type computations.
-    * Useful for storing element stiffness matrices before summation
- ***************
- *** 40,49 ****
-   
-   // ------------------------------------------------------------
-   // Dense Matrix class definition
- ! template<typename Tp>
-   class DenseMatrix
-   {
- !  public:
-   
-     /**
-      * Constructor.  Creates a dense matrix of dimension \p m by \p n.
- --- 46,55 ----
-   
-   // ------------------------------------------------------------
-   // Dense Matrix class definition
- ! template<typename T>
-   class DenseMatrix
-   {
- ! public:
-   
-     /**
-      * Constructor.  Creates a dense matrix of dimension \p m by \p n.
- ***************
- *** 54,60 ****
-     /**
-      * Copy-constructor.
-      */
- !   DenseMatrix (const DenseMatrix<Tp>& other_matrix);
-     
-     /**
-      * Destructor.  Frees all associated memory.
- --- 60,66 ----
-     /**
-      * Copy-constructor.
-      */
- !   DenseMatrix (const DenseMatrix<T>& other_matrix);
-     
-     /**
-      * Destructor.  Frees all associated memory.
- ***************
- *** 76,139 ****
-     /**
-      * @returns the \p (i,j) element of the matrix.
-      */
- !   Tp operator() (const unsigned int i,
- ! 		 const unsigned int j) const;
-   
-     /**
-      * Assignment operator.
-      */
- !   DenseMatrix<Tp>& operator = (const DenseMatrix<Tp>& other_matrix);
-     
-     /**
-      * @returns the \p (i,j) element of the transposed matrix.
-      */
- !   Tp transpose (const unsigned int i, const unsigned int j) const;
-     
-     /**
-      * @returns the \p (i,j) element of the matrix as a writeable reference.
-      */
- !   Tp & operator() (const unsigned int i,
- ! 		   const unsigned int j);
-   
-     /**
-      * Multiplies every element in the matrix by \p factor.
-      */
- !   void scale (const Tp factor);
-     
-     /**
-      * Adds \p factor to every element in the matrix.
-      */
- !   void add (const Tp factor,
- ! 	    const DenseMatrix<Tp>& mat);
-   
-     /**
-      * Left multipliess by the matrix \p M.
-      * Optionally multiplies by the transpose.
-      */
- !   void left_multiply (const DenseMatrix<Tp>& A, const bool transpose=false); 
-     
-     /**
-      * Right multiplies by the matrix \p M.
-      * Optionally multiplies by the transpose.
-      */
- !   void right_multiply (const DenseMatrix<Tp>& A, const bool transpose=false); 
-     
-     /**
-      * @returns the row-dimension of the matrix.
-      */
- !   unsigned int m() const { return m_dim; };
-     
-     /**
-      * @returns the column-dimension of the matrix.
-      */
- !   unsigned int n() const { return n_dim; };
-   
-     /**
-      * Access to the values array.  This should be used with
-      * caution but can  be used to speed up code compilation
-      * significantly.
-      */
- !   std::vector<Tp>& get_values() { return val; };
-   
-     /**
-      * Condense-out the \p (i,j) entry of the matrix, forcing
- --- 82,159 ----
-     /**
-      * @returns the \p (i,j) element of the matrix.
-      */
- !   T operator() (const unsigned int i,
- ! 		const unsigned int j) const;
-   
-     /**
-      * Assignment operator.
-      */
- !   DenseMatrix<T>& operator = (const DenseMatrix<T>& other_matrix);
-     
-     /**
-      * @returns the \p (i,j) element of the transposed matrix.
-      */
- !   T transpose (const unsigned int i, const unsigned int j) const;
-     
-     /**
-      * @returns the \p (i,j) element of the matrix as a writeable reference.
-      */
- !   T & operator() (const unsigned int i,
- ! 		  const unsigned int j);
-   
-     /**
-      * Multiplies every element in the matrix by \p factor.
-      */
- !   void scale (const T factor);
-     
-     /**
-      * Adds \p factor to every element in the matrix.
-      */
- !   void add (const T factor,
- ! 	    const DenseMatrix<T>& mat);
- ! 
- ! 
- ! #ifdef USE_COMPLEX_NUMBERS
- ! 
- !   /**
- !    * For a complex-valued matrix, let a real-valued
- !    * matrix being added to us (Note that the other
- !    * way around would be wrong!). 
- !    */
- !   void add (const Complex factor,
- ! 	    const DenseMatrix<Real>& mat);
- ! 
- ! #endif
- ! 
-   
-     /**
-      * Left multipliess by the matrix \p M.
-      * Optionally multiplies by the transpose.
-      */
- !   void left_multiply (const DenseMatrix<T>& A, const bool transpose=false); 
-     
-     /**
-      * Right multiplies by the matrix \p M.
-      * Optionally multiplies by the transpose.
-      */
- !   void right_multiply (const DenseMatrix<T>& A, const bool transpose=false); 
-     
-     /**
-      * @returns the row-dimension of the matrix.
-      */
- !   unsigned int m() const { return m_dim; }
-     
-     /**
-      * @returns the column-dimension of the matrix.
-      */
- !   unsigned int n() const { return n_dim; }
-   
-     /**
-      * Access to the values array.  This should be used with
-      * caution but can  be used to speed up code compilation
-      * significantly.
-      */
- !   std::vector<T>& get_values() { return val; }
-   
-     /**
-      * Condense-out the \p (i,j) entry of the matrix, forcing
- ***************
- *** 143,162 ****
-      */
-     void condense(const unsigned int i,
-   		const unsigned int j,
- ! 		const Tp val,
- ! 		std::vector<Tp>& rhs);
-     
-     /**
-      * Pretty-print the matrix to \p stdout.
-      */
-     void print() const;
-     
- !  private:
-   
-     /**
-      * The actual data values, stored as a 1D array.
-      */
- !   std::vector<Tp> val;
-   
-     /**
-      * The row dimension.
- --- 163,182 ----
-      */
-     void condense(const unsigned int i,
-   		const unsigned int j,
- ! 		const T val,
- ! 		std::vector<T>& rhs);
-     
-     /**
-      * Pretty-print the matrix to \p stdout.
-      */
-     void print() const;
-     
- ! private:
-   
-     /**
-      * The actual data values, stored as a 1D array.
-      */
- !   std::vector<T> val;
-   
-     /**
-      * The row dimension.
- ***************
- *** 168,173 ****
- --- 188,199 ----
-      */
-     unsigned int n_dim;
-   
- +   /**
- +    * Make the PetscMatrix<T> class a friend
- +    * so that they can insert values directly
- +    * from our matrix.
- +    */
- +   friend class PetscMatrix<T>;
-   };
-   
-   
- ***************
- *** 190,204 ****
-     /**
-      * Note that this typedef may be either
-      * a real-only matrix, or a truly complex
- !    * matrix, depending on how \p Complex
-      * was defined in \p mesh_common.h.
- !    * Be also aware of the fact that \p DenseMatrix<Tp>
-      * is likely to be more efficient for
-      * real than for complex data.
-      */
-     typedef DenseMatrix<Complex> ComplexDenseMatrix;  
-   
- ! };
-   
-   
-   
- --- 216,230 ----
-     /**
-      * Note that this typedef may be either
-      * a real-only matrix, or a truly complex
- !    * matrix, depending on how \p Number
-      * was defined in \p mesh_common.h.
- !    * Be also aware of the fact that \p DenseMatrix<T>
-      * is likely to be more efficient for
-      * real than for complex data.
-      */
-     typedef DenseMatrix<Complex> ComplexDenseMatrix;  
-   
- ! }
-   
-   
-   
- ***************
- *** 210,251 ****
-   
-   // ------------------------------------------------------------
-   // Dense Matrix member functions
- ! template<typename Tp>
-   inline
- ! DenseMatrix<Tp>::DenseMatrix(const unsigned int m,
- ! 			     const unsigned int n)
-   {
-     resize(m,n);
-   
-     zero();
- ! };
-   
-   
-   
- ! template<typename Tp>
-   inline
- ! DenseMatrix<Tp>::DenseMatrix (const DenseMatrix& other_matrix)
-   {
-     m_dim = other_matrix.m_dim;
-     n_dim = other_matrix.n_dim;
-     
-     val = other_matrix.val;
- ! };
-   
-   
-   
- ! template<typename Tp>
-   inline
- ! DenseMatrix<Tp>::~DenseMatrix()
-   {
- ! };
-   
-   
-   
- ! template<typename Tp>
-   inline
- ! void DenseMatrix<Tp>::resize(const unsigned int m,
- ! 			     const unsigned int n)
-   {
-     if (m*n > val.size())
-       val.resize(m*n);
- --- 236,277 ----
-   
-   // ------------------------------------------------------------
-   // Dense Matrix member functions
- ! template<typename T>
-   inline
- ! DenseMatrix<T>::DenseMatrix(const unsigned int m,
- ! 			    const unsigned int n)
-   {
-     resize(m,n);
-   
-     zero();
- ! }
-   
-   
-   
- ! template<typename T>
-   inline
- ! DenseMatrix<T>::DenseMatrix (const DenseMatrix& other_matrix)
-   {
-     m_dim = other_matrix.m_dim;
-     n_dim = other_matrix.n_dim;
-     
-     val = other_matrix.val;
- ! }
-   
-   
-   
- ! template<typename T>
-   inline
- ! DenseMatrix<T>::~DenseMatrix()
-   {
- ! }
-   
-   
-   
- ! template<typename T>
-   inline
- ! void DenseMatrix<T>::resize(const unsigned int m,
- ! 			    const unsigned int n)
-   {
-     if (m*n > val.size())
-       val.resize(m*n);
- ***************
- *** 256,278 ****
-     zero();
-     
-     return;
- ! };
-   
-   
-   
- ! template<typename Tp>
-   inline
- ! void DenseMatrix<Tp>::zero()
-   {
-     for (unsigned int i=0; i<val.size(); i++)
-       val[i] = 0.;
- ! };
-   
-   
-   
- ! template<typename Tp>
-   inline
- ! DenseMatrix<Tp>& DenseMatrix<Tp>::operator = (const DenseMatrix<Tp>& other_matrix)
-   {
-     m_dim = other_matrix.m_dim;
-     n_dim = other_matrix.n_dim;
- --- 282,304 ----
-     zero();
-     
-     return;
- ! }
-   
-   
-   
- ! template<typename T>
-   inline
- ! void DenseMatrix<T>::zero()
-   {
-     for (unsigned int i=0; i<val.size(); i++)
-       val[i] = 0.;
- ! }
-   
-   
-   
- ! template<typename T>
-   inline
- ! DenseMatrix<T>& DenseMatrix<T>::operator = (const DenseMatrix<T>& other_matrix)
-   {
-     m_dim = other_matrix.m_dim;
-     n_dim = other_matrix.n_dim;
- ***************
- *** 280,357 ****
-     val   = other_matrix.val;
-     
-     return *this;
- ! };
-   
-   
-   
- ! template<typename Tp>
-   inline
- ! Tp DenseMatrix<Tp>::operator () (const unsigned int i,
- ! 				 const unsigned int j) const
-   {
-     assert (i*j<val.size());
-     
-     //  return val[(i) + (m_dim)*(j)]; // row-major
-     return val[(i)*(n_dim) + (j)]; // col-major
- ! };
-   
-   
-   
- ! template<typename Tp>
-   inline
- ! Tp & DenseMatrix<Tp>::operator () (const unsigned int i,
- ! 				   const unsigned int j)
-   {
-     assert (i*j<val.size());
-     
-     //return val[(i) + (m_dim)*(j)]; // col-major
-     return val[(i)*(n_dim) + (j)]; // row-major
- ! };
-   
-   
-   
- ! template<typename Tp>
-   inline
- ! Tp DenseMatrix<Tp>::transpose (const unsigned int i,
- ! 			       const unsigned int j) const
-   {
-     assert (i*j<val.size());
-     
-     //return val[(j) + (m_dim)*(i)]; // col-major
-     return val[(j)*(n_dim) + (i)]; // row-major
- ! };
-     
-       
-   
-   
- ! template<typename Tp>
-   inline
- ! void DenseMatrix<Tp>::scale (const Tp factor)
-   {
-     for (unsigned int i=0; i<val.size(); i++)
-       val[i] *= factor;
- ! };
-   
-   
-   
-   
- ! // template<typename Tp>
-   // inline
- ! // void DenseMatrix<Tp>::vmult(std::vector<Tp> &w,
- ! // 			std::vector<Tp> &v,
-   // 			const bool adding)
-   // {
-   //   assert (n() == v.size());
-   //   assert (m() == w.size());
-   
- ! //   Tp beta = 0.;
-   
-   //   if (adding)
-   //     beta = 1.;
-   //   /*
-   //     for (unsigned int i=0; i<m(); i++)
-   //     {
- ! //     Tp sum = 0.;
-   
-   //     for (unsigned int j=0; j<n(); j++)
-   //     sum += val[i + m_dim*j]*v[j];
- --- 306,383 ----
-     val   = other_matrix.val;
-     
-     return *this;
- ! }
-   
-   
-   
- ! template<typename T>
-   inline
- ! T DenseMatrix<T>::operator () (const unsigned int i,
- ! 			       const unsigned int j) const
-   {
-     assert (i*j<val.size());
-     
-     //  return val[(i) + (m_dim)*(j)]; // row-major
-     return val[(i)*(n_dim) + (j)]; // col-major
- ! }
-   
-   
-   
- ! template<typename T>
-   inline
- ! T & DenseMatrix<T>::operator () (const unsigned int i,
- ! 				 const unsigned int j)
-   {
-     assert (i*j<val.size());
-     
-     //return val[(i) + (m_dim)*(j)]; // col-major
-     return val[(i)*(n_dim) + (j)]; // row-major
- ! }
-   
-   
-   
- ! template<typename T>
-   inline
- ! T DenseMatrix<T>::transpose (const unsigned int i,
- ! 			     const unsigned int j) const
-   {
-     assert (i*j<val.size());
-     
-     //return val[(j) + (m_dim)*(i)]; // col-major
-     return val[(j)*(n_dim) + (i)]; // row-major
- ! }
-     
-       
-   
-   
- ! template<typename T>
-   inline
- ! void DenseMatrix<T>::scale (const T factor)
-   {
-     for (unsigned int i=0; i<val.size(); i++)
-       val[i] *= factor;
- ! }
-   
-   
-   
-   
- ! // template<typename T>
-   // inline
- ! // void DenseMatrix<T>::vmult(std::vector<T> &w,
- ! // 			std::vector<T> &v,
-   // 			const bool adding)
-   // {
-   //   assert (n() == v.size());
-   //   assert (m() == w.size());
-   
- ! //   T beta = 0.;
-   
-   //   if (adding)
-   //     beta = 1.;
-   //   /*
-   //     for (unsigned int i=0; i<m(); i++)
-   //     {
- ! //     T sum = 0.;
-   
-   //     for (unsigned int j=0; j<n(); j++)
-   //     sum += val[i + m_dim*j]*v[j];
- ***************
- *** 368,387 ****
-     
-   // #endif
-   
- ! // };
-       
-       
-   
- ! // template<typename Tp>
-   // inline
- ! // void DenseMatrix<Tp>::Tvmult(std::vector<Tp> &w,
- ! // 			 std::vector<Tp> &v,
-   // 			 const bool adding)
-   // {
-   //   assert (m() == v.size());
-   //   assert (n() == w.size());
-   
- ! //   Tp beta = 0.;
-   
-   //   if (adding)
-   //     beta = 1.;
- --- 394,413 ----
-     
-   // #endif
-   
- ! // }
-       
-       
-   
- ! // template<typename T>
-   // inline
- ! // void DenseMatrix<T>::Tvmult(std::vector<T> &w,
- ! // 			 std::vector<T> &v,
-   // 			 const bool adding)
-   // {
-   //   assert (m() == v.size());
-   //   assert (n() == w.size());
-   
- ! //   T beta = 0.;
-   
-   //   if (adding)
-   //     beta = 1.;
- ***************
- *** 396,410 ****
-   //   error();
-   
-   // #endif
- ! // };
-   
-   
-   
-   
- ! template<typename Tp>
-   inline
- ! void DenseMatrix<Tp>::add (const Tp factor,
- ! 			   const DenseMatrix<Tp>& mat)
-   {
-     assert (m() == mat.m());
-     assert (n() == mat.n());
- --- 422,436 ----
-   //   error();
-   
-   // #endif
- ! // }
-   
-   
-   
-   
- ! template<typename T>
-   inline
- ! void DenseMatrix<T>::add (const T factor,
- ! 			  const DenseMatrix<T>& mat)
-   {
-     assert (m() == mat.m());
-     assert (n() == mat.n());
- ***************
- *** 414,430 ****
-         (*this)(i,j) += factor*mat(i,j);
-   
-     return;
- ! };
-   
-   
-   
-   
- ! template<typename Tp>
-   inline
- ! void DenseMatrix<Tp>::condense(const unsigned int iv,
- ! 			       const unsigned int jv,
- ! 			       const Tp val,
- ! 			       std::vector<Tp>& rhs)
-   {
-     assert (m() == rhs.size());
-     assert (iv == jv);
- --- 440,482 ----
-         (*this)(i,j) += factor*mat(i,j);
-   
-     return;
- ! }
-   
-   
-   
- + #ifdef USE_COMPLEX_NUMBERS
-   
- ! /*
- !  * For complex numbers, also offer a method
- !  * to add a real-valued matrix to a complex-
- !  * valued matrix (but not the other way around)!
- !  */
- ! 
- ! template<>
-   inline
- ! void DenseMatrix<Complex>::add (const Complex factor,
- ! 				const DenseMatrix<Real>& mat)
- ! {
- !   assert (m() == mat.m());
- !   assert (n() == mat.n());
- ! 
- !   for (unsigned int j=0; j<n(); j++)
- !     for (unsigned int i=0; i<m(); i++)
- !       (*this)(i,j) += factor*mat(i,j);
- ! 
- !   return;
- ! }
- ! 
- ! 
- ! #endif
- ! 
- ! 
- ! template<typename T>
- ! inline
- ! void DenseMatrix<T>::condense(const unsigned int iv,
- ! 			      const unsigned int jv,
- ! 			      const T val,
- ! 			      std::vector<T>& rhs)
-   {
-     assert (m() == rhs.size());
-     assert (iv == jv);
- ***************
- *** 445,458 ****
-     (*this)(iv,jv) = 1.;
-     rhs[iv] = val;
-     
- ! };
-   
-   
-   
-   
- ! template<typename Tp>
-   inline
- ! void DenseMatrix<Tp>::print () const
-   {  
-     for (unsigned int i=0; i<m(); i++)
-       {
- --- 497,510 ----
-     (*this)(iv,jv) = 1.;
-     rhs[iv] = val;
-     
- ! }
-   
-   
-   
-   
- ! template<typename T>
-   inline
- ! void DenseMatrix<T>::print () const
-   {  
-     for (unsigned int i=0; i<m(); i++)
-       {
- ***************
- *** 463,473 ****
-       }
-   
-     return;
- ! };
- !   
- ! 
-   
-   
-   
-   
- - #endif
- --- 515,523 ----
-       }
-   
-     return;
- ! }
-   
-   
-   
- + #endif // #ifndef __dense_matrix_h__
-   
- Index: include/dof_map.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/dof_map.h,v
- retrieving revision 1.7
- retrieving revision 1.15
- diff -c -r1.7 -r1.15
- *** include/dof_map.h	3 Feb 2003 03:51:49 -0000	1.7
- --- include/dof_map.h	20 Feb 2003 23:18:03 -0000	1.15
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 23,48 ****
-   #define __dof_map_h__
-   
-   // C++ Includes   -----------------------------------
- ! 
- ! // Forward Declarations 
- ! class MeshBase;
-   
-   // Local Includes -----------------------------------
-   #include "mesh_common.h"
-   #include "enum_order.h"
-   #include "fe_type.h"
- - #include "perf_log.h"
-   #include "dense_matrix.h"
-   #include "coupling_matrix.h"
-   
-   /**
-    * This class handles the numbering of degrees of freedom on a mesh.
- !  * For systems of equations the class supports a fixed number of components.
-    * The degrees of freedom are numbered such that sequential, contiguous blocks
-    * correspond to distinct subdomains.  This is so that the resulting data
-    * structures will work well with parallel linear algebra packages.
-    *
- !  * @author Benjamin S. Kirk, 2002
-    */
-   
-   // ------------------------------------------------------------
- --- 23,53 ----
-   #define __dof_map_h__
-   
-   // C++ Includes   -----------------------------------
- ! #include <map>
-   
-   // Local Includes -----------------------------------
-   #include "mesh_common.h"
-   #include "enum_order.h"
-   #include "fe_type.h"
-   #include "dense_matrix.h"
-   #include "coupling_matrix.h"
-   
- + // Forward Declarations
- + class Elem;
- + class MeshBase;
- + template <typename T> class SparseMatrix;
- + 
- + 
- + 
- + 
-   /**
-    * This class handles the numbering of degrees of freedom on a mesh.
- !  * For systems of equations the class supports a fixed number of variables.
-    * The degrees of freedom are numbered such that sequential, contiguous blocks
-    * correspond to distinct subdomains.  This is so that the resulting data
-    * structures will work well with parallel linear algebra packages.
-    *
- !  * @author Benjamin S. Kirk, 2002-2003
-    */
-   
-   // ------------------------------------------------------------
- ***************
- *** 50,68 ****
-   
-   class DofMap
-   {
- !  public:
-   
-     /**
- !    * Constructor.  Requires a reference to the mesh.
-      */
- !   DofMap(const MeshBase& mesh);
-   
-     /**
- !    * Destructor
-      */
-     ~DofMap();
-   
- ! 
-   
-   #ifdef ENABLE_AMR
-   
- --- 55,77 ----
-   
-   class DofMap
-   {
- ! public:
-   
-     /**
- !    * Constructor.  Requires the number of the system for which we
- !    * will be numbering degrees of freedom.
-      */
- !   DofMap(const unsigned int sys_number);
-   
-     /**
- !    * Destructor.
-      */
-     ~DofMap();
-   
- !   /**
- !    * Attach the matrix that is used with this \p DofMap.
- !    */
- !   void attach_matrix (SparseMatrix<Number>& matrix);
-   
-   #ifdef ENABLE_AMR
-   
- ***************
- *** 85,107 ****
-      * processor \p proc_id, which defaults to 0 for ease of use in serial
-      * applications. 
-      */
- !   void distribute_dofs(const unsigned int proc_id);
-   
-     /**
-      * Computes the sparsity pattern for the matrix corresponding
-      * to \p proc_id.  Produces data that can be fed to Petsc for
-      * preallocation of sparse matrices.
-      */
- !   void compute_sparsity (const unsigned int proc_id);
-   
-     /**
-      * Returns a constant reference to the \p _send_list for this processor.  The
- !    * \p _send_list contains the global indices of all the components in the
-      * global solution vector that influence the current processor.  This
-      * information can be used for gathers at each solution step to retrieve
-      * solution values needed for computation.
-      */
- !   const std::vector<unsigned int>& get_send_list() const { return _send_list; };
-     
-     /**
-      * Returns a constant reference to the \p _n_nz list for this processor.
- --- 94,116 ----
-      * processor \p proc_id, which defaults to 0 for ease of use in serial
-      * applications. 
-      */
- !   void distribute_dofs(MeshBase&);
-   
-     /**
-      * Computes the sparsity pattern for the matrix corresponding
-      * to \p proc_id.  Produces data that can be fed to Petsc for
-      * preallocation of sparse matrices.
-      */
- !   void compute_sparsity (MeshBase&);
-   
-     /**
-      * Returns a constant reference to the \p _send_list for this processor.  The
- !    * \p _send_list contains the global indices of all the variables in the
-      * global solution vector that influence the current processor.  This
-      * information can be used for gathers at each solution step to retrieve
-      * solution values needed for computation.
-      */
- !   const std::vector<unsigned int>& get_send_list() const { return _send_list; }
-     
-     /**
-      * Returns a constant reference to the \p _n_nz list for this processor.
- ***************
- *** 109,115 ****
-      * row of the global matrix that the current processor owns.  This
-      * information can be used to preallocate space for a parallel sparse matrix.
-      */
- !   const std::vector<unsigned int>& get_n_nz() const { return _n_nz; };
-     
-     /**
-      * Returns a constant reference to the \p _n_oz list for this processor.
- --- 118,124 ----
-      * row of the global matrix that the current processor owns.  This
-      * information can be used to preallocate space for a parallel sparse matrix.
-      */
- !   const std::vector<unsigned int>& get_n_nz() const { return _n_nz; }
-     
-     /**
-      * Returns a constant reference to the \p _n_oz list for this processor.
- ***************
- *** 117,211 ****
-      * row of the global matrix that the current processor owns.  This
-      * information can be used to preallocate space for a parallel sparse matrix.
-      */
- !   const std::vector<unsigned int>& get_n_oz() const { return _n_oz; };
-   
-     /**
-      * Add an unknown of order \p order and finite element type
-      * \p type to the system of equations.
-      */
- !   void add_component (const FEType& type)
- !   {
- !     _component_types.push_back (type);
- !     return;
- !   };
-     
-     /**
- !    * @returns the approximation order for component \p c.
-      */
- !   Order component_order (const unsigned int c) const
- !   { return _component_types[c].order; };
-     
-     /**
- !    * @returns the finite element type for component \p c.
-      */
- !   const FEType& component_type (const unsigned int c) const
- !   { return _component_types[c]; };
-     
-     /**
- !    * Returns the number of components in the global solution vector. Defaults
-      * to 1, should be 1 for a scalar equation, 3 for 2D incompressible Navier
-      * Stokes (u,v,p), etc...
-      */  
- !   unsigned int n_components() const
- !   {
- !     return _component_types.size();
- !   };
- ! 
- !   /**
- !    * Return the global degree of freedom number for \p component located
- !    * at \p node.
- !    */
- !   unsigned int node_dof_number(const unsigned int node,
- ! 			       const unsigned int component=0,
- ! 			       const unsigned int index=0) const;
- ! 
- !   /**
- !    * Return the global degree of freedom number for \p component located
- !    * at \p elem.
- !    */
- !   unsigned int elem_dof_number(const unsigned int elem,
- ! 			       const unsigned int component=0,
- ! 			       const unsigned int index=0) const;
-   
-     /**
-      * @returns the total number of degrees of freedom in the problem.
-      */
- !   unsigned int n_dofs() const { return _n_dfs; };
-     
-     /**
-      * Returns the number of degrees of freedom on subdomain \p proc.
-      */
-     unsigned int n_dofs_on_processor(const unsigned int proc) const
- !   { assert(proc < _first_df.size()); return (_last_df[proc] - _first_df[proc]+1); };
-   
-     /**
-      * Returns the first dof index that is local to subdomain \p proc.
-      */
-     unsigned int first_dof(unsigned int proc) const
- !   { assert(proc < _first_df.size()); return _first_df[proc]; };
-     
-     /**
-      * Returns the last dof index that is local to subdomain \p proc.
-      */
-     unsigned int last_dof(unsigned int proc) const
- !   { assert(proc < _last_df.size()); return _last_df[proc]; };
- ! 
- !   /**
- !    * @returns the total number of degrees of freedom at node n.
- !    * If no component is specified then the sum over all components
- !    * is returned.
- !    */
- !   unsigned int n_dofs_at_node(const unsigned int n,
- !   			      const unsigned int c=invalid_number) const;
- !   
- !   /**
- !    * @returns the total number of degrees of freedom internl to element e.
- !    * If no component is specified then the sum over all components
- !    * is returned.
- !    */
- !   unsigned int n_dofs_on_elem(const unsigned int e,
- !   			      const unsigned int c=invalid_number) const;
- !   
-   
-   
-   #ifdef ENABLE_AMR
- --- 126,182 ----
-      * row of the global matrix that the current processor owns.  This
-      * information can be used to preallocate space for a parallel sparse matrix.
-      */
- !   const std::vector<unsigned int>& get_n_oz() const { return _n_oz; }
-   
-     /**
-      * Add an unknown of order \p order and finite element type
-      * \p type to the system of equations.
-      */
- !   void add_variable (const FEType& type)
- !   { _variable_types.push_back (type); }
-     
-     /**
- !    * @returns the approximation order for variable \p c.
-      */
- !   Order variable_order (const unsigned int c) const
- !   { return _variable_types[c].order; }
-     
-     /**
- !    * @returns the finite element type for variable \p c.
-      */
- !   const FEType& variable_type (const unsigned int c) const
- !   { return _variable_types[c]; }
-     
-     /**
- !    * Returns the number of variables in the global solution vector. Defaults
-      * to 1, should be 1 for a scalar equation, 3 for 2D incompressible Navier
-      * Stokes (u,v,p), etc...
-      */  
- !   unsigned int n_variables() const
- !   { return _variable_types.size(); }
-   
-     /**
-      * @returns the total number of degrees of freedom in the problem.
-      */
- !   unsigned int n_dofs() const { return _n_dfs; }
-     
-     /**
-      * Returns the number of degrees of freedom on subdomain \p proc.
-      */
-     unsigned int n_dofs_on_processor(const unsigned int proc) const
- !   { assert(proc < _first_df.size()); return (_last_df[proc] - _first_df[proc]+1); }
-   
-     /**
-      * Returns the first dof index that is local to subdomain \p proc.
-      */
-     unsigned int first_dof(unsigned int proc) const
- !   { assert(proc < _first_df.size()); return _first_df[proc]; }
-     
-     /**
-      * Returns the last dof index that is local to subdomain \p proc.
-      */
-     unsigned int last_dof(unsigned int proc) const
- !   { assert(proc < _last_df.size()); return _last_df[proc]; }  
-   
-   
-   #ifdef ENABLE_AMR
- ***************
- *** 214,232 ****
-      * @returns the total number of constrained degrees of freedom
-      * in the problem.
-      */
- !   unsigned int n_constrained_dofs() const { return _dof_constraints.size(); };
-   
-   #endif
-   
-     
-     /**
-      * Fills the vector di with the global degree of freedom indices
- !    * for the element. If no component number is specified then all
- !    * components are returned.
-      */
- !   void dof_indices (const unsigned int e,
-   		    std::vector<unsigned int>& di,
- ! 		    const unsigned int cn=invalid_number) const;
-   
-   
-   
- --- 185,203 ----
-      * @returns the total number of constrained degrees of freedom
-      * in the problem.
-      */
- !   unsigned int n_constrained_dofs() const { return _dof_constraints.size(); }
-   
-   #endif
-   
-     
-     /**
-      * Fills the vector di with the global degree of freedom indices
- !    * for the element. If no variable number is specified then all
- !    * variables are returned.
-      */
- !   void dof_indices (const Elem* elem,
-   		    std::vector<unsigned int>& di,
- ! 		    const unsigned int vn = static_cast<unsigned int>(-1)) const;
-   
-   
-   
- ***************
- *** 235,241 ****
-     /**
-      * Rebuilds the degree of freedom constraints.
-      */ 
- !   void create_dof_constraints ();
-   
-     /**
-      * Adds the user-defined row to the constraint matrix.
- --- 206,212 ----
-     /**
-      * Rebuilds the degree of freedom constraints.
-      */ 
- !   void create_dof_constraints (MeshBase& mesh);
-   
-     /**
-      * Adds the user-defined row to the constraint matrix.
- ***************
- *** 296,302 ****
-     /**
-      * Reinitialize the underlying data strucures conformal to the current mesh.
-      */
- !   void reinit ();
-     
-     /**
-      * Free all memory associated with the object, but keep the mesh pointer.
- --- 267,273 ----
-     /**
-      * Reinitialize the underlying data strucures conformal to the current mesh.
-      */
- !   void reinit (MeshBase& mesh);
-     
-     /**
-      * Free all memory associated with the object, but keep the mesh pointer.
- ***************
- *** 315,326 ****
-   #endif
-     
-     /**
- -    * An invalid DOF index used to initialize data structures.  ONLY refer to
- -    * \p invalid_entry, and the numerical value may change.
- -    */
- -   static const unsigned int invalid_number;
- - 
- -   /**
-      * Degree of freedom coupling.  If left empty each DOF
-      * couples to all others.  Can be used to reduce memory
-      * requirements for sparse matrices.  DOF 0 might only
- --- 286,291 ----
- ***************
- *** 331,356 ****
-     CouplingMatrix dof_coupling;
-   
-     
- !  private:
-   
-   
-     /**
- !    * Return the global degree of freedom number for \p component located
- !    * at \p node as a writeable reference.
- !    */
- !   unsigned int & set_node_dof_number(const unsigned int node,
- ! 				     const unsigned int component,
- ! 				     const unsigned int index=0);
- !   
- !   /**
- !    * Return the global degree of freedom number for \p component located
- !    * at \p elem as a writeable reference.
-      */
- !   unsigned int & set_elem_dof_number(const unsigned int elem,
- ! 				     const unsigned int component,
- ! 				     const unsigned int index=0);
-     
- - 
-   #ifdef ENABLE_AMR
-   
-     /**
- --- 296,310 ----
-     CouplingMatrix dof_coupling;
-   
-     
- ! private:
-   
-   
-     /**
- !    * @returns the number of the system we are responsible for.
-      */
- !   unsigned int sys_number() const;
- !     
-     
-   #ifdef ENABLE_AMR
-   
-     /**
- ***************
- *** 369,418 ****
-      */
-     void find_connected_dofs (std::vector<unsigned int>& elem_dofs) const;
-     
- - #ifdef ENABLE_EXPENSIVE_DATA_STRUCTURES
- - 
-     /**
- !    * Data structure defining the nodal degrees of freedom.  This structure
- !    * allows for multiple DOFS per node for each component.
-      */
- !   std::vector<std::vector<std::vector<unsigned int> > > _node_dofs;
- !   
- !   /**
- !    * Data structure defining the element degrees of freedom.  This structure
- !    * allows for multiple DOFS per element for each component.
- !    */
- !   std::vector<std::vector<std::vector<unsigned int> > > _elem_dofs;
- !   
- ! #else
- !   
- !   /**
- !    * Data structure that holds DOF numbers for entities in the mesh
- !    * that live at the nodes.
- !    */
- !   std::vector<unsigned int> _node_id_map;
- !   
- !   /**
- !    * Data structure that holds DOF numbers for entities in the mesh
- !    * that live on the element.
- !    */
- !   std::vector<unsigned int> _elem_id_map;
- !   
- ! #endif
- !   
-     /**
- !    * The finite element type for each component.
-      */
- !   std::vector<FEType> _component_types;
-     
-     /**
- !    * Constant reference to the computational mesh.
- !    */
- !   const MeshBase& _mesh;
- ! 
- !   /**
- !    * The dimensionality of the mesh.
-      */
- !   const unsigned int _dim;
-     
-     /**
-      * The number of nodes that _were_ in the mesh
- --- 323,342 ----
-      */
-     void find_connected_dofs (std::vector<unsigned int>& elem_dofs) const;
-     
-     /**
- !    * The finite element type for each variable.
-      */
- !   std::vector<FEType> _variable_types;
- ! 
-     /**
- !    * The number of the system we manage DOFs for.
-      */
- !   const unsigned int _sys_number;
-     
-     /**
- !    * Pointer to the matrix used with this object.
-      */
- !   SparseMatrix<Number>* _matrix;
-     
-     /**
-      * The number of nodes that _were_ in the mesh
- ***************
- *** 469,480 ****
-     DofConstraints _dof_constraints;
-   
-   #endif
- - 
- -   /**
- -    * Object to use for performance logging.
- -    */
- -   PerfLog perf_log;
- - 
-   };
-   
-   
- --- 393,398 ----
- ***************
- *** 482,712 ****
-   // ------------------------------------------------------------
-   // Dof Map inline member functions
-   inline
- ! unsigned int DofMap::node_dof_number(const unsigned int node,
- ! 				     const unsigned int component,
- ! 				     const unsigned int index) const
- ! {
- ! #ifdef ENABLE_EXPENSIVE_DATA_STRUCTURES
- ! 
- !   assert (node < _n_nodes);
- !   assert (component < n_components());
- !   
- ! 
- !   if (_node_dofs[component].empty())
- !     {
- !       return invalid_number;
- !     }
- !   else
- !     {
- !       assert (index < _node_dofs[component][node].size());
- !       return _node_dofs[component][node][index];
- !     };
- !   
- ! #else
- !   
- !   // If this assert fails then you are trying to use
- !   // objects with mulitple DOFs per node and the library
- !   // has not been compiled to support this!
- !   assert (index == 0);
- !   assert (node < _n_nodes);
- !   assert (component < n_components());
- ! 
- !   return _node_id_map[(node) + (component)*(_n_nodes)];
- !   
- ! #endif
- ! };
- ! 
- ! 
- ! 
- ! inline
- ! unsigned int & DofMap::set_node_dof_number(const unsigned int node,
- ! 					   const unsigned int component,
- ! 					   const unsigned int index)
- ! {
- ! #ifdef ENABLE_EXPENSIVE_DATA_STRUCTURES
- ! 
- !   assert (node < _n_nodes);
- !   assert (component < n_components());
- !   
- ! 
- !   if (_node_dofs[component].empty())
- !     {
- !       error();
- !       return _node_dofs[component][node][index];
- !     }
- !   else
- !     {
- !       assert (index < _node_dofs[component][node].size());
- !       return _node_dofs[component][node][index];
- !     };
- !   
- ! #else
- !   
- !   // If this assert fails then you are trying to use
- !   // objects with mulitple DOFs per node and the library
- !   // has not been compiled to support this!
- !   assert (index == 0);
- !   assert (node < _n_nodes);
- !   assert (component < n_components());
- ! 
- !   return _node_id_map[(node) + (component)*(_n_nodes)];
- ! 
- ! #endif
- ! };
- ! 
- ! 
- ! 
- ! inline
- ! unsigned int DofMap::elem_dof_number(const unsigned int elem,
- ! 				     const unsigned int component,
- ! 				     const unsigned int index) const
- ! {
- ! #ifdef ENABLE_EXPENSIVE_DATA_STRUCTURES
- ! 
- !   assert (elem < _n_elem);
- !   assert (component < n_components());
- !  
- !   if (_elem_dofs[component].empty())
- !     {
- !       return invalid_number;
- !     }
- !   else
- !     {
- !       assert (index < _elem_dofs[component][elem].size()); 
- !       return _elem_dofs[component][elem][index];
- !     }
- !   
- ! #else
- !   
- !   // If this assert fails then you are trying to use
- !   // objects with mulitple DOFs per node and the library
- !   // has not been compiled to support this!
- !   assert (index == 0);
- !   assert (elem < _n_elem);
- !   assert (component < n_components());
- ! 
- !   return _elem_id_map[(elem) + (component)*(_n_elem)];
- !   
- ! #endif
- ! };
- ! 
- ! 
- ! 
- ! inline
- ! unsigned int & DofMap::set_elem_dof_number(const unsigned int elem,
- ! 					   const unsigned int component,
- ! 					   const unsigned int index)
-   {
- ! #ifdef ENABLE_EXPENSIVE_DATA_STRUCTURES
- ! 
- !   assert (elem < _n_elem);
- !   assert (component < n_components());
- !  
- !   if (_elem_dofs[component].empty())
- !     {
- !       error();
- !       return _elem_dofs[component][elem][index];
- !     }
- !   else
- !     {
- !       assert (index < _elem_dofs[component][elem].size()); 
- !       return _elem_dofs[component][elem][index];
- !     }
- !   
- ! #else
- !   
- !   // If this assert fails then you are trying to use
- !   // objects with mulitple DOFs per node and the library
- !   // has not been compiled to support this!
- !   assert (index == 0);
- !   assert (elem < _n_elem);
- !   assert (component < n_components());
- ! 
- !   return _elem_id_map[(elem) + (component)*(_n_elem)];
- ! 
- ! #endif
- ! };
- ! 
-   
-   
-   inline
- ! unsigned int DofMap::n_dofs_at_node (const unsigned int n,
- ! 				     const unsigned int cn) const
-   {
- ! #ifdef ENABLE_EXPENSIVE_DATA_STRUCTURES
- ! 
- !   assert (!_node_dofs.empty());
- ! 
- !   unsigned int sum=0;
- ! 
- !   for (unsigned int c=0; c<n_components(); c++)
- !     if (!_node_dofs[c].empty())
- !       if ((c == cn) || (cn == invalid_number))
- ! 	{
- ! 	  assert (n < _node_dofs[c].size());
- ! 	  
- ! 	  sum += _node_dofs[c][n].size();
- ! 	};
- !   
- ! 
- !   return sum;
- !   
- ! #else
- ! 
- !   assert (n < _n_nodes);
- !   assert (n*n_components() < _node_id_map.size());
- ! 
- !   unsigned int sum = 0;
- ! 
- !   for (unsigned int c=0; c<n_components(); c++)
- !     if ((c == cn) || (cn == invalid_number))
- !       if (node_dof_number(n,c) != invalid_number)
- ! 	sum++;
- ! 
- !   return sum;
- !   
- ! #endif  
- ! };
- ! 
- ! 
- ! 
- ! inline
- ! unsigned int DofMap::n_dofs_on_elem (const unsigned int e,
- ! 				     const unsigned int cn) const
- ! {
- ! #ifdef ENABLE_EXPENSIVE_DATA_STRUCTURES
- ! 
- !   assert (!_elem_dofs.empty());
- ! 
- !   unsigned int sum=0;
- ! 
- !   for (unsigned int c=0; c<n_components(); c++)
- !     if (!_elem_dofs[c].empty())
- !       if ((c == cn) || (cn == invalid_number))
- ! 	{
- ! 	  assert (e < _elem_dofs[c].size());
- ! 	  
- ! 	  sum += _elem_dofs[c][e].size();
- ! 	};
- ! 
- !   return sum;
- !   
- ! #else
- ! 
- !   assert (e < _n_elem);
- !   assert (e*n_components() < _elem_id_map.size());
- ! 
- !   unsigned int sum = 0;
- ! 
- !   for (unsigned int c=0; c<n_components(); c++)
- !     if ((c == cn) || (cn == invalid_number))
- !       if (elem_dof_number(e,c) != invalid_number)
- ! 	sum++;
- ! 
- !   return sum;
- !   
- ! #endif  
- ! };
-   
-   
-   
- --- 400,419 ----
-   // ------------------------------------------------------------
-   // Dof Map inline member functions
-   inline
- ! DofMap::DofMap(const unsigned int number) :
- !   _sys_number(number),
- !   _matrix(NULL),
- !   _n_nodes(0),
- !   _n_elem(0),
- !   _n_dfs(0)  
-   {
- ! }
-   
-   
-   inline
- ! DofMap::~DofMap()
-   {
- ! }
-   
-   
-   
- ***************
- *** 719,727 ****
-       return true;
-   
-     return false;
- ! };
-   
-   #endif
-   
-   
-   #endif
- --- 426,442 ----
-       return true;
-   
-     return false;
- ! }
-   
-   #endif
- + 
- + 
- + inline
- + unsigned int DofMap::sys_number() const
- + {
- +   return _sys_number;
- + }
- + 
-   
-   
-   #endif
- Index: include/edge.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/edge.h,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** include/edge.h	24 Jan 2003 17:24:37 -0000	1.5
- --- include/edge.h	13 Feb 2003 22:56:07 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 53,101 ****
-     /**
-      * @returns 1, the dimensionality of the object.
-      */
- !   unsigned int dim () const { return 1; };
-     
-     /**
-      * @returns 2. Every edge is guaranteed to have at least 2 nodes.
-      */
- !   unsigned int n_nodes() const { return 2; };
-   
-     /**
-      * @returns 2
-      */
- !   unsigned int n_sides() const { return 2; };
-   
-     /**
-      * @returns 2.  Every edge has exactly two vertices.
-      */
- !   unsigned int n_vertices() const { return 2; };
-     
-     /**
-      * @returns 0.  All 1D elements have no edges.
-      */  
- !   unsigned int n_edges() const { return 0; };
-     
-     /**
-      * @returns 0.  All 1D elements have no faces.
-      */  
- !   unsigned int n_faces() const { return 0; };
-     
-     /**
-      * @returns 2
-      */
- !   unsigned int n_children() const { return 2; };
-   
-     /**
-      * The \p Elem::side() member makes no sense for edges.
-      */
-     AutoPtr<Elem> side (const unsigned int) const
- !   { error(); AutoPtr<Elem> ap(NULL); return ap; };
-   
-     /**
-      * The \p Elem::build_side() member makes no sense for edges.
-      */
-     AutoPtr<Elem> build_side (const unsigned int) const
- !   { error(); AutoPtr<Elem> ap(NULL); return ap; };
-     
-    private:
-     
- --- 53,101 ----
-     /**
-      * @returns 1, the dimensionality of the object.
-      */
- !   unsigned int dim () const { return 1; }
-     
-     /**
-      * @returns 2. Every edge is guaranteed to have at least 2 nodes.
-      */
- !   unsigned int n_nodes() const { return 2; }
-   
-     /**
-      * @returns 2
-      */
- !   unsigned int n_sides() const { return 2; }
-   
-     /**
-      * @returns 2.  Every edge has exactly two vertices.
-      */
- !   unsigned int n_vertices() const { return 2; }
-     
-     /**
-      * @returns 0.  All 1D elements have no edges.
-      */  
- !   unsigned int n_edges() const { return 0; }
-     
-     /**
-      * @returns 0.  All 1D elements have no faces.
-      */  
- !   unsigned int n_faces() const { return 0; }
-     
-     /**
-      * @returns 2
-      */
- !   unsigned int n_children() const { return 2; }
-   
-     /**
-      * The \p Elem::side() member makes no sense for edges.
-      */
-     AutoPtr<Elem> side (const unsigned int) const
- !   { error(); AutoPtr<Elem> ap(NULL); return ap; }
-   
-     /**
-      * The \p Elem::build_side() member makes no sense for edges.
-      */
-     AutoPtr<Elem> build_side (const unsigned int) const
- !   { error(); AutoPtr<Elem> ap(NULL); return ap; }
-     
-    private:
-     
- ***************
- *** 111,117 ****
-   Edge::Edge(const unsigned int nn, Edge* p) :
-     Elem(nn, Edge::n_sides(), p) 
-   {
- ! };
-   
-   
-   
- --- 111,117 ----
-   Edge::Edge(const unsigned int nn, Edge* p) :
-     Elem(nn, Edge::n_sides(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/edge_edge2.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/edge_edge2.h,v
- retrieving revision 1.5
- retrieving revision 1.7
- diff -c -r1.5 -r1.7
- *** include/edge_edge2.h	24 Jan 2003 17:24:37 -0000	1.5
- --- include/edge_edge2.h	20 Feb 2003 23:18:04 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 54,70 ****
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; };
-     
-     /**
-      * @returns \p EDGE2
-      */
- !   ElemType type()  const { return EDGE2; };
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; };
-     
-     const std::vector<unsigned int> tecplot_connectivity(const unsigned int se=0) const;
-     
- --- 54,70 ----
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; }
-     
-     /**
-      * @returns \p EDGE2
-      */
- !   ElemType type()  const { return EDGE2; }
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; }
-     
-     const std::vector<unsigned int> tecplot_connectivity(const unsigned int se=0) const;
-     
- ***************
- *** 72,78 ****
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 3; };
-     
-   #ifdef ENABLE_AMR
-   
- --- 72,78 ----
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 3; }
-     
-   #ifdef ENABLE_AMR
-   
- ***************
- *** 80,91 ****
-      * Refine the element.
-      */
-     void refine(Mesh&)
- !     { error(); return; };
- !   
- !   /**
- !    * Refine the element.
- !    */
- !   void coarsen() { error(); return; };
-   
-   #endif
-     
- --- 80,86 ----
-      * Refine the element.
-      */
-     void refine(Mesh&)
- !   { error(); return; }
-   
-   #endif
-     
- ***************
- *** 99,105 ****
-   Edge2::Edge2(Edge* p) :
-     Edge(Edge2::n_nodes(), p) 
-   {
- ! };
-   
-   
-   
- --- 94,100 ----
-   Edge2::Edge2(Edge* p) :
-     Edge(Edge2::n_nodes(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/edge_edge3.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/edge_edge3.h,v
- retrieving revision 1.5
- retrieving revision 1.7
- diff -c -r1.5 -r1.7
- *** include/edge_edge3.h	24 Jan 2003 17:24:38 -0000	1.5
- --- include/edge_edge3.h	20 Feb 2003 23:18:04 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 53,74 ****
-     /**
-      * @returns 3
-      */
- !   unsigned int n_nodes() const { return 3; };
-   
-     /**
-      * @returns 2
-      */
- !   unsigned int n_sub_elem() const { return 2; };
-   
-     /**
-      * @returns \p EDGE3
-      */
- !   ElemType type()  const { return EDGE3; };
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; };
-   
-     const std::vector<unsigned int> tecplot_connectivity(const unsigned int se=0) const;
-   
- --- 53,74 ----
-     /**
-      * @returns 3
-      */
- !   unsigned int n_nodes() const { return 3; }
-   
-     /**
-      * @returns 2
-      */
- !   unsigned int n_sub_elem() const { return 2; }
-   
-     /**
-      * @returns \p EDGE3
-      */
- !   ElemType type()  const { return EDGE3; }
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; }
-   
-     const std::vector<unsigned int> tecplot_connectivity(const unsigned int se=0) const;
-   
- ***************
- *** 76,82 ****
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 3; };
-     
-   #ifdef ENABLE_AMR
-   
- --- 76,82 ----
-   			std::vector<unsigned int> *conn = NULL) const;
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 3; }
-     
-   #ifdef ENABLE_AMR
-   
- ***************
- *** 84,95 ****
-      * Refine the element.
-      */
-     void refine(Mesh&)
- !     { error(); return; };
- !   
- !   /**
- !    * Refine the element.
- !    */
- !   void coarsen() { error(); return; };
-   
-   #endif
-     
- --- 84,90 ----
-      * Refine the element.
-      */
-     void refine(Mesh&)
- !   { error(); return; }
-   
-   #endif
-     
- ***************
- *** 106,112 ****
-   Edge3::Edge3(Edge* p) :
-     Edge(Edge3::n_nodes(), p) 
-   {
- ! };
-   
-   
-   
- --- 101,107 ----
-   Edge3::Edge3(Edge* p) :
-     Edge(Edge3::n_nodes(), p) 
-   {
- ! }
-   
-   
-   
- Index: include/edge_inf_edge2.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/edge_inf_edge2.h,v
- retrieving revision 1.5
- retrieving revision 1.7
- diff -c -r1.5 -r1.7
- *** include/edge_inf_edge2.h	24 Jan 2003 17:24:38 -0000	1.5
- --- include/edge_inf_edge2.h	20 Feb 2003 23:18:04 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 54,79 ****
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; };
-     
-     /**
-      * @returns \p INFEDGE2
-      */
- !   ElemType type()  const { return INFEDGE2; };
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; };
-     
-     const std::vector<unsigned int> tecplot_connectivity(const unsigned int se=0) const;
-     
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); };
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 3; };
-     
-   #ifdef ENABLE_AMR
-   
- --- 54,79 ----
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; }
-     
-     /**
-      * @returns \p INFEDGE2
-      */
- !   ElemType type()  const { return INFEDGE2; }
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; }
-     
-     const std::vector<unsigned int> tecplot_connectivity(const unsigned int se=0) const;
-     
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); }
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 3; }
-     
-   #ifdef ENABLE_AMR
-   
- ***************
- *** 81,92 ****
-      * Refine the element.
-      */
-     void refine(Mesh&)
- !     { error(); return; };
- !   
- !   /**
- !    * Refine the element.
- !    */
- !   void coarsen() { error(); return; };
-   
-   #endif
-     
- --- 81,87 ----
-      * Refine the element.
-      */
-     void refine(Mesh&)
- !   { error(); return; }
-   
-   #endif
-     
- ***************
- *** 103,109 ****
-   InfEdge2::InfEdge2(Edge* p) :
-     Edge(InfEdge2::n_nodes(), p) 
-   {
- ! };
-   
-   #endif
-   
- --- 98,104 ----
-   InfEdge2::InfEdge2(Edge* p) :
-     Edge(InfEdge2::n_nodes(), p) 
-   {
- ! }
-   
-   #endif
-   
- Index: include/elem.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/elem.h,v
- retrieving revision 1.10
- retrieving revision 1.14
- diff -c -r1.10 -r1.14
- *** include/elem.h	3 Feb 2003 03:51:49 -0000	1.10
- --- include/elem.h	13 Feb 2003 22:56:07 -0000	1.14
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 27,32 ****
- --- 27,33 ----
-   
-   // Local includes
-   #include "mesh_common.h"
- + #include "dof_object.h"
-   #include "reference_counted_object.h"
-   #include "node.h"
-   #include "enum_elem_type.h"
- ***************
- *** 74,80 ****
-   
-   // ------------------------------------------------------------
-   // Elem class definition
- ! class Elem : public ReferenceCountedObject<Elem>
-   {
-    protected:
-     
- --- 75,82 ----
-   
-   // ------------------------------------------------------------
-   // Elem class definition
- ! class Elem : public ReferenceCountedObject<Elem>,
- ! 	     public DofObject
-   {
-    protected:
-     
- ***************
- *** 126,153 ****
-      * To conserve space this is stored as an unsigned char.
-      */
-     unsigned char subdomain_id () const
- !   { return _sbd_id; };
-     
-     /**
-      * @returns the subdomain that this element belongs to as a
-      * writeable reference.
-      */
-     unsigned char & subdomain_id ()
- !   { return _sbd_id; };
-   
-     /**
-      * @returns the processor that this element belongs to.
-      * To conserve space this is stored as a short integer.
-      */
-     unsigned short int processor_id () const
- !   { return _proc_id; };
-     
-     /**
-      * @returns the processor that this element belongs to as a
-      * writeable reference.
-      */
-     unsigned short int & processor_id ()
- !   { return _proc_id; };
-   
-     /**
-      * @returns an id assocated with this element.  The id is not
- --- 128,155 ----
-      * To conserve space this is stored as an unsigned char.
-      */
-     unsigned char subdomain_id () const
- !   { return _sbd_id; }
-     
-     /**
-      * @returns the subdomain that this element belongs to as a
-      * writeable reference.
-      */
-     unsigned char & subdomain_id ()
- !   { return _sbd_id; }
-   
-     /**
-      * @returns the processor that this element belongs to.
-      * To conserve space this is stored as a short integer.
-      */
-     unsigned short int processor_id () const
- !   { return _proc_id; }
-     
-     /**
-      * @returns the processor that this element belongs to as a
-      * writeable reference.
-      */
-     unsigned short int & processor_id ()
- !   { return _proc_id; }
-   
-     /**
-      * @returns an id assocated with this element.  The id is not
- ***************
- *** 156,166 ****
-      * data structure.
-      */
-     unsigned int key() const;
- - 
- -   /**
- -    * Code that actually computes the key.
- -    */
- -   unsigned int key(std::vector<unsigned int> vec) const;
-     
-     /**
-      * @returns true if two elements are identical, false otherwise.
- --- 158,163 ----
- ***************
- *** 171,191 ****
-     bool operator == (const Elem& rhs) const;
-   
-     /**
- -    * @returns true if the element is "less" than the \p rhs element.
- -    * Note that this must return false if the elements are equal.  This
- -    * is useful for building \p std::maps and other sorted data
- -    * structures out of elements.
- -    */
- -   bool operator <  (const Elem& rhs) const;
- - 
- -   /**
- -    * @returns a constant reference to the \p nodes vector for this
- -    * element.  This vector contains the global node numbers for the
- -    * nodes connected to this element.
- -    */
- -   std::vector<unsigned int> get_nodes() const;
- - 
- -   /**
-      * @returns a pointer to the \f$ i^{th} \f$ neighbor of this element.
-      * If \p MeshBase::find_neighbors() has not been called this
-      * simply returns \p NULL.  If \p MeshBase::find_neighbors()
- --- 168,173 ----
- ***************
- *** 193,205 ****
-      * a boundary of the domain. 
-      */
-     Elem* neighbor(const unsigned int i) const
- !   { assert (i < n_sides()); return _neighbors[i]; };
-   
-     /**
-      * Assigns \p n as the \f$ i^{th} \f$ neighbor.
-      */
-     void set_neighbor(const unsigned int i, Elem* n)
- !   { assert (i < n_sides()); _neighbors[i]=n; return; };
-   
-     /**
-      * This function tells you which neighbor you \p (e) are.
- --- 175,187 ----
-      * a boundary of the domain. 
-      */
-     Elem* neighbor(const unsigned int i) const
- !   { assert (i < n_sides()); return _neighbors[i]; }
-   
-     /**
-      * Assigns \p n as the \f$ i^{th} \f$ neighbor.
-      */
-     void set_neighbor(const unsigned int i, Elem* n)
- !   { assert (i < n_sides()); _neighbors[i]=n; return; }
-   
-     /**
-      * This function tells you which neighbor you \p (e) are.
- ***************
- *** 272,278 ****
-      * however it may be overloaded in a derived class
-      */
-     virtual unsigned int n_neighbors() const
- !   { return n_sides(); };
-   
-     /**
-      * @returns the number of vertices the element that has been derived
- --- 254,260 ----
-      * however it may be overloaded in a derived class
-      */
-     virtual unsigned int n_neighbors() const
- !   { return n_sides(); }
-   
-     /**
-      * @returns the number of vertices the element that has been derived
- ***************
- *** 369,375 ****
-      * for an abstract Elem, it is an error.
-      */
-     virtual std::pair<Real,Real> qual_bounds (const ElemQuality) const
- !   { error(); std::pair<Real,Real> p(0,0); return p; };
-     
-     /**
-      * @returns true if the point p is contained in this element, 
- --- 351,357 ----
-      * for an abstract Elem, it is an error.
-      */
-     virtual std::pair<Real,Real> qual_bounds (const ElemQuality) const
- !   { error(); std::pair<Real,Real> p(0,0); return p; }
-     
-     /**
-      * @returns true if the point p is contained in this element, 
- ***************
- *** 389,395 ****
-      * the element was not created via refinement, i.e. was read from file.
-      */
-     const Elem* parent() const
- !   { return _parent; };
-     
-     /**
-      * @returns the magnitude of the distance between nodes n1 and n2.
- --- 371,377 ----
-      * the element was not created via refinement, i.e. was read from file.
-      */
-     const Elem* parent() const
- !   { return _parent; }
-     
-     /**
-      * @returns the magnitude of the distance between nodes n1 and n2.
- ***************
- *** 426,450 ****
-       assert (_children    != NULL);
-       assert (_children[i] != NULL);
-       return _children[i];
- !   };
-   
-     /**
-      * Returns the value of the refinement flag for the element.
-      */
-     RefinementState refinement_flag () const
- !   { return _rflag; };
-   
-     /**
-      * Returns the value of the refinement flag for the element
-      * as a writeable reference.
-      */     
-     RefinementState & set_refinement_flag ()
- !   { return _rflag; };
-   
-     /**
-      * Refine the element.
-      */
- !   virtual void refine(Mesh&) = 0;
-     
-     /**
-      * Coarsen the element.  This is not
- --- 408,432 ----
-       assert (_children    != NULL);
-       assert (_children[i] != NULL);
-       return _children[i];
- !   }
-   
-     /**
-      * Returns the value of the refinement flag for the element.
-      */
-     RefinementState refinement_flag () const
- !   { return _rflag; }
-   
-     /**
-      * Returns the value of the refinement flag for the element
-      * as a writeable reference.
-      */     
-     RefinementState & set_refinement_flag ()
- !   { return _rflag; }
-   
-     /**
-      * Refine the element.
-      */
- !   virtual void refine (Mesh&) = 0;
-     
-     /**
-      * Coarsen the element.  This is not
- ***************
- *** 452,458 ****
-      * element types.
-      */
-     void coarsen();
- !   
-   #endif
-   
-     
- --- 434,461 ----
-      * element types.
-      */
-     void coarsen();
- ! 
- !   /**
- !    * Convenience typedefs for providing iterator access
- !    * to the _neighbors array.  These make the accessor
- !    * functions easier to read.
- !    */
- !   typedef std::pair<Elem**, Elem**> ElemPair;
- !   typedef std::pair<const Elem**, const Elem**> ConstElemPair;
- ! 
- !   /**
- !    * The non-const begin and end accessor functions.
- !    */
- !   ElemPair neighbors_begin() { return ElemPair (&_neighbors[0],         &_neighbors[n_sides()]); }
- !   ElemPair neighbors_end()   { return ElemPair (&_neighbors[n_sides()], &_neighbors[n_sides()]); }
- ! 
- !   /**
- !    * The const begin and end accessor functions. 
- !    */
- !   ConstElemPair neighbors_begin() const { return ConstElemPair (const_cast<const Elem**>(&_neighbors[0]),
- ! 								const_cast<const Elem**>(&_neighbors[n_sides()])); }
- !   ConstElemPair neighbors_end()   const { return ConstElemPair (const_cast<const Elem**>(&_neighbors[n_sides()]),
- ! 								const_cast<const Elem**>(&_neighbors[n_sides()])); }
-   #endif
-   
-     
- ***************
- *** 544,551 ****
-   	
-   	for (unsigned int n=0; n<nn; n++)
-   	  _nodes[n] = NULL;
- !       };
- !   };
-     
-     // Initialize the neighbors data structure
-     {
- --- 547,554 ----
-   	
-   	for (unsigned int n=0; n<nn; n++)
-   	  _nodes[n] = NULL;
- !       }
- !   }
-     
-     // Initialize the neighbors data structure
-     {
- ***************
- *** 557,571 ****
-   	
-   	for (unsigned int n=0; n<ns; n++)
-   	  _neighbors[n] = NULL;
- !       };
- !   };
-   
-     // Optionally initialize data from the parent
-     if (parent() != NULL)
-       {
-         subdomain_id() = parent()->subdomain_id();
-         processor_id() = parent()->processor_id();
- !     };  
-   
-   #ifdef ENABLE_AMR
-     
- --- 560,574 ----
-   	
-   	for (unsigned int n=0; n<ns; n++)
-   	  _neighbors[n] = NULL;
- !       }
- !   }
-   
-     // Optionally initialize data from the parent
-     if (parent() != NULL)
-       {
-         subdomain_id() = parent()->subdomain_id();
-         processor_id() = parent()->processor_id();
- !     }  
-   
-   #ifdef ENABLE_AMR
-     
- ***************
- *** 574,580 ****
-     set_refinement_flag() = Elem::DO_NOTHING;
-   
-   #endif  
- ! };
-   
-   
-   
- --- 577,583 ----
-     set_refinement_flag() = Elem::DO_NOTHING;
-   
-   #endif  
- ! }
-   
-   
-   
- ***************
- *** 596,602 ****
-     _children = NULL;
-     
-   #endif
- ! };
-   
-   
-   
- --- 599,605 ----
-     _children = NULL;
-     
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 608,614 ****
-     assert (_nodes[i]->id() != Node::invalid_id);
-   
-     return *_nodes[i];
- ! };
-   
-   
-   
- --- 611,617 ----
-     assert (_nodes[i]->id() != Node::invalid_id);
-   
-     return *_nodes[i];
- ! }
-   
-   
-   
- ***************
- *** 618,624 ****
-     assert (i < n_nodes());
-   
-     return *_nodes[i];
- ! };
-   
-   
-   
- --- 621,627 ----
-     assert (i < n_nodes());
-   
-     return *_nodes[i];
- ! }
-   
-   
-   
- ***************
- *** 630,636 ****
-     assert (_nodes[i]->id() != Node::invalid_id);
-   
-     return _nodes[i]->id();
- ! };
-   
-   
-   
- --- 633,639 ----
-     assert (_nodes[i]->id() != Node::invalid_id);
-   
-     return _nodes[i]->id();
- ! }
-   
-   
-   
- ***************
- *** 642,648 ****
-     assert (_nodes[i]->id() != Node::invalid_id);
-   
-     return _nodes[i];
- ! };
-   
-   
-   
- --- 645,651 ----
-     assert (_nodes[i]->id() != Node::invalid_id);
-   
-     return _nodes[i];
- ! }
-   
-   
-   
- ***************
- *** 652,658 ****
-     assert (i < n_nodes());
-   
-     return _nodes[i];
- ! };
-   
-   
-   
- --- 655,661 ----
-     assert (i < n_nodes());
-   
-     return _nodes[i];
- ! }
-   
-   
-   
- ***************
- *** 671,711 ****
-     return true;
-     
-   #endif
- ! };
- ! 
- ! 
- ! 
- ! inline
- ! std::vector<unsigned int> Elem::get_nodes() const
- ! {
- !   // Print a warning message the first
- !   // time we are called if compiled in
- !   // DEBUB mode
- ! #ifdef DEBUG
- !   
- !   static bool called = false;
- ! 
- !   if (!called)
- !     {
- !       called = true;
- !       here();
- !       std::cerr << "\nAvoid using this...  It is not as\n"
- ! 		<< "efficient as it used to be!\n"
- ! 		<< std::endl;
- !     };
- ! 
- ! #endif
- ! 
- ! 
- !   
- !   std::vector<unsigned int> node_numbers (n_nodes(), 0);
- ! 
- !   for (unsigned int i=0; i<n_nodes(); i++)
- !     node_numbers[i] = node(i);
- ! 
- !   return node_numbers;  
- ! };
- ! 
-   
-   
-   #endif // end #ifndef __elem_h__
- --- 674,680 ----
-     return true;
-     
-   #endif
- ! }
-   
-   
-   #endif // end #ifndef __elem_h__
- Index: include/enum_elem_quality.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/enum_elem_quality.h,v
- retrieving revision 1.4
- retrieving revision 1.5
- diff -c -r1.4 -r1.5
- *** include/enum_elem_quality.h	24 Jan 2003 17:24:38 -0000	1.4
- --- include/enum_elem_quality.h	13 Feb 2003 22:56:07 -0000	1.5
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 52,58 ****
-   		    ASPECT_RATIO_GAMMA,
-   		    SIZE,
-   		    JACOBIAN};
- ! };
-   
-   
-   using namespace MeshEnums;
- --- 52,58 ----
-   		    ASPECT_RATIO_GAMMA,
-   		    SIZE,
-   		    JACOBIAN};
- ! }
-   
-   
-   using namespace MeshEnums;
- Index: include/enum_elem_type.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/enum_elem_type.h,v
- retrieving revision 1.4
- retrieving revision 1.5
- diff -c -r1.4 -r1.5
- *** include/enum_elem_type.h	24 Jan 2003 17:24:38 -0000	1.4
- --- include/enum_elem_type.h	13 Feb 2003 22:56:07 -0000	1.5
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 80,86 ****
-   #endif
-   		 
-   		 INVALID_ELEM};
- ! };
-   
-   using namespace MeshEnums;
-   
- --- 80,86 ----
-   #endif
-   		 
-   		 INVALID_ELEM};
- ! }
-   
-   using namespace MeshEnums;
-   
- Index: include/enum_fe_family.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/enum_fe_family.h,v
- retrieving revision 1.4
- retrieving revision 1.6
- diff -c -r1.4 -r1.6
- *** include/enum_fe_family.h	24 Jan 2003 17:24:38 -0000	1.4
- --- include/enum_fe_family.h	13 Feb 2003 22:56:07 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 45,55 ****
-   		 JACOBI_20_00,     //   i_max = 19
-                    JACOBI_30_00,     //   i_max = 19
-   		 LEGENDRE,         //   i_max = 19
- - 		 INF_LAGRANGE,     //   i_max = 14
-   #endif
-   		 
-   		 INVALID_FE};
- ! };
-   
-   using namespace MeshEnums;
-   
- --- 45,54 ----
-   		 JACOBI_20_00,     //   i_max = 19
-                    JACOBI_30_00,     //   i_max = 19
-   		 LEGENDRE,         //   i_max = 19
-   #endif
-   		 
-   		 INVALID_FE};
- ! }
-   
-   using namespace MeshEnums;
-   
- Index: include/enum_inf_map_type.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/enum_inf_map_type.h,v
- retrieving revision 1.1
- retrieving revision 1.2
- diff -c -r1.1 -r1.2
- *** include/enum_inf_map_type.h	24 Jan 2003 17:24:38 -0000	1.1
- --- include/enum_inf_map_type.h	13 Feb 2003 22:56:07 -0000	1.2
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 41,47 ****
-   		   ELLIPSOIDAL,
-   		   INVALID_INF_MAP};
-   
- ! };
-   
-   using namespace MeshEnums;
-   
- --- 41,47 ----
-   		   ELLIPSOIDAL,
-   		   INVALID_INF_MAP};
-   
- ! }
-   
-   using namespace MeshEnums;
-   
- Index: include/enum_order.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/enum_order.h,v
- retrieving revision 1.4
- retrieving revision 1.5
- diff -c -r1.4 -r1.5
- *** include/enum_order.h	24 Jan 2003 17:24:38 -0000	1.4
- --- include/enum_order.h	13 Feb 2003 22:56:07 -0000	1.5
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 60,66 ****
-   	      TWENTYTHIRD  = 23,	      
-   	      INVALID_ORDER};
-   
- ! };
-   
-   using namespace MeshEnums;
-   
- --- 60,66 ----
-   	      TWENTYTHIRD  = 23,	      
-   	      INVALID_ORDER};
-   
- ! }
-   
-   using namespace MeshEnums;
-   
- Index: include/equation_systems.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/equation_systems.h,v
- retrieving revision 1.6
- retrieving revision 1.13
- diff -c -r1.6 -r1.13
- *** include/equation_systems.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/equation_systems.h	20 Feb 2003 04:59:58 -0000	1.13
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 29,37 ****
-   // Local Includes
-   #include "mesh_common.h"
-   #include "xdr_cxx.h"
-   
-   // Forward Declarations
- ! class SystemData;
-   class Mesh;
-   
-   
- --- 29,39 ----
-   // Local Includes
-   #include "mesh_common.h"
-   #include "xdr_cxx.h"
- + #include "enum_solver_package.h"
- + 
-   
-   // Forward Declarations
- ! class GeneralSystem;
-   class Mesh;
-   
-   
- ***************
- *** 42,48 ****
-    * are identified by a user-specified name and are solved
-    * in the order that they are declared.
-    *
- !  * @author Benjamin S. Kirk, 2002
-    */
-   
-   // ------------------------------------------------------------
- --- 44,50 ----
-    * are identified by a user-specified name and are solved
-    * in the order that they are declared.
-    *
- !  * @author Benjamin S. Kirk, 2002-2003
-    */
-   
-   // ------------------------------------------------------------
- ***************
- *** 54,65 ****
-     /**
-      * Constructor.  Optionally initializes required
-      * data structures.  By default Petsc data structures
- !    * will be used, but this is optional via the use_petsc
-      * flag.
-      */
- !   EquationSystems (const Mesh& mesh,
- ! 		   const bool use_petsc=true);
-   
-     /**
-      * Destructor.
-      */
- --- 56,83 ----
-     /**
-      * Constructor.  Optionally initializes required
-      * data structures.  By default Petsc data structures
- !    * will be used, but this is optional via the \p sp
-      * flag.
-      */
- !   EquationSystems (Mesh& mesh,
-   
- + #if defined(HAVE_PETSC)
- + 		   
- + 		   // Default to PETSC solvers if they are there
- + 		   const SolverPackage sp = PETSC_SOLVERS
- + 		   
- + #elif defined(HAVE_LASPACK) && !defined(USE_COMPLEX_NUMBERS)
- + 		   
- + 		   // Try LASPACK if PETSC is not available
- + 		   const SolverPackage sp = LASPACK_SOLVERS
- + 		   
- + #else
- + 		   
- + 		   // No linear solvers for you!
- + 		   const SolverPackage sp = INVALID_SOLVER_PACKAGE
- + #endif
- + 		   
- + 		   );
-     /**
-      * Destructor.
-      */
- ***************
- *** 105,126 ****
-     /**
-      * @returns a reference to the system named \p name.
-      */
- !   SystemData & operator () (const std::string& name);
-   
-     /**
-      * @returns a constant reference to the system name
-      */
- !   const SystemData & operator () (const std::string& name) const;
-   
-     /**
-      * @returns a reference to system number \p num.
-      */
- !   SystemData & operator () (const unsigned int num);
-   
-     /**
-      * @returns a constant reference to system number \p num.
-      */
- !   const SystemData & operator () (const unsigned int num) const;
-   
-     /**
-      * @returns the name of the system number num.
- --- 123,144 ----
-     /**
-      * @returns a reference to the system named \p name.
-      */
- !   GeneralSystem & operator () (const std::string& name);
-   
-     /**
-      * @returns a constant reference to the system name
-      */
- !   const GeneralSystem & operator () (const std::string& name) const;
-   
-     /**
-      * @returns a reference to system number \p num.
-      */
- !   GeneralSystem & operator () (const unsigned int num);
-   
-     /**
-      * @returns a constant reference to system number \p num.
-      */
- !   const GeneralSystem & operator () (const unsigned int num) const;
-   
-     /**
-      * @returns the name of the system number num.
- ***************
- *** 173,185 ****
-      * entries will be in variable-major format (corresponding to
-      * the names from \p build_variable_names())
-      */
- !   void build_solution_vector (std::vector<Complex>& soln);
-   
-     /**
-      * @returns a constant reference to the mesh
-      */
-     const Mesh & get_mesh() const;
- !   
-     /**
-      * Read & initialize the systems from disk using the XDR data format. 
-      * This format allows for machine-independent binary output.
- --- 191,214 ----
-      * entries will be in variable-major format (corresponding to
-      * the names from \p build_variable_names())
-      */
- !   void build_solution_vector (std::vector<Number>& soln);
-   
-     /**
-      * @returns a constant reference to the mesh
-      */
-     const Mesh & get_mesh() const;
- ! 
- !   /**
- !    * @returns a reference to the mesh
- !    */
- !   Mesh & get_mesh();
- ! 
- !   /**
- !    * @returns the solver package type currently in use
- !    */
- !   SolverPackage get_solver_package() const 
- !   { return _solver_package; }
- ! 
-     /**
-      * Read & initialize the systems from disk using the XDR data format. 
-      * This format allows for machine-independent binary output.
- ***************
- *** 207,213 ****
-     /**
-      * Prints information about the equation systems.
-      */
- !   void print_info () const {std::cout << get_info() << std::endl; };
-   
-     /**
-      * @returns a string containing information about the
- --- 236,242 ----
-     /**
-      * Prints information about the equation systems.
-      */
- !   void print_info () const {std::cout << get_info() << std::endl; }
-   
-     /**
-      * @returns a string containing information about the
- ***************
- *** 222,249 ****
-     /**
-      * The mesh data structure
-      */ 
- !   const Mesh& mesh;
-     
-     /**
- !    * Flag indicating if we should use
- !    * Petsc data structures
-      */
- !   const bool use_petsc;
-   
-     /**     
-      * Data structure that holds the systems.
-      */
- !   std::map<std::string, SystemData> systems;
-     
-     /**
-      * Data structure to hold user-specified flags.
-      */
- !   std::set<std::string> flags;
-   
-     /**
-      * Data structore to hold user-specified parameters 
-      */
- !   std::map<std::string, Real> parameters;
-   };
-   
-   
- --- 251,277 ----
-     /**
-      * The mesh data structure
-      */ 
- !   Mesh& _mesh;
-     
-     /**
- !    * Flag indicating what linear solver package to use
-      */
- !   const SolverPackage _solver_package;
-   
-     /**     
-      * Data structure that holds the systems.
-      */
- !   std::map<std::string, GeneralSystem*> _systems;
-     
-     /**
-      * Data structure to hold user-specified flags.
-      */
- !   std::set<std::string> _flags;
-   
-     /**
-      * Data structore to hold user-specified parameters 
-      */
- !   std::map<std::string, Real> _parameters;
-   };
-   
-   
- ***************
- *** 253,268 ****
-   inline
-   unsigned int EquationSystems::n_systems () const
-   {
- !   return systems.size();
- ! };
-   
-   
-   
-   inline
-   const Mesh & EquationSystems::get_mesh () const
-   {
- !   return mesh;
- ! };
-   
-   
-   #endif
- --- 281,304 ----
-   inline
-   unsigned int EquationSystems::n_systems () const
-   {
- !   return _systems.size();
- ! }
-   
-   
-   
-   inline
-   const Mesh & EquationSystems::get_mesh () const
-   {
- !   return _mesh;
- ! }
- ! 
- ! 
- ! 
- ! inline
- ! Mesh & EquationSystems::get_mesh ()
- ! {
- !   return _mesh;
- ! }
-   
-   
-   #endif
- Index: include/face.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/face.h,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** include/face.h	24 Jan 2003 17:24:38 -0000	1.5
- --- include/face.h	13 Feb 2003 22:56:07 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 52,69 ****
-   	const unsigned int ns,
-   	Face* p) :
-       Elem (nn, ns, p)
- !   {};
-   
-     /**
-      * @returns 2, the dimensionality of the object.
-      */
- !   unsigned int dim () const { return 2; };
-   
-     /**
-      * @returns 0.  All 2D elements have no faces, just
-      * edges.
-      */
- !   unsigned int n_faces() const { return 0; };
-   };
-   
-   #endif
- --- 52,69 ----
-   	const unsigned int ns,
-   	Face* p) :
-       Elem (nn, ns, p)
- !   {}
-   
-     /**
-      * @returns 2, the dimensionality of the object.
-      */
- !   unsigned int dim () const { return 2; }
-   
-     /**
-      * @returns 0.  All 2D elements have no faces, just
-      * edges.
-      */
- !   unsigned int n_faces() const { return 0; }
-   };
-   
-   #endif
- Index: include/face_inf_quad4.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/face_inf_quad4.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/face_inf_quad4.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/face_inf_quad4.h	20 Feb 2003 23:18:04 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 71,97 ****
-     /**
-      * @returns \p INFQUAD4 
-      */
- !   ElemType type () const { return INFQUAD4; };
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sides() const { return 4; };
-     
-     /**
-      * @returns 2
-      */
- !   unsigned int n_children() const { return 2; };
-     
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; };
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; };
-     
-     /**
-      * @returns an EDGE2 for the base (0) side, an INFEDGE2 for
- --- 71,97 ----
-     /**
-      * @returns \p INFQUAD4 
-      */
- !   ElemType type () const { return INFQUAD4; }
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sides() const { return 4; }
-     
-     /**
-      * @returns 2
-      */
- !   unsigned int n_children() const { return 2; }
-     
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; }
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; }
-     
-     /**
-      * @returns an EDGE2 for the base (0) side, an INFEDGE2 for
- ***************
- *** 103,115 ****
-     
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); };
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 9; };
-     
-     void write_tecplot_connectivity(std::ostream&) const
- !   { error(); };
-       
-     
-   #ifdef ENABLE_AMR
- --- 103,115 ----
-     
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); }
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 9; }
-     
-     void write_tecplot_connectivity(std::ostream&) const
- !   { error(); }
-       
-     
-   #ifdef ENABLE_AMR
- ***************
- *** 118,128 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Refine the element.
- -    */
- -   void coarsen();
-   
-   #endif
-     
- --- 118,123 ----
- ***************
- *** 135,141 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[2][4][4];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 130,136 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[2][4][4];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 161,167 ****
-   InfQuad4::InfQuad4(Face* p) :
-     Quad(InfQuad4::n_nodes(), p) 
-   {
- ! };
-   
-   
-   #endif
- --- 156,162 ----
-   InfQuad4::InfQuad4(Face* p) :
-     Quad(InfQuad4::n_nodes(), p) 
-   {
- ! }
-   
-   
-   #endif
- Index: include/face_inf_quad6.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/face_inf_quad6.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/face_inf_quad6.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/face_inf_quad6.h	20 Feb 2003 23:18:04 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 72,103 ****
-     /**
-      * @returns \p INFQUAD6
-      */
- !   ElemType type () const { return INFQUAD6; };
-   
-     /**
-      * @returns 6
-      */
- !   unsigned int n_nodes() const { return 6; };
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sides() const { return 4; };
-     
-     /**
-      * @returns 2
-      */
- !   unsigned int n_children() const { return 2; };
-     
-     /**
-      * @returns 2
-      */
- !   unsigned int n_sub_elem() const { return 2; };
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; };
-     
-     /**
-      * @returns an EDGE3 for the base (0) side, an INFEDGE2 for
- --- 72,103 ----
-     /**
-      * @returns \p INFQUAD6
-      */
- !   ElemType type () const { return INFQUAD6; }
-   
-     /**
-      * @returns 6
-      */
- !   unsigned int n_nodes() const { return 6; }
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sides() const { return 4; }
-     
-     /**
-      * @returns 2
-      */
- !   unsigned int n_children() const { return 2; }
-     
-     /**
-      * @returns 2
-      */
- !   unsigned int n_sub_elem() const { return 2; }
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; }
-     
-     /**
-      * @returns an EDGE3 for the base (0) side, an INFEDGE2 for
- ***************
- *** 109,121 ****
-     
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); };
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 9; };
-     
-     void write_tecplot_connectivity(std::ostream&) const
- !   { error(); };
-     
-   #ifdef ENABLE_AMR
-   
- --- 109,121 ----
-     
-     void vtk_connectivity(const unsigned int,
-   			std::vector<unsigned int>*) const
- !   { error(); }
-     
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 9; }
-     
-     void write_tecplot_connectivity(std::ostream&) const
- !   { error(); }
-     
-   #ifdef ENABLE_AMR
-   
- ***************
- *** 123,133 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Refine the element.
- -    */
- -   void coarsen();
-   
-   #endif
-     
- --- 123,128 ----
- ***************
- *** 140,146 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[2][6][6];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 135,141 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[2][6][6];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 162,168 ****
-   InfQuad6::InfQuad6(Face* p) :
-     Quad(InfQuad6::n_nodes(), p) 
-   {
- ! };
-   
-   #endif
-   
- --- 157,163 ----
-   InfQuad6::InfQuad6(Face* p) :
-     Quad(InfQuad6::n_nodes(), p) 
-   {
- ! }
-   
-   #endif
-   
- Index: include/face_quad.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/face_quad.h,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** include/face_quad.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/face_quad.h	13 Feb 2003 22:56:07 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 66,92 ****
-      * @returns 4.  All quad-derivatives are guaranteed to have at
-      * least 4 nodes.
-      */
- !   unsigned int n_nodes() const { return 4; };
-   
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sides() const { return 4; };  
-   
-     /**
-      * @returns 4.  All quadrilaterals have 4 vertices.
-      */
- !   unsigned int n_vertices() const { return 4; };
-   
-     /**
-      * @returns 4.  All quadrilaterals have 4 edges.
-      */
- !   unsigned int n_edges() const { return 4; };
-   
-     /**
-      * @returns 4
-      */
- !   unsigned int n_children() const { return 4; };
-   
-     /**
-      * @returns a primitive (2-noded) edge for 
- --- 66,92 ----
-      * @returns 4.  All quad-derivatives are guaranteed to have at
-      * least 4 nodes.
-      */
- !   unsigned int n_nodes() const { return 4; }
-   
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sides() const { return 4; }  
-   
-     /**
-      * @returns 4.  All quadrilaterals have 4 vertices.
-      */
- !   unsigned int n_vertices() const { return 4; }
-   
-     /**
-      * @returns 4.  All quadrilaterals have 4 edges.
-      */
- !   unsigned int n_edges() const { return 4; }
-   
-     /**
-      * @returns 4
-      */
- !   unsigned int n_children() const { return 4; }
-   
-     /**
-      * @returns a primitive (2-noded) edge for 
- ***************
- *** 118,123 ****
-   Quad::Quad(const unsigned int nn, Face* p) :
-     Face(nn, Quad::n_sides(), p)
-   {
- ! };
-   
-   #endif
- --- 118,123 ----
-   Quad::Quad(const unsigned int nn, Face* p) :
-     Face(nn, Quad::n_sides(), p)
-   {
- ! }
-   
-   #endif
- Index: include/face_quad4.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/face_quad4.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/face_quad4.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/face_quad4.h	20 Feb 2003 23:18:04 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 66,82 ****
-     /**
-      * @returns \p QUAD4
-      */
- !   ElemType type () const { return QUAD4; };
-     
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; };
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; };
-     
-     AutoPtr<Elem> build_side (const unsigned int i) const;
-   
- --- 66,82 ----
-     /**
-      * @returns \p QUAD4
-      */
- !   ElemType type () const { return QUAD4; }
-     
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; }
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; }
-     
-     AutoPtr<Elem> build_side (const unsigned int i) const;
-   
- ***************
- *** 87,93 ****
-   			std::vector<unsigned int> *conn = NULL) const;
-   
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 9; };
-     
-     
-   #ifdef ENABLE_AMR
- --- 87,93 ----
-   			std::vector<unsigned int> *conn = NULL) const;
-   
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 9; }
-     
-     
-   #ifdef ENABLE_AMR
- ***************
- *** 96,106 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Refine the element.
- -    */
- -   void coarsen();
-   
-   #endif
-     
- --- 96,101 ----
- ***************
- *** 113,119 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[4][4][4];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 108,114 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[4][4][4];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 134,139 ****
-   Quad4::Quad4(Face* p) :
-     Quad(Quad::n_nodes(), p) 
-   {
- ! };
-   
-   #endif
- --- 129,134 ----
-   Quad4::Quad4(Face* p) :
-     Quad(Quad::n_nodes(), p) 
-   {
- ! }
-   
-   #endif
- Index: include/face_quad8.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/face_quad8.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/face_quad8.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/face_quad8.h	20 Feb 2003 23:18:05 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 67,98 ****
-     /**
-      * @returns \p QUAD8
-      */
- !   ElemType type () const { return QUAD8; };
-   
-     /**
-      * @returns 8
-      */
- !   unsigned int n_nodes() const { return 8; };
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sides() const { return 4; };
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_children() const { return 4; };
-     
-     /**
-      * @returns 5
-      */
- !   unsigned int n_sub_elem() const { return 5; };
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; };
-     
-     AutoPtr<Elem> build_side (const unsigned int i) const;
-   
- --- 67,98 ----
-     /**
-      * @returns \p QUAD8
-      */
- !   ElemType type () const { return QUAD8; }
-   
-     /**
-      * @returns 8
-      */
- !   unsigned int n_nodes() const { return 8; }
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sides() const { return 4; }
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_children() const { return 4; }
-     
-     /**
-      * @returns 5
-      */
- !   unsigned int n_sub_elem() const { return 5; }
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; }
-     
-     AutoPtr<Elem> build_side (const unsigned int i) const;
-   
- ***************
- *** 111,121 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Refine the element.
- -    */
- -   void coarsen();
-   
-   #endif
-     
- --- 111,116 ----
- ***************
- *** 128,134 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[4][8][8];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 123,129 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[4][8][8];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 146,151 ****
-   Quad8::Quad8(Face* p) :
-     Quad(Quad8::n_nodes(), p) 
-   {
- ! };
-   
-   #endif
- --- 141,146 ----
-   Quad8::Quad8(Face* p) :
-     Quad(Quad8::n_nodes(), p) 
-   {
- ! }
-   
-   #endif
- Index: include/face_quad9.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/face_quad9.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/face_quad9.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/face_quad9.h	20 Feb 2003 23:18:05 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 65,86 ****
-     /**
-      * @returns \p QUAD9
-      */
- !   ElemType type () const { return QUAD9; };
-   
-     /**
-      * @returns 9
-      */
- !   unsigned int n_nodes() const { return 9; };
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sub_elem() const { return 4; };
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; };
-     
-     AutoPtr<Elem> build_side (const unsigned int i) const;
-   
- --- 65,86 ----
-     /**
-      * @returns \p QUAD9
-      */
- !   ElemType type () const { return QUAD9; }
-   
-     /**
-      * @returns 9
-      */
- !   unsigned int n_nodes() const { return 9; }
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sub_elem() const { return 4; }
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; }
-     
-     AutoPtr<Elem> build_side (const unsigned int i) const;
-   
- ***************
- *** 91,97 ****
-   			std::vector<unsigned int> *conn = NULL) const;
-   
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 9; };
-     
-     
-   #ifdef ENABLE_AMR
- --- 91,97 ----
-   			std::vector<unsigned int> *conn = NULL) const;
-   
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 9; }
-     
-     
-   #ifdef ENABLE_AMR
- ***************
- *** 100,110 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Refine the element.
- -    */
- -   void coarsen();
-   
-   #endif
-     
- --- 100,105 ----
- ***************
- *** 117,123 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[4][9][9];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 112,118 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[4][9][9];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 136,142 ****
-   Quad9::Quad9(Face* p) :
-     Quad(Quad9::n_nodes(), p) 
-   {
- ! };
-   
-   
-   #endif
- --- 131,137 ----
-   Quad9::Quad9(Face* p) :
-     Quad(Quad9::n_nodes(), p) 
-   {
- ! }
-   
-   
-   #endif
- Index: include/face_tri.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/face_tri.h,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** include/face_tri.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/face_tri.h	13 Feb 2003 22:56:07 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 68,94 ****
-      * @returns 3.  All tri-derivatives are guaranteed to have at
-      * least 3 nodes.
-      */
- !   unsigned int n_nodes() const { return 3; };
-   
-     /**
-      * @returns 3
-      */
- !   unsigned int n_sides() const { return 3; };
-   
-     /**
-      * @returns 3.  All triangles have 3 vertices.
-      */
- !   unsigned int n_vertices() const { return 3; };
-   
-     /**
-      * @returns 3.  All triangles have 3 edges.
-      */
- !   unsigned int n_edges() const { return 3; };
-   
-     /**
-      * @returns 4
-      */
- !   unsigned int n_children() const { return 4; };
-   
-     /**
-      * @returns a primitive (2-noded) edge for 
- --- 68,94 ----
-      * @returns 3.  All tri-derivatives are guaranteed to have at
-      * least 3 nodes.
-      */
- !   unsigned int n_nodes() const { return 3; }
-   
-     /**
-      * @returns 3
-      */
- !   unsigned int n_sides() const { return 3; }
-   
-     /**
-      * @returns 3.  All triangles have 3 vertices.
-      */
- !   unsigned int n_vertices() const { return 3; }
-   
-     /**
-      * @returns 3.  All triangles have 3 edges.
-      */
- !   unsigned int n_edges() const { return 3; }
-   
-     /**
-      * @returns 4
-      */
- !   unsigned int n_children() const { return 4; }
-   
-     /**
-      * @returns a primitive (2-noded) edge for 
- ***************
- *** 119,125 ****
-   Tri::Tri(const unsigned int nn, Face* p) :
-     Face(nn, Tri::n_sides(), p)
-   {
- ! };
-   
-   #endif
-   
- --- 119,125 ----
-   Tri::Tri(const unsigned int nn, Face* p) :
-     Face(nn, Tri::n_sides(), p)
-   {
- ! }
-   
-   #endif
-   
- Index: include/face_tri3.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/face_tri3.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/face_tri3.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/face_tri3.h	20 Feb 2003 23:18:05 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 63,79 ****
-     /**
-      * @returns \p TRI3
-      */
- !   ElemType type () const { return TRI3; };
-   
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; };
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; };
-   
-     AutoPtr<Elem> build_side (const unsigned int i) const;
-     
- --- 63,79 ----
-     /**
-      * @returns \p TRI3
-      */
- !   ElemType type () const { return TRI3; }
-   
-     /**
-      * @returns 1
-      */
- !   unsigned int n_sub_elem() const { return 1; }
-     
-     /**
-      * @returns FIRST
-      */
- !   Order default_order() const { return FIRST; }
-   
-     AutoPtr<Elem> build_side (const unsigned int i) const;
-     
- ***************
- *** 84,90 ****
-   			std::vector<unsigned int> *conn = NULL) const;
-   
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 5; };
-       
-     
-   #ifdef ENABLE_AMR
- --- 84,90 ----
-   			std::vector<unsigned int> *conn = NULL) const;
-   
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 5; }
-       
-     
-   #ifdef ENABLE_AMR
- ***************
- *** 93,103 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Refine the element.
- -    */
- -   void coarsen();
-   
-   #endif
-     
- --- 93,98 ----
- ***************
- *** 110,116 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[4][3][3];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 105,111 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[4][3][3];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 130,135 ****
-   Tri3::Tri3(Face* p) :
-     Tri(Tri3::n_nodes(), p) 
-   {
- ! };
-   
-   #endif
- --- 125,130 ----
-   Tri3::Tri3(Face* p) :
-     Tri(Tri3::n_nodes(), p) 
-   {
- ! }
-   
-   #endif
- Index: include/face_tri6.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/face_tri6.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/face_tri6.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/face_tri6.h	20 Feb 2003 23:18:05 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 66,87 ****
-     /**
-      * @returns \p TRI6
-      */
- !   ElemType type ()   const { return TRI6; };
-   
-     /**
-      * @returns 6
-      */
- !   unsigned int n_nodes() const { return 6; };
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sub_elem() const { return 4; };
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; };
-     
-     AutoPtr<Elem> build_side (const unsigned int i) const;
-   
- --- 66,87 ----
-     /**
-      * @returns \p TRI6
-      */
- !   ElemType type ()   const { return TRI6; }
-   
-     /**
-      * @returns 6
-      */
- !   unsigned int n_nodes() const { return 6; }
-     
-     /**
-      * @returns 4
-      */
- !   unsigned int n_sub_elem() const { return 4; }
-     
-     /**
-      * @returns SECOND
-      */
- !   Order default_order() const { return SECOND; }
-     
-     AutoPtr<Elem> build_side (const unsigned int i) const;
-   
- ***************
- *** 92,98 ****
-   			std::vector<unsigned int> *conn = NULL) const;
-   
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 6; };
-     
-     
-   #ifdef ENABLE_AMR
- --- 92,98 ----
-   			std::vector<unsigned int> *conn = NULL) const;
-   
-     unsigned int vtk_element_type (const unsigned int) const
- !   { return 6; }
-     
-     
-   #ifdef ENABLE_AMR
- ***************
- *** 101,111 ****
-      * Refine the element.
-      */
-     void refine(Mesh& mesh);
- -   
- -   /**
- -    * Refine the element.
- -    */
- -   void coarsen();
-   
-   #endif
-     
- --- 101,106 ----
- ***************
- *** 118,124 ****
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const Real embedding_matrix[4][6][6];
-     
-     /**
-      * Matrix that tells which children share which of
- --- 113,119 ----
-      * Matrix that computes new nodal locations/solution values
-      * from current nodes/solution.
-      */
- !   static const float embedding_matrix[4][6][6];
-     
-     /**
-      * Matrix that tells which children share which of
- ***************
- *** 139,145 ****
-   Tri6::Tri6(Face* p) :
-     Tri(Tri6::n_nodes(), p) 
-   {
- ! };
-   
-   
-   #endif
- --- 134,140 ----
-   Tri6::Tri6(Face* p) :
-     Tri(Tri6::n_nodes(), p) 
-   {
- ! }
-   
-   
-   #endif
- Index: include/factory.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/factory.h,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** include/factory.h	24 Jan 2003 17:24:38 -0000	1.5
- --- include/factory.h	13 Feb 2003 22:56:07 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 53,59 ****
-     /**
-      * Destructor. (Empty.)
-      */
- !   virtual ~Factory() {};
-   
-     /**
-      * Builds an object of type Base identified by name.
- --- 53,59 ----
-     /**
-      * Destructor. (Empty.)
-      */
- !   virtual ~Factory() {}
-   
-     /**
-      * Builds an object of type Base identified by name.
- ***************
- *** 87,105 ****
-     /**
-      * Constructor.  Takes a name as input.
-      */
- !   FactoryImp(const std::string& name) : Factory<Base>(name) { };
-   
-     /**
-      * Destructor.  Empty.
-      */
- !   ~FactoryImp() {};
-   
-   private:
-   
-     /**
-      * @returns a new object of type Derived. 
-      */
- !   AutoPtr<Base> create() { return AutoPtr<Base>(new Derived); };
-   };
-   
-   
- --- 87,105 ----
-     /**
-      * Constructor.  Takes a name as input.
-      */
- !   FactoryImp(const std::string& name) : Factory<Base>(name) { }
-   
-     /**
-      * Destructor.  Empty.
-      */
- !   ~FactoryImp() {}
-   
-   private:
-   
-     /**
-      * @returns a new object of type Derived. 
-      */
- !   AutoPtr<Base> create() { return AutoPtr<Base>(new Derived); }
-   };
-   
-   
- ***************
- *** 115,121 ****
-       assert(!factory_map.count(name));
-     
-     factory_map[name] = this;
- ! };
-   
-   
-   
- --- 115,121 ----
-       assert(!factory_map.count(name));
-     
-     factory_map[name] = this;
- ! }
-   
-   
-   
- ***************
- *** 136,142 ****
-         return AutoPtr<Base>(NULL);
-       }
-     return AutoPtr<Base>(factory_map[name]->create());  
- ! };
-   
-   
-   
- --- 136,142 ----
-         return AutoPtr<Base>(NULL);
-       }
-     return AutoPtr<Base>(factory_map[name]->create());  
- ! }
-   
-   
-   
- Index: include/fe.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/fe.h,v
- retrieving revision 1.7
- retrieving revision 1.13
- diff -c -r1.7 -r1.13
- *** include/fe.h	3 Feb 2003 03:51:49 -0000	1.7
- --- include/fe.h	20 Feb 2003 15:22:15 -0000	1.13
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 47,53 ****
-    *
-    * \author Benjamin S. Kirk
-    * \date 2002-2003
- !  * \version $Revision: 1.4 $
-    */
-   
-   //-------------------------------------------------------------
- --- 47,53 ----
-    *
-    * \author Benjamin S. Kirk
-    * \date 2002-2003
- !  * \version $Revision: 1.4 $
-    */
-   
-   //-------------------------------------------------------------
- ***************
- *** 110,124 ****
-      * This is the solution that will be plotted.
-      */
-     static void nodal_soln(const Elem* elem, const Order o,
- ! 			 const std::vector<Complex>& elem_soln,
- ! 			 std::vector<Complex>& nodal_soln);
-   
-     /**
-      * @returns the number of shape functions associated with
-      * this finite element.
-      */
-     unsigned int n_shape_functions () const
- !   { return n_dofs (elem_type, fe_type.order); };
-   
-     /**
-      * @returns the number of shape functions associated with
- --- 110,124 ----
-      * This is the solution that will be plotted.
-      */
-     static void nodal_soln(const Elem* elem, const Order o,
- ! 			 const std::vector<Number>& elem_soln,
- ! 			 std::vector<Number>& nodal_soln);
-   
-     /**
-      * @returns the number of shape functions associated with
-      * this finite element.
-      */
-     unsigned int n_shape_functions () const
- !   { return n_dofs (elem_type, fe_type.order); }
-   
-     /**
-      * @returns the number of shape functions associated with
- ***************
- *** 126,132 ****
-      */
-     static unsigned int n_shape_functions (const ElemType t,
-   					 const Order o)
- !   { return n_dofs (t,o); };
-   
-     /**
-      * @returns the number of shape functions associated with this
- --- 126,132 ----
-      */
-     static unsigned int n_shape_functions (const ElemType t,
-   					 const Order o)
- !   { return n_dofs (t,o); }
-   
-     /**
-      * @returns the number of shape functions associated with this
- ***************
- *** 154,163 ****
-      * @returns the location (on the reference element) of the
-      * point \p p located in physical space.  This function requires
-      * inverting the (possibly nonlinear) transformation map, so
- !    * it is not trivial.
-      */
-     static Point inverse_map (const Elem* elem,
- ! 			    const Point& p);
-     
-     /**
-      * This is at the core of this class. Use this for each
- --- 154,167 ----
-      * @returns the location (on the reference element) of the
-      * point \p p located in physical space.  This function requires
-      * inverting the (possibly nonlinear) transformation map, so
- !    * it is not trivial. The optional parameter \p tolerance defines
- !    * how close is "good enough."  The map inversion iteration
- !    * computes the sequence \f$ \{ p_n \} \f$, and the iteration is
- !    * terminated when \f$ \|p - p_n\| < \mbox{\texttt{tolerance}} \f$
-      */
-     static Point inverse_map (const Elem* elem,
- ! 			    const Point& p,
- ! 			    const Real tolerance = 1.e-6);
-     
-     /**
-      * This is at the core of this class. Use this for each
- ***************
- *** 181,187 ****
-      * to be calculated.
-      */
-     void attach_quadrature_rule (QBase* q)
- !   { assert (q != NULL); qrule = q; return; };
-     
-     /**
-      * @returns the total number of quadrature points.  Call this
- --- 185,191 ----
-      * to be calculated.
-      */
-     void attach_quadrature_rule (QBase* q)
- !   { assert (q != NULL); qrule = q; return; }
-     
-     /**
-      * @returns the total number of quadrature points.  Call this
- ***************
- *** 193,232 ****
-       
-   #ifdef ENABLE_INFINITE_ELEMENTS
-   
- -   /**
- -    * Do not use this method for conventional finite elements!
- -    * Check the infinite element class for details.
- -    */
- -   const std::vector<Point>& get_dphase() const
- -   { std::cout << "ERROR: Do not use this with FE<Dim,T>!" 
- - 	      << std::endl;
- -     error();
- -     return xyz;
- -   };
- - 
- -   /**
- -    * Do not use this method for conventional finite elements!
- -    * Check the infinite element class for details.
- -    */
- -   const std::vector<Real>& get_Sobolev_weight() const
- -   { std::cout << "ERROR: Do not use this with FE<Dim,T>!" 
- - 	      << std::endl;
- -     error();
- -     return JxW;
- -   };
- - 
- -   /**
- -    * Do not use this method for conventional finite elements!
- -    * Check the infinite element class for details.
- -    */
- -   const std::vector<Point>& get_Sobolev_dweight() const
- -   { std::cout << "ERROR: Do not use this with FE<Dim,T>!" 
- - 	      << std::endl;
- -     error();
- -     return xyz;
- -   };
- - 
- - 
-   
-   protected:
-   
- --- 197,202 ----
- ***************
- *** 235,242 ****
-      * an infinite element.
-      */
-     void init_base_shape_functions(const QBase* q,
- ! 				 const Elem* e)
- !       { init_shape_functions(q, e); };
-   
-   
-   #endif
- --- 205,211 ----
-      * an infinite element.
-      */
-     void init_base_shape_functions(const QBase* q,
- ! 				 const Elem* e);
-   
-   
-   #endif
- ***************
- *** 299,305 ****
-    *
-    * \author Benjamin S. Kirk
-    * \date 2002-2003
- !  * \version $Revision: 1.4 $
-    */
-   
-   //-------------------------------------------------------------
- --- 268,274 ----
-    *
-    * \author Benjamin S. Kirk
-    * \date 2002-2003
- !  * \version $Revision: 1.4 $
-    */
-   
-   //-------------------------------------------------------------
- ***************
- *** 324,330 ****
-    *
-    * \author Benjamin S. Kirk
-    * \date 2002-2003
- !  * \version $Revision: 1.4 $
-    */
-   
-   //-------------------------------------------------------------
- --- 293,299 ----
-    *
-    * \author Benjamin S. Kirk
-    * \date 2002-2003
- !  * \version $Revision: 1.4 $
-    */
-   
-   //-------------------------------------------------------------
- ***************
- *** 349,355 ****
-    *
-    * \author Benjamin S. Kirk
-    * \date 2002-2003
- !  * \version $Revision: 1.4 $
-    */
-   
-   //-------------------------------------------------------------
- --- 318,324 ----
-    *
-    * \author Benjamin S. Kirk
-    * \date 2002-2003
- !  * \version $Revision: 1.4 $
-    */
-   
-   //-------------------------------------------------------------
- ***************
- *** 430,436 ****
-      * Monomial finite element.
-      */
-     typedef FE<3,MONOMIAL> FEMonomial3D;
- ! };
-   
-   
-   
- --- 399,405 ----
-      * Monomial finite element.
-      */
-     typedef FE<3,MONOMIAL> FEMonomial3D;
- ! }
-   
-   
-   
- ***************
- *** 446,452 ****
-     // Family specified in the template instantiation
-     // matches the one in the FEType object
-     assert (T == fe_type.family);
- ! };
-   
-   
-   
- --- 415,421 ----
-     // Family specified in the template instantiation
-     // matches the one in the FEType object
-     assert (T == fe_type.family);
- ! }
-   
-   
-   
- ***************
- *** 457,463 ****
-   FEHierarchic<Dim>::FEHierarchic (const FEType& fet) :
-     FE<Dim,HIERARCHIC> (fet)
-   {
- ! };
-   
-   
-   
- --- 426,432 ----
-   FEHierarchic<Dim>::FEHierarchic (const FEType& fet) :
-     FE<Dim,HIERARCHIC> (fet)
-   {
- ! }
-   
-   
-   
- ***************
- *** 468,474 ****
-   FELagrange<Dim>::FELagrange (const FEType& fet) :
-     FE<Dim,LAGRANGE> (fet)
-   {
- ! };
-   
-   
-   
- --- 437,443 ----
-   FELagrange<Dim>::FELagrange (const FEType& fet) :
-     FE<Dim,LAGRANGE> (fet)
-   {
- ! }
-   
-   
-   
- ***************
- *** 479,484 ****
-   FEMonomial<Dim>::FEMonomial (const FEType& fet) :
-     FE<Dim,MONOMIAL> (fet)
-   {
- ! };
-   
-   #endif
- --- 448,453 ----
-   FEMonomial<Dim>::FEMonomial (const FEType& fet) :
-     FE<Dim,MONOMIAL> (fet)
-   {
- ! }
-   
-   #endif
- Index: include/fe_base.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/fe_base.h,v
- retrieving revision 1.4
- retrieving revision 1.9
- diff -c -r1.4 -r1.9
- *** include/fe_base.h	3 Feb 2003 03:51:49 -0000	1.4
- --- include/fe_base.h	13 Feb 2003 22:56:07 -0000	1.9
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 49,69 ****
-   
-   /**
-    * This class forms the foundation from which generic finite
- !  * elements may be derived. The current implementation offers
- !  * a wide variety of commonly used finite element concepts.
- !  * For actual use in simulations, take the templated FE
- !  * class.  Through static member functions this templated class implements 
- !  * Lagrange shape functions, monomials, and hierarchic shape functions.
- !  * These may be used, through the public methods FEBase::shape() and
- !  * FEBase::shape_deriv(), as building blocks for shape functions in
- !  * derived classes.
-    *
- !  * All interaction of this and derived classes with other classes, 
- !  * like DofMap, are handled through the interface class FEInterface. 
- !  * When the static member functions like FEBase::n_dofs() etc are 
- !  * not sufficient to represent your derived class, add calls to your 
- !  * version in FEInterface, better do not modify the methods from FEBase.
- !  * Within the FEBase class, things should remain unchanged. 
-    *
-    * @author Benjamin S. Kirk, 2002
-    */
- --- 49,72 ----
-   
-   /**
-    * This class forms the foundation from which generic finite
- !  * elements may be derived.  In the current implementation the
- !  * templated derived class \p FE offers a wide variety of commonly 
- !  * used finite element concepts.  Check there for details.
- !  * Use the \p FEBase::build() method to create an object of any of 
- !  * the derived classes.
- !  * Note that the amount of virtual members is kept to a minimum,
- !  * and the sophisticated template scheme of \p FE is quite
- !  * likely to offer acceptably fast code.
-    *
- !  * All calls to static members of the \p FE classes should be
- !  * requested through the \p FEInterface.  This interface class
- !  * offers sort-of runtime polymorphism for the templated finite
- !  * element classes.  Even internal library classes, like \p DofMap,
- !  * request the number of dof's through this interface class.
- !  * Note that this also enables the co-existence of various
- !  * element-based schemes.  
- !  * This class is well 'at the heart' of the library, so 
- !  * things in here should better remain unchanged. 
-    *
-    * @author Benjamin S. Kirk, 2002
-    */
- ***************
- *** 90,101 ****
-     virtual ~FEBase();
-   
-     /**
- !    * Builds a specific finite element type.  A \p AutoPtr<Elem> is
-      * returned to prevent a memory leak. This way the user need not
-      * remember to delete the object.
-      */
-     static AutoPtr<FEBase> build (const unsigned int dim,
-   				const FEType& type); 
-   
-     /**
-      * This is at the core of this class. Use this for each
- --- 93,116 ----
-     virtual ~FEBase();
-   
-     /**
- !    * Builds a specific finite element type.  A \p AutoPtr<FEBase> is
-      * returned to prevent a memory leak. This way the user need not
-      * remember to delete the object.
-      */
-     static AutoPtr<FEBase> build (const unsigned int dim,
-   				const FEType& type); 
- +   
- + #ifdef ENABLE_INFINITE_ELEMENTS
- + 
- +   /**
- +    * Builds a specific infinite element type.  A \p AutoPtr<FEBase> is
- +    * returned to prevent a memory leak. This way the user need not
- +    * remember to delete the object.
- +    */
- +   static AutoPtr<FEBase> build_InfFE (const unsigned int dim,
- + 				      const FEType& type); 
- + 
- + #endif
-   
-     /**
-      * This is at the core of this class. Use this for each
- ***************
- *** 129,200 ****
-      * points on the element.
-      */    
-     const std::vector<Point>& get_xyz() const
- !   { return xyz; };
-     
-     /**
-      * @returns the shape function values at the quadrature points
-      * on the element.
-      */    
-     const std::vector<std::vector<Real> >& get_phi() const
- !   { return phi; };
-     
-     /**
-      * @returns the element Jacobian times the quadrature weight for
-      * each quadrature point.
-      */    
-     const std::vector<Real>& get_JxW() const
- !   { return JxW; };
-   
-     /**
-      * @returns the shape function derivatives at the quadrature
-      * points.
-      */
-     const std::vector<std::vector<Point> >& get_dphi() const
- !   { return dphi; };
-     
-     /**
-      * @returns the shape function x-derivative at the quadrature
-      * points.
-      */
-     const std::vector<std::vector<Real> >& get_dphidx() const
- !   { return dphidx; };
-     
-     /**
-      * @returns the shape function y-derivative at the quadrature
-      * points.
-      */
-     const std::vector<std::vector<Real> >& get_dphidy() const
- !   { return dphidy; };
-     
-     /**
-      * @returns the shape function z-derivative at the quadrature
-      * points.
-      */
-     const std::vector<std::vector<Real> >& get_dphidz() const
- !   { return dphidz; };
-   
-     
-   #ifdef ENABLE_INFINITE_ELEMENTS
-   
-     /**
- !    * @returns the global first derivative of the phase term in
- !    * infinite elements, evaluated at the quadrature points.
- !    * To be implemented in derived classes.
-      */
- !   virtual const std::vector<Point>& get_dphase() const = 0;
-   
-     /**
-      * @returns the multiplicative weight at each quadrature point.
- !    * To be implemented in derived classes.
-      */
- !   virtual const std::vector<Real>& get_Sobolev_weight() const = 0;
-   
-     /**
-      * @returns the first global derivative of the multiplicative 
- !    * weight at each quadrature point.  To be implemented in 
- !    * derived classes.
-      */
- !   virtual const std::vector<Point>& get_Sobolev_dweight() const = 0;
-   
-   #endif
-   
- --- 144,232 ----
-      * points on the element.
-      */    
-     const std::vector<Point>& get_xyz() const
- !   { return xyz; }
-     
-     /**
-      * @returns the shape function values at the quadrature points
-      * on the element.
-      */    
-     const std::vector<std::vector<Real> >& get_phi() const
- !   { return phi; }
-     
-     /**
-      * @returns the element Jacobian times the quadrature weight for
-      * each quadrature point.
-      */    
-     const std::vector<Real>& get_JxW() const
- !   { return JxW; }
-   
-     /**
-      * @returns the shape function derivatives at the quadrature
-      * points.
-      */
-     const std::vector<std::vector<Point> >& get_dphi() const
- !   { return dphi; }
-     
-     /**
-      * @returns the shape function x-derivative at the quadrature
-      * points.
-      */
-     const std::vector<std::vector<Real> >& get_dphidx() const
- !   { return dphidx; }
-     
-     /**
-      * @returns the shape function y-derivative at the quadrature
-      * points.
-      */
-     const std::vector<std::vector<Real> >& get_dphidy() const
- !   { return dphidy; }
-     
-     /**
-      * @returns the shape function z-derivative at the quadrature
-      * points.
-      */
-     const std::vector<std::vector<Real> >& get_dphidz() const
- !   { return dphidz; }
-   
-     
-   #ifdef ENABLE_INFINITE_ELEMENTS
-   
-     /**
- !    * @returns the global first derivative of the phase term 
- !    * which is used in infinite elements, evaluated at the 
- !    * quadrature points.  
- !    *
- !    * In case of the general finite element class \p FE this 
- !    * field is initialized to all zero, so that the variational 
- !    * formulation for an @e infinite element returns correct element 
- !    * matrices for a mesh using both finite and infinite elements.
-      */
- !   const std::vector<Point>& get_dphase() const
- !       { return dphase; }
- ! 
-   
-     /**
-      * @returns the multiplicative weight at each quadrature point.
- !    * This weight is used for certain infinite element weak 
- !    * formulations, so that @e weighted Sobolev spaces are
- !    * used for the trial function space.  This renders the
- !    * variational form easily computable. 
- !    *
- !    * In case of the general finite element class \p FE this 
- !    * field is initialized to all ones, so that the variational 
- !    * formulation for an @e infinite element returns correct element 
- !    * matrices for a mesh using both finite and infinite elements.
-      */
- !   const std::vector<Real>& get_Sobolev_weight() const
- !       { return weight; }
-   
-     /**
-      * @returns the first global derivative of the multiplicative 
- !    * weight at each quadrature point. See \p get_Sobolev_weight()
- !    * for details.  In case of \p FE initialized to all zero.
-      */
- !   const std::vector<Point>& get_Sobolev_dweight() const
- !       { return dweight; }
-   
-   #endif
-   
- ***************
- *** 203,215 ****
-      * @returns the tangent vectors for face integration.
-      */
-     const std::vector<std::vector<Point> >& get_tangents() const
- !   { return tangents; };
-     
-     /**
-      * @returns the normal vectors for face integration.
-      */
-     const std::vector<Point>& get_normals() const
- !   { return normals; };
-     
-     /**
-      * Provides the class with the quadrature rule.  Implement
- --- 235,247 ----
-      * @returns the tangent vectors for face integration.
-      */
-     const std::vector<std::vector<Point> >& get_tangents() const
- !   { return tangents; }
-     
-     /**
-      * @returns the normal vectors for face integration.
-      */
-     const std::vector<Point>& get_normals() const
- !   { return normals; }
-     
-     /**
-      * Provides the class with the quadrature rule.  Implement
- ***************
- *** 235,251 ****
-      * have been calculated for.  Useful in determining when shape
-      * functions must be recomputed.
-      */
- !   ElemType get_type()  const { return elem_type; };
-   
-     /**
-      * @returns the approximation order of the finite element.
-      */
- !   Order get_order()  const { return fe_type.order; };
-   
-     /**
-      * @returns the finite element family of this element.
-      */
- !   FEFamily get_family()  const { return fe_type.family; };
-   
-     /**
-      * Prints the Jacobian times the weight for each quadrature point.
- --- 267,283 ----
-      * have been calculated for.  Useful in determining when shape
-      * functions must be recomputed.
-      */
- !   ElemType get_type()  const { return elem_type; }
-   
-     /**
-      * @returns the approximation order of the finite element.
-      */
- !   Order get_order()  const { return fe_type.order; }
-   
-     /**
-      * @returns the finite element family of this element.
-      */
- !   FEFamily get_family()  const { return fe_type.family; }
-   
-     /**
-      * Prints the Jacobian times the weight for each quadrature point.
- ***************
- *** 324,386 ****
-      * be usable in derived classes, and therefore protected.
-      * Returns the x value of the pth entry of the dxzydxi_map.
-      */
- !   Real dxdxi_map(const unsigned int p) const   { return dxyzdxi_map[p](0); };
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the y value of the pth entry of the dxzydxi_map.
-      */
- !   Real dydxi_map(const unsigned int p) const   { return dxyzdxi_map[p](1); };
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the z value of the pth entry of the dxzydxi_map.
-      */
- !   Real dzdxi_map(const unsigned int p) const   { return dxyzdxi_map[p](2); };
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the x value of the pth entry of the dxzydeta_map.
-      */
- !   Real dxdeta_map(const unsigned int p) const  { return dxyzdeta_map[p](0); };
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the y value of the pth entry of the dxzydeta_map.
-      */
- !   Real dydeta_map(const unsigned int p) const  { return dxyzdeta_map[p](1); }; 
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the z value of the pth entry of the dxzydeta_map.
-      */
- !   Real dzdeta_map(const unsigned int p) const  { return dxyzdeta_map[p](2); };
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the x value of the pth entry of the dxzydzeta_map.
-      */
- !   Real dxdzeta_map(const unsigned int p) const { return dxyzdzeta_map[p](0); };
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the y value of the pth entry of the dxzydzeta_map.
-      */
- !   Real dydzeta_map(const unsigned int p) const { return dxyzdzeta_map[p](1); };
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the z value of the pth entry of the dxzydzeta_map.
-      */
- !   Real dzdzeta_map(const unsigned int p) const { return dxyzdzeta_map[p](2); };
-   
-   
-   
- --- 356,418 ----
-      * be usable in derived classes, and therefore protected.
-      * Returns the x value of the pth entry of the dxzydxi_map.
-      */
- !   Real dxdxi_map(const unsigned int p) const   { return dxyzdxi_map[p](0); }
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the y value of the pth entry of the dxzydxi_map.
-      */
- !   Real dydxi_map(const unsigned int p) const   { return dxyzdxi_map[p](1); }
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the z value of the pth entry of the dxzydxi_map.
-      */
- !   Real dzdxi_map(const unsigned int p) const   { return dxyzdxi_map[p](2); }
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the x value of the pth entry of the dxzydeta_map.
-      */
- !   Real dxdeta_map(const unsigned int p) const  { return dxyzdeta_map[p](0); }
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the y value of the pth entry of the dxzydeta_map.
-      */
- !   Real dydeta_map(const unsigned int p) const  { return dxyzdeta_map[p](1); } 
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the z value of the pth entry of the dxzydeta_map.
-      */
- !   Real dzdeta_map(const unsigned int p) const  { return dxyzdeta_map[p](2); }
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the x value of the pth entry of the dxzydzeta_map.
-      */
- !   Real dxdzeta_map(const unsigned int p) const { return dxyzdzeta_map[p](0); }
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the y value of the pth entry of the dxzydzeta_map.
-      */
- !   Real dydzeta_map(const unsigned int p) const { return dxyzdzeta_map[p](1); }
-   
-     /**
-      * Used in \p FEBase::compute_map(), which should be
-      * be usable in derived classes, and therefore protected.
-      * Returns the z value of the pth entry of the dxzydzeta_map.
-      */
- !   Real dzdzeta_map(const unsigned int p) const { return dxyzdzeta_map[p](2); }
-   
-   
-   
- ***************
- *** 567,572 ****
- --- 599,638 ----
-   
-   
-   
- + 
- + #ifdef ENABLE_INFINITE_ELEMENTS
- + 
- +   //--------------------------------------------------------------
- +   /* protected members for infinite elements, which are accessed 
- +    * from the outside through some inline functions
- +    */
- + 
- + 
- +   /**
- +    * Used for certain @e infinite element families:
- +    * the first derivatives of the phase term in global coordinates,
- +    * over @e all quadrature points.
- +    */
- +   std::vector<Point> dphase;
- + 
- +   /**
- +    * Used for certain @e infinite element families:
- +    * the global derivative of the additional radial weight \f$ 1/{r^2} \f$,
- +    * over @e all quadrature points.
- +    */
- +   std::vector<Point> dweight;
- + 
- +   /**
- +    * Used for certain @e infinite element families:
- +    * the additional radial weight \f$ 1/{r^2} \f$ in local coordinates,
- +    * over @e all quadrature points.
- +    */
- +   std::vector<Real>  weight;
- + 
- + #endif
- + 
- + 
- + 
-     
-     /**
-      * Tangent vectors on boundary at quadrature points.
- ***************
- *** 579,589 ****
-     std::vector<Point>                normals;
-   
-     /**
- -    * Jacobian values at quadrature points
- -    */
- -   std::vector<Real>                 jac;
- -   
- -   /**
-      * Jacobian*Weight values at quadrature points
-      */
-     std::vector<Real>                 JxW;
- --- 645,650 ----
- ***************
- *** 638,651 ****
-     elem_type(INVALID_ELEM),
-     qrule(NULL)
-   {
- ! };
-   
-   
-   
-   inline
-   FEBase::~FEBase()
-   {
- ! };
-   
-   
-   
- --- 699,712 ----
-     elem_type(INVALID_ELEM),
-     qrule(NULL)
-   {
- ! }
-   
-   
-   
-   inline
-   FEBase::~FEBase()
-   {
- ! }
-   
-   
-   
- ***************
- *** 653,659 ****
-   void FEBase::print_JxW() const
-   {
-     for (unsigned int i=0; i<JxW.size(); ++i) std::cout << JxW[i] << std::endl;
- ! };
-   
-   
-   
- --- 714,720 ----
-   void FEBase::print_JxW() const
-   {
-     for (unsigned int i=0; i<JxW.size(); ++i) std::cout << JxW[i] << std::endl;
- ! }
-   
-   
-   
- ***************
- *** 667,673 ****
-   	  std::cout << " phi[" << i << "][" << j << "]=" << phi[i][j] << std::endl;
-   	}
-       }
- ! };
-   
-   
-   
- --- 728,734 ----
-   	  std::cout << " phi[" << i << "][" << j << "]=" << phi[i][j] << std::endl;
-   	}
-       }
- ! }
-   
-   
-   
- ***************
- *** 682,688 ****
-   	  dphi[i][j].print();
-   	}
-       }
- ! };
-   
-   
-   
- --- 743,749 ----
-   	  dphi[i][j].print();
-   	}
-       }
- ! }
-   
-   
-   
- ***************
- *** 690,696 ****
-   void FEBase::print_xyz() const
-   {
-     for (unsigned int i=0; i<xyz.size(); ++i) xyz[i].print();
- ! };
-   
-   
-   
- --- 751,757 ----
-   void FEBase::print_xyz() const
-   {
-     for (unsigned int i=0; i<xyz.size(); ++i) xyz[i].print();
- ! }
-   
-   
-   
- ***************
- *** 705,711 ****
-     print_xyz();
-     std::cout << "Values of JxW at the Gauss pts." << std::endl;
-     print_JxW();
- ! };
-   
-   
-   
- --- 766,772 ----
-     print_xyz();
-     std::cout << "Values of JxW at the Gauss pts." << std::endl;
-     print_JxW();
- ! }
-   
-   
-   
- Index: include/fe_interface.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/fe_interface.h,v
- retrieving revision 1.6
- retrieving revision 1.11
- diff -c -r1.6 -r1.11
- *** include/fe_interface.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/fe_interface.h	20 Feb 2003 04:59:58 -0000	1.11
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 36,53 ****
-   
-   
-   /**
- !  * This class provides an encapsulated access to all static
-    * public member functions of finite element classes.
-    * Using this class, one need not worry about the correct
- !  * finite element class, or modify all the various switch 
- !  * statements to account for new elements.  Instead, these 
- !  * different elements are caught here, and passed to the appropriate 
- !  * static class member.  By default, the FEBase class methods are used.
- !  *
- !  * Currently, only static access is provided.  A possible
- !  * extension might be to enable the finite element classes
- !  * access to the EquationSystems object, without
- !  * much hassle of redefining a lot.
-    *
-    * @author Daniel Dreyer, 2002
-    */
- --- 36,45 ----
-   
-   
-   /**
- !  * This class provides an encapsulated access to all @e static
-    * public member functions of finite element classes.
-    * Using this class, one need not worry about the correct
- !  * finite element class.
-    *
-    * @author Daniel Dreyer, 2002
-    */
- ***************
- *** 69,75 ****
-     /**
-      * Destructor.
-      */
- !   virtual ~FEInterface() {return;};
-   
-     /**
-      * @returns the number of shape functions associated with this
- --- 61,67 ----
-     /**
-      * Destructor.
-      */
- !   virtual ~FEInterface() {return;}
-   
-     /**
-      * @returns the number of shape functions associated with this
- ***************
- *** 118,136 ****
-     static void nodal_soln(const unsigned int dim,
-   			 const FEType& fe_t,
-   			 const Elem* elem,
- ! 			 const std::vector<Complex>& elem_soln,
- ! 			 std::vector<Complex>& nodal_soln);
-   
-     /**
-      * @returns the location (on the reference element) of the
-      * point \p p located in physical space.  This function requires
-      * inverting the (probably nonlinear) transformation map, so
- !    * it is not trivial.
-      */
-     static Point inverse_map (const unsigned int dim,
-   			    const FEType& fe_t,
-   			    const Elem* elem,
- ! 			    const Point& p);
-   
-     /**
-      * @returns true if the point p is located on the reference element
- --- 110,132 ----
-     static void nodal_soln(const unsigned int dim,
-   			 const FEType& fe_t,
-   			 const Elem* elem,
- ! 			 const std::vector<Number>& elem_soln,
- ! 			 std::vector<Number>& nodal_soln);
-   
-     /**
-      * @returns the location (on the reference element) of the
-      * point \p p located in physical space.  This function requires
-      * inverting the (probably nonlinear) transformation map, so
- !    * it is not trivial. The optional parameter \p tolerance defines
- !    * how close is "good enough."  The map inversion iteration
- !    * computes the sequence \f$ \{ p_n \} \f$, and the iteration is
- !    * terminated when \f$ \|\|p - p_n\|\| < \mbox{\texttt{tolerance}} \f$
-      */
-     static Point inverse_map (const unsigned int dim,
-   			    const FEType& fe_t,
-   			    const Elem* elem,
- ! 			    const Point& p,
- ! 			    const Real tolerance = 1.e-6);
-   
-     /**
-      * @returns true if the point p is located on the reference element
- ***************
- *** 165,171 ****
- --- 161,250 ----
-   		    const Elem* elem,
-   		    const unsigned int i,
-   		    const Point& p);
- + 
- + 
- +   
- + #ifdef ENABLE_INFINITE_ELEMENTS 
- +   /**
- +    * @returns true if \p et is an element to be processed by
- +    * class \p InfFE.  Otherwise, it returns false, and
- +    * this element should be processed using \p FE.
- +    * This method is particularly helpful during the actual
- +    * matrix assembly process.
- +    */
- + #else
- +   /**
- +    * @returns always false.  For compatibility with disabled 
- +    * infinite elements.
- +    */
- + #endif
- +   static bool is_InfFE_elem(const ElemType et);
- + 
- + 
- + 
- + 
- + 
- + #ifdef ENABLE_INFINITE_ELEMENTS
- + 
- + 
- + private:
- + 
- +   // ------------------------------------------------------------
- +   /*
- +    * All these private members do the same as their public
- +    * counterparts, but for infinite elements. This dis-entangles
- +    * the calls to \p FE and \p InfFE.
- +    */
- + 
- +   static unsigned int ifem_n_shape_functions(const unsigned int dim,
- + 					     const FEType& fe_t,
- + 					     const ElemType t);
- + 
- +   static unsigned int ifem_n_dofs(const unsigned int dim,
- + 				  const FEType& fe_t,
- + 				  const ElemType t);
- + 
- +   static unsigned int ifem_n_dofs_at_node(const unsigned int dim,
- + 					  const FEType& fe_t,
- + 					  const ElemType t,
- + 					  const unsigned int n);
- + 
- +   static unsigned int ifem_n_dofs_per_elem(const unsigned int dim,
- + 					   const FEType& fe_t,
- + 					   const ElemType t);
-     
- +   static void ifem_nodal_soln(const unsigned int dim,
- + 			      const FEType& fe_t,
- + 			      const Elem* elem,
- + 			      const std::vector<Number>& elem_soln,
- + 			      std::vector<Number>& nodal_soln);
- + 
- +   static Point ifem_inverse_map (const unsigned int dim,
- + 				 const FEType& fe_t,
- + 				 const Elem* elem,
- + 				 const Point& p,
- + 				 const Real tolerance = 1.e-6);
- + 
- +   static bool ifem_on_reference_element(const Point& p,
- + 					const ElemType t,
- + 					const Real eps=1.e-6);
- + 
- +   static Real ifem_shape(const unsigned int dim,
- + 			 const FEType& fe_t,
- + 			 const ElemType t,
- + 			 const unsigned int i,
- + 			 const Point& p);
- + 
- +   static Real ifem_shape(const unsigned int dim,
- + 			 const FEType& fe_t,
- + 			 const Elem* elem,
- + 			 const unsigned int i,
- + 			 const Point& p);
- + 
- + 
- + #endif
- + 
- + 
-   };
-   
-   
- ***************
- *** 174,180 ****
-   
-   // ------------------------------------------------------------
-   // FEInterface class inline members
-   
-   
-   
- ! #endif
- --- 253,296 ----
-   
-   // ------------------------------------------------------------
-   // FEInterface class inline members
- + #ifndef ENABLE_INFINITE_ELEMENTS 
-   
- + inline bool FEInterface::is_InfFE_elem(const ElemType)
- + {
- +   return false; 
- + }
-   
- + #else
-   
- ! inline bool FEInterface::is_InfFE_elem(const ElemType et)
- ! {
- ! 
- !   switch (et)
- !     {
- !     case INFEDGE2:
- !     case INFQUAD4:
- !     case INFQUAD6:
- !     case INFHEX8:
- !     case INFHEX16:
- !     case INFHEX18:
- !     case INFPRISM6:
- !     case INFPRISM12:
- !       {
- !         return true;
- !       }
- !       
- !     default:
- !       { 
- ! 	return false;
- !       }
- !     }
- ! }
- ! 
- ! #endif //ifndef ENABLE_INFINITE_ELEMENTS 
- ! 
- ! 
- ! 
- ! 
- ! 
- ! 
- ! #endif // ifndef __fe_interface_h__
- Index: include/fe_type.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/fe_type.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/fe_type.h	27 Jan 2003 13:13:48 -0000	1.6
- --- include/fe_type.h	13 Feb 2003 22:56:07 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 49,55 ****
-   	 const FEFamily f = LAGRANGE) :
-       order(o),
-       family(f)
- !   {};
-   
-     /**
-      * The approximation order of the element.  
- --- 49,55 ----
-   	 const FEFamily f = LAGRANGE) :
-       order(o),
-       family(f)
- !   {}
-   
-     /**
-      * The approximation order of the element.  
- ***************
- *** 72,104 ****
-      * so, otherwise what we switch on would change when infinite
-      * elements are not compiled in.
-      */
- !   FEType(const Order    o = FIRST,
- ! 	 const FEFamily f = LAGRANGE) :
-       order(o),
- !     base_order(o),
-       family(f),
- !     base_family(f),
- !     inf_map(INVALID_INF_MAP)
- !   {};
- ! 
- !   
- !   /**
- !    * Constructor.  Takes the approximation \p Order
- !    * and the finite element family \p FEFamily, and provides
- !    * a uniform interface for non-infinite elements.
- !    */
- !   FEType(const Order      bo,
- ! 	 const FEFamily   bf,
- ! 	 const Order      o,
- ! 	 const FEFamily   f,
- ! 	 const InfMapType im ) :
- !     order(o),
- !     base_order(bo),
- !     family(f),
- !     base_family(bf),
-       inf_map(im)
- !   {};
-   
-     /**
-      * The approximation order in radial direction of the infinite element.  
-      */
- --- 72,90 ----
-      * so, otherwise what we switch on would change when infinite
-      * elements are not compiled in.
-      */
- !   FEType(const Order      o  = FIRST,
- ! 	 const FEFamily   f  = LAGRANGE,
- ! 	 const Order      ro = THIRD,
- ! 	 const FEFamily   rf = JACOBI_20_00,
- ! 	 const InfMapType im = CARTESIAN) :
-       order(o),
- !     radial_order(ro),
-       family(f),
- !     radial_family(rf),
-       inf_map(im)
- !   {}
-   
- +   
-     /**
-      * The approximation order in radial direction of the infinite element.  
-      */
- ***************
- *** 107,113 ****
-     /**
-      * The approximation order in the base of the infinite element.
-      */
- !   Order base_order;
-   
-     /**
-      * The type of approximation in radial direction.  Valid types are 
- --- 93,99 ----
-     /**
-      * The approximation order in the base of the infinite element.
-      */
- !   Order radial_order;
-   
-     /**
-      * The type of approximation in radial direction.  Valid types are 
- ***************
- *** 120,126 ****
-      * \p base_family contains the approximation type in circumferential
-      * direction.  Valid types are \p LAGRANGE, \p HIERARCHIC, etc...
-      */
- !   FEFamily base_family;
-   
-     /**
-      * The coordinate mapping type of the infinite element.
- --- 106,112 ----
-      * \p base_family contains the approximation type in circumferential
-      * direction.  Valid types are \p LAGRANGE, \p HIERARCHIC, etc...
-      */
- !   FEFamily radial_family;
-   
-     /**
-      * The coordinate mapping type of the infinite element.
- ***************
- *** 130,136 ****
-      */
-     InfMapType inf_map;
-     
- ! #endif
-   
-   private:  
-     
- --- 116,122 ----
-      */
-     InfMapType inf_map;
-     
- ! #endif // ifndef ENABLE_INFINITE_ELEMENTS
-   
-   private:  
-     
- Index: include/inf_fe.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/inf_fe.h,v
- retrieving revision 1.8
- retrieving revision 1.18
- diff -c -r1.8 -r1.18
- *** include/inf_fe.h	3 Feb 2003 03:51:49 -0000	1.8
- --- include/inf_fe.h	20 Feb 2003 17:09:20 -0000	1.18
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 25,41 ****
-   // C++ includes
-   
-   // Local includes
- - #include "fe_base.h"
- - #include "elem.h"
-   #include "mesh_config.h"
-   
- ! 
- ! // forward declarations
-   
-   
-   
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
-   
-   
-   /**
- --- 25,40 ----
-   // C++ includes
-   
-   // Local includes
-   #include "mesh_config.h"
- + #ifdef ENABLE_INFINITE_ELEMENTS
-   
- ! #include "fe_base.h"
-   
-   
- + // forward declarations
- + class Elem;
-   
-   
-   
-   
-   /**
- ***************
- *** 52,58 ****
-    * Having different shape approximation families in radial direction 
-    * introduces the requirement for an additional \p Order in this
-    * class. Therefore, the \p FEType internals change when infinite
- !  * elements are used. 
-    * When the specific infinite element type is not known at compile
-    * time, use the \p FEBase::build() member to create abstract 
-    * (but still optimized) infinite elements at run time.
- --- 51,57 ----
-    * Having different shape approximation families in radial direction 
-    * introduces the requirement for an additional \p Order in this
-    * class. Therefore, the \p FEType internals change when infinite
- !  * elements are enabled. 
-    * When the specific infinite element type is not known at compile
-    * time, use the \p FEBase::build() member to create abstract 
-    * (but still optimized) infinite elements at run time.
- ***************
- *** 96,102 ****
-    *
-    * \author Daniel Dreyer
-    * \date 2003
- !  * \version $Revision: 1.4 $
-    */
-   
-   //-------------------------------------------------------------
- --- 95,101 ----
-    *
-    * \author Daniel Dreyer
-    * \date 2003
- !  * \version $Revision: 1.4 $
-    */
-   
-   //-------------------------------------------------------------
- ***************
- *** 119,125 ****
-      *
-      * \author Daniel Dreyer
-      * \date 2003
- !    * \version $Revision: 1.4 $
-      */
-     //-------------------------------------------------------------
-     // InfFE::Radial class definition
- --- 118,124 ----
-      *
-      * \author Daniel Dreyer
-      * \date 2003
- !    * \version $Revision: 1.4 $
-      */
-     //-------------------------------------------------------------
-     // InfFE::Radial class definition
- ***************
- *** 136,159 ****
-        * @returns the decay in radial direction of
-        * the \p Dim dimensional infinite element.
-        */
- !     static Real decay(const Real v);
-   
-       /**
-        * @returns the first (local) derivative of the
-        * decay in radial direction of the infinite element.
-        */
- !     static Real decay_deriv(const Real) { return .5; };
-   
-       /**
-        * @returns the radial weight D, used as an additional weight
-        * for the test function, evaluated at local radial coordinate \p v.
-        */
- !     static Real D(const Real v) { return (1.-v)*(1.-v)/4.; };
-   
-       /**
-        * @returns the first (local) radial derivative of the radial weight D.
-        */
- !     static Real D_deriv(const Real v) { return (v-1.)/2.; };
-   
-       /**
-        * @returns the index (0 for the base, 1,2,... for the outer shells) 
- --- 135,158 ----
-        * @returns the decay in radial direction of
-        * the \p Dim dimensional infinite element.
-        */
- !     static Real decay(const Real v) { return (1.-v)/2.; }
-   
-       /**
-        * @returns the first (local) derivative of the
-        * decay in radial direction of the infinite element.
-        */
- !     static Real decay_deriv(const Real) { return .5; }
-   
-       /**
-        * @returns the radial weight D, used as an additional weight
-        * for the test function, evaluated at local radial coordinate \p v.
-        */
- !     static Real D(const Real v) { return (1.-v)*(1.-v)/4.; }
-   
-       /**
-        * @returns the first (local) radial derivative of the radial weight D.
-        */
- !     static Real D_deriv(const Real v) { return (v-1.)/2.; }
-   
-       /**
-        * @returns the index (0 for the base, 1,2,... for the outer shells) 
- ***************
- *** 165,179 ****
-        */
-       static unsigned int index(const unsigned int n_base_dofs,
-   			      const unsigned int i)
- ! 	{ return i / n_base_dofs; };
-   
-       /**
-        * @returns the index (0 for the base, 1,2,... for the outer shells) 
- !      * in @e radial direction for the infinite element with the @e base \p FEType
- !      * \p base_fe_type and the @e base element \p base_elem_type.  Used by the 
-        * public static members of \p InfFE.
-        */
- !     static unsigned int index(const FEType& base_fe_type,
-   			      const ElemType base_elem_type,
-   			      const unsigned int i);
-   
- --- 164,178 ----
-        */
-       static unsigned int index(const unsigned int n_base_dofs,
-   			      const unsigned int i)
- ! 	{ return i / n_base_dofs; }
-   
-       /**
-        * @returns the index (0 for the base, 1,2,... for the outer shells) 
- !      * in @e radial direction for the infinite element with the \p FEType
- !      * \p fe_type and the @e base element \p base_elem_type.  Used by the 
-        * public static members of \p InfFE.
-        */
- !     static unsigned int index(const FEType& fe_type,
-   			      const ElemType base_elem_type,
-   			      const unsigned int i);
-   
- ***************
- *** 181,187 ****
-        * @returns the Order of the mapping functions
-        * in radial direction. Currently, this is @e always \p FIRST.
-        */
- !     static Order mapping_order() { return FIRST; };
-   
-       /**
-        * @returns the number of shape functions in radial direction
- --- 180,186 ----
-        * @returns the Order of the mapping functions
-        * in radial direction. Currently, this is @e always \p FIRST.
-        */
- !     static Order mapping_order() { return FIRST; }
-   
-       /**
-        * @returns the number of shape functions in radial direction
- ***************
- *** 198,204 ****
-        */
-       static unsigned int n_dofs(const ElemType /* t */,
-   			       const Order o_radial)
- ! 	{ return static_cast<unsigned int>(o_radial)+1; };
-   
-       /**
-        * @returns the number of dofs in radial direction on "onion slice" 
- --- 197,203 ----
-        */
-       static unsigned int n_dofs(const ElemType /* t */,
-   			       const Order o_radial)
- ! 	{ return static_cast<unsigned int>(o_radial)+1; }
-   
-       /**
-        * @returns the number of dofs in radial direction on "onion slice" 
- ***************
- *** 222,237 ****
-        */
-       static unsigned int n_dofs_per_elem(const ElemType /* inf_elem */,
-   					const Order    o_radial)
- ! 	{ return static_cast<unsigned int>(o_radial)+1; };
-   				       
-       /**
-        * @returns the location in radial direction (on the reference axis) 
-        * of the point \p p located in physical space.  This function requires
-        * inverting the (possibly nonlinear) transformation map, so
- !      * it is not trivial.
-        */
-       static Point inverse_map (const Elem* inf_elem,
- ! 			      const Real dist_origin);
-   
-     };
-   
- --- 221,240 ----
-        */
-       static unsigned int n_dofs_per_elem(const ElemType /* inf_elem */,
-   					const Order    o_radial)
- ! 	{ return static_cast<unsigned int>(o_radial)+1; }
-   				       
-       /**
-        * @returns the location in radial direction (on the reference axis) 
-        * of the point \p p located in physical space.  This function requires
-        * inverting the (possibly nonlinear) transformation map, so
- !      * it is not trivial. The optional parameter \p tolerance defines
- !      * how close is "good enough."  The map inversion iteration
- !      * computes the sequence \f$ \{ p_n \} \f$, and the iteration is
- !      * terminated when \f$ \|p - p_n\| < \mbox{\texttt{tolerance}} \f$
-        */
-       static Point inverse_map (const Elem* inf_elem,
- ! 			      const Real dist_origin,
- ! 			      const Real tolerance);
-   
-     };
-   
- ***************
- *** 244,250 ****
-      *
-      * \author Daniel Dreyer
-      * \date 2003
- !    * \version $Revision: 1.4 $
-      */
-     //-------------------------------------------------------------
-     // InfFE::Base class definition
- --- 247,253 ----
-      *
-      * \author Daniel Dreyer
-      * \date 2003
- !    * \version $Revision: 1.4 $
-      */
-     //-------------------------------------------------------------
-     // InfFE::Base class definition
- ***************
- *** 262,275 ****
-        * this method allocates memory!  So be sure to delete the
-        * new element afterwards.
-        */
- !     static Elem* build_elem (const Elem* inf_elem)
- ! 	{ AutoPtr<Elem> ape = inf_elem->build_side(0); return ape.release(); };
- ! 
- !     /**
- !      * Build the \p FEType for the base element of an infinite element,
- !      * where \p inf_fe_type is the \p FEType of the whole infinite element.
- !      */
- !     static FEType build_fe_type (const FEType& inf_fe_type);
-    
-       /**
-        * @returns the index in the @e base element. \p i
- --- 265,271 ----
-        * this method allocates memory!  So be sure to delete the
-        * new element afterwards.
-        */
- !     static Elem* build_elem (const Elem* inf_elem);
-    
-       /**
-        * @returns the index in the @e base element. \p i
- ***************
- *** 279,293 ****
-        */
-       static unsigned int index(const unsigned int n_base_dofs,
-   			      const unsigned int i)
- ! 	{ return i % n_base_dofs; };
-   
-       /**
-        * @returns the index in the @e base element. \p i is the index in the 
- !      * whole infinite element, \p base_fe_type is the  @e base \p FEType
- !      * and \p base_elem_type is the the @e base element.  Used by the 
-        * public static members of \p InfFE.
-        */
- !     static unsigned int index(const FEType& base_fe_type,
-   			      const ElemType base_elem_type,
-   			      const unsigned int i);
-   
- --- 275,289 ----
-        */
-       static unsigned int index(const unsigned int n_base_dofs,
-   			      const unsigned int i)
- ! 	{ return i % n_base_dofs; }
-   
-       /**
-        * @returns the index in the @e base element. \p i is the index in the 
- !      * whole infinite element, \p fe_type is the current \p FEType
- !      * and \p base_elem_type is the @e base element.  Used by the 
-        * public static members of \p InfFE.
-        */
- !     static unsigned int index(const FEType& fe_type,
-   			      const ElemType base_elem_type,
-   			      const unsigned int i);
-   
- ***************
- *** 314,326 ****
-   
-     /**
-      * Constructor.
- !    * Initializes some data structures, and builds \p base_fe with 
- !    * \p fet.base_order as \p order, and \p fet.base_family as 
- !    * \p family.  Through this we get the appropriate \p base_fe* 
- !    * for handling approximation in the base, avoiding to template
- !    * InfFE also with respect to the base approximation \p FEFamily.
- !    * This is only possible through the \p FEBase::build() method
- !    * and some protected additional virtual members in \p FEBase.
-      */
-     InfFE(const FEType& fet);
-   
- --- 310,325 ----
-   
-     /**
-      * Constructor.
- !    * Initializes some data structures.  Builds a \p FE<Dim-1,T_base>
- !    * object to handle  approximation in the base, so that
- !    * there is no need to template \p InfFE<Dim,T_radial,T_map> also with 
- !    * respect to the base approximation \p T_base.
- !    * 
- !    * The same remarks concerning compile-time optimization for 
- !    * \p FE also hold for \p InfFE.  Use the 
- !    * \p FEBase::build_InfFE(const unsigned int, const FEType&) 
- !    * method to build specific instantiations of \p InfFE at
- !    * run time.
-      */
-     InfFE(const FEType& fet);
-   
- ***************
- *** 397,422 ****
-      */
-     static void nodal_soln(const FEType& fet,
-   			 const Elem* elem, 
- ! 			 const std::vector<Complex>& elem_soln,
- ! 			 std::vector<Complex>& nodal_soln);
-   
-     /**
-      * @returns the location (on the reference element) of the
-      * point \p p located in physical space.  This function requires
-      * inverting the (possibly nonlinear) transformation map, so
- !    * it is not trivial.
-      */
-     static Point inverse_map (const Elem* elem,
- ! 			    const Point& p);
- ! 
- !   /**
- !    * @returns true if \p et is an element to be processed by
- !    * class \p InfFE.  Otherwise, it returns false, and
- !    * this element should be processed using \p FE.
- !    * This method is particularly helpful during the actual
- !    * matrix assembly process.
- !    */
- !   static bool is_InfFE_elem(const ElemType et);
-   
-   
-   
- --- 396,416 ----
-      */
-     static void nodal_soln(const FEType& fet,
-   			 const Elem* elem, 
- ! 			 const std::vector<Number>& elem_soln,
- ! 			 std::vector<Number>& nodal_soln);
-   
-     /**
-      * @returns the location (on the reference element) of the
-      * point \p p located in physical space.  This function requires
-      * inverting the (possibly nonlinear) transformation map, so
- !    * it is not trivial. The optional parameter \p tolerance defines
- !    * how close is "good enough."  The map inversion iteration
- !    * computes the sequence \f$ \{ p_n \} \f$, and the iteration is
- !    * terminated when \f$ \|p - p_n\| < \mbox{\texttt{tolerance}} \f$
-      */
-     static Point inverse_map (const Elem* elem,
- ! 			    const Point& p,
- ! 			    const Real tolerance);
-   
-   
-   
- ***************
- *** 448,456 ****
-      * the quadrature rule object of the current \p FE class.
-      * From this \p QBase*, it determines the necessary data,
-      * and @e builds two appropriate quadrature classes, one for radial,
- !    * and another for base integration.  Currently, for both
- !    * base and radial integration only Gaussian quadrature is 
- !    * available, but may be changed easily.
-      */
-     void attach_quadrature_rule (QBase* q);
-     
- --- 442,449 ----
-      * the quadrature rule object of the current \p FE class.
-      * From this \p QBase*, it determines the necessary data,
-      * and @e builds two appropriate quadrature classes, one for radial,
- !    * and another for base integration, using the convenient
- !    * \p QBase::build() method.
-      */
-     void attach_quadrature_rule (QBase* q);
-     
- ***************
- *** 460,499 ****
-      * for matrix assembly of the current element.
-      */
-     unsigned int n_quadrature_points () const
- !       { assert (radial_qrule != NULL); return _n_total_qp; };
- ! 
- !   /**
- !    * @returns the global first derivative of the phase term in
- !    * infinite elements, evaluated at the quadrature points.
- !    */
- !   const std::vector<Point>& get_dphase() const
- !       { return dphase; };
- ! 
- !   /**
- !    * @returns the multiplicative weight at each quadrature point.
- !    * This weight is used for certain infinite element weak 
- !    * formulations, so that @e weighted Sobolev spaces are
- !    * used for the trial function space.  This renders the
- !    * variational form easily computable.
- !    */
- !   const std::vector<Real>& get_Sobolev_weight() const
- !       { return weight; };
- ! 
- !   /**
- !    * @returns the first global derivative of the multiplicative 
- !    * weight at each quadrature point. See \p get_Sobolev_weight()
- !    * for details.
- !    */
- !   const std::vector<Point>& get_Sobolev_dweight() const
- !       { return dweight; };
-   
-     /**
-      * @returns the number of shape functions associated with
-      * this infinite element.
-      */
- !   unsigned int n_shape_functions () const { return _n_total_approx_sf; };
- ! 
- ! 
-   
-   
-   protected:
- --- 453,465 ----
-      * for matrix assembly of the current element.
-      */
-     unsigned int n_quadrature_points () const
- !       { assert (radial_qrule != NULL); return _n_total_qp; }
-   
-     /**
-      * @returns the number of shape functions associated with
-      * this infinite element.
-      */
- !   unsigned int n_shape_functions () const { return _n_total_approx_sf; }
-   
-   
-   protected:
- ***************
- *** 545,551 ****
-      * Do not use this derived member in \p InfFE<Dim,T_radial,T_map>.
-      */
-     void init_base_shape_functions(const QBase*, const Elem*)
- !       { error(); };
-   
-   
-   
- --- 511,517 ----
-      * Do not use this derived member in \p InfFE<Dim,T_radial,T_map>.
-      */
-     void init_base_shape_functions(const QBase*, const Elem*)
- !       { error(); }
-   
-   
-   
- ***************
- *** 553,559 ****
-     // The bigger internal methods used during assembly  
-     /** 
-      * Initialize all the data fields like \p weight, \p mode, 
- !    * \p dist, \p phi, \p dphidxi, \p dphideta, \p dphidzeta, etc.
-      * for the current element.  Of these data fields, only
-      * the ones that are independent of base approximation
-      * are evaluated.  For constant radial \p order in the mesh, 
- --- 519,525 ----
-     // The bigger internal methods used during assembly  
-     /** 
-      * Initialize all the data fields like \p weight, \p mode, 
- !    * \p phi, \p dphidxi, \p dphideta, \p dphidzeta, etc.
-      * for the current element.  Of these data fields, only
-      * the ones that are independent of base approximation
-      * are evaluated.  For constant radial \p order in the mesh, 
- ***************
- *** 569,574 ****
- --- 535,546 ----
-   			    const Elem* e,
-   			    const unsigned int s);
-   
- +   /**
- +    * Calculates the radial distances from the origin
- +    * to the base nodes.
- +    */
- +   void compute_dist(const Elem* inf_elem);
- + 
-     /** 
-      * Combines the base approximation, mapping etc. with
-      * the radial counterparts.  Has to be used every time
- ***************
- *** 627,655 ****
-   
-   
-   
- - 
- -   //--------------------------------------------------------------
- -   // protected members, which may be accessed from the outside through some inline functions
- -   /**
- -    * the first derivatives of the phase term in global coordinates,
- -    * over @e all quadrature points.
- -    */
- -   std::vector<Point> dphase;
- - 
- -   /**
- -    * the global derivative of the additional radial weight \f$ 1/{r^2} \f$,
- -    * over @e all quadrature points.
- -    */
- -   std::vector<Point> dweight;
- - 
- -   /**
- -    * the additional radial weight \f$ 1/{r^2} \f$ in local coordinates,
- -    * over @e all quadrature points.
- -    */
- -   std::vector<Real>  weight;
- - 
- - 
- - 
-     //--------------------------------------------------------------
-     // protected members, which are not to be accessed from outside
-     /**
- --- 599,604 ----
- ***************
- *** 729,734 ****
- --- 678,688 ----
-     // some protected members
-   
-     /**
- +    * The Number of base shape functions used to construct the map.
- +    */
- +   unsigned int n_base_mapping_shape_functions;
- + 
- +   /**
-      * The number of total approximation shape functions for 
-      * the current configuration
-      */
- ***************
- *** 794,861 ****
-   
-   // ------------------------------------------------------------
-   // InfFE class inline members
- - template <unsigned int Dim, FEFamily T_radial, InfMapType T_base>
- - inline
- - bool InfFE<Dim,T_radial,T_base>::is_InfFE_elem(const ElemType et)
- - {
-   
- -   switch (et)
- -   {
- -     case INFEDGE2:
- -     case INFQUAD4:
- -     case INFQUAD6:
- -     case INFHEX8:
- -     case INFHEX16:
- -     case INFHEX18:
- -     case INFPRISM6:
- -     case INFPRISM12:
- -       {
- -         return true;
- -       };
- - 
- -     default:
- -       { 
- - 	return false;
- -       };
- - 
- -   };
- - 
- - };
- - 
- - 
- - 
- - template <unsigned int Dim, FEFamily T_radial, InfMapType T_base>
- - inline
- - void InfFE<Dim,T_radial,T_base>::update_base_elem (const Elem* inf_elem)
- - {
- -   if (base_elem != NULL)
- -     delete base_elem;
- -   base_elem = Base::build_elem(inf_elem);
- - };
-   
-   
-   
-   // ------------------------------------------------------------
-   // InfFE::Radial class inline members
- ! template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
- ! inline
- ! Real InfFE<Dim,T_radial,T_map>::Radial::decay(const Real v)
- ! {
-     switch (Dim)
-     //TODO:[DD] What decay do i have in 2D and 1D?
-     {
- !     case 3:
- !       return (1.-v)/2.;
- !     case 2:
- !       return 0.;
- !     case 1:
- !       return 0.;
- !     default:
- !       error();
- !       return 0.;
- !   };
- ! };
- ! 
-   
-   
-   template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
- --- 748,780 ----
-   
-   // ------------------------------------------------------------
-   // InfFE class inline members
-   
-   
-   
-   
-   // ------------------------------------------------------------
-   // InfFE::Radial class inline members
- ! 
- ! /*
- !   template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
- !   inline
- !   Real InfFE<Dim,T_radial,T_map>::Radial::decay(const Real v)
- !   {
-     switch (Dim)
-     //TODO:[DD] What decay do i have in 2D and 1D?
-     {
- !   case 3:
- !    return (1.-v)/2.;
- !   case 2:
- !    return 0.;
- !   case 1:
- !    return 0.;
- !   default:
- !    error();
- !   return 0.;
- !    }
- !   }
- ! */
-   
-   
-   template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
- ***************
- *** 878,884 ****
-        * have the (1-v)/2 mode, associated to the base
-        */
-       return static_cast<unsigned int>(o_radial);
- ! };
-   
-   
-   
- --- 797,803 ----
-        * have the (1-v)/2 mode, associated to the base
-        */
-       return static_cast<unsigned int>(o_radial);
- ! }
-   
-   
-   
- ***************
- *** 886,904 ****
-   
-   // ------------------------------------------------------------
-   // InfFE::Base class inline members
- - template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
- - inline
- - FEType InfFE<Dim,T_radial,T_map>::Base::build_fe_type (const FEType& inf_fe_type)
- - {
- -   FEType tmp(INVALID_ORDER, 
- - 	     INVALID_FE, 
- - 	     inf_fe_type.base_order, 
- - 	     inf_fe_type.base_family, 
- - 	     INVALID_INF_MAP );
- -   return tmp; 
- - };
- - 
- - 
-   
-   
-   
- --- 805,810 ----
- Index: include/inf_fe_macro.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/inf_fe_macro.h,v
- retrieving revision 1.2
- retrieving revision 1.3
- diff -c -r1.2 -r1.3
- *** include/inf_fe_macro.h	26 Jan 2003 18:20:14 -0000	1.2
- --- include/inf_fe_macro.h	5 Feb 2003 20:51:37 -0000	1.3
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 40,46 ****
-                                              template  class InfFE< _dim, JACOBI_20_00, _map_type >; \
-                                              template  class InfFE< _dim, JACOBI_30_00, _map_type >; \
-                                              template  class InfFE< _dim, LEGENDRE,     _map_type >; \
- !                                            template  class InfFE< _dim, INF_LAGRANGE, _map_type >; 
-   
-   
-   
- --- 40,46 ----
-                                              template  class InfFE< _dim, JACOBI_20_00, _map_type >; \
-                                              template  class InfFE< _dim, JACOBI_30_00, _map_type >; \
-                                              template  class InfFE< _dim, LEGENDRE,     _map_type >; \
- !                                            template  class InfFE< _dim, LAGRANGE,     _map_type >; 
-   
-   
-   
- Index: include/mesh.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/mesh.h,v
- retrieving revision 1.8
- retrieving revision 1.9
- diff -c -r1.8 -r1.9
- *** include/mesh.h	3 Feb 2003 03:51:49 -0000	1.8
- --- include/mesh.h	20 Feb 2003 04:59:58 -0000	1.9
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 141,154 ****
-      * an ASCII file.
-      */
-     void read_xdr_soln(const std::string& name,
- ! 		     std::vector<Complex>& soln,
-   		     std::vector<std::string>& var_names);
-   
-     /**
-      * Same, but expects a true XDR-Encoded binary file.
-      */
-     void read_xdr_soln_binary(const std::string& name,
- ! 			    std::vector<Complex>& soln,
-   			    std::vector<std::string>& var_names);
-     
-     /** 
- --- 141,154 ----
-      * an ASCII file.
-      */
-     void read_xdr_soln(const std::string& name,
- ! 		     std::vector<Number>& soln,
-   		     std::vector<std::string>& var_names);
-   
-     /**
-      * Same, but expects a true XDR-Encoded binary file.
-      */
-     void read_xdr_soln_binary(const std::string& name,
- ! 			    std::vector<Number>& soln,
-   			    std::vector<std::string>& var_names);
-     
-     /** 
- ***************
- *** 167,173 ****
-      * proper method by the file extension. Also writes data.
-      */
-     void write(const std::string& name,
- ! 	     std::vector<Complex>& values,
-   	     std::vector<std::string>& variable_names);
-     
-     /**
- --- 167,173 ----
-      * proper method by the file extension. Also writes data.
-      */
-     void write(const std::string& name,
- ! 	     std::vector<Number>& values,
-   	     std::vector<std::string>& variable_names);
-     
-     /**
- ***************
- *** 198,211 ****
-      * solution file format.  Writes an ASCII file.
-      */
-     void write_xdr_soln(const std::string& name,
- ! 		      std::vector<Complex>& soln,
-   		      std::vector<std::string>& var_names);
-   
-     /**
-      * Same, but writes an XDR-Encoded binary file.
-      */
-     void write_xdr_soln_binary(const std::string& name,
- ! 			     std::vector<Complex>& soln,
-   			     std::vector<std::string>& var_names);
-   
-     /**
- --- 198,211 ----
-      * solution file format.  Writes an ASCII file.
-      */
-     void write_xdr_soln(const std::string& name,
- ! 		      std::vector<Number>& soln,
-   		      std::vector<std::string>& var_names);
-   
-     /**
-      * Same, but writes an XDR-Encoded binary file.
-      */
-     void write_xdr_soln_binary(const std::string& name,
- ! 			     std::vector<Number>& soln,
-   			     std::vector<std::string>& var_names);
-   
-     /**
- Index: include/mesh_base.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/mesh_base.h,v
- retrieving revision 1.8
- retrieving revision 1.19
- diff -c -r1.8 -r1.19
- *** include/mesh_base.h	3 Feb 2003 03:51:49 -0000	1.8
- --- include/mesh_base.h	21 Feb 2003 18:31:29 -0000	1.19
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 33,39 ****
-   // forward declarations
-   class Elem;
-   class EquationSystems;
- ! class PetscMatrix;
-   
-   
-   // Local Includes -----------------------------------
- --- 33,39 ----
-   // forward declarations
-   class Elem;
-   class EquationSystems;
- ! template <typename T> class PetscMatrix;
-   
-   
-   // Local Includes -----------------------------------
- ***************
- *** 41,50 ****
-   #include "node.h"
-   #include "enum_elem_type.h"
-   #include "sphere.h"
- - #include "perf_log.h"
-   #include "enum_order.h"
- ! 
- ! 
-   
-   
-   /**
- --- 41,49 ----
-   #include "node.h"
-   #include "enum_elem_type.h"
-   #include "sphere.h"
-   #include "enum_order.h"
- ! #include "elem_iterators.h"
- ! #include "node_iterators.h"
-   
-   
-   /**
- ***************
- *** 60,66 ****
-    *
-    * \author Benjamin S. Kirk
-    * \date 2002-2003
- !  * \version $Revision: 1.4 $
-    */
-   
-   
- --- 59,65 ----
-    *
-    * \author Benjamin S. Kirk
-    * \date 2002-2003
- !  * \version $Revision: 1.4 $
-    */
-   
-   
- ***************
- *** 95,117 ****
-      * Returns the logical dimension of the mesh.
-      */
-     unsigned int mesh_dimension() const
- !   { return static_cast<unsigned int>(_dim); };
-     
-     /**
-      * Returns the spatial dimension of the mesh.
-      */
-     unsigned int spatial_dimension() const
- !   { return static_cast<unsigned int>(DIM); };
-     
-     /**
-      * Returns the number of nodes in the mesh.
-      */
- !   unsigned int n_nodes() const { return _nodes.size(); };
-   
-     /**
-      * Returns the number of elements in the mesh.
-      */
- !   unsigned int n_elem()  const { return _elements.size(); };
-   
-     /**
-      * Returns the number of active elements in the mesh.
- --- 94,116 ----
-      * Returns the logical dimension of the mesh.
-      */
-     unsigned int mesh_dimension() const
- !   { return static_cast<unsigned int>(_dim); }
-     
-     /**
-      * Returns the spatial dimension of the mesh.
-      */
-     unsigned int spatial_dimension() const
- !   { return static_cast<unsigned int>(DIM); }
-     
-     /**
-      * Returns the number of nodes in the mesh.
-      */
- !   unsigned int n_nodes() const { return _nodes.size(); }
-   
-     /**
-      * Returns the number of elements in the mesh.
-      */
- !   unsigned int n_elem()  const { return _elements.size(); }
-   
-     /**
-      * Returns the number of active elements in the mesh.
- ***************
- *** 162,167 ****
- --- 161,171 ----
-     const Point& point(const unsigned int i) const;
-     
-     /**
- +    * Return a reference to the \f$ i^{th} \f$ node.
- +    */  
- +   Node& node(const unsigned int i);
- + 
- +   /**
-      * Return a constant reference (for reading only) to the
-      * \f$ i^{th} \f$ node.
-      */  
- ***************
- *** 170,176 ****
-     /**
-      * Return a constant reference to the \p nodes vector holding the nodes.
-      */
- !   const std::vector<Node*> & get_nodes () const { return _nodes; };
-   
-     /**
-      * Add \p Node \p n to the vertex array, optionally at the specified position \p nn.
- --- 174,180 ----
-     /**
-      * Return a constant reference to the \p nodes vector holding the nodes.
-      */
- !   const std::vector<Node*> & get_nodes () const { return _nodes; }
-   
-     /**
-      * Add \p Node \p n to the vertex array, optionally at the specified position \p nn.
- ***************
- *** 186,192 ****
-     /**
-      * Return a reference to the \p cells vector holding the elements.
-      */
- !   const std::vector<Elem*> & get_elem () const { return _elements; };
-   
-     /**
-      * Add elem \p e to the elem array.
- --- 190,196 ----
-     /**
-      * Return a reference to the \p cells vector holding the elements.
-      */
- !   const std::vector<Elem*> & get_elem () const { return _elements; }
-   
-     /**
-      * Add elem \p e to the elem array.
- ***************
- *** 210,220 ****
-   
-     /**
-      * Build infinite elements atop a volume-based mesh,
- !    * determine origin automatically.  When symmetry planes
- !    * are present, use the version with optional symmetry
- !    * switches.
-      */
- !   void build_inf_elem();
-     
-     /**
-      * Build infinite elements atop a volume-based mesh.
- --- 214,228 ----
-   
-     /**
-      * Build infinite elements atop a volume-based mesh,
- !    * determine origin automatically.  Also returns the
- !    * origin as a \p const \p Point to make it more obvious that
- !    * the origin should not change after the infinite elements 
- !    * have been built.  When symmetry planes are present, use 
- !    * the version with optional symmetry switches.
- !    *   
- !    * The flag \p be_verbose enables some diagnostic output.
-      */
- !   const Point build_inf_elem(const bool be_verbose = false);
-     
-     /**
-      * Build infinite elements atop a volume-based mesh.
- ***************
- *** 347,360 ****
-      * valence of each node is on the diagonal and there is a -1 for each
-      * node connected to the node.
-      */
- !   void build_L_graph (PetscMatrix& conn) const;
-     
-     /**
-      * Builds the connectivity graph. The matrix \p conn is such that the
-      * valence of each node is on the diagonal and there is a -1 for each
-      * node connected to the node.
-      */
- !   void build_script_L_graph (PetscMatrix& conn) const;
-     
-     /**
-      * Returns the number of subdomains in the global mesh. Note that it is
- --- 355,368 ----
-      * valence of each node is on the diagonal and there is a -1 for each
-      * node connected to the node.
-      */
- !   void build_L_graph (PetscMatrix<Number>& conn) const;
-     
-     /**
-      * Builds the connectivity graph. The matrix \p conn is such that the
-      * valence of each node is on the diagonal and there is a -1 for each
-      * node connected to the node.
-      */
- !   void build_script_L_graph (PetscMatrix<Number>& conn) const;
-     
-     /**
-      * Returns the number of subdomains in the global mesh. Note that it is
- ***************
- *** 363,381 ****
-      * processor.
-      *
-      */
- !   unsigned int n_subdomains() const { return _n_sbd; };
-   
-     /**
-      * @returns the number of processors used in the
-      * current simulation.
-      */
- !   unsigned int n_processors() const { return _n_proc; };
-   
-   
-     /**
-      * @returns the subdomain id for this processor.
-      */
- !   unsigned int processor_id() const { return _proc_id; };
-     
-   
-     //-------------------------------------------------------------------------
- --- 371,389 ----
-      * processor.
-      *
-      */
- !   unsigned int n_subdomains() const { return _n_sbd; }
-   
-     /**
-      * @returns the number of processors used in the
-      * current simulation.
-      */
- !   unsigned int n_processors() const { return _n_proc; }
-   
-   
-     /**
-      * @returns the subdomain id for this processor.
-      */
- !   unsigned int processor_id() const { return _proc_id; }
-     
-   
-     //-------------------------------------------------------------------------
- ***************
- *** 435,441 ****
-      * proper method by the file extension. Also writes data.
-      */
-     virtual void write(const std::string& name,
- ! 		     std::vector<Complex>& values,
-   		     std::vector<std::string>& variable_names);
-     
-     /**
- --- 443,449 ----
-      * proper method by the file extension. Also writes data.
-      */
-     virtual void write(const std::string& name,
- ! 		     std::vector<Number>& values,
-   		     std::vector<std::string>& variable_names);
-     
-     /**
- ***************
- *** 451,457 ****
-      * in addition to the mesh.
-      */
-     void write_tecplot(const std::string& name,
- ! 		     const std::vector<Complex>* v=NULL,
-   		     const std::vector<std::string>* solution_names=NULL);
-     
-     /**
- --- 459,465 ----
-      * in addition to the mesh.
-      */
-     void write_tecplot(const std::string& name,
- ! 		     const std::vector<Number>* v=NULL,
-   		     const std::vector<std::string>* solution_names=NULL);
-     
-     /**
- ***************
- *** 471,477 ****
-      * is not present this function will simply call the ASCII output version.
-      */
-     void write_tecplot_binary(const std::string& name,
- ! 			    const std::vector<Complex>* v=NULL,
-   			    const std::vector<std::string>* solution_names=NULL);
-   
-     /**
- --- 479,485 ----
-      * is not present this function will simply call the ASCII output version.
-      */
-     void write_tecplot_binary(const std::string& name,
- ! 			    const std::vector<Number>* v=NULL,
-   			    const std::vector<std::string>* solution_names=NULL);
-   
-     /**
- ***************
- *** 499,505 ****
-      * write the partitioning information.
-      */
-     void write_gmv(const std::string& name,
- ! 		 const std::vector<Complex>* v=NULL,
-   		 const std::vector<std::string>* solution_names=NULL,
-   		 const bool write_partitioning=false);
-     
- --- 507,513 ----
-      * write the partitioning information.
-      */
-     void write_gmv(const std::string& name,
- ! 		 const std::vector<Number>* v=NULL,
-   		 const std::vector<std::string>* solution_names=NULL,
-   		 const bool write_partitioning=false);
-     
- ***************
- *** 522,528 ****
-      * write the partitioning information.
-      */
-     void write_gmv_binary(const std::string& name,
- ! 			const std::vector<Complex>* v=NULL,
-   			const std::vector<std::string>* solution_names=NULL,
-   			const bool write_partitioning=false);
-   
- --- 530,536 ----
-      * write the partitioning information.
-      */
-     void write_gmv_binary(const std::string& name,
- ! 			const std::vector<Number>* v=NULL,
-   			const std::vector<std::string>* solution_names=NULL,
-   			const bool write_partitioning=false);
-   
- ***************
- *** 538,555 ****
-      */
-     void print_info() const;
-     
- -   /**
- -    * @returns the performance data (and possibly the information
- -    * header) as a string.
- -    */
- -   std::string get_performance_info () const { return _perf_log.get_log(); };
- - 
- -   /**
- -    * @returns ONLY the performance information, never the header.
- -    */
- -   std::string get_performance_info_no_header () const { return _perf_log.get_perf_info(); }
- - 
- - 
-   
-   #ifdef USE_COMPLEX_NUMBERS
-   
- --- 546,551 ----
- ***************
- *** 559,583 ****
-      * part.
-      */
-     const char* complex_filename(const std::string& _n,
- ! 			       unsigned int r_o_c=0);
-   
-     /**
-      * Prepare complex data for writing.
-      */
- !   void prepare_complex_data(const std::vector<Complex>* source,
-   			    std::vector<Real>* real_part,
- ! 			    std::vector<Real>* imag_part);
-   
-   #endif
-   
-   
-   
- ! protected:
-   
-     /**
- !    * Return a read/write reference to the \f$ i^{th} \f$ node.
- !    */  
- !   Node& node(const unsigned int i);
-   
-     /**
-      * Return a pointer to the \f$ i^{th} \f$ node.
- --- 555,659 ----
-      * part.
-      */
-     const char* complex_filename(const std::string& _n,
- ! 			       unsigned int r_o_c=0) const;
-   
-     /**
-      * Prepare complex data for writing.
-      */
- !   void prepare_complex_data(const std::vector<Number>* source,
-   			    std::vector<Real>* real_part,
- ! 			    std::vector<Real>* imag_part) const;
-   
-   #endif
-   
-   
- +   /**
- +    * This typedef is for convenience.  It allows you to get
- +    * a pair of std::vector<Elem*>::iterators without
- +    * writing so much stuff.
- +    */
- +   typedef std::pair<std::vector<Elem*>::iterator,
- + 		    std::vector<Elem*>::iterator> ElemPair;
- + 
- +   /**
- +    * This typedef is for convenience.  It allows you to get
- +    * a pair of std::vector<Elem*>::const_iterators without
- +    * writing so much stuff.
- +    */
- +   typedef std::pair<std::vector<Elem*>::const_iterator,
- + 		    std::vector<Elem*>::const_iterator> ConstElemPair;
- +   
- +   /**
- +    * Returns a pair of std::vector<Elem*>::iterators which point
- +    * to the beginning and end of the _elements vector.
- +    */
- +   ElemPair elements_begin()  { return ElemPair (_elements.begin(), _elements.end());  }
-   
- !   /**
- !    * Returns a pair of std::vector<Elem*>::const_iterators which point
- !    * to the beginning and end of the _elements vector.
- !    */
- !   ConstElemPair elements_begin() const  { return ConstElemPair (_elements.begin(), _elements.end());  }
-   
-     /**
- !    * Returns a pair of std::vector<Elem*>::iterators which point
- !    * to the end of the _elements vector.  This simulates a normal
- !    * end() iterator.
- !    */
- !   ElemPair elements_end()  { return ElemPair (_elements.end(), _elements.end());  }
- !   
- !   /**
- !    * Returns a pair of std::vector<Elem*>::const_iterators which point
- !    * to the end of the _elements vector.  This simulates a normal
- !    * end() const_iterator.
- !    */
- !   ConstElemPair elements_end() const  { return ConstElemPair (_elements.end(), _elements.end());  }
- ! 
- !   /**
- !    * This typedef is for convenience.  It allows you to get
- !    * a pair of std::vector<Node*>::iterators without
- !    * writing so much stuff.
- !    */
- !   typedef std::pair<std::vector<Node*>::iterator,
- ! 		    std::vector<Node*>::iterator> NodePair;
- ! 
- !   /**
- !    * This typedef is for convenience.  It allows you to get
- !    * a pair of std::vector<Node*>::const_iterators without
- !    * writing so much stuff.
- !    */
- !   typedef std::pair<std::vector<Node*>::const_iterator,
- ! 		    std::vector<Node*>::const_iterator> ConstNodePair;
- !   
- !   /**
- !    * Returns a pair of std::vector<Node*>::iterators which point
- !    * to the beginning and end of the _nodeents vector.
- !    */
- !   NodePair nodes_begin()  { return NodePair (_nodes.begin(), _nodes.end());  }
- ! 
- !   /**
- !    * Returns a pair of std::vector<Node*>::const_iterators which point
- !    * to the beginning and end of the _nodes vector.
- !    */
- !   ConstNodePair nodes_begin() const  { return ConstNodePair (_nodes.begin(), _nodes.end());  }
- ! 
- !   /**
- !    * Returns a pair of std::vector<Node*>::iterators which point
- !    * to the end of the _nodes vector.  This simulates a normal
- !    * end() iterator.
- !    */
- !   NodePair nodes_end()  { return NodePair (_nodes.end(), _nodes.end());  }
- !   
- !   /**
- !    * Returns a pair of std::vector<Node*>::const_iterators which point
- !    * to the end of the _nodes vector.  This simulates a normal
- !    * end() const_iterator.
- !    */
- !   ConstNodePair nodes_end() const  { return ConstNodePair (_nodes.end(), _nodes.end());  }
- !   
- !   
- !   
- ! protected:
-   
-     /**
-      * Return a pointer to the \f$ i^{th} \f$ node.
- ***************
- *** 631,647 ****
-      * ASCII text file to a stream.
-      */
-     void write_tecplot(std::ostream& out,
- ! 		     const std::vector<Real>* v=NULL,
-   		     const std::vector<std::string>* solution_names=NULL);
-   
-     /**
- -    * Actual implementation of writing a Tecplot-formatted binary file.
- -    */
- -   void do_write_tecplot_binary(const std::string& name,
- - 			       const std::vector<Real>* v=NULL,
- - 			       const std::vector<std::string>* solution_names=NULL);
- - 
- -   /**
-      * Actual implementation of writing a mesh in AVS's UCD format.
-      */
-     void write_ucd(std::ostream& out);
- --- 707,716 ----
-      * ASCII text file to a stream.
-      */
-     void write_tecplot(std::ostream& out,
- ! 		     const std::vector<Number>* v=NULL,
-   		     const std::vector<std::string>* solution_names=NULL);
-   
-     /**
-      * Actual implementation of writing a mesh in AVS's UCD format.
-      */
-     void write_ucd(std::ostream& out);
- ***************
- *** 658,664 ****
-      * Actual implementation of writing a mesh in the GMV ASCII format.
-      */
-     void write_gmv(std::ostream& out,
- ! 		 const std::vector<Complex>* v=NULL,
-   		 const std::vector<std::string>* solution_names=NULL,
-   		 const bool write_partitioning=false);
-   
- --- 727,733 ----
-      * Actual implementation of writing a mesh in the GMV ASCII format.
-      */
-     void write_gmv(std::ostream& out,
- ! 		 const std::vector<Number>* v=NULL,
-   		 const std::vector<std::string>* solution_names=NULL,
-   		 const bool write_partitioning=false);
-   
- ***************
- *** 675,681 ****
-      * Actual implementation of writing a mesh in the GMV binary format.
-      */
-     void write_gmv_binary(std::ostream& out,
- ! 			const std::vector<Complex>* v=NULL,
-   			const std::vector<std::string>* solution_names=NULL,
-   			const bool write_partitioning=false);
-   
- --- 744,750 ----
-      * Actual implementation of writing a mesh in the GMV binary format.
-      */
-     void write_gmv_binary(std::ostream& out,
- ! 			const std::vector<Number>* v=NULL,
-   			const std::vector<std::string>* solution_names=NULL,
-   			const bool write_partitioning=false);
-   
- ***************
- *** 686,697 ****
-     /**
-      * Returns a writeable reference to the number of subdomains.
-      */
- !   unsigned int& set_n_subdomains() { return _n_sbd; };
-   
-     /**
-      * Returns a writeable reference to the number of processors.
-      */
- !   unsigned int& set_n_processors() { return _n_proc; };
-   
-     /**
-      * Reads input from \p in, skipping all the lines
- --- 755,766 ----
-     /**
-      * Returns a writeable reference to the number of subdomains.
-      */
- !   unsigned int& set_n_subdomains() { return _n_sbd; }
-   
-     /**
-      * Returns a writeable reference to the number of processors.
-      */
- !   unsigned int& set_n_processors() { return _n_proc; }
-   
-     /**
-      * Reads input from \p in, skipping all the lines
- ***************
- *** 728,740 ****
-     /**
-      * The processor id.
-      */
- !   const unsigned int _proc_id;
- !   
- !   /**
- !    * A performance logger.
- !    */
- !   PerfLog _perf_log;
- !   
-   };
-   
-   
- --- 797,803 ----
-     /**
-      * The processor id.
-      */
- !   const unsigned int _proc_id;  
-   };
-   
-   
- ***************
- *** 748,754 ****
-     assert (_elements[i] != NULL);
-     
-     return _elements[i];
- ! };
-   
-   
-   
- --- 811,817 ----
-     assert (_elements[i] != NULL);
-     
-     return _elements[i];
- ! }
-   
-   
-   
- ***************
- *** 760,766 ****
-     assert (_nodes[i]->id() != Node::invalid_id);  
-   
-     return (*_nodes[i]);
- ! };
-   
-   
-   
- --- 823,829 ----
-     assert (_nodes[i]->id() != Node::invalid_id);  
-   
-     return (*_nodes[i]);
- ! }
-   
-   
-   
- ***************
- *** 772,778 ****
-     assert (_nodes[i]->id() != Node::invalid_id);  
-     
-     return (*_nodes[i]);
- ! };
-   
-   
-   
- --- 835,841 ----
-     assert (_nodes[i]->id() != Node::invalid_id);  
-     
-     return (*_nodes[i]);
- ! }
-   
-   
-   
- ***************
- *** 791,797 ****
-     assert (_nodes[i] != NULL);
-   
-     return (*_nodes[i]);
- ! };
-   
-   
-   
- --- 854,860 ----
-     assert (_nodes[i] != NULL);
-   
-     return (*_nodes[i]);
- ! }
-   
-   
-   
- ***************
- *** 803,809 ****
-     assert (_nodes[i]->id() != Node::invalid_id);  
-     
-     return _nodes[i];
- ! };
-   
-   
-   
- --- 866,872 ----
-     assert (_nodes[i]->id() != Node::invalid_id);  
-     
-     return _nodes[i];
- ! }
-   
-   
-   
- ***************
- *** 813,819 ****
-     assert (i < n_nodes());
-   
-     return _nodes[i];
- ! };
-   
-   
-   
- --- 876,882 ----
-     assert (i < n_nodes());
-   
-     return _nodes[i];
- ! }
-   
-   
-   
- Index: include/mesh_common.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/mesh_common.h,v
- retrieving revision 1.7
- retrieving revision 1.8
- diff -c -r1.7 -r1.8
- *** include/mesh_common.h	4 Feb 2003 00:49:09 -0000	1.7
- --- include/mesh_common.h	20 Feb 2003 04:59:58 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 25,30 ****
- --- 25,31 ----
-   
-   // C++ includes everyone should know about
-   #include <iostream>
- + #include <complex>
-   #include <assert.h>
-   #include <stdlib.h>
-   
- ***************
- *** 32,38 ****
-   #include "mesh_config.h"
-   
-   
- !   
-   #ifdef Real
-   #  undef Real
-   #endif
- --- 33,40 ----
-   #include "mesh_config.h"
-   
-   
- ! 
- ! // Undefine any existing macros
-   #ifdef Real
-   #  undef Real
-   #endif
- ***************
- *** 50,84 ****
-   #endif
-   
-   
-   #ifndef SINGLE_PRECISION
-     typedef double Real;
-     typedef double REAL;
- - #  ifdef USE_COMPLEX_NUMBERS
- - #    include <complex>
- -      typedef std::complex<double> Complex;
- -      typedef std::complex<double> COMPLEX;
- - #  else
- -      typedef double Complex;
- -      typedef double COMPLEX;
- - #  endif
-   #else
-     typedef float Real;
-     typedef float REAL;
- - #  ifdef USE_COMPLEX_NUMBERS
- -      // this is _not_ supported by PETSc!
- -      CHOKE_THIS!
- - #  else
- -      typedef float Complex;
- -      typedef float COMPLEX;
- - #  endif
-   #endif
-   
-   
-   #undef here
-   #undef error
-   #define here()     { std::cout << __FILE__ << ", line " << __LINE__ << std::endl; }
-   #define error()    { here(); abort(); }
- ! #define untested() { std::cout << "*** Using untested code: " << __FILE__ << ", line " << __LINE__ << std::endl; }
-   
-   
-   // 3D spatial dimension unless otherwise specified
- --- 52,90 ----
-   #endif
-   
-   
- + // Define the type to use for real numbers
-   #ifndef SINGLE_PRECISION
-     typedef double Real;
-     typedef double REAL;
-   #else
-     typedef float Real;
-     typedef float REAL;
-   #endif
-   
- + // Define the type to use for complex numbers
- + // Always use std::complex<double>, as required by Petsc
- + typedef std::complex<double> Complex;
- + typedef std::complex<double> COMPLEX;
- + 
- + 
- + // Define the value type for unknowns in simulations.
- + // This is either Real or Complex, depending on how
- + // the library was configures
- + #if   defined (USE_REAL_NUMBERS)
- +   typedef Real Number;
- + #elif defined (USE_COMPLEX_NUMBERS)
- +   typedef Complex Number;
- + #else
- +   DIE A HORRIBLE DEATH HERE...
- + #endif
- + 
- + 
-   
-   #undef here
-   #undef error
-   #define here()     { std::cout << __FILE__ << ", line " << __LINE__ << std::endl; }
-   #define error()    { here(); abort(); }
- ! #define untested() { std::cout << "*** Using untested code: " << __FILE__ << ", line " << __LINE__ << " ***" << std::endl; }
-   
-   
-   // 3D spatial dimension unless otherwise specified
- Index: include/mesh_config.h.in
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/mesh_config.h.in,v
- retrieving revision 1.1
- retrieving revision 1.5
- diff -c -r1.1 -r1.5
- *** include/mesh_config.h.in	20 Jan 2003 18:52:22 -0000	1.1
- --- include/mesh_config.h.in	20 Feb 2003 04:59:58 -0000	1.5
- ***************
- *** 39,49 ****
-   /* Define to 1 if you have the <inttypes.h> header file. */
-   #undef HAVE_INTTYPES_H
-   
- ! /* Define to 1 if you have the `papi' library (-lpapi). */
- ! #undef HAVE_LIBPAPI
- ! 
- ! /* Define to 1 if you have the `perfctr' library (-lperfctr). */
- ! #undef HAVE_LIBPERFCTR
-   
-   /* Define to 1 if you have the <locale> header file. */
-   #undef HAVE_LOCALE
- --- 39,46 ----
-   /* Define to 1 if you have the <inttypes.h> header file. */
-   #undef HAVE_INTTYPES_H
-   
- ! /* Flag indicating whether or not LASPACK iterative solvers are available */
- ! #undef HAVE_LASPACK
-   
-   /* Define to 1 if you have the <locale> header file. */
-   #undef HAVE_LOCALE
- ***************
- *** 54,65 ****
-   /* Flag indicating whether or not Metis is available */
-   #undef HAVE_METIS
-   
-   /* Flag indicating whether the library shall be compiled to support netcdf
-      files */
-   #undef HAVE_NETCDF
-   
- ! /* Define to 1 if you have the <papi.h> header file. */
- ! #undef HAVE_PAPI_H
-   
-   /* Flag indicating whether or not Petsc is available */
-   #undef HAVE_PETSC
- --- 51,65 ----
-   /* Flag indicating whether or not Metis is available */
-   #undef HAVE_METIS
-   
- + /* Flag indicating whether or not MPI is available */
- + #undef HAVE_MPI
- + 
-   /* Flag indicating whether the library shall be compiled to support netcdf
-      files */
-   #undef HAVE_NETCDF
-   
- ! /* Define to 1 if you have the <ostream> header file. */
- ! #undef HAVE_OSTREAM
-   
-   /* Flag indicating whether or not Petsc is available */
-   #undef HAVE_PETSC
- ***************
- *** 118,120 ****
- --- 118,123 ----
-   
-   /* Flag indicating if the library should be built using complex numbers */
-   #undef USE_COMPLEX_NUMBERS
- + 
- + /* Flag indicating if the library should be built using real numbers */
- + #undef USE_REAL_NUMBERS
- Index: include/mesh_documentation.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/mesh_documentation.h,v
- retrieving revision 1.4
- diff -c -r1.4 mesh_documentation.h
- *** include/mesh_documentation.h	24 Jan 2003 17:24:38 -0000	1.4
- --- include/mesh_documentation.h	21 Feb 2003 20:53:40 -0000
- ***************
- *** 1,144 ****
-   //---------------------------------------------------
-   // Main page documentation
-   /**
- !  * \mainpage libMesh Documentation
- !  *
- !  * \section intro Introduction
- !  *
- !  * The \p libMesh library is a C++ framework for the numerical
- !  * simulation of partial differential equations on serial and parallel
- !  * platforms.  Development began in March 2002 with the intent of
- !  * providing a friendly interface to a number of high-quality software
- !  * packages that are currently available.  Currently the library
- !  * supports 2D and 3D steady and transient finite element simulations.
- !  * \p PETSc (http://www-fp.mcs.anl.gov/petsc) is currently used for
- !  * the solution of linear systems on both serial and parallel
- !  * platforms, however the extensibility of the library allows for
- !  * other solvers to be added with ease.
- !  *
- !  * A major goal of the library is to provide support for adaptive mesh
- !  * refinement (AMR) computations in parallel while allowing a research
- !  * scientist to focus on the physics they are modelling.  The library
- !  * currently offers:
- !  *
- !  *   - Partitioning Algorithms
- !  *     - Metis K-Way weighted graph partitioning
- !  *     - Hilbert and Morton-ordered space filling curves
- !  *
- !  *  - Generic 2D Finite Elements
- !  *     - 3 and 6 noded triangles (\p Tri3, \p Tri6)
- !  *     - 4, 8, and 9 noded quadrilaterals (\p Quad4, \p Quad8, \p Quad9)
- !  *     - 4 and 6 noded infinite quadrilaterals (\p InfQuad4, \p InfQuad6)
- !  *
- !  *  - Generic 3D Finite Elements
- !  *     - 4 and 10 noded tetrahedrals (\p Tet4, \p Tet10)
- !  *     - 8, 20, and 27 noded hexahedrals (\p Hex8, \p Hex20, \p Hex27)
- !  *     - 6 noded prisms (\p Prism6)
- !  *     - 5 noded pyramids (\p Pyramid5)
- !  *     - 8, 16, and 18 noded infinite hexahedrals (\p InfHex8,
- !  *         \p InfHex16, \p InfHex18)
- !  *     - 6 and 12 noded infinite prisms (\p InfPrism6, \p InfPrism12)
- !  *
- !  *  - Generic Finite Element Families
- !  *     - Lagrange
- !  *     - Hierarchic
- !  *     - Discontinuous Monomials
- !  *
- !  *  - Mesh IO & Format Translation Utilities
- !  *     - Ideas Universal (UNV) format (.unv)
- !  *     - Sandia National Labs ExodusII format (.exd)
- !  *     - Amtec Engineering's Tecplot binary format (.plt)
- !  *     - Amtec Engineering's Tecplot ascii format (.dat)
- !  *     - Los Alamos National Labs GMV format (.gmv)
- !  *     - AVS Unstructured UCD format (.ucd)
- !  *
- !  * \p libMesh is actively developed at The University ot Texas at
- !  * Austin in the CFDLab and at Technische Universit&auml;t Hamburg-Harburg,
- !  * Mechanics and Ocean Engineering in Germany.  Many thanks to SourceForge 
- !  * for hosting the project at http://sourceforge.net/projects/libmesh
- !  *
- !  *
- !  * \section install Installation
- !  *
- !  *
- !  *
- !  * \subsection getsoftware Getting the Software
- !  *
- !  * The \p libMesh source can be downloaded from the project's SourceForge
- !  * homepage: http://sourceforge.net/projects/libmesh  Stable releases are
- !  * located there as compressed tar archives. You may also access the CVS
- !  * source tree for the latest code.  You can get read-only access to the
- !  * CVS repository via:
- !  * \verbatim
-        cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/libmesh co libmesh \endverbatim
- !  * If you would like to contribute to the project you will need a
- !  * SourceForge developer account.
- !  *
- !  *
- !  *
- !  * \subsection compilers Compilers
- !  *
- !  * The library is known to work with the following compilers:
- !  *
- !  *
- !  * - GNU GCC
- !  *   - gcc-3.2
- !  *   - gcc-2.95.3
- !  *   - gcc-2.96 (RedHat's compiler in the 7.x series)
- !  *
- !  * - Intel ICC/ECC
- !  *   - icc/ifc 7.0
- !  *   - icc/ifc 6.0
- !  *   - Earlier versions (<= 5.0) not supported.
- !  *
- !  * - SGI MIPSPro Compilers
- !  *   - Version 7.30
- !  *   - Not tested (but will likely work) with others
- !  *
- !  * - HP aCC
- !  * - IBM xlC version 5.0
- !  * - Compaq CXX 6.3.9.6
- !  *
- !  *
- !  *
- !  * \subsection conf Configuration
- !  *
- !  * Configuring the library is straightforward. The GNU
- !  * autoconf package is used to determine site-specific configuration
- !  * parameters. A standard build will occur after typing
- !  * \verbatim
-        ./configure
-        make \endverbatim
- !  * in the top-level project directory.  To see all the configuration
- !  * options type  
- !  * \verbatim
-        ./configure --help \endverbatim     
- !  * The configure script will find your compilers and create the \p
- !  * Make.common file with the configuration for your site. If you want
- !  * to use different compilers than those found by configure you can
- !  * specify them in environment variables.  For example, the following
- !  * will build with the \p MIPS compilers on an SGI:
- !  * \verbatim
-        CXX=CC CC=cc F77=f77 ./configure \endverbatim
- !  * Note that the FORTRAN compiler is not actually used to compile any
- !  * part of the library, but \p configure uses it to find out how to
- !  * link FORTRAN libraries with C++ code.
- !  *
- !  *
- !  *
- !  * \subsection build Building the Library
- !  *
- !  * To build the library you need GNU Make and a supported compiler, as
- !  * listed in section \ref conf.  After the library is configured
- !  * simply type \p make to build the library.  Typing \p make \p
- !  * meshtool will build a mesh translation tool using the library.
- !  *
- !  * The Makefiles distributed with the library look at the shell
- !  * environment variable \p METHOD to determine what mode the library
- !  * should be built in.  Valid values for \p METHOD are \p opt
- !  * (optimized mode, the default if \p METHOD is empty), \p debug
- !  * (build with debug symbols), and \p pro (build with profiling
- !  * support for use with \p gprof).
- !  *
- !  * \subsection link Linking
-    */
- --- 1,225 ----
-   //---------------------------------------------------
-   // Main page documentation
-   /**
- !   \mainpage libMesh Documentation
- !  
- !   \section intro Introduction
- ! 
- !    
- !   The \p libMesh library is a C++ framework for the numerical
- !   simulation of partial differential equations on serial and parallel
- !   platforms.  Development began in March 2002 with the intent of
- !   providing a friendly interface to a number of high-quality software
- !   packages that are currently available.  Currently the library
- !   supports 2D and 3D steady and transient finite element simulations.
- !   <a href="http://www-fp.mcs.anl.gov/petsc"> PETSc </a> is
- !   currently used for the solution of linear systems on both serial and
- !   parallel platforms, and \p LASPACK is included with the library to provide
- !   linear solver support on serial machines.
- !  
- !   The \p libMesh library is actively developed at The University of Texas at
- !   Austin in the <a href="http://cfdlab.ae.utexas.edu">CFDLab</a>
- !   and at Technische Universit&auml;t Hamburg-Harburg,
- !   Mechanics and Ocean Engineering in Germany.  Many thanks to
- !   <a href="http://sourceforge.net"> SourceForge </a>
- !   for <a href="http://sourceforge.net/projects/libmesh"> hosting the project</a>. 
- !   You can find out what is currently happening in the development branch
- !   by checking out the <a href="http://libmesh.sourceforge.net/cvshtml"> CVS Logs</a>
- !   online. 
- !   
- !   A major goal of the library is to provide support for adaptive mesh
- !   refinement (AMR) computations in parallel while allowing a research
- !   scientist to focus on the physics they are modeling.  The library
- !   currently offers:
- !  
- !    - Partitioning Algorithms
- !       - Metis K-Way weighted graph partitioning
- !       - Hilbert and Morton-ordered space filling curves
- !  
- !    - Generic 2D Finite Elements
- !       - 3 and 6 noded triangles (\p Tri3, \p Tri6)
- !       - 4, 8, and 9 noded quadrilaterals (\p Quad4, \p Quad8, \p Quad9)
- !       - 4 and 6 noded infinite quadrilaterals (\p InfQuad4, \p InfQuad6)
- !  
- !    - Generic 3D Finite Elements
- !       - 4 and 10 noded tetrahedrals (\p Tet4, \p Tet10)
- !       - 8, 20, and 27 noded hexahedrals (\p Hex8, \p Hex20, \p Hex27)
- !       - 6 noded prisms (\p Prism6)
- !       - 5 noded pyramids (\p Pyramid5)
- !       - 8, 16, and 18 noded infinite hexahedrals (\p InfHex8,
- !           \p InfHex16, \p InfHex18)
- !       - 6 and 12 noded infinite prisms (\p InfPrism6, \p InfPrism12)
- !  
- !    - Generic Finite Element Families
- !       - Lagrange
- !       - Hierarchic
- !       - Discontinuous Monomials
- !  
- !    - Dimension-independence
- !       - Operators are defined to allow the same code
- !         to run unmodified on 2D and 3D applications
- !       - The code you debug and verify on small 2D problems
- !         can immediately be applied to large, parallel 3D applications
- !  
- !    - Sparse Linear Algebra
- !       - \p PETSc provides a suite of iterative solvers and preconditioners
- !         for serial and parallel applications
- !       - Complex values are supported with \p PETSc
- !       - \p LASPACK provides iterative solvers and preconditioners for serial
- !         applications
- !       - The \p SparseMatrix, \p NumericVector, and \p LinearSolverInterface
- !         allow for transparent switching between solver packages.  Adding
- !         a new solver interface is as simple as deriving from these classes
- !  
- !    - Mesh IO & Format Translation Utilities
- !       - Ideas Universal (UNV) format (.unv)
- !       - Sandia National Labs ExodusII format (.exd)
- !       - Amtec Engineering's Tecplot binary format (.plt)
- !       - Amtec Engineering's Tecplot ascii format (.dat)
- !       - Los Alamos National Labs GMV format (.gmv)
- !       - AVS Unstructured UCD format (.ucd)
- !  
- !    - Mesh Creation & Modification Utilities
- !       - refine or coarsen a mesh: prescribed, level-one-compatible, or uniform
- !       - build equispaced n-cubes out of \p Edge2, \p Tri3, \p Tri6, 
- !            \p Quad4, \p Quad8, \p Quad9, \p Hex8, \p Hex20, \p Hex27
- !       - build circles/spheres out of \p Tri3, \p Tri6, \p Quad4,
- !            \p Quad8, \p Quad9, \p Hex8
- !       - add infinite elements to a volume-based mesh, handle symmetry planes
- !       - convert \p Quad4, \p Quad8, \p Quad9 to \p Tri3, \p Tri6
- !       - distort/translate/rotate/scale a mesh
- !       - determine bounding boxes/spheres
- !       - extract the mesh boundary for BC handling or as a separate mesh
- ! 
- ! 
- !        
- !   \section install Installation
- !  
- !  
- !  
- !   \subsection getsoftware Getting the Software
- !  
- !   The \p libMesh source can be downloaded from the project's
- !   <a href="http://sourceforge.net/projects/libmesh">SourceForge
- !   homepage</a>.   Stable releases are
- !   located there as compressed tar archives. You may also access the CVS
- !   source tree for the latest code.  You can get read-only access to the
- !   CVS repository via:
- !   \verbatim
-        cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/libmesh co libmesh \endverbatim
- !   If you would like to contribute to the project you will need a
- !   SourceForge developer account.
- !  
- !  
- !  
- !   \subsection compilers Compilers
- !  
- !   \p libMesh makes extensive use of the standard C++ library, so you will need a
- !   decent, standards-compliant compiler.  We have tried very hard to make the code
- !   completely compiler-agnostic by avoiding questionable (but legal) constructs.
- !   If you have a compiler that won't build the code please let us know.
- !  
- !   You will also need a decent C compiler if you want to build the contributed
- !   packages that add functionality to the library.  If you only have a C++ compiler,
- !   you should shoot your system administrator.  Many of the contributed packages
- !   use constructs that are invalid in C++, so forget compiling them with your C++
- !   compiler.
- !  
- !   The library is known to work with the following compilers:
- !  
- !  
- !   - GNU GCC
- !     - gcc-3.2
- !     - gcc-2.95.3
- !     - gcc-2.96 (RedHat's compiler in the 7.x series)
- !  
- !   - Intel ICC/ECC
- !     - icc/ifc 7.0
- !     - icc/ifc 6.0
- !     - Earlier versions (<= 5.0) not supported.
- !  
- !   - SGI MIPSPro Compilers
- !     - Version 7.30
- !     - Not tested (but will likely work) with others
- !  
- !   - HP aCC
- !   - IBM xlC version 5.0, 6.0
- !   - HP/Compaq/DEC (?) \p cxx 6.3.9.6
- !  
- !  
- !  
- !   \subsection conf Configuration
- !  
- !   Configuring the library is straightforward. The GNU
- !   autoconf package is used to determine site-specific configuration
- !   parameters. A standard build will occur after typing
- !   \verbatim
-        ./configure
-        make \endverbatim
- !   in the top-level project directory.  To see all the configuration
- !   options type  
- !   \verbatim
-        ./configure --help \endverbatim     
- !   The configure script will find your compilers and create the \p
- !   Make.common file with the configuration for your site. If you want
- !   to use different compilers than those found by configure you can
- !   specify them in environment variables.  For example, the following
- !   will build with the \p MIPS compilers on an SGI:
- !   \verbatim
-        CXX=CC CC=cc F77=f77 ./configure \endverbatim
- !   Note that the FORTRAN compiler is not actually used to compile any
- !   part of the library, but \p configure uses it to find out how to
- !   link FORTRAN libraries with C++ code.
- !  
- !  
- !  
- !   \subsection build Building the Library
- !  
- !   To build the library you need GNU Make and a supported compiler, as
- !   listed in section \ref conf.  After the library is configured
- !   simply type \p make to build the library.  Typing \p make \p
- !   meshtool will build a mesh translation tool using the library.
- !  
- !   The Makefiles distributed with the library look at the shell
- !   environment variable \p METHOD to determine what mode the library
- !   should be built in.  Valid values for \p METHOD are \p opt
- !   (optimized mode, the default if \p METHOD is empty), \p debug
- !   (build with debug symbols), and \p pro (build with profiling
- !   support for use with \p gprof).  Once the library is configured
- !   you can build it simply by typing
- !   \verbatim
- !      make \endverbatim
- !   
- !  
- !  
- !  
- !   \subsection test Testing the Library
- !  
- !   \p libMesh includes a number of examples in the \p ./examples
- !   directory.  From the top-level directory you can build and run
- !   the example programs by typing 
- !   \verbatim
- !      make run_examples \endverbatim
- !  
- !   Note that the example programs all create output in the \p GMV
- !   format, since you can <a href="http://laws.lanl.gov/XCM/gmv/GMVHome.html">download GMV</a>
- !   for free from Los Alamos National Lab.  It is a simple
- !   matter to change the source in the example to write a different format,
- !   just replace the \p write_gmv function call with whatever you like.
- !  
- !  
- !  
- !   \subsection link Linking With Your Application
- !  
- !   Since \p libMesh can be configured with many additional packages
- !   we recommend including the \p Make.common file created in the
- !   top-level directory in the \p Makefile of any application you want to
- !   use with the library.  This will properly set the \p INCLUDE and
- !   \p LIBS variables, which you can append to with your own stuff.  You
- !   could of course figure out what these need to be yourself, but don't
- !   complain that it is hard.
-    */
- + 
- + // Local Variables:
- + // mode: html
- + // End:
- Index: include/mesh_exodus_support.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/mesh_exodus_support.h,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** include/mesh_exodus_support.h	24 Jan 2003 17:24:39 -0000	1.5
- --- include/mesh_exodus_support.h	13 Feb 2003 22:56:07 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 392,398 ****
-         /**
-          * Constructor.
-          */
- !       ElementMaps() {};
-   
-         /**
-          * 2D node maps.  These define
- --- 392,398 ----
-         /**
-          * Constructor.
-          */
- !       ElementMaps() {}
-   
-         /**
-          * 2D node maps.  These define
- Index: include/mesh_unv_support.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/mesh_unv_support.h,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** include/mesh_unv_support.h	24 Jan 2003 17:24:39 -0000	1.5
- --- include/mesh_unv_support.h	10 Feb 2003 14:31:15 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 134,140 ****
-                  num_elements,
-                  num_bcs;
-   
- !   // location of boundary conditions
-     unsigned short int bcs_dataset_location;
-   
-   
- --- 134,142 ----
-                  num_elements,
-                  num_bcs;
-   
- !   /**
- !    * location of boundary conditions
- !    */
-     unsigned short int bcs_dataset_location;
-   
-   
- ***************
- *** 148,159 ****
-                 label_dataset_bcs;        
-       
-     /**
- !    * temporary fstream buffer
-      */
-     std::fstream temporary_file;
-   
-     /**
- !    * temporary character buffer
-      */
-     char* temporary_file_name;
-   
- --- 150,161 ----
-                 label_dataset_bcs;        
-       
-     /**
- !    * temporary file, simplifies node & element conversion
-      */
-     std::fstream temporary_file;
-   
-     /**
- !    * Name of temporary file
-      */
-     char* temporary_file_name;
-   
- Index: include/mesh_xdr_support.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/mesh_xdr_support.h,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** include/mesh_xdr_support.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/mesh_xdr_support.h	20 Feb 2003 04:59:58 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 74,80 ****
-      */
-     void soln_interface(const std::string& name,
-   		      const XdrIO::XdrIO_TYPE access,
- ! 		      std::vector<Complex>& soln,
-   		      std::vector<std::string>& var_names,
-   		      Mesh& mesh);
-     
- --- 74,80 ----
-      */
-     void soln_interface(const std::string& name,
-   		      const XdrIO::XdrIO_TYPE access,
- ! 		      std::vector<Number>& soln,
-   		      std::vector<std::string>& var_names,
-   		      Mesh& mesh);
-     
- Index: include/node.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/node.h,v
- retrieving revision 1.5
- retrieving revision 1.7
- diff -c -r1.5 -r1.7
- *** include/node.h	3 Feb 2003 03:51:49 -0000	1.5
- --- include/node.h	13 Feb 2003 22:56:07 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 26,31 ****
- --- 26,32 ----
-   
-   // Local includes
-   #include "point.h"
- + #include "dof_object.h"
-   #include "reference_counted_object.h"
-   
-   
- ***************
- *** 43,52 ****
-    *
-    * \author Benjamin S. Kirk
-    * \date 2003
- !  * \version $Revision: 1.4 $
-    */
-   
- ! class Node : public Point, public ReferenceCountedObject<Node>
-   {
-     
-   public:
- --- 44,55 ----
-    *
-    * \author Benjamin S. Kirk
-    * \date 2003
- !  * \version $Revision: 1.4 $
-    */
-   
- ! class Node : public Point,
- ! 	     public DofObject,      
- ! 	     public ReferenceCountedObject<Node>
-   {
-     
-   public:
- ***************
- *** 98,126 ****
-      */ 
-     ~Node ();
-     
- !   /**
- !    * \returns the \p id for this \p Node
- !    */
- !   const unsigned int & id () const { return _id; };
- ! 
- !   /**
- !    * \returns the \p id for this \p Node as a writeable reference.
- !    */
- !   unsigned int & set_id () { return _id; };
- ! 
- !   /**
- !    * An invaild \p id to distinguish an uninitialized \p Node
- !    */
- !   static const unsigned int invalid_id;
-   
-     
-   private:
-   
-     
- !   /**
- !    * The \p id of the \p Node
- !    */
- !   unsigned int _id;
-   
-   };
-   
- --- 101,129 ----
-      */ 
-     ~Node ();
-     
- ! //   /**
- ! //    * \returns the \p id for this \p Node
- ! //    */
- ! //   const unsigned int & id () const { return _id; }
- ! 
- ! //   /**
- ! //    * \returns the \p id for this \p Node as a writeable reference.
- ! //    */
- ! //   unsigned int & set_id () { return _id; }
- ! 
- ! //   /**
- ! //    * An invaild \p id to distinguish an uninitialized \p Node
- ! //    */
- ! //   static const unsigned int invalid_id;
-   
-     
-   private:
-   
-     
- ! //   /**
- ! //    * The \p id of the \p Node
- ! //    */
- ! //   unsigned int _id;
-   
-   };
-   
- ***************
- *** 133,152 ****
-   	    const Real y,
-   	    const Real z,
-   	    const unsigned int id) :
- !   Point(x,y,z),
- !   _id(id)
-   {
- ! };
-   
-   
-   
-   inline
-   Node::Node (const Node& n) :
-     Point(n),
-     ReferenceCountedObject<Node>()
-   {
- !   _id = n._id;
- ! };
-   
-   
-   
- --- 136,156 ----
-   	    const Real y,
-   	    const Real z,
-   	    const unsigned int id) :
- !   Point(x,y,z)
-   {
- !   set_id() = id;
- ! }
-   
-   
-   
-   inline
-   Node::Node (const Node& n) :
-     Point(n),
- +   DofObject(n),
-     ReferenceCountedObject<Node>()
-   {
- ! //  _id = n._id;
- ! }
-   
-   
-   
- ***************
- *** 160,174 ****
-     // Node n = Point p would erase
-     // the id!
-     if (id != invalid_id)
- !     _id = id;
- ! };
-   
-   
-   
-   inline
-   Node::~Node ()
-   {
- ! };
-   
-   
-   
- --- 164,179 ----
-     // Node n = Point p would erase
-     // the id!
-     if (id != invalid_id)
- !     set_id() = id;
- ! //    _id = id;
- ! }
-   
-   
-   
-   inline
-   Node::~Node ()
-   {
- ! }
-   
-   
-   
- ***************
- *** 176,182 ****
-   Node* Node::build(const Node& n)
-   {
-     return new Node(n);  
- ! };
-   
-   
-   
- --- 181,187 ----
-   Node* Node::build(const Node& n)
-   {
-     return new Node(n);  
- ! }
-   
-   
-   
- ***************
- *** 185,191 ****
-   		  const unsigned int id)
-   {
-     return new Node(p, id);  
- ! };
-   
-   
-   
- --- 190,196 ----
-   		  const unsigned int id)
-   {
-     return new Node(p, id);  
- ! }
-   
-   
-   
- ***************
- *** 196,202 ****
-   		  const unsigned int id)
-   {
-     return new Node(x,y,z,id);  
- ! };
-   
-   
-   
- --- 201,207 ----
-   		  const unsigned int id)
-   {
-     return new Node(x,y,z,id);  
- ! }
-   
-   
-   
- Index: include/perf_log.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/perf_log.h,v
- retrieving revision 1.5
- retrieving revision 1.9
- diff -c -r1.5 -r1.9
- *** include/perf_log.h	24 Jan 2003 17:24:39 -0000	1.5
- --- include/perf_log.h	14 Feb 2003 15:22:41 -0000	1.9
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 55,61 ****
-       tot_time(0.),
-       count(0),
-       open(false)
- !     {};
-   
-     /**
-      * Total time spent in this event.
- --- 55,61 ----
-       tot_time(0.),
-       count(0),
-       open(false)
- !     {}
-   
-     /**
-      * Total time spent in this event.
- ***************
- *** 107,113 ****
-      * disable logging.  You can use this flag to turn off
-      * logging without touching any other code.
-      */
- !   PerfLog(std::string class_name="",
-   	  const bool log_events=true);
-   
-     /**
- --- 107,113 ----
-      * disable logging.  You can use this flag to turn off
-      * logging without touching any other code.
-      */
- !   PerfLog(const std::string class_name="",
-   	  const bool log_events=true);
-   
-     /**
- ***************
- *** 181,186 ****
- --- 181,191 ----
-     const bool log_events;
-   
-     /**
- +    * The total running time for recorded events.
- +    */  
- +   double total_time;
- +   
- +   /**
-      * The time we were constructed or last cleared.
-      */
-     struct timeval tstart;
- ***************
- *** 207,227 ****
-   {
-     if (log_events)
-       {
-         // make sure we aren't currently
- !       // monitoring this event
- !       if (log[label].open)
-   	{
-   	  std::cerr << "ERROR logging event " << label << std::endl
-   		    << "Did you forget to stop logging it?" << std::endl;
- - 
-   	  error();
-   	}
-   
- !       log[label].open = true;
-         
- !       gettimeofday (&log[label].tstart, NULL);
-       }
- ! };
-   
-   
-   
- --- 212,235 ----
-   {
-     if (log_events)
-       {
- +       // Get a reference to the event data to avoid
- +       // repeated map lookups
- +       PerfData& perf_data = log[label];
- +       
-         // make sure we aren't currently
- !       // monitoring this event      
- !       if (perf_data.open)
-   	{
-   	  std::cerr << "ERROR logging event " << label << std::endl
-   		    << "Did you forget to stop logging it?" << std::endl;
-   	  error();
-   	}
-   
- !       perf_data.open = true;
-         
- !       gettimeofday (&perf_data.tstart, NULL);
-       }
- ! }
-   
-   
-   
- ***************
- *** 230,258 ****
-   {
-     if (log_events)
-       {
-         // make sure we are currently
-         // monitoring this event
- !       if (!log[label].open)
-   	{
-   	  std::cerr << "ERROR logging event " << label << std::endl
- ! 		    << "Did you forget to start logging it?" << std::endl;
- ! 
-   	  error();
-   	}
-         
- !       log[label].open = false;
-         
-         struct timeval tstop;
-   
-         gettimeofday (&tstop, NULL);
-   
- !       const double elapsed_time = ((double) (tstop.tv_sec  - log[label].tstart.tv_sec)) +
- ! 	                          ((double) (tstop.tv_usec - log[label].tstart.tv_usec))/1000000.;
-   
- !       log[label].tot_time += elapsed_time;
- !       log[label].count++;	 
-       }
- ! };
-   
-   
-   
- --- 238,270 ----
-   {
-     if (log_events)
-       {
- +       // Get a reference to the event data to avoid
- +       // repeated map lookups
- +       PerfData& perf_data = log[label];
- +       
-         // make sure we are currently
-         // monitoring this event
- !       if (!perf_data.open)
-   	{
-   	  std::cerr << "ERROR logging event " << label << std::endl
- ! 		    << "Did you forget to start or restart it?" << std::endl;
-   	  error();
-   	}
-         
- !       perf_data.open = false;
-         
-         struct timeval tstop;
-   
-         gettimeofday (&tstop, NULL);
-   
- !       const double elapsed_time = (static_cast<double>(tstop.tv_sec  - perf_data.tstart.tv_sec) +
- ! 				   static_cast<double>(tstop.tv_usec - perf_data.tstart.tv_usec)*1.e-6);      
-   
- !       total_time         += elapsed_time;
- !       perf_data.tot_time += elapsed_time;
- !       perf_data.count++;	 
-       }
- ! }
-   
-   
-   
- ***************
- *** 261,273 ****
-   {
-     if (log_events)
-       {
-         // make sure we are currently
-         // monitoring this event
- !       if (!log[label].open)
-   	{
-   	  std::cerr << "ERROR pausing event " << label << std::endl
- ! 		    << "Did you forget to start logging it?" << std::endl;
- ! 	  
-   	  error();
-   	}
-         
- --- 273,288 ----
-   {
-     if (log_events)
-       {
- +       // Get a reference to the event data to avoid
- +       // repeated map lookups
- +       PerfData& perf_data = log[label];
- +       
-         // make sure we are currently
-         // monitoring this event
- !       if (!perf_data.open)
-   	{
-   	  std::cerr << "ERROR pausing event " << label << std::endl
- ! 		    << "Did you forget to start logging it?" << std::endl;	  
-   	  error();
-   	}
-         
- ***************
- *** 275,286 ****
-   
-         gettimeofday (&tstop, NULL);
-   
- !       const double elapsed_time = ((double) (tstop.tv_sec  - log[label].tstart.tv_sec)) +
- ! 	                          ((double) (tstop.tv_usec - log[label].tstart.tv_usec))/1000000.;
-   
- !       log[label].tot_time += elapsed_time;
-       }
- ! };
-   
-   
-   
- --- 290,302 ----
-   
-         gettimeofday (&tstop, NULL);
-   
- !       const double elapsed_time = (static_cast<double>(tstop.tv_sec  - perf_data.tstart.tv_sec) +
- ! 				   static_cast<double>(tstop.tv_usec - perf_data.tstart.tv_usec)*1.e-6);      
-   
- !       total_time         += elapsed_time;
- !       perf_data.tot_time += elapsed_time;
-       }
- ! }
-   
-   
-   
- ***************
- *** 289,307 ****
-   {
-     if (log_events)
-       {
-         // make sure we are currently
-         // monitoring this event
- !       if (!log[label].open)
-   	{
-   	  std::cerr << "ERROR restarting event " << label << std::endl
- ! 		    << "Did you forget to start logging it?" << std::endl;
- ! 	  
-   	  error();
-   	}
-         
- !       gettimeofday (&log[label].tstart, NULL);
-       }
- ! };
-   
-   // Typedefs we might need
-   #ifdef HAVE_LOCALE
- --- 305,326 ----
-   {
-     if (log_events)
-       {
- +       // Get a reference to the event data to avoid
- +       // repeated map lookups
- +       PerfData& perf_data = log[label];
- +       
-         // make sure we are currently
-         // monitoring this event
- !       if (!perf_data.open)
-   	{
-   	  std::cerr << "ERROR restarting event " << label << std::endl
- ! 		    << "Did you forget to start or pause it?" << std::endl;	  
-   	  error();
-   	}
-         
- !       gettimeofday (&perf_data.tstart, NULL);
-       }
- ! }
-   
-   // Typedefs we might need
-   #ifdef HAVE_LOCALE
- Index: include/perfmon.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/perfmon.h,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** include/perfmon.h	24 Jan 2003 17:24:39 -0000	1.5
- --- include/perfmon.h	13 Feb 2003 22:56:07 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 77,83 ****
-   #ifdef HAVE_PAPI_H
-     Papi::PAPI_flops (&rtime, &ptime, &flpins, &mflops);
-   #endif  
- ! };
-   
-   
-   
- --- 77,83 ----
-   #ifdef HAVE_PAPI_H
-     Papi::PAPI_flops (&rtime, &ptime, &flpins, &mflops);
-   #endif  
- ! }
-   
-   
-   
- ***************
- *** 124,134 ****
-         
-   #endif
-   
- ! 	};
- !     };
-     
-     return elapsed_time;
- ! };
-   
-   
-   inline
- --- 124,134 ----
-         
-   #endif
-   
- ! 	}
- !     }
-     
-     return elapsed_time;
- ! }
-   
-   
-   inline
- ***************
- *** 140,146 ****
-     proc_id(pid)
-   {
-     reset ();
- ! };
-   
-   
-   
- --- 140,146 ----
-     proc_id(pid)
-   {
-     reset ();
- ! }
-   
-   
-   
- ***************
- *** 148,154 ****
-   PerfMon::~PerfMon ()
-   {
-     print ();
- ! };
-   
-   
-   
- --- 148,154 ----
-   PerfMon::~PerfMon ()
-   {
-     print ();
- ! }
-   
-   
-   
- Index: include/petsc_interface.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/petsc_interface.h,v
- retrieving revision 1.6
- retrieving revision 1.11
- diff -c -r1.6 -r1.11
- *** include/petsc_interface.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/petsc_interface.h	20 Feb 2003 23:18:07 -0000	1.11
- ***************
- *** 1,4 ****
- ! //    $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 22,58 ****
-   #ifndef __petsc_interface_h__
-   #define __petsc_interface_h__
-   
- - #include "mesh_common.h"
- - 
- - #ifdef HAVE_PETSC
- - 
- - 
-   // C++ includes
-   
- - 
-   // Local includes
-   #include "petsc_vector.h"
-   #include "petsc_matrix.h"
-   
-   
-   /**
-    * Petsc include files.  PETSc with complex numbers 
-    * is actually C++.
-    */
- ! # ifndef USE_COMPLEX_NUMBERS
-   
- - namespace Petsc {
-   extern "C" {
- ! #include "petscsles.h"
-   }
- - // for easy switching between Petsc 2.1.0/2.1.1
- - // typedef Scalar PetscScalar;
- - } 
- - using namespace Petsc;
-   
-   #else
-   
- ! #include "petscsles.h"
-   
-   #endif
-   
- --- 22,51 ----
-   #ifndef __petsc_interface_h__
-   #define __petsc_interface_h__
-   
-   // C++ includes
-   
-   // Local includes
- + #include "linear_solver_interface.h"
-   #include "petsc_vector.h"
-   #include "petsc_matrix.h"
-   
-   
- + #ifdef HAVE_PETSC
- + 
- + 
-   /**
-    * Petsc include files.  PETSc with complex numbers 
-    * is actually C++.
-    */
- ! #ifndef USE_COMPLEX_NUMBERS
-   
-   extern "C" {
- ! #include <petscsles.h>
-   }
-   
-   #else
-   
- ! #include <petscsles.h>
-   
-   #endif
-   
- ***************
- *** 66,82 ****
-    * @author Benjamin Kirk, 2002
-    */
-   
- ! class PetscInterface
-   {
- !  public:
-     /**
-      *  Constructor. Initializes Petsc data structures
- !    **/
-     PetscInterface ();
-       
-     /**
-      * Destructor.
- !    **/
-     ~PetscInterface ();
-     
-     /**
- --- 59,76 ----
-    * @author Benjamin Kirk, 2002
-    */
-   
- ! template <typename T>
- ! class PetscInterface : public LinearSolverInterface<T>
-   {
- ! public:
-     /**
-      *  Constructor. Initializes Petsc data structures
- !    */
-     PetscInterface ();
-       
-     /**
-      * Destructor.
- !    */
-     ~PetscInterface ();
-     
-     /**
- ***************
- *** 90,588 ****
-     void init ();
-     
-     /**
- !    *  Use no preconditioning
- !    **/
- !   void precond_identity ();
- ! 
- !   /**
- !    * Use Jacobi preconditioning
- !    **/
- !   void precond_jacobi ();
- ! 
- !   /**
- !    * Use block Jacobi preconditioning
- !    **/
- !   void precond_block_jacobi ();
- ! 
- !   /**
- !    * Use SOR preconditioning
- !    **/
- !   void precond_sor ();
- ! 
- !   /**
- !    * Use SOR with Eisenstat trick preconditioning
- !    **/
- !   void precond_eisenstat ();
- ! 
- !   /**
- !    * Use Additive Schwarz preconditioning
- !    **/
- !   void precond_asm ();
- ! 
- !   /**
- !    * Use Cholesky preconditioning
- !    **/
- !   void precond_cholesky ();
- ! 
- !   /**
- !    * Use Incomplete Cholesky preconditioning
- !    **/
- !   void precond_icc ();
- ! 
- !   /**
- !    * Use ILU (Incomplete LU factorization) preconditioning
- !    **/
- !   void precond_ilu ();
- ! 
- !   /**
- !    * Use LU "preconditioning." Can be combined with the Richardson solver
- !    * (below) to provide a direct solver.
- !    **/
- !   void precond_lu ();
- ! 
- !   // Methods to set the linear solver type --------------------------------
- !   
- !   /**
- !    * Use the Conjugate Gradient solver
- !    **/
- !   void solver_cg ();
- ! 
- !   /**
- !    * Use the Conjugate Residual solver
- !    **/
- !   void solver_cr ();
- ! 
- !   /**
- !    * Use the Conjugate Gradient Squared solver
- !    **/
- !   void solver_cgs ();
- ! 
- !   /**
- !    * Use the Bi-Conjugate Gradient solver
- !    **/
- !   void solver_bicg ();
- ! 
- !   /**
- !    * Use the Transpose-Free Quasi-Minimum residual (2) solver
- !    **/
- !   void solver_tcqmr ();
- ! 
- !   /**
- !    * Use the Transpose-Free Quasi-Minimum residual (1) solver
- !    **/
- !   void solver_tfqmr ();
- ! 
- !   /**
- !    * Use the Least-Squares method solver
- !    **/
- !   void solver_lsqr ();
- ! 
- !   /**
- !    * Use the Bi-Conjugate Gradient Stabilized solver
- !    **/
- !   void solver_bcgstab ();
- ! 
- !   /**
- !    * Use the Minimum-Residual solver
- !    **/
- !   void solver_minres ();
- ! 
- !   /**
- !    * Use the GMRES solver
- !    **/
- !   void solver_gmres ();
- ! 
- !   /**
- !    * Use the Richardson solver
- !    **/
- !   void solver_richardson ();
-   
-     /**
- !    * Use the Chebychev solver
- !    **/
- !   void solver_chebychev ();
-   
-     /**
- !    * Call the Petsc solver
- !    **/
- !     
- !   std::pair<unsigned int, Real> 
- !     solve (PetscMatrix &matrix,
- ! 	   PetscVector &solution,
- ! 	   PetscVector &rhs,
- ! 	   const double tol,
- ! 	   const unsigned int m_its);
- !    
- !  private:
-   
-     /**
-      * Linear solver context
- !    **/
- !   SLES sles;
-       
-     /**
-      * Preconditioner context
- !    **/
- !   PC   pc; 
-   
-     /**
-      * Krylov subspace context
- -    **/
- -   KSP  ksp;
- - 
- -   /**
- -    * Flag indicating if the data structures have been initialized.
-      */
- !   bool initialized;
-   };
-   
-   
-   /*----------------------- functions ----------------------------------*/
-   inline
- ! PetscInterface::PetscInterface () :
- !   initialized (false)
-   {
- ! };
- ! 
-   
-   
-   
-   inline
- ! PetscInterface::~PetscInterface ()
-   {
-     clear ();
- ! };
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::precond_identity()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = PCSetType (pc, (char*) PCNONE); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::precond_cholesky()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = PCSetType (pc, (char*) PCCHOLESKY); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::precond_icc()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = PCSetType (pc, (char*) PCICC); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::precond_ilu()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = PCSetType (pc, (char*) PCILU); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::precond_lu()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = PCSetType (pc, (char*) PCLU); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::precond_asm()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = PCSetType (pc, (char*) PCASM); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::precond_jacobi()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = PCSetType (pc, (char*) PCJACOBI); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::precond_block_jacobi()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = PCSetType (pc, (char*) PCBJACOBI); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::precond_sor()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = PCSetType (pc, (char*) PCSOR); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::precond_eisenstat()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = PCSetType (pc, (char*) PCEISENSTAT); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::solver_cg()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = KSPSetType (ksp, (char*) KSPCG); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::solver_cr()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = KSPSetType (ksp, (char*) KSPCR); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::solver_cgs()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = KSPSetType (ksp, (char*) KSPCGS); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::solver_bicg()
- ! {
- !   int ierr=0;
- !   
- !   ierr = KSPSetType (ksp, (char*) KSPBICG); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::solver_tcqmr()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = KSPSetType (ksp, (char*) KSPTCQMR); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::solver_tfqmr()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = KSPSetType (ksp, (char*) KSPTFQMR); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::solver_lsqr()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = KSPSetType (ksp, (char*) KSPLSQR); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::solver_bcgstab()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = KSPSetType (ksp, (char*) KSPBCGS); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::solver_minres()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = KSPSetType (ksp, (char*) KSPMINRES); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::solver_gmres()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = KSPSetType (ksp, (char*) KSPGMRES); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::solver_richardson()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = KSPSetType (ksp, (char*) KSPRICHARDSON); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscInterface::solver_chebychev()
- ! {
- !   init();
- !   
- !   int ierr=0;
- !   
- !   ierr = KSPSetType (ksp, (char*) KSPCHEBYCHEV); CHKERRQ(ierr);
- ! 
- !   return;
- ! };
-   
-   
-   
- ! #endif
- ! #endif
- --- 84,146 ----
-     void init ();
-     
-     /**
- !    * Call the Petsc solver
- !    */    
- !   std::pair<unsigned int, Real> 
- !   solve (SparseMatrix<T> &matrix,
- ! 	 NumericVector<T> &solution,
- ! 	 NumericVector<T> &rhs,
- ! 	 const double tol,
- ! 	 const unsigned int m_its);
- !    
- ! private:
-   
-     /**
- !    * Tells PETSC to use the user-specified solver stored in
- !    * \p _solver_type
- !    */
- !   void set_petsc_solver_type ();
-   
-     /**
- !    * Tells PETSC to use the user-specified preconditioner stored in
- !    * \p _preconditioner_type
- !    */
- !   void set_petsc_preconditioner_type ();
-   
-     /**
-      * Linear solver context
- !    */
- !   SLES _sles;
-       
-     /**
-      * Preconditioner context
- !    */
- !   PC _pc; 
-   
-     /**
-      * Krylov subspace context
-      */
- !   KSP _ksp;
-   };
-   
-   
-   /*----------------------- functions ----------------------------------*/
- + template <typename T>
-   inline
- ! PetscInterface<T>::PetscInterface ()
-   {
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! PetscInterface<T>::~PetscInterface ()
-   {
-     clear ();
- ! }
-   
-   
-   
- ! #endif // #ifdef HAVE_PETSC
- ! #endif // #ifdef __petsc_interface_h__
- Index: include/petsc_matrix.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/petsc_matrix.h,v
- retrieving revision 1.8
- retrieving revision 1.16
- diff -c -r1.8 -r1.16
- *** include/petsc_matrix.h	3 Feb 2003 03:51:49 -0000	1.8
- --- include/petsc_matrix.h	21 Feb 2003 18:31:29 -0000	1.16
- ***************
- *** 1,4 ****
- ! //    $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! //    $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 19,68 ****
-   
-   
-   
-   #include "mesh_common.h"
-   
-   #ifdef HAVE_PETSC
-   
- ! #ifndef __petsc_matrix_h__
- ! #define __petsc_matrix_h__
- ! 
- ! // TODO:[BSK} This seems necessary to use petsc on IBM Power3 at NERSC, but only there?  This will need to be wrapped in an ifdef with a variable set by configure
-   #include <cmath>
-   
-   
-   // C++ includes
-   
-   // Local includes
- ! #include "dof_map.h"
-   
-   
-   
- ! /**
-    * Petsc include files.  PETSc with complex numbers 
-    * is actually C++.
-    */
- ! # ifndef USE_COMPLEX_NUMBERS
-   
- - namespace Petsc {
-   extern "C" {
- ! #include "petscmat.h"
- ! }
- ! // for easy switching between Petsc 2.1.0/2.1.1
- ! // typedef Scalar PetscScalar;
-   } 
- - using namespace Petsc;
-   
-   #else
-   
- ! #include "petscmat.h"
-   
-   #endif
-   
-   
-   
-   // Forward declarations
- ! class PetscVector;
- ! class PetscInterface;
-   
-   
-   
- --- 19,63 ----
-   
-   
-   
- + #ifndef __petsc_matrix_h__
- + #define __petsc_matrix_h__
- + 
-   #include "mesh_common.h"
-   
-   #ifdef HAVE_PETSC
-   
- ! // TODO:[BSK} This seems necessary to use petsc on IBM Power3 at NERSC, but only there?  
-   #include <cmath>
-   
-   
-   // C++ includes
-   
-   // Local includes
- ! #include "sparse_matrix.h"
-   
-   
-   
- ! /*
-    * Petsc include files.  PETSc with complex numbers 
-    * is actually C++.
-    */
- ! #ifndef USE_COMPLEX_NUMBERS
-   
-   extern "C" {
- ! #include <petscmat.h>
-   } 
-   
-   #else
-   
- ! #include <petscmat.h>
-   
-   #endif
-   
-   
-   
-   // Forward declarations
- ! template <typename T> class PetscVector;
- ! template <typename T> class PetscInterface;
-   
-   
-   
- ***************
- *** 74,82 ****
-    * @author Benjamin S. Kirk, 2002
-    */
-   
- ! class PetscMatrix 
-   {
- !  public:
-     /**
-      * Constructor; initializes the matrix to
-      * be empty, without any structure, i.e.
- --- 69,78 ----
-    * @author Benjamin S. Kirk, 2002
-    */
-   
- ! template <typename T>
- ! class PetscMatrix : public SparseMatrix<T>
-   {
- ! public:
-     /**
-      * Constructor; initializes the matrix to
-      * be empty, without any structure, i.e.
- ***************
- *** 119,135 ****
-     /**
-      * Initialize using sparsity structure computed by \p dof_map.
-      */   
- !   void init (const DofMap& dof_map);
- ! 
- !   /**
- !    * Creates the matrix using sparsity structure computed
- !    * by \p dof_map. The matrix will be created as a subset of
- !    * the input matrix \p parent_matrix, so clearly \p parent_matrix
- !    * should be at least the same size (possibly bigger) than the
- !    * matrix to be created.
- !    */
- !   void init (const DofMap& dof_map,
- ! 	     PetscMatrix& parent_matrix);
-     
-     /**
-      * Release all memory and return
- --- 115,121 ----
-     /**
-      * Initialize using sparsity structure computed by \p dof_map.
-      */   
- !   void init ();
-     
-     /**
-      * Release all memory and return
- ***************
- *** 181,188 ****
-      * not exist. Still, it is allowed to store
-      * zero values in non-existent fields.
-      */
- !   void set (const unsigned int i, const unsigned int j,
- ! 	    const Complex value);
-       
-     /**
-      * Add \p value to the element
- --- 167,175 ----
-      * not exist. Still, it is allowed to store
-      * zero values in non-existent fields.
-      */
- !   void set (const unsigned int i,
- ! 	    const unsigned int j,
- ! 	    const T value);
-       
-     /**
-      * Add \p value to the element
- ***************
- *** 192,199 ****
-      * store zero values in
-      * non-existent fields.
-      */
- !   void add (const unsigned int i, const unsigned int j,
- ! 	    const Complex value);
-   
-     /**
-      * Add the full matrix to the
- --- 179,187 ----
-      * store zero values in
-      * non-existent fields.
-      */
- !   void add (const unsigned int i,
- ! 	    const unsigned int j,
- ! 	    const T value);
-   
-     /**
-      * Add the full matrix to the
- ***************
- *** 202,208 ****
-      * at assembly time
-      */
-       
- !   void add_matrix (const ComplexDenseMatrix &dm,
-   		   const std::vector<unsigned int> &rows,
-   		   const std::vector<unsigned int> &cols);	     
-   
- --- 190,196 ----
-      * at assembly time
-      */
-       
- !   void add_matrix (const DenseMatrix<T> &dm,
-   		   const std::vector<unsigned int> &rows,
-   		   const std::vector<unsigned int> &cols);	     
-   
- ***************
- *** 210,216 ****
-      * Same, but assumes the row and column maps are the same.
-      * Thus the matrix \p dm must be square.
-      */
- !   void add_matrix (const ComplexDenseMatrix &dm,
-   		   const std::vector<unsigned int> &dof_indices);	     
-       
-     /**
- --- 198,204 ----
-      * Same, but assumes the row and column maps are the same.
-      * Thus the matrix \p dm must be square.
-      */
- !   void add_matrix (const DenseMatrix<T> &dm,
-   		   const std::vector<unsigned int> &dof_indices);	     
-       
-     /**
- ***************
- *** 231,238 ****
-      * matrix), use the \p el
-      * function.
-      */
- !   Complex operator () (const unsigned int i,
- ! 		       const unsigned int j) const;
-   
-     /**
-      * Return the l1-norm of the matrix, that is
- --- 219,226 ----
-      * matrix), use the \p el
-      * function.
-      */
- !   T operator () (const unsigned int i,
- ! 		 const unsigned int j) const;
-   
-     /**
-      * Return the l1-norm of the matrix, that is
- ***************
- *** 266,283 ****
-      * and fully assembled yet
-      */
-     bool closed() const;
- - 
- - 
- -   /**
- -    * @returns true if the matrix has been initialized,
- -    * false otherwise.
- -    */
- -   bool initialized() const { return is_initialized; };
- - 
- -   /**
- -    * Print the contents of the matrix to the screen.
- -    */
- -   void print() const;
-     
-     /**
-      * Print the contents of the matrix in Matlab's
- --- 254,259 ----
- ***************
- *** 288,294 ****
-     void print_matlab(const std::string name="NULL") const;
-   
-     
- !  private:
-   
-     
-     /**
- --- 264,270 ----
-     void print_matlab(const std::string name="NULL") const;
-   
-     
- ! private:
-   
-     
-     /**
- ***************
- *** 297,321 ****
-     Mat mat;
-   
-     /**
- -    * Flag indicating whether or not the matrix
- -    * has been initialized
- -    */
- -   bool is_initialized;
- -   
- -   /**
-      * Make other Petsc datatypes friends
-      */
- !   friend class PetscInterface;
-   };
-   
-   
- - /*---------------------- Inline functions -----------------------------------*/
-   
-   
-   
-   
-   inline
- ! void PetscMatrix::close () const
-   {
-     if (closed())
-       return;
- --- 273,307 ----
-     Mat mat;
-   
-     /**
-      * Make other Petsc datatypes friends
-      */
- !   friend class PetscInterface<T>;
-   };
-   
-   
-   
-   
- + //-----------------------------------------------------------------------
- + // PetscMatrix inline members
- + template <typename T>
- + inline
- + PetscMatrix<T>::PetscMatrix()
- + {}
- + 
- + 
- + 
- + template <typename T>
- + inline
- + PetscMatrix<T>::~PetscMatrix()
- + {
- +   clear();
- + }
- + 
-   
-   
- + template <typename T>
-   inline
- ! void PetscMatrix<T>::close () const
-   {
-     if (closed())
-       return;
- ***************
- *** 326,338 ****
-     ierr = MatAssemblyEnd   (mat, MAT_FINAL_ASSEMBLY); CHKERRQ(ierr);
-     
-     return;
- ! };
- ! 
-   
-   
-   
-   inline
- ! unsigned int PetscMatrix::m () const
-   {
-     assert (initialized());
-     
- --- 312,324 ----
-     ierr = MatAssemblyEnd   (mat, MAT_FINAL_ASSEMBLY); CHKERRQ(ierr);
-     
-     return;
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! unsigned int PetscMatrix<T>::m () const
-   {
-     assert (initialized());
-     
- ***************
- *** 341,353 ****
-     ierr = MatGetSize (mat, &petsc_m, &petsc_n);
-   
-     return static_cast<unsigned int>(petsc_m);
- ! };
- ! 
-   
-   
-   
-   inline
- ! unsigned int PetscMatrix::n () const
-   {
-     assert (initialized());
-     
- --- 327,339 ----
-     ierr = MatGetSize (mat, &petsc_m, &petsc_n);
-   
-     return static_cast<unsigned int>(petsc_m);
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! unsigned int PetscMatrix<T>::n () const
-   {
-     assert (initialized());
-     
- ***************
- *** 356,368 ****
-     ierr = MatGetSize (mat, &petsc_m, &petsc_n);
-   
-     return static_cast<unsigned int>(petsc_n);
- ! };
- ! 
-   
-   
-   
-   inline
- ! unsigned int PetscMatrix::row_start () const
-   {
-     assert (initialized());
-     
- --- 342,354 ----
-     ierr = MatGetSize (mat, &petsc_m, &petsc_n);
-   
-     return static_cast<unsigned int>(petsc_n);
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! unsigned int PetscMatrix<T>::row_start () const
-   {
-     assert (initialized());
-     
- ***************
- *** 370,383 ****
-   
-     ierr = MatGetOwnershipRange(mat, &start, &stop); CHKERRQ(ierr);
-   
- !   return start;
- ! };
- ! 
-   
-   
-   
-   inline
- ! unsigned int PetscMatrix::row_stop () const
-   {
-     assert (initialized());
-     
- --- 356,369 ----
-   
-     ierr = MatGetOwnershipRange(mat, &start, &stop); CHKERRQ(ierr);
-   
- !   return static_cast<unsigned int>(start);
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! unsigned int PetscMatrix<T>::row_stop () const
-   {
-     assert (initialized());
-     
- ***************
- *** 385,400 ****
-   
-     ierr = MatGetOwnershipRange(mat, &start, &stop); CHKERRQ(ierr);
-   
- !   return stop;
- ! };
- ! 
-   
-   
-   
-   inline
- ! void PetscMatrix::set (const unsigned int i,
- ! 		       const unsigned int j,
- ! 		       const Complex value)
-   {  
-     assert (initialized());
-     
- --- 371,386 ----
-   
-     ierr = MatGetOwnershipRange(mat, &start, &stop); CHKERRQ(ierr);
-   
- !   return static_cast<unsigned int>(stop);
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! void PetscMatrix<T>::set (const unsigned int i,
- ! 			  const unsigned int j,
- ! 			  const T value)
-   {  
-     assert (initialized());
-     
- ***************
- *** 405,419 ****
-   		      &petsc_value, INSERT_VALUES); CHKERRQ(ierr);
-   
-     return;
- ! };
- ! 
-   
-   
-   
-   inline
- ! void PetscMatrix::add (const unsigned int i,
- ! 		       const unsigned int j,
- ! 		       const Complex value)
-   {
-     assert (initialized());
-     
- --- 391,405 ----
-   		      &petsc_value, INSERT_VALUES); CHKERRQ(ierr);
-   
-     return;
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! void PetscMatrix<T>::add (const unsigned int i,
- ! 			  const unsigned int j,
- ! 			  const T value)
-   {
-     assert (initialized());
-     
- ***************
- *** 424,446 ****
-   		      &petsc_value, ADD_VALUES); CHKERRQ(ierr);
-     
-     return;
- ! };
-   
-   
-   
-   inline
- ! void PetscMatrix::add_matrix(const ComplexDenseMatrix& dm,
- ! 			     const std::vector<unsigned int>& dof_indices)
-   {
-     add_matrix (dm, dof_indices, dof_indices);
- ! };
-   
-   
-   inline
- ! void PetscMatrix::add_matrix(const ComplexDenseMatrix& dm,
- ! 			     const std::vector<unsigned int>& rows,
- ! 			     const std::vector<unsigned int>& cols)
- ! 		    
-   {
-     assert (initialized());
-     
- --- 410,434 ----
-   		      &petsc_value, ADD_VALUES); CHKERRQ(ierr);
-     
-     return;
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! void PetscMatrix<T>::add_matrix(const DenseMatrix<T>& dm,
- ! 				const std::vector<unsigned int>& dof_indices)
-   {
-     add_matrix (dm, dof_indices, dof_indices);
- ! }
- ! 
-   
-   
- + template <typename T>
-   inline
- ! void PetscMatrix<T>::add_matrix(const DenseMatrix<T>& dm,
- ! 				const std::vector<unsigned int>& rows,
- ! 				const std::vector<unsigned int>& cols)
-   {
-     assert (initialized());
-     
- ***************
- *** 452,486 ****
-     
-     int ierr=0;
-   
- !   // make this static to the function to aviod repeated allocations
- !   static std::vector<PetscScalar> values;
-   
- !   values.resize (m*n);
-   
- !   // notice values is row-major by default in Petsc
- !   for (unsigned int i=0; i<m; i++)
- !     for (unsigned int j=0; j<n; j++)
- !       values[(i)*(n) + (j)] = static_cast<PetscScalar>(dm(i,j)); 
-   
-     ierr = MatSetValues(mat,
-   		      m, (int*) &rows[0],
-   		      n, (int*) &cols[0],
- ! 		      &values[0],
-   		      ADD_VALUES);   CHKERRQ(ierr);
-   
-     return;
- ! };
-   
-   
-   
-   inline
- ! Complex PetscMatrix::operator () (const unsigned int i,
- ! 				  const unsigned int j) const
-   {
-     assert (initialized());
-     
-     PetscScalar *petsc_row;
- !   Complex value=0.;
-     bool found=false;
-     int ierr=0, ncols=0, *petsc_cols,
-       i_val=static_cast<int>(i),
- --- 440,475 ----
-     
-     int ierr=0;
-   
- ! //   // make this static to the function to aviod repeated allocations
- ! //   static std::vector<PetscScalar> values;
-   
- ! //   values.resize (m*n);
-   
- ! //   // notice values is row-major by default in Petsc
- ! //   for (unsigned int i=0; i<m; i++)
- ! //     for (unsigned int j=0; j<n; j++)
- ! //       values[(i)*(n) + (j)] = static_cast<PetscScalar>(dm(i,j)); 
-   
-     ierr = MatSetValues(mat,
-   		      m, (int*) &rows[0],
-   		      n, (int*) &cols[0],
- ! 		      (PetscScalar*) &dm.val[0],
-   		      ADD_VALUES);   CHKERRQ(ierr);
-   
-     return;
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! T PetscMatrix<T>::operator () (const unsigned int i,
- ! 			       const unsigned int j) const
-   {
-     assert (initialized());
-     
-     PetscScalar *petsc_row;
- !   T value=0.;
-     bool found=false;
-     int ierr=0, ncols=0, *petsc_cols,
-       i_val=static_cast<int>(i),
- ***************
- *** 494,523 ****
-     ierr = MatGetRow(mat, i_val, &ncols, &petsc_cols, &petsc_row); CHKERRQ(ierr);
-   
-   
-     for (int entry=0; entry<ncols; entry++)
-       if (petsc_cols[entry] == j_val)
-         {
-   	found = true;
-   	  
- ! 	value = static_cast<Complex>(petsc_row[entry]);
-   	  
-   	ierr = MatRestoreRow(mat, i_val,
-   			     &ncols, &petsc_cols, &petsc_row); CHKERRQ(ierr);
-   	  
-   	return value;
- !       };
-     
-     // Otherwise the entry is not in the sparse matrix,
-     // i.e. it is 0.
-     
-     return 0.;
- ! };
-   
-   
-   
-   
-   inline
- ! bool PetscMatrix::closed() const
-   {
-     assert (initialized());
-     
- --- 483,514 ----
-     ierr = MatGetRow(mat, i_val, &ncols, &petsc_cols, &petsc_row); CHKERRQ(ierr);
-   
-   
- +   //TODO:[BSK] A binary search on petsc_cols would be faster!
-     for (int entry=0; entry<ncols; entry++)
-       if (petsc_cols[entry] == j_val)
-         {
-   	found = true;
-   	  
- ! 	value = static_cast<T>(petsc_row[entry]);
-   	  
-   	ierr = MatRestoreRow(mat, i_val,
-   			     &ncols, &petsc_cols, &petsc_row); CHKERRQ(ierr);
-   	  
-   	return value;
- !       }
-     
-     // Otherwise the entry is not in the sparse matrix,
-     // i.e. it is 0.
-     
-     return 0.;
- ! }
-   
-   
-   
-   
- + template <typename T>
-   inline
- ! bool PetscMatrix<T>::closed() const
-   {
-     assert (initialized());
-     
- ***************
- *** 526,579 ****
-   
-     ierr = MatAssembled(mat, &assembled); CHKERRQ(ierr);
-   
- !   if (assembled == PETSC_TRUE)
- !     return true;
- ! 
- !   return false;
- ! };
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! void PetscMatrix::print() const
- ! {
- !   assert (initialized());
- ! 
- ! #ifndef USE_COMPLEX_NUMBERS
- ! 
- !   for (unsigned int i=0; i<m(); i++)
- !     {
- !       for (unsigned int j=0; j<n(); j++)
- ! 	std::cout << std::setw(8) << (*this)(i,j) << " ";
- !       std::cout << std::endl;
- !     }
- ! 
- ! #else
- !   // std::complex<>::operator<<() is defined, but use this form
- ! 
- !   std::cout << "Real part:" << std::endl;
- !   for (unsigned int i=0; i<m(); i++)
- !     {
- !       for (unsigned int j=0; j<n(); j++)
- ! 	std::cout << std::setw(8) << (*this)(i,j).real() << " ";
- !       std::cout << std::endl;
- !     }
- ! 
- !   std::cout << std::endl << "Imaginary part:" << std::endl;
- !   for (unsigned int i=0; i<m(); i++)
- !     {
- !       for (unsigned int j=0; j<n(); j++)
- ! 	std::cout << std::setw(8) << (*this)(i,j).imag() << " ";
- !       std::cout << std::endl;
- !     }
- ! 
- ! #endif
- ! 
- ! };
-   
-   
-   
- ! #endif
- ! /*---------------------------   petsc_matrix.h     -------------------------*/
- ! #endif
- --- 517,526 ----
-   
-     ierr = MatAssembled(mat, &assembled); CHKERRQ(ierr);
-   
- !   return (assembled == PETSC_TRUE);
- ! }
-   
-   
-   
- ! #endif // #ifdef HAVE_PETSC
- ! #endif // #ifdef __petsc_matrix_h__
- Index: include/petsc_vector.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/petsc_vector.h,v
- retrieving revision 1.7
- diff -c -r1.7 petsc_vector.h
- *** include/petsc_vector.h	3 Feb 2003 03:51:49 -0000	1.7
- --- include/petsc_vector.h	21 Feb 2003 20:53:40 -0000
- ***************
- *** 1,4 ****
- ! //    $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 19,31 ****
-   
-   
-   
-   #include "mesh_common.h"
-   
-   
-   #ifdef HAVE_PETSC
-   
- - #ifndef __petsc_vector_h__
- - #define __petsc_vector_h__
-   
-   
-   // TODO:[BSK} This seems necessary to use petsc on IBM Power3 at NERSC, but only there?  This will need to be wrapped in an ifdef with a variable set by configure
- --- 19,34 ----
-   
-   
-   
- + 
- + #ifndef __petsc_vector_h__
- + #define __petsc_vector_h__
- + 
- + 
-   #include "mesh_common.h"
-   
-   
-   #ifdef HAVE_PETSC
-   
-   
-   
-   // TODO:[BSK} This seems necessary to use petsc on IBM Power3 at NERSC, but only there?  This will need to be wrapped in an ifdef with a variable set by configure
- ***************
- *** 35,68 ****
-   // C++ includes
-   #include <vector>
-   
-   
- ! 
- ! /**
-    * Petsc include files.  PETSc with complex numbers 
-    * is actually C++.
-    */
-   # ifndef USE_COMPLEX_NUMBERS
-   
- - namespace Petsc {
-   extern "C" {
- ! #include "petscvec.h"
-   }
-   // for easy switching between Petsc 2.1.0/2.1.1
-   // typedef Scalar PetscScalar;
- - } 
- - using namespace Petsc;
-   
-   #else
-   
- ! #include "petscvec.h"
-   
-   #endif
-   
-   
-   
-   // forward declarations
- ! class PetscMatrix;
- ! class PetscInterface;
-   
-   
-   /**
- --- 38,68 ----
-   // C++ includes
-   #include <vector>
-   
- + // Local includes
- + #include "numeric_vector.h"
-   
- ! /*
-    * Petsc include files.  PETSc with complex numbers 
-    * is actually C++.
-    */
-   # ifndef USE_COMPLEX_NUMBERS
-   
-   extern "C" {
- ! #include <petscvec.h>
-   }
-   // for easy switching between Petsc 2.1.0/2.1.1
-   // typedef Scalar PetscScalar;
-   
-   #else
-   
- ! #include <petscvec.h>
-   
-   #endif
-   
-   
-   
-   // forward declarations
- ! template <typename T> class PetscInterface;
-   
-   
-   /**
- ***************
- *** 72,92 ****
-    * @author Benjamin S. Kirk, 2002
-    */
-   
- ! class PetscVector
-   {
- !  public:
-   
-     /**
-      *  Dummy-Constructor. Dimension=0
-      */
-     PetscVector ();
- !     
- !   /**
- !    * Copy-Constructor. Dimension set to that of V, all components are copied
- !    * from V
- !    */
- !   //PetscVector (const PetscVector& V);
- !     
-     /**
-      * Constructor. Set dimension to \p n and initialize all elements with zero.
-      */
- --- 72,87 ----
-    * @author Benjamin S. Kirk, 2002
-    */
-   
- ! template <typename T>
- ! class PetscVector : public NumericVector<T>
-   {
- ! public:
-   
-     /**
-      *  Dummy-Constructor. Dimension=0
-      */
-     PetscVector ();
- !   
-     /**
-      * Constructor. Set dimension to \p n and initialize all elements with zero.
-      */
- ***************
- *** 111,117 ****
-     void close (); 
-   
-     /**
- !    * @returns the \p PetscVector to a pristine state.
-      */
-     void clear ();
-     
- --- 106,112 ----
-     void close (); 
-   
-     /**
- !    * @returns the \p PetscVector<T> to a pristine state.
-      */
-     void clear ();
-     
- ***************
- *** 135,188 ****
-      */
-       
-     void init (const unsigned int N,
- ! 	       const unsigned int n_local,
- ! 	       const bool         fast=false);
-       
-     /**
-      * call init with n_local = N,
-      */
-     void init (const unsigned int N,
- ! 	       const bool         fast=false);
-       
- !   /**
- !    * Change the dimension to that of the
- !    * vector \p V. The same applies as for
- !    * the other \p init function.
- !    *
- !    * The elements of \p V are not copied, i.e.
- !    * this function is the same as calling
- !    * \p init(V.size(),fast).
- !    */
- !   void init (const PetscVector& V,
- ! 	       const bool fast=false);
-   
-     /**
-      * $U(0-N) = s$: fill all components.
-      */
- !   PetscVector & operator= (const Complex s);
-       
-     /**
-      *  $U = V$: copy all components.
-      */
- !   PetscVector & operator= (const PetscVector &V);
-   
-     /**
-      *  $U = V$: copy all components.
-      */
- !   PetscVector & operator= (const std::vector<Complex> &v);
-   
-     /**
- !    * @returns the scalar product of
- !    * two vectors.  The return type
- !    * is the underlying type of
- !    * \p this vector, so the return
- !    * type and the accuracy with
- !    * which it the result is
- !    * computed depend on the order
- !    * of the arguments of this
- !    * vector.
-      */
- !   Complex operator* (const PetscVector &V) const;
-   
-     /**
-      * @returns the minimum element in the vector.
- --- 130,175 ----
-      */
-       
-     void init (const unsigned int N,
- ! 	     const unsigned int n_local,
- ! 	     const bool         fast=false);
-       
-     /**
-      * call init with n_local = N,
-      */
-     void init (const unsigned int N,
- ! 	     const bool         fast=false);
-       
- !   //   /**
- !   //    * Change the dimension to that of the
- !   //    * vector \p V. The same applies as for
- !   //    * the other \p init function.
- !   //    *
- !   //    * The elements of \p V are not copied, i.e.
- !   //    * this function is the same as calling
- !   //    * \p init(V.size(),fast).
- !   //    */
- !   //   void init (const NumericVector<T>& V,
- !   // 	     const bool fast=false);
-   
-     /**
-      * $U(0-N) = s$: fill all components.
-      */
- !   NumericVector<T> & operator= (const T s);
-       
-     /**
-      *  $U = V$: copy all components.
-      */
- !   NumericVector<T> & operator= (const NumericVector<T> &V);
-   
-     /**
-      *  $U = V$: copy all components.
-      */
- !   PetscVector<T> & operator= (const PetscVector<T> &V);
-   
-     /**
- !    *  $U = V$: copy all components.
-      */
- !   NumericVector<T> & operator= (const std::vector<T> &v);
-   
-     /**
-      * @returns the minimum element in the vector.
- ***************
- *** 221,227 ****
-     /**
-      * @returns dimension of the vector. This
-      * function was formerly called \p n(), but
- !    * was renamed to get the \p PetscVector class
-      * closer to the C++ standard library's
-      * \p std::vector container.
-      */
- --- 208,214 ----
-     /**
-      * @returns dimension of the vector. This
-      * function was formerly called \p n(), but
- !    * was renamed to get the \p PetscVector<T> class
-      * closer to the C++ standard library's
-      * \p std::vector container.
-      */
- ***************
- *** 248,351 ****
-     /**
-      * Access components, returns \p U(i).
-      */
- !   Complex operator() (const unsigned int i) const;
-       
-     /**
-      * Addition operator.
-      * Fast equivalent to \p U.add(1, V).
-      */
- !   PetscVector & operator += (const PetscVector &V);
-   
-     /**
-      * Subtraction operator.
-      * Fast equivalent to \p U.add(-1, V).
-      */
- !   PetscVector & operator -= (const PetscVector &V);
-       
-     /**
-      * v(i) = value
-      */
- !   void set (const unsigned int i, const Complex value);
-       
-     /**
-      * v(i) += value
-      */
- !   void add (const unsigned int i, const Complex value);
-       
-     /**
-      * $U(0-DIM)+=s$.
-      * Addition of \p s to all components. Note
-      * that \p s is a scalar and not a vector.
-      */
- !   void add (const Complex s);
-       
-     /**
-      * U+=V.
-      * Simple vector addition, equal to the
-      * \p operator +=.
-      */
- !   void add (const PetscVector& V);
-   
-     /**
-      * U+=a*V.
-      * Simple vector addition, equal to the
-      * \p operator +=.
-      */
- !   void add (const Complex a, const PetscVector& v);
-     
-     /**
- !    * U+=v where v is a std::vector<Complex> 
-      * and you
-      * want to specify WHERE to add it
-      */
- !   void add_vector (const std::vector<Complex>& v,
-   		   const std::vector<unsigned int>& dof_indices);
-   
-     /**
-      * U+=V where U and V are type 
- !    * PetscVector and you
-      * want to specify WHERE to add
- !    * the PetscVector V 
-      */
- !   void add_petsc_vector (const PetscVector& V,
- ! 			 const std::vector<unsigned int>& dof_indices);
- !     
- ! 
-     
-     /**
-      * Scale each element of the
-      * vector by the given factor.
-      */
- !   void scale (const Complex factor);
- ! 
- !   /**
- !    * Scale each element of the
- !    * vector by a constant
- !    * value. This operator is an
- !    * alias to the @ref{scale}
- !    * function, except that it
- !    * returns a reference to itself.
- !    */
- !   PetscVector & operator *= (const Complex factor);
-       
-     /**
-      * Creates a copy of the global vector in the
-      * local vector \p v_local.
-      */
- !   void localize (std::vector<Complex>& v_local) const;
-   
-     /**
- !    * Same, but fills a \p PetscVector instead of
-      * a \p std::vector.
-      */
- !   void localize (PetscVector& v_local) const;
-   
-     /**
-      * Creates a local vector \p v_local containing
-      * only information relevant to this processor, as
-      * defined by the \p send_list.
-      */
- !   void localize (PetscVector& v_local,
-   		 const std::vector<unsigned int>& send_list) const;
-   
-     /**
- --- 235,326 ----
-     /**
-      * Access components, returns \p U(i).
-      */
- !   T operator() (const unsigned int i) const;
-       
-     /**
-      * Addition operator.
-      * Fast equivalent to \p U.add(1, V).
-      */
- !   NumericVector<T> & operator += (const NumericVector<T> &V);
-   
-     /**
-      * Subtraction operator.
-      * Fast equivalent to \p U.add(-1, V).
-      */
- !   NumericVector<T> & operator -= (const NumericVector<T> &V);
-       
-     /**
-      * v(i) = value
-      */
- !   void set (const unsigned int i, const T value);
-       
-     /**
-      * v(i) += value
-      */
- !   void add (const unsigned int i, const T value);
-       
-     /**
-      * $U(0-DIM)+=s$.
-      * Addition of \p s to all components. Note
-      * that \p s is a scalar and not a vector.
-      */
- !   void add (const T s);
-       
-     /**
-      * U+=V.
-      * Simple vector addition, equal to the
-      * \p operator +=.
-      */
- !   void add (const NumericVector<T>& V);
-   
-     /**
-      * U+=a*V.
-      * Simple vector addition, equal to the
-      * \p operator +=.
-      */
- !   void add (const T a, const NumericVector<T>& v);
-     
-     /**
- !    * U+=v where v is a std::vector<T> 
-      * and you
-      * want to specify WHERE to add it
-      */
- !   void add_vector (const std::vector<T>& v,
-   		   const std::vector<unsigned int>& dof_indices);
-   
-     /**
-      * U+=V where U and V are type 
- !    * NumericVector<T> and you
-      * want to specify WHERE to add
- !    * the NumericVector<T> V 
-      */
- !   void add_vector (const NumericVector<T>& V,
- ! 		   const std::vector<unsigned int>& dof_indices);
-     
-     /**
-      * Scale each element of the
-      * vector by the given factor.
-      */
- !   void scale (const T factor);
-       
-     /**
-      * Creates a copy of the global vector in the
-      * local vector \p v_local.
-      */
- !   void localize (std::vector<T>& v_local) const;
-   
-     /**
- !    * Same, but fills a \p NumericVector<T> instead of
-      * a \p std::vector.
-      */
- !   void localize (NumericVector<T>& v_local) const;
-   
-     /**
-      * Creates a local vector \p v_local containing
-      * only information relevant to this processor, as
-      * defined by the \p send_list.
-      */
- !   void localize (NumericVector<T>& v_local,
-   		 const std::vector<unsigned int>& send_list) const;
-   
-     /**
- ***************
- *** 354,368 ****
-      * default the data is sent to processor 0.  This method
-      * is useful for outputting data from one processor.
-      */
- !   void localize_to_one (std::vector<Complex>& v_local,
-   			const unsigned int proc_id=0) const;
-       
- !   /**
- !    * Prints the contents of the vector to the screen.
- !    */
- !   void print() const;
- !     
- !  private:
-   
-     /**
-      * Actual Petsc vector datatype
- --- 329,338 ----
-      * default the data is sent to processor 0.  This method
-      * is useful for outputting data from one processor.
-      */
- !   void localize_to_one (std::vector<T>& v_local,
-   			const unsigned int proc_id=0) const;
-       
- ! private:
-   
-     /**
-      * Actual Petsc vector datatype
- ***************
- *** 371,388 ****
-     Vec vec;
-     
-     /**
- !    * Flag to see if the Petsc
- !    * assemble routines have been called yet
- !    */
- !   bool is_closed;
- !   
- !   /**
- !    * Flag to tell if init 
- !    * has been called yet
-      */
- !   bool initialized;
- ! 
- !   friend class PetscInterface;
-   };
-   
-   
- --- 341,349 ----
-     Vec vec;
-     
-     /**
- !    * Make other Petsc datatypes friends
-      */
- !   friend class PetscInterface<T>;
-   };
-   
-   
- ***************
- *** 390,436 ****
-   
-   
-   
-   inline
- ! PetscVector::PetscVector () :
- !   is_closed(false),
- !   initialized(false)
- ! {};
-   
-   
-   
-   inline
- ! PetscVector::PetscVector (const unsigned int n) :
- !   is_closed(false),
- !   initialized(false)
-   {
-     init(n, n, false);
- ! };
-   
-   
-   
-   inline
- ! PetscVector::PetscVector (const unsigned int n,
- ! 			  const unsigned int n_local) :
- !   is_closed(false),
- !   initialized(false)
-   {
-     init(n, n_local, false);
- ! };
-   
-   
-   
-   inline
- ! PetscVector::~PetscVector ()
-   {
-     clear ();
- ! };
-   
-   
-   
-   inline
- ! void PetscVector::init (const unsigned int n,
- ! 			const unsigned int n_local,
- ! 			const bool fast)
-   {
-     int ierr=0;
-     int petsc_n=static_cast<int>(n);
- --- 351,396 ----
-   
-   
-   
- + template <typename T>
-   inline
- ! PetscVector<T>::PetscVector ()
- ! {}
-   
-   
-   
- + template <typename T>
-   inline
- ! PetscVector<T>::PetscVector (const unsigned int n)
-   {
-     init(n, n, false);
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! PetscVector<T>::PetscVector (const unsigned int n,
- ! 			     const unsigned int n_local)
-   {
-     init(n, n_local, false);
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! PetscVector<T>::~PetscVector ()
-   {
-     clear ();
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! void PetscVector<T>::init (const unsigned int n,
- ! 			   const unsigned int n_local,
- ! 			   const bool fast)
-   {
-     int ierr=0;
-     int petsc_n=static_cast<int>(n);
- ***************
- *** 438,444 ****
-   
-   
-     
- !   if (initialized)
-       {
-         std::cerr << "ERROR: Vector already initialized!"
-   		<< std::endl;
- --- 398,404 ----
-   
-   
-     
- !   if (initialized())
-       {
-         std::cerr << "ERROR: Vector already initialized!"
-   		<< std::endl;
- ***************
- *** 464,470 ****
-         ierr = VecSetFromOptions (vec);                   CHKERRQ(ierr);
-       }  
-     
- !   initialized = true;
-   
-     
-     if (fast == false)
- --- 424,430 ----
-         ierr = VecSetFromOptions (vec);                   CHKERRQ(ierr);
-       }  
-     
- !   _is_initialized = true;
-   
-     
-     if (fast == false)
- ***************
- *** 473,600 ****
-     
-     
-     return;
- ! };
-   
-   
-   
-   inline
- ! void PetscVector::init (const unsigned int n,
- ! 			const bool fast)
-   {
-     init(n,n,fast);
- ! };
-   
-   
-   
-   inline
- ! void PetscVector::close ()
-   {
- !   assert (initialized);
-     
-     int ierr=0;
-     
-     ierr = VecAssemblyBegin(vec); CHKERRQ(ierr);
-     ierr = VecAssemblyEnd(vec);   CHKERRQ(ierr);
-   
- !   is_closed = true;
-     
-     return;
- ! };
-   
-   
-   
-   inline
- ! void PetscVector::clear ()
-   {
- !   if (initialized)
-       {
-         int ierr=0;
-   
-         ierr = VecDestroy(vec); CHKERRQ(ierr);
- !     };
-   
- !   is_closed = initialized = false;
- ! };
-   
-   
-   
-   inline
- ! void PetscVector::zero ()
-   {
- !   assert (initialized);
-     
-     int ierr=0;
-   
-     PetscScalar z=0.;
-     
-     ierr = VecSet (&z, vec); CHKERRQ(ierr);
- ! };
-   
-   
-   
-   inline
- ! unsigned int PetscVector::size () const
-   {
- !   assert (initialized);
-     
-     int ierr=0, petsc_size=0;
-     
- !   if (!initialized)
-       return 0;
-     
-     ierr = VecGetSize(vec, &petsc_size); CHKERRQ(ierr);
-   
-     return static_cast<unsigned int>(petsc_size);
- ! };
-   
-   
-   
-   inline
- ! unsigned int PetscVector::local_size () const
-   {
- !   assert (initialized);
-     
-     int ierr=0, petsc_size=0;
-     
-     ierr = VecGetLocalSize(vec, &petsc_size); CHKERRQ(ierr);
-     
-     return static_cast<unsigned int>(petsc_size);
- ! };
-   
-   
-   
-   inline
- ! unsigned int PetscVector::first_local_index () const
-   {
- !   assert (initialized);
-     
-     int ierr=0, petsc_first=0, petsc_last=0;
-     
-     ierr = VecGetOwnershipRange (vec, &petsc_first, &petsc_last); CHKERRQ(ierr);
-     
-     return static_cast<unsigned int>(petsc_first);
- ! };
-   
-   
-   
-   inline
- ! unsigned int PetscVector::last_local_index () const
-   {
- !   assert (initialized);
-     
-     int ierr=0, petsc_first=0, petsc_last=0;
-     
-     ierr = VecGetOwnershipRange (vec, &petsc_first, &petsc_last); CHKERRQ(ierr);
-     
-     return static_cast<unsigned int>(petsc_last);
- ! };
-   
-   
-   
-   inline
- ! Complex PetscVector::operator() (const unsigned int i) const
-   {
- !   assert (initialized);
-     assert ( ((i >= first_local_index()) &&
-   	    (i <  last_local_index())) );
-   
- --- 433,569 ----
-     
-     
-     return;
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! void PetscVector<T>::init (const unsigned int n,
- ! 			   const bool fast)
-   {
-     init(n,n,fast);
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! void PetscVector<T>::close ()
-   {
- !   assert (initialized());
-     
-     int ierr=0;
-     
-     ierr = VecAssemblyBegin(vec); CHKERRQ(ierr);
-     ierr = VecAssemblyEnd(vec);   CHKERRQ(ierr);
-   
- !   _is_closed = true;
-     
-     return;
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! void PetscVector<T>::clear ()
-   {
- !   if (initialized())
-       {
-         int ierr=0;
-   
-         ierr = VecDestroy(vec); CHKERRQ(ierr);
- !     }
-   
- !   _is_closed = _is_initialized = false;
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! void PetscVector<T>::zero ()
-   {
- !   assert (initialized());
-     
-     int ierr=0;
-   
-     PetscScalar z=0.;
-     
-     ierr = VecSet (&z, vec); CHKERRQ(ierr);
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! unsigned int PetscVector<T>::size () const
-   {
- !   assert (initialized());
-     
-     int ierr=0, petsc_size=0;
-     
- !   if (!initialized())
-       return 0;
-     
-     ierr = VecGetSize(vec, &petsc_size); CHKERRQ(ierr);
-   
-     return static_cast<unsigned int>(petsc_size);
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! unsigned int PetscVector<T>::local_size () const
-   {
- !   assert (initialized());
-     
-     int ierr=0, petsc_size=0;
-     
-     ierr = VecGetLocalSize(vec, &petsc_size); CHKERRQ(ierr);
-     
-     return static_cast<unsigned int>(petsc_size);
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! unsigned int PetscVector<T>::first_local_index () const
-   {
- !   assert (initialized());
-     
-     int ierr=0, petsc_first=0, petsc_last=0;
-     
-     ierr = VecGetOwnershipRange (vec, &petsc_first, &petsc_last); CHKERRQ(ierr);
-     
-     return static_cast<unsigned int>(petsc_first);
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! unsigned int PetscVector<T>::last_local_index () const
-   {
- !   assert (initialized());
-     
-     int ierr=0, petsc_first=0, petsc_last=0;
-     
-     ierr = VecGetOwnershipRange (vec, &petsc_first, &petsc_last); CHKERRQ(ierr);
-     
-     return static_cast<unsigned int>(petsc_last);
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! T PetscVector<T>::operator() (const unsigned int i) const
-   {
- !   assert (initialized());
-     assert ( ((i >= first_local_index()) &&
-   	    (i <  last_local_index())) );
-   
- ***************
- *** 608,622 ****
-     
-     ierr = VecRestoreArray (vec, &values); CHKERRQ(ierr);
-     
- !   return static_cast<Complex>(value);
- ! };
-   
-   
-   
-   inline
- ! Real PetscVector::min () const
-   {
- !   assert (initialized);
-   
-     int index=0, ierr=0;
-     PetscReal min=0.;
- --- 577,592 ----
-     
-     ierr = VecRestoreArray (vec, &values); CHKERRQ(ierr);
-     
- !   return static_cast<T>(value);
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! Real PetscVector<T>::min () const
-   {
- !   assert (initialized());
-   
-     int index=0, ierr=0;
-     PetscReal min=0.;
- ***************
- *** 625,638 ****
-   
-     // this return value is correct: VecMin returns a PetscReal
-     return static_cast<Real>(min);
- ! };
-   
-   
-   
-   inline
- ! Real PetscVector::max() const
-   {
- !   assert (initialized);
-   
-     int index=0, ierr=0;
-     PetscReal max=0.;
- --- 595,609 ----
-   
-     // this return value is correct: VecMin returns a PetscReal
-     return static_cast<Real>(min);
- ! }
-   
-   
-   
- + template <typename T>
-   inline
- ! Real PetscVector<T>::max() const
-   {
- !   assert (initialized());
-   
-     int index=0, ierr=0;
-     PetscReal max=0.;
- ***************
- *** 641,677 ****
-   
-     // this return value is correct: VecMax returns a PetscReal
-     return static_cast<Real>(max);
- ! };
- ! 
- ! 
- ! 
- ! inline
- ! void PetscVector::print() const
- ! {
- !   assert (initialized);
- !   
- ! #ifndef USE_COMPLEX_NUMBERS
- ! 
- !   for (unsigned int i=0; i<size(); i++)
- !     std::cout << (*this)(i) << std::endl;
- ! 
- ! #else
- !   // std::complex<>::operator<<() is defined, but use this form
- ! 
- !   std::cout << "Real part:" << std::endl;
- !   for (unsigned int i=0; i<size(); i++)
- !     std::cout << (*this)(i).real() << std::endl;
- ! 
- !   std::cout << std::endl << "Imaginary part:" << std::endl;
- !   for (unsigned int i=0; i<size(); i++)
- !     std::cout << (*this)(i).imag() << std::endl;
- ! 
- ! 
- ! #endif
- !   
- !   return;
- ! };
-   
-   
- ! #endif
- ! #endif
- --- 612,619 ----
-   
-     // this return value is correct: VecMax returns a PetscReal
-     return static_cast<Real>(max);
- ! }
-   
-   
- ! #endif // #ifdef HAVE_PETSC
- ! #endif // #ifdef __petsc_vector_h__
- Index: include/point.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/point.h,v
- retrieving revision 1.6
- retrieving revision 1.10
- diff -c -r1.6 -r1.10
- *** include/point.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/point.h	21 Feb 2003 18:31:30 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 47,55 ****
-      * Constructor.  By default sets all entries to 0.  Gives the point 0 in
-      * \p DIM dimensions.
-      */
- !   Point  (const Real x=0,
- ! 	  const Real y=0,
- ! 	  const Real z=0);
-   
-     /**
-      * Copy-constructor.
- --- 47,55 ----
-      * Constructor.  By default sets all entries to 0.  Gives the point 0 in
-      * \p DIM dimensions.
-      */
- !   Point  (const Real x=0.,
- ! 	  const Real y=0.,
- ! 	  const Real z=0.);
-   
-     /**
-      * Copy-constructor.
- ***************
- *** 62,67 ****
- --- 62,72 ----
-     ~Point ();
-   
-     /**
- +    * Assign to a point without creating a temporary.
- +    */
- +   void assign (const Point &);
- + 
- +   /**
-      * Return the \f$ i^{th} \f$ element of the point.
-      */
-     Real operator () (const unsigned int i) const;
- ***************
- *** 75,85 ****
-      * Add two points.
-      */
-     Point operator + (const Point &) const;
- !   
-     /**
-      * Add to this points.
-      */
- !   Point operator += (const Point &);
-     
-     /**
-      * Subtract two points.
- --- 80,101 ----
-      * Add two points.
-      */
-     Point operator + (const Point &) const;
- ! 
-     /**
-      * Add to this points.
-      */
- !   const Point & operator += (const Point &);
- !   
- !   /**
- !    * Add to this point without creating a temporary.
- !    */
- !   void add (const Point &); 
- !   
- !   /**
- !    * Add a scaled value to this point without
- !    * creating a temporary.
- !    */
- !   void add_scaled (const Point &, const Real); 
-     
-     /**
-      * Subtract two points.
- ***************
- *** 89,97 ****
-     /**
-      * Subtract from this point.
-      */
- !   Point operator -= (const Point &);
-   
-     /**
-      * Return the opposite of a point
-      */
-     Point operator - () const;
- --- 105,124 ----
-     /**
-      * Subtract from this point.
-      */
- !   const Point & operator -= (const Point &);
-   
-     /**
- +    * Subtract from this point without creating a temporary.
- +    */
- +   void subtract (const Point &); 
- +   
- +   /**
- +    * Subtract a scaled value from this point without
- +    * creating a temporary.
- +    */
- +   void subtract_scaled (const Point &, const Real); 
- +   
- +   /**
-      * Return the opposite of a point
-      */
-     Point operator - () const;
- ***************
- *** 102,112 ****
- --- 129,149 ----
-     Point operator * (const Real) const;
-     
-     /**
- +    * Multiply this point by a number, i.e. scale.
- +    */
- +   const Point & operator *= (const Real);
- +   
- +   /**
-      * Divide a point by a number, i.e. scale.
-      */
-     Point operator / (const Real) const;
-   
-     /**
- +    * Divide this point by a number, i.e. scale.
- +    */
- +   const Point & operator /= (const Real);
- + 
- +   /**
-      * Multiply 2 points together, i.e. dot-product.
-      */
-     Real operator * (const Point &) const;
- ***************
- *** 131,137 ****
-     /**
-      * Zero the point in any dimension.
-      */
- !   void clear();
-   
-     /**
-      * @returns \p true if two points occupy the same
- --- 168,174 ----
-     /**
-      * Zero the point in any dimension.
-      */
- !   void zero();
-   
-     /**
-      * @returns \p true if two points occupy the same
- ***************
- *** 157,165 ****
-   
-     /**
-      * Unformatted print to the stream \p out.  Simply prints the elements
- !    * of the point separated by spaces.
-      */ 
- !   void write_unformatted (std::ostream &out) const;
-       
-    protected:
-   
- --- 194,203 ----
-   
-     /**
-      * Unformatted print to the stream \p out.  Simply prints the elements
- !    * of the point separated by spaces.  Optionally prints a newline,
- !    * which it does by default.
-      */ 
- !   void write_unformatted (std::ostream &out, const bool newline = true) const;
-       
-    protected:
-   
- ***************
- *** 172,178 ****
-     /**
-      * The coordinates of the \p Point
-      */
- !   Real coords[DIM];
-   
-     /**
-      * Make the derived class a friend
- --- 210,216 ----
-     /**
-      * The coordinates of the \p Point
-      */
- !   Real _coords[DIM];
-   
-     /**
-      * Make the derived class a friend
- ***************
- *** 189,204 ****
-   	      const Real y,
-   	      const Real z)
-   {
- !   coords[0] = x;
-   
-     if (DIM > 1)
-       {
- !       coords[1] = y;
-   
-         if (DIM == 3)
- ! 	coords[2] = z;
- !     };
- ! };
-   
-   
-   
- --- 227,242 ----
-   	      const Real y,
-   	      const Real z)
-   {
- !   _coords[0] = x;
-   
-     if (DIM > 1)
-       {
- !       _coords[1] = y;
-   
-         if (DIM == 3)
- ! 	_coords[2] = z;
- !     }
- ! }
-   
-   
-   
- ***************
- *** 207,224 ****
-   {
-     // copy the nodes from point p to me
-     for (unsigned int i=0; i<DIM; i++)
- !     coords[i] = p.coords[i];
- ! };
-   
-   
-   
-   inline
-   Point::~Point ()
-   {
- ! };
-   
-   
-   
-   
-   inline
-   Real Point::operator () (const unsigned int i) const
- --- 245,270 ----
-   {
-     // copy the nodes from point p to me
-     for (unsigned int i=0; i<DIM; i++)
- !     _coords[i] = p._coords[i];
- ! }
-   
-   
-   
-   inline
-   Point::~Point ()
-   {
- ! }
-   
-   
-   
- + inline
- + void Point::assign (const Point &p)
- + {
- +   for (unsigned int i=0; i<DIM; i++)
- +     _coords[i] = p._coords[i];
- + }
- + 
- + 
-   
-   inline
-   Real Point::operator () (const unsigned int i) const
- ***************
- *** 228,236 ****
-     if (i > (DIM-1))
-       return 0.;
-     
- !   return coords[i];
- ! };
- ! 
-   
-   
-   
- --- 274,281 ----
-     if (i > (DIM-1))
-       return 0.;
-     
- !   return _coords[i];
- ! }
-   
-   
-   
- ***************
- *** 239,247 ****
-   {
-     assert (i<DIM);
-     
- !   return coords[i];
- ! };
- ! 
-   
-   
-   
- --- 284,291 ----
-   {
-     assert (i<DIM);
-     
- !   return _coords[i];
- ! }
-   
-   
-   
- ***************
- *** 250,284 ****
-   {
-    
-   #if DIM == 1
- !   return Point(coords[0] + p.coords[0]);
-   #endif
-   
-   #if DIM == 2 
- !   return Point(coords[0] + p.coords[0],
- ! 	       coords[1] + p.coords[1]);
-   #endif
-   
-   #if DIM == 3
- !   return Point(coords[0] + p.coords[0],
- ! 	       coords[1] + p.coords[1],
- ! 	       coords[2] + p.coords[2]);
-   #endif
-   	       
- ! };
- ! 
-   
-   
-   
-   inline
- ! Point Point::operator += (const Point &p)
-   {
-   
-     for (unsigned int i=0; i<DIM; i++)
- !     coords[i] += p.coords[i];
-   
- -   return *this;
- - };
-   
-   
-   
-   
- --- 294,342 ----
-   {
-    
-   #if DIM == 1
- !   return Point(_coords[0] + p._coords[0]);
-   #endif
-   
-   #if DIM == 2 
- !   return Point(_coords[0] + p._coords[0],
- ! 	       _coords[1] + p._coords[1]);
-   #endif
-   
-   #if DIM == 3
- !   return Point(_coords[0] + p._coords[0],
- ! 	       _coords[1] + p._coords[1],
- ! 	       _coords[2] + p._coords[2]);
-   #endif
-   	       
- ! }
-   
-   
-   
-   inline
- ! const Point & Point::operator += (const Point &p)
-   {
- +   add (p);
-   
- +   return *this;
- + }
- + 
- + 
- + 
- + inline
- + void Point::add (const Point &p)
- + {
-     for (unsigned int i=0; i<DIM; i++)
- !     _coords[i] += p._coords[i];
- ! }
- ! 
-   
-   
- + inline
- + void Point::add_scaled (const Point &p, const Real factor)
- + {
- +   for (unsigned int i=0; i<DIM; i++)
- +     _coords[i] += factor*p._coords[i];
- + }
-   
-   
-   
- ***************
- *** 287,323 ****
-   {
-   
-   #if DIM == 1
- !   return Point(coords[0] - p.coords[0]);
-   #endif
-   
-   #if DIM == 2 
- !   return Point(coords[0] - p.coords[0],
- ! 	       coords[1] - p.coords[1]);
-   #endif
-   
-   #if DIM == 3
- !   return Point(coords[0] - p.coords[0],
- ! 	       coords[1] - p.coords[1],
- ! 	       coords[2] - p.coords[2]);
-   #endif
-   
- !   
- ! };
- ! 
-   
-   
-   
-   inline
- ! Point Point::operator -= (const Point &p)
-   {
-   
-     for (unsigned int i=0; i<DIM; i++)
- !     coords[i] -= p.coords[i];
-   
- -   return *this;
- - };
-   
-   
-   
-   
-   inline
- --- 345,394 ----
-   {
-   
-   #if DIM == 1
- !   return Point(_coords[0] - p._coords[0]);
-   #endif
-   
-   #if DIM == 2 
- !   return Point(_coords[0] - p._coords[0],
- ! 	       _coords[1] - p._coords[1]);
-   #endif
-   
-   #if DIM == 3
- !   return Point(_coords[0] - p._coords[0],
- ! 	       _coords[1] - p._coords[1],
- ! 	       _coords[2] - p._coords[2]);
-   #endif
-   
- ! }
-   
-   
-   
-   inline
- ! const Point & Point::operator -= (const Point &p)
-   {
- +   subtract (p);
- + 
- +   return *this;
- + }
-   
- + 
- + 
- + inline
- + void Point::subtract (const Point& p)
- + {
-     for (unsigned int i=0; i<DIM; i++)
- !     _coords[i] -= p._coords[i];
- ! }
-   
-   
-   
- + inline
- + void Point::subtract_scaled (const Point &p, const Real factor)
- + {
- +   for (unsigned int i=0; i<DIM; i++)
- +     _coords[i] -= factor*p._coords[i];
- + }
- + 
-   
-   
-   inline
- ***************
- *** 325,346 ****
-   {
-     
-   #if DIM == 1
- !   return Point(-coords[0]);
-   #endif
-   
-   #if DIM == 2 
- !   return Point(-coords[0],
- ! 	       -coords[1]);
-   #endif
-   
-   #if DIM == 3
- !   return Point(-coords[0],
- ! 	       -coords[1], 
- ! 	       -coords[2]);
-   #endif
-     
- ! };
- ! 
-   
-   
-   
- --- 396,416 ----
-   {
-     
-   #if DIM == 1
- !   return Point(-_coords[0]);
-   #endif
-   
-   #if DIM == 2 
- !   return Point(-_coords[0],
- ! 	       -_coords[1]);
-   #endif
-   
-   #if DIM == 3
- !   return Point(-_coords[0],
- ! 	       -_coords[1], 
- ! 	       -_coords[2]);
-   #endif
-     
- ! }
-   
-   
-   
- ***************
- *** 349,369 ****
-   {
-   
-   #if DIM == 1
- !   return Point(coords[0]*factor);
-   #endif
-     
-   #if DIM == 2 
- !   return Point(coords[0]*factor,
- ! 	       coords[1]*factor);
-   #endif
-     
-   #if DIM == 3
- !   return Point(coords[0]*factor,
- ! 	       coords[1]*factor, 
- ! 	       coords[2]*factor);
-   #endif
-     
- ! };
-   
-   
-   
- --- 419,452 ----
-   {
-   
-   #if DIM == 1
- !   return Point(_coords[0]*factor);
-   #endif
-     
-   #if DIM == 2 
- !   return Point(_coords[0]*factor,
- ! 	       _coords[1]*factor);
-   #endif
-     
-   #if DIM == 3
- !   return Point(_coords[0]*factor,
- ! 	       _coords[1]*factor, 
- ! 	       _coords[2]*factor);
-   #endif
-     
- ! }
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! const Point & Point::operator *= (const Real factor)
- ! {
- !   for (unsigned int i=0; i<DIM; i++)
- !     _coords[i] *= factor;
- ! 
- !   return *this;
- ! }
- ! 
-   
-   
-   
- ***************
- *** 373,393 ****
-     assert (factor != static_cast<Real>(0.));
-   
-   #if DIM == 1
- !   return Point(coords[0]/factor);
-   #endif
-     
-   #if DIM == 2 
- !   return Point(coords[0]/factor,
- ! 	       coords[1]/factor);
-   #endif
-     
-   #if DIM == 3
- !   return Point(coords[0]/factor,
- ! 	       coords[1]/factor, 
- ! 	       coords[2]/factor);
-   #endif
-     
- ! };
-   
-   
-   
- --- 456,491 ----
-     assert (factor != static_cast<Real>(0.));
-   
-   #if DIM == 1
- !   return Point(_coords[0]/factor);
-   #endif
-     
-   #if DIM == 2 
- !   return Point(_coords[0]/factor,
- ! 	       _coords[1]/factor);
-   #endif
-     
-   #if DIM == 3
- !   return Point(_coords[0]/factor,
- ! 	       _coords[1]/factor, 
- ! 	       _coords[2]/factor);
-   #endif
-     
- ! }
- ! 
- ! 
- ! 
- ! 
- ! inline
- ! const Point & Point::operator /= (const Real factor)
- ! {
- !   assert (factor != static_cast<Real>(0.));
- ! 
- !   for (unsigned int i=0; i<DIM; i++)
- !     _coords[i] /= factor;
- ! 
- !   return *this;
- ! }
- ! 
-   
-   
-   
- ***************
- *** 395,414 ****
-   Real Point::operator * (const Point &p) const
-   {
-   #if DIM == 1
- !   return coords[0]*p.coords[0];
-   #endif
-   
-   #if DIM == 2
- !   return (coords[0]*p.coords[0] +
- ! 	  coords[1]*p.coords[1]);
-   #endif
-   
-   #if DIM == 3
- !   return (coords[0]*p.coords[0] +
- ! 	  coords[1]*p.coords[1] +
- ! 	  coords[2]*p.coords[2]);
-   #endif
- ! };
-   
-   
-   
- --- 493,512 ----
-   Real Point::operator * (const Point &p) const
-   {
-   #if DIM == 1
- !   return _coords[0]*p._coords[0];
-   #endif
-   
-   #if DIM == 2
- !   return (_coords[0]*p._coords[0] +
- ! 	  _coords[1]*p._coords[1]);
-   #endif
-   
-   #if DIM == 3
- !   return (_coords[0]*p._coords[0] +
- ! 	  _coords[1]*p._coords[1] +
- ! 	  _coords[2]*p._coords[2]);
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 416,422 ****
-   Real Point::size() const
-   {
-     return sqrt(size_sq());  
- ! };
-   
-   
-   
- --- 514,529 ----
-   Real Point::size() const
-   {
-     return sqrt(size_sq());  
- ! }
- ! 
- ! 
- ! 
- ! inline
- ! void Point::zero()
- ! {
- !   for (unsigned int i=0; i<DIM; i++)
- !     _coords[i] = 0;
- ! }
-   
-   
-   
- ***************
- *** 426,435 ****
-     Real val = 0.;
-   
-     for (unsigned int i=0; i<DIM; i++)
- !     val += coords[i]*coords[i];
-   
-     return val;  
- ! };
-   
-   
-   
- --- 533,542 ----
-     Real val = 0.;
-   
-     for (unsigned int i=0; i<DIM; i++)
- !     val += _coords[i]*_coords[i];
-   
-     return val;  
- ! }
-   
-   
-   
- Index: include/quadrature.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/quadrature.h,v
- retrieving revision 1.6
- retrieving revision 1.9
- diff -c -r1.6 -r1.9
- *** include/quadrature.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/quadrature.h	13 Feb 2003 22:56:08 -0000	1.9
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 24,35 ****
- --- 24,39 ----
-   
-   // C++ includes
-   #include <vector>
- + #include <utility>
-   
-   // Local includes
-   #include "mesh_common.h"
- + #include "reference_counted_object.h"
-   #include "point.h"
-   #include "enum_elem_type.h"
-   #include "enum_order.h"
- + #include "enum_quadrature_type.h"
- + #include "auto_ptr.h"
-   
-   
-   
- ***************
- *** 45,51 ****
-   // ------------------------------------------------------------
-   // QBase class definition
-   
- ! class QBase
-   {
-   protected:
-   
- --- 49,55 ----
-   // ------------------------------------------------------------
-   // QBase class definition
-   
- ! class QBase : public ReferenceCountedObject<QBase>
-   {
-   protected:
-   
- ***************
- *** 61,97 ****
-     /**
-      * Destructor.
-      */
- !   virtual ~QBase() {};
-   
-     /**
-      * @returns the number of points associated with the quadrature rule.
-      */    
-     unsigned int n_points() const
- !     { assert (!_points.empty()); return _points.size(); };
-   
-     /**
-      * @returns a \p std::vector containing the quadrature point locations
-      * on a reference object.
-      */
- !   const std::vector<Point>& get_points()  const { return _points;  };
-   
-     /**
-      * @returns a \p std::vector containing the quadrature weights.
-      */
- !   const std::vector<Real>& get_weights() const { return _weights; };
-   
-     /**
-      * @returns the \f$ i^{th} \f$ quadrature point on the reference object.
-      */
-     Point qp(const unsigned int i) const
- !     { assert (i < _points.size()); return _points[i]; };
-   
-     /**
-      * @returns the \f$ i^{th} \f$ quadrature weight.
-      */
-     Real w(const unsigned int i) const
- !     { assert (i < _weights.size()); return _weights[i]; };
- ! 
-     /**
-      * Initializes the data structures to contain a quadrature rule
-      * for an object of type \p type.  
- --- 65,117 ----
-     /**
-      * Destructor.
-      */
- !   virtual ~QBase() {}
- ! 
- !   /**
- !    * @returns the quadrature type in derived classes.
- !    */
- !   virtual QuadratureType type() const = 0;
- ! 
- !   /**
- !    * Builds a specific quadrature rule, identified through the
- !    * \p QuadratureType.  An \p AutoPtr<FEBase> is returned
- !    * to prevent a memory leak. This way the user need not
- !    * remember to delete the object.  Enables run-time decision of
- !    * the quadrature rule.
- !    */
- !   static AutoPtr<QBase> build(const QuadratureType _qt,
- ! 			      const unsigned int _dim,
- ! 			      const Order _order=INVALID_ORDER);
-   
-     /**
-      * @returns the number of points associated with the quadrature rule.
-      */    
-     unsigned int n_points() const
- !     { assert (!_points.empty()); return _points.size(); }
-   
-     /**
-      * @returns a \p std::vector containing the quadrature point locations
-      * on a reference object.
-      */
- !   const std::vector<Point>& get_points()  const { return _points;  }
-   
-     /**
-      * @returns a \p std::vector containing the quadrature weights.
-      */
- !   const std::vector<Real>& get_weights() const { return _weights; }
-   
-     /**
-      * @returns the \f$ i^{th} \f$ quadrature point on the reference object.
-      */
-     Point qp(const unsigned int i) const
- !     { assert (i < _points.size()); return _points[i]; }
-   
-     /**
-      * @returns the \f$ i^{th} \f$ quadrature weight.
-      */
-     Real w(const unsigned int i) const
- !     { assert (i < _weights.size()); return _weights[i]; }
- !   
-     /**
-      * Initializes the data structures to contain a quadrature rule
-      * for an object of type \p type.  
- ***************
- *** 108,114 ****
-     /**
-      * @returns the order of the quadrature rule.   
-      */
- !   Order get_order() const { return _order; };
-     
-     /**
-      * Prints information relevant to the quadrature rule.
- --- 128,134 ----
-     /**
-      * @returns the order of the quadrature rule.   
-      */
- !   Order get_order() const { return _order; }
-     
-     /**
-      * Prints information relevant to the quadrature rule.
- ***************
- *** 123,129 ****
-     /**
-      * Initializes the 1D quadrature rule by filling the points and
-      * weights vectors with the appropriate values.  The order of
- !    * the rule will be defined by the implementing class. 
-      */
-     virtual void init_1D (const ElemType _type=INVALID_ELEM) = 0;
-   
- --- 143,151 ----
-     /**
-      * Initializes the 1D quadrature rule by filling the points and
-      * weights vectors with the appropriate values.  The order of
- !    * the rule will be defined by the implementing class.
- !    * It is assumed that derived quadrature rules will at least
- !    * define the init_1D function, therefore it is pure virtual.
-      */
-     virtual void init_1D (const ElemType _type=INVALID_ELEM) = 0;
-   
- ***************
- *** 131,158 ****
-      * Initializes the 2D quadrature rule by filling the points and
-      * weights vectors with the appropriate values.  The order of
-      * the rule will be defined by the implementing class.
- !    */
- !   virtual void init_2D (const ElemType _type=INVALID_ELEM) = 0;
-   
-     /**
-      * Initializes the 3D quadrature rule by filling the points and
-      * weights vectors with the appropriate values.  The order of
-      * the rule will be defined by the implementing class.
- !    */
- !   virtual void init_3D (const ElemType _type=INVALID_ELEM) = 0;
- ! 
-   
-     
-     /**
-      * Initialize the 1D quadrature rule for a side (edge).
- !    */
- !   virtual void init_2D (const ElemType _type,
- ! 			const unsigned int side) = 0;
-     /**
-      * Initialize the 2D quadrature rule for a side (face).
-      */
- !   virtual void init_3D (const ElemType _type,
- ! 			const unsigned int side) = 0;
-     
-     /**
-      * Computes the tensor product of
- --- 153,237 ----
-      * Initializes the 2D quadrature rule by filling the points and
-      * weights vectors with the appropriate values.  The order of
-      * the rule will be defined by the implementing class.
- !    * Should not be pure virtual since a derived quadrature rule
- !    * may only be defined in 1D.  If not redefined, gives an
- !    * error (when \p DEBUG defined) when called.
- !    */
- !   virtual void init_2D (const ElemType)
- ! #ifndef DEBUG
- !   {}
- ! #else
- !   {  
- !     std::cerr << "ERROR: Seems as if this quadrature rule" << std::endl
- ! 	      << " is not implemented for 2D." << std::endl;
- !     error();
- !   }
- ! #endif
-   
-     /**
-      * Initializes the 3D quadrature rule by filling the points and
-      * weights vectors with the appropriate values.  The order of
-      * the rule will be defined by the implementing class.
- !    * Should not be pure virtual since a derived quadrature rule
- !    * may only be defined in 1D.  If not redefined, gives an
- !    * error (when \p DEBUG defined) when called.
- !    */
- !   virtual void init_3D (const ElemType)
- ! #ifndef DEBUG
- !   {}
- ! #else
- !   {  
- !     std::cerr << "ERROR: Seems as if this quadrature rule" << std::endl
- ! 	      << " is not implemented for 3D." << std::endl;
- !     error();
- !   }
- ! #endif
-   
-     
-     /**
-      * Initialize the 1D quadrature rule for a side (edge).
- !    * Should not be pure virtual since a derived quadrature rule
- !    * may only be defined in 1D. If not redefined, gives an
- !    * error (when \p DEBUG defined) when called.
- !    */
- !   virtual void init_2D (const ElemType, const unsigned int)
- ! #ifndef DEBUG
- !   {}
- ! #else
- !   {  
- !     std::cerr << "ERROR: Seems as if this quadrature rule" << std::endl
- ! 	      << " is not implemented for 2D side(line) integration." << std::endl;
- !     error();
- !   }
- ! #endif
- ! 
- ! 
-     /**
-      * Initialize the 2D quadrature rule for a side (face).
- +    * Should not be pure virtual since a derived quadrature rule
- +    * may only be defined in 1D. If not redefined, gives an
- +    * error (when \p DEBUG defined) when called.
- +    */
- +   virtual void init_3D (const ElemType, const unsigned int)
- + #ifndef DEBUG
- +   {}
- + #else
- +   {  
- +     std::cerr << "ERROR: Seems as if this quadrature rule" << std::endl
- + 	      << " is not implemented for 3D side(face) integration." << std::endl;
- +     error();
- +   }
- + #endif
- + 
- +   
- +   /**
- +    * Maps the points of a 1D interval quadrature rule (typically [-1,1])
- +    * to any other 1D interval (typically [0,1]) and scales the weights
- +    * accordingly.  The quadrature rule will be mapped from the
- +    * entries of old_range to the entries of new_range.
-      */
- !   void scale(std::pair<Real, Real> old_range,
- ! 	     std::pair<Real, Real> new_range);
-     
-     /**
-      * Computes the tensor product of
- ***************
- *** 163,168 ****
- --- 242,258 ----
-     void tensor_product_quad (QBase* q1D);
-   
-     /**
- +    * Computes the conical product of
- +    * two 1D rules to generate a (sub-optimal)
- +    * 2D rule for triangles.  Note that:
- +    * gauss1D = 1D Gauss rule
- +    * jacA1D  = 1D Jacobi-Gauss rule with (1-x) wt. funtion
- +    * Method can be found in:
- +    * Approximate Calculation of Multiple Integrals, Stroud, A. H.
- +    */
- +   void tensor_product_tri (QBase* gauss1D, QBase* jacA1D);
- +   
- +   /**
-      * Computes the tensor product of
-      * three 1D rules and returns a 3D rule.
-      * Used in the init_3D routines for
- ***************
- *** 179,184 ****
- --- 269,286 ----
-     void tensor_product_prism (QBase* q1D, QBase* q2D);
-   
-     /**
- +    * Computes the conical product of
- +    * three 1D rules to generate a (sub-optimal)
- +    * 3D rule for tets.  Note that:
- +    * gauss1D = 1D Gauss rule
- +    * jacA1D  = 1D Jacobi-Gauss rule with (1-x) wt. funtion
- +    * jacB1D  = 1D Jacobi-Gauss rule with (1-x)^2 wt. function 
- +    * Method can be found in:
- +    * Approximate Calculation of Multiple Integrals, Stroud, A. H.
- +    */
- +   void tensor_product_tet (QBase* gauss1D, QBase* jacA1D, QBase* jacB1D);
- +   
- +   /**
-      * Computes the quadrature rule for side
-      * \p side of a quadrilateral element.
-      * Used by the init_2D routines when passed
- ***************
- *** 270,276 ****
-     _order(o),
-     _type(INVALID_ELEM)
-   {
- ! };
-   
-   
-   
- --- 372,378 ----
-     _order(o),
-     _type(INVALID_ELEM)
-   {
- ! }
-   
-   
-   
- ***************
- *** 288,294 ****
-         _points[qp].print();
-         std::cout << " Weight: " << std::endl;
-         std::cout << "  w=" << _weights[qp] << std::endl << std::endl;
- !     };
- ! };
-   
-   #endif
- --- 390,396 ----
-         _points[qp].print();
-         std::cout << " Weight: " << std::endl;
-         std::cout << "  w=" << _weights[qp] << std::endl << std::endl;
- !     }
- ! }
-   
-   #endif
- Index: include/quadrature_gauss.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/quadrature_gauss.h,v
- retrieving revision 1.4
- retrieving revision 1.6
- diff -c -r1.4 -r1.6
- *** include/quadrature_gauss.h	24 Jan 2003 17:24:39 -0000	1.4
- --- include/quadrature_gauss.h	13 Feb 2003 22:56:08 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 52,58 ****
-      */
-     ~QGauss();
-   
- !   
-    private:
-   
-     void init_1D (const ElemType _type=INVALID_ELEM);
- --- 52,63 ----
-      */
-     ~QGauss();
-   
- !   /**
- !    * @returns \p QGAUSS
- !    */
- !   QuadratureType type() const { return QGAUSS; }
- ! 
- !  
-    private:
-   
-     void init_1D (const ElemType _type=INVALID_ELEM);
- ***************
- *** 81,87 ****
-     // be smart and return, thinking it had already done the work.
-     if (_dim == 1)
-       init(EDGE2);
- ! };
-   
-   
-   
- --- 86,92 ----
-     // be smart and return, thinking it had already done the work.
-     if (_dim == 1)
-       init(EDGE2);
- ! }
-   
-   
-   
- ***************
- *** 89,97 ****
-   inline
-   QGauss::~QGauss()
-   {
- ! };
- ! 
- ! 
-   
-   
-   
- --- 94,100 ----
-   inline
-   QGauss::~QGauss()
-   {
- ! }
-   
-   
-   
- Index: include/quadrature_simpson.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/quadrature_simpson.h,v
- retrieving revision 1.4
- retrieving revision 1.6
- diff -c -r1.4 -r1.6
- *** include/quadrature_simpson.h	24 Jan 2003 17:24:39 -0000	1.4
- --- include/quadrature_simpson.h	13 Feb 2003 22:56:08 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 51,57 ****
-     /**
-      * Destructor. Empty.
-      */
- !   ~QSimpson() {};
-   
-    private:
-   
- --- 51,63 ----
-     /**
-      * Destructor. Empty.
-      */
- !   ~QSimpson() {}
- ! 
- !   /**
- !    * @returns \p QSIMPSON
- !    */
- !   QuadratureType type() const { return QSIMPSON; }
- ! 
-   
-    private:
-   
- ***************
- *** 80,87 ****
-     // be smart and return, thinking it had already done the work.
-     if (_dim == 1)
-       init(EDGE2);
- ! };
- ! 
-   
-   
-   
- --- 86,92 ----
-     // be smart and return, thinking it had already done the work.
-     if (_dim == 1)
-       init(EDGE2);
- ! }
-   
-   
-   
- Index: include/quadrature_trap.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/quadrature_trap.h,v
- retrieving revision 1.4
- retrieving revision 1.7
- diff -c -r1.4 -r1.7
- *** include/quadrature_trap.h	24 Jan 2003 17:24:39 -0000	1.4
- --- include/quadrature_trap.h	13 Feb 2003 22:56:08 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 42,55 ****
-    public:
-   
-     /**
- !    * Constructor.  Declares the order of the quadrature rule.
-      */
-     QTrap (const unsigned int _dim);
-   
-     /**
-      * Destructor. Empty.
-      */
- !   ~QTrap() {};
-   
-    private:
-   
- --- 42,60 ----
-    public:
-   
-     /**
- !    * Constructor.  Declares the dimension of the quadrature rule.
-      */
-     QTrap (const unsigned int _dim);
-   
-     /**
-      * Destructor. Empty.
-      */
- !   ~QTrap() {}
- ! 
- !   /**
- !    * @returns \p QTRAP
- !    */
- !   QuadratureType type() const { return QTRAP; }
-   
-    private:
-   
- ***************
- *** 76,82 ****
-     // be smart and return, thinking it had already done the work.
-     if (_dim == 1)
-       init(EDGE2);
- ! };
-   
-   
-   
- --- 81,88 ----
-     // be smart and return, thinking it had already done the work.
-     if (_dim == 1)
-       init(EDGE2);
- ! }
- ! 
-   
-   
-   
- Index: include/reference_counted_object.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/reference_counted_object.h,v
- retrieving revision 1.4
- retrieving revision 1.5
- diff -c -r1.4 -r1.5
- *** include/reference_counted_object.h	24 Jan 2003 17:24:39 -0000	1.4
- --- include/reference_counted_object.h	13 Feb 2003 22:56:08 -0000	1.5
- ***************
- *** 1,4 ****
- !  // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- !  // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 43,51 ****
-    * {
-    *  public:
-    *
- !  *    Foo  () {};
-    *
- !  *    ~Foo () {};
-    *
-    *    void bar ();
-    * 
- --- 43,51 ----
-    * {
-    *  public:
-    *
- !  *    Foo  () {}
-    *
- !  *    ~Foo () {}
-    *
-    *    void bar ();
-    * 
- ***************
- *** 81,87 ****
-       increment_constructor_count(typeid(T).name());
-   
-   #endif
- !   };
-   
-   public:
-     
- --- 81,87 ----
-       increment_constructor_count(typeid(T).name());
-   
-   #endif
- !   }
-   
-   public:
-     
- ***************
- *** 95,101 ****
-       increment_destructor_count(typeid(T).name());
-   
-   #endif
- !   };
-     
-   private:
-   
- --- 95,101 ----
-       increment_destructor_count(typeid(T).name());
-   
-   #endif
- !   }
-     
-   private:
-   
- Index: include/reference_counter.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/reference_counter.h,v
- retrieving revision 1.5
- retrieving revision 1.8
- diff -c -r1.5 -r1.8
- *** include/reference_counter.h	24 Jan 2003 17:24:39 -0000	1.5
- --- include/reference_counter.h	21 Feb 2003 18:31:30 -0000	1.8
- ***************
- *** 1,4 ****
- !  // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- !  // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 72,77 ****
- --- 72,84 ----
-      */
-     static void print_info ();
-   
- +   /**
- +    * Prints the number of outstanding (created, but not yet
- +    * destroyed) objects.
- +    */
- +   static unsigned int n_objects ()
- +   { return _n_objects; }
- + 
-     
-   protected:
-   
- ***************
- *** 110,115 ****
- --- 117,129 ----
-      * information when the number returns to 0.
-      */
-     static unsigned int _n_objects;
- + 
- +   /**
- +    * A flag indicating if \p print_info() has been called.
- +    */
- +   static bool _have_printed_info;
- + 
- +   
-   #endif
-   };
-   
- ***************
- *** 124,130 ****
-     _n_objects++;
-   
-   #endif
- ! };
-   
-   
-   
- --- 138,144 ----
-     _n_objects++;
-   
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 138,144 ****
-       print_info();
-   
-   #endif
- ! };
-   
-   
-   
- --- 152,158 ----
-       print_info();
-   
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 147,156 ****
-   {
-   #if defined(ENABLE_REFERENCE_COUNTING) && defined(DEBUG)
-   
- !   std::cout << get_info();
-   
-   #endif
- ! };
-   
-   
-   
- --- 161,176 ----
-   {
-   #if defined(ENABLE_REFERENCE_COUNTING) && defined(DEBUG)
-   
- !   // Don't print multiple times.
- !   if (!_have_printed_info)
- !     {
- !       std::cout << get_info();
-   
- +       _have_printed_info = true;
- +     }
- +   
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 164,170 ****
-     p.first++;
-   
-   #endif
- ! };
-   
-   
-   
- --- 184,190 ----
-     p.first++;
-   
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 178,184 ****
-     p.second++;
-   
-   #endif
- ! };
-   
-   
-   
- --- 198,204 ----
-     p.second++;
-   
-   #endif
- ! }
-   
-   
-   
- Index: include/sphere.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/sphere.h,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** include/sphere.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/sphere.h	13 Feb 2003 22:56:08 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 105,116 ****
-     /**
-      * Returns the radius of the sphere.
-      */
- !   Real radius() const { return rad; };
-   
-     /**
-      * @returns the center of the sphere.
-      */ 
- !   const Point& center() const { return cent; };
-   
-     
-   private:
- --- 105,116 ----
-     /**
-      * Returns the radius of the sphere.
-      */
- !   Real radius() const { return rad; }
-   
-     /**
-      * @returns the center of the sphere.
-      */ 
- !   const Point& center() const { return cent; }
-   
-     
-   private:
- Index: include/statistics.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/statistics.h,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** include/statistics.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/statistics.h	13 Feb 2003 22:56:08 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 78,84 ****
-     /**
-      * Call the std::vector constructor.
-      */
- !   StatisticsVector(unsigned int i=0) { this->resize(i); };
-     
-     /**
-      * Returns the mean value of the
- --- 78,84 ----
-     /**
-      * Call the std::vector constructor.
-      */
- !   StatisticsVector(unsigned int i=0) { this->resize(i); }
-     
-     /**
-      * Returns the mean value of the
- Index: include/surface.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/surface.h,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** include/surface.h	24 Jan 2003 17:24:39 -0000	1.5
- --- include/surface.h	13 Feb 2003 22:56:08 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 48,64 ****
-     /**
-      * Constructor.  Does nothing at the moment.
-      */
- !   Surface () {};
-   
-     /**
-      * Copy-constructor.
-      */
- !   Surface (const Surface&) {};
-   
-     /**
-      * Destructor.
-      */
- !   virtual ~Surface () {};
-   
-     /**
-      * @returns true if the point p is above the surface,
- --- 48,64 ----
-     /**
-      * Constructor.  Does nothing at the moment.
-      */
- !   Surface () {}
-   
-     /**
-      * Copy-constructor.
-      */
- !   Surface (const Surface&) {}
-   
-     /**
-      * Destructor.
-      */
- !   virtual ~Surface () {}
-   
-     /**
-      * @returns true if the point p is above the surface,
- Index: include/tree.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/tree.h,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** include/tree.h	24 Jan 2003 17:24:39 -0000	1.5
- --- include/tree.h	13 Feb 2003 22:56:08 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 54,76 ****
-     /**
-      * Destructor.
-      */
- !   ~Tree() {};
-   
-     /**
-      * Prints the nodes.
-      */
- !   void print_nodes() const { std::cout << "Printing nodes...\n"; root.print_nodes(); };
-   
-     /**
-      * Prints the nodes.
-      */
- !   void print_elements() const { std::cout << "Printing elements...\n"; root.print_elements(); };
-     
-   
-     /**
-      * @returns the number of active bins.
-      */
- !   unsigned int n_active_bins() const { return root.n_active_bins(); };
-   
-     /**
-      * @returns a pointer to the element containing point p.
- --- 54,76 ----
-     /**
-      * Destructor.
-      */
- !   ~Tree() {}
-   
-     /**
-      * Prints the nodes.
-      */
- !   void print_nodes() const { std::cout << "Printing nodes...\n"; root.print_nodes(); }
-   
-     /**
-      * Prints the nodes.
-      */
- !   void print_elements() const { std::cout << "Printing elements...\n"; root.print_elements(); }
-     
-   
-     /**
-      * @returns the number of active bins.
-      */
- !   unsigned int n_active_bins() const { return root.n_active_bins(); }
-   
-     /**
-      * @returns a pointer to the element containing point p.
- ***************
- *** 109,115 ****
-      * for 3D meshes.
-      */
-     typedef Tree<8> OctTree;
- ! };
-   
-   
-   
- --- 109,115 ----
-      * for 3D meshes.
-      */
-     typedef Tree<8> OctTree;
- ! }
-   
-   
-   
- ***************
- *** 142,148 ****
-     mesh.build_nodes_to_elem_map (nodes_to_elem);
-   
-     root.transform_nodes_to_elements (nodes_to_elem);
- ! };
-   
-   
-   
- --- 142,148 ----
-     mesh.build_nodes_to_elem_map (nodes_to_elem);
-   
-     root.transform_nodes_to_elements (nodes_to_elem);
- ! }
-   
-   
-   
- ***************
- *** 154,159 ****
-     root(other_tree.root)
-   {
-     error();
- ! };
-   
-   #endif
- --- 154,159 ----
-     root(other_tree.root)
-   {
-     error();
- ! }
-   
-   #endif
- Index: include/tree_node.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/tree_node.h,v
- retrieving revision 1.4
- retrieving revision 1.5
- diff -c -r1.4 -r1.5
- *** include/tree_node.h	24 Jan 2003 17:24:39 -0000	1.4
- --- include/tree_node.h	13 Feb 2003 22:56:08 -0000	1.5
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 46,52 ****
-     /**
-      * Dummy constructor.
-      */
- !   //TreeNode () {};
-   
-   
-     /**
- --- 46,52 ----
-     /**
-      * Dummy constructor.
-      */
- !   //TreeNode () {}
-   
-   
-     /**
- ***************
- *** 69,81 ****
-      * @returns true if this node is the root node, false
-      * otherwise.
-      */
- !   bool is_root() const { return (parent == NULL); };
-   
-     /**
-      * @returns true if this node is active (i.e. has no 
-      * children), false otherwise.
-      */
- !   bool active() const { return children.empty(); };
-   
-     /**
-      * Inserts node number n into the TreeNode.
- --- 69,81 ----
-      * @returns true if this node is the root node, false
-      * otherwise.
-      */
- !   bool is_root() const { return (parent == NULL); }
-   
-     /**
-      * @returns true if this node is active (i.e. has no 
-      * children), false otherwise.
-      */
- !   bool active() const { return children.empty(); }
-   
-     /**
-      * Inserts node number n into the TreeNode.
- ***************
- *** 98,104 ****
-      * false otherwise.
-      */
-     bool bounds_node (const unsigned int n) const { assert (n < mesh.n_nodes()); 
- !   return bounds_point(mesh.point(n)); };
-   
-     /**
-      * @returns true if this TreeNode (or its children) contain point p,
- --- 98,104 ----
-      * false otherwise.
-      */
-     bool bounds_node (const unsigned int n) const { assert (n < mesh.n_nodes()); 
- !   return bounds_point(mesh.point(n)); }
-   
-     /**
-      * @returns true if this TreeNode (or its children) contain point p,
- ***************
- *** 212,218 ****
-   {
-     // Assert our children are empty, thus we are active.
-     assert (children.empty());
- ! };
-   
-   
-   
- --- 212,218 ----
-   {
-     // Assert our children are empty, thus we are active.
-     assert (children.empty());
- ! }
-   
-   
-   
- ***************
- *** 229,235 ****
-   
-     children.clear();
-     elements.clear();
- ! };
-   
-   
-   
- --- 229,235 ----
-   
-     children.clear();
-     elements.clear();
- ! }
-   
-   
-   
- ***************
- *** 245,251 ****
-   
-     error();
-     return static_cast<unsigned int>(-1);
- ! };
-   
-   
-   
- --- 245,251 ----
-   
-     error();
-     return static_cast<unsigned int>(-1);
- ! }
-   
-   
-   
- Index: include/xdrIO.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/xdrIO.h,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** include/xdrIO.h	3 Feb 2003 03:51:49 -0000	1.6
- --- include/xdrIO.h	13 Feb 2003 22:56:08 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 141,147 ****
-      * to/from the current \p xdr
-      * file/file handle.
-      */
- !   int dataBlk(Real* array, int numvar, int size);
-   
-     /**
-      * Return an Originator data structure
- --- 141,147 ----
-      * to/from the current \p xdr
-      * file/file handle.
-      */
- !   int dataBlk(REAL* array, int numvar, int size);
-   
-     /**
-      * Return an Originator data structure
- ***************
- *** 323,329 ****
-      * Constructor.  Initializes
-      * \p m_dim to -1.
-      */
- !   XdrMESH() : m_dim(-1) {};
-   
-     /**
-      * Calls the \p init method
- --- 323,329 ----
-      * Constructor.  Initializes
-      * \p m_dim to -1.
-      */
- !   XdrMESH() : m_dim(-1) {}
-   
-     /**
-      * Calls the \p init method
- Index: include/xdr_cxx.h
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/include/xdr_cxx.h,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** include/xdr_cxx.h	24 Jan 2003 17:24:39 -0000	1.5
- --- include/xdr_cxx.h	13 Feb 2003 22:56:08 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 100,118 ****
-      * Returns true if the file is opened in a reading
-      * state, false otherwise.
-      */
- !   bool reading() const { return ((mode == DECODE) || (mode == READ)); };
-   
-     /**
-      * Returns true if the file is opened in a writing
-      * state, false otherwise.
-      */
- !   bool writing() const { return ((mode == ENCODE) || (mode == WRITE)); };
-   
-     /**
-      * Returns the mode used to access the file.  Valid modes
-      * are ENCODE, DECODE, READ, or WRITE.
-      */
- !   XdrMODE access_mode() const { return mode; };
-   
-     // Data access methods
-   
- --- 100,118 ----
-      * Returns true if the file is opened in a reading
-      * state, false otherwise.
-      */
- !   bool reading() const { return ((mode == DECODE) || (mode == READ)); }
-   
-     /**
-      * Returns true if the file is opened in a writing
-      * state, false otherwise.
-      */
- !   bool writing() const { return ((mode == ENCODE) || (mode == WRITE)); }
-   
-     /**
-      * Returns the mode used to access the file.  Valid modes
-      * are ENCODE, DECODE, READ, or WRITE.
-      */
- !   XdrMODE access_mode() const { return mode; }
-   
-     // Data access methods
-   
- ***************
- *** 124,135 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (int& a) { assert (writing()); data(a); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (int& a) { assert (reading()); data(a); return *this; };
-     
-     /**
-      * Inputs or outputs a single unsigned integer.
- --- 124,135 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (int& a) { assert (writing()); data(a); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (int& a) { assert (reading()); data(a); return *this; }
-     
-     /**
-      * Inputs or outputs a single unsigned integer.
- ***************
- *** 139,150 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (unsigned int& a) { assert (writing()); data(a); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (unsigned int& a) { assert (reading()); data(a); return *this; };
-   
-     /**
-      * Inputs or outputs a single short integer.
- --- 139,150 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (unsigned int& a) { assert (writing()); data(a); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (unsigned int& a) { assert (reading()); data(a); return *this; }
-   
-     /**
-      * Inputs or outputs a single short integer.
- ***************
- *** 154,165 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (short int& a) { assert (writing()); data(a); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (short int& a) { assert (reading()); data(a); return *this; };
-   
-     /**
-      * Inputs or outputs a single unsigned short integer.
- --- 154,165 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (short int& a) { assert (writing()); data(a); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (short int& a) { assert (reading()); data(a); return *this; }
-   
-     /**
-      * Inputs or outputs a single unsigned short integer.
- ***************
- *** 169,180 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (unsigned short int& a) { assert (writing()); data(a); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (unsigned short int& a) { assert (reading()); data(a); return *this; };
-   
-     /**
-      * Inputs or outputs a single float.
- --- 169,180 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (unsigned short int& a) { assert (writing()); data(a); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (unsigned short int& a) { assert (reading()); data(a); return *this; }
-   
-     /**
-      * Inputs or outputs a single float.
- ***************
- *** 184,195 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (float& a) { assert (writing()); data(a); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (float& a) { assert (reading()); data(a); return *this; };
-   
-     /**
-      * Inputs or outputs a single double.
- --- 184,195 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (float& a) { assert (writing()); data(a); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (float& a) { assert (reading()); data(a); return *this; }
-   
-     /**
-      * Inputs or outputs a single double.
- ***************
- *** 199,210 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (double& a) { assert (writing()); data(a); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (double& a) { assert (reading()); data(a); return *this; };
-   
-   
-   #ifdef USE_COMPLEX_NUMBERS
- --- 199,210 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (double& a) { assert (writing()); data(a); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (double& a) { assert (reading()); data(a); return *this; }
-   
-   
-   #ifdef USE_COMPLEX_NUMBERS
- ***************
- *** 217,228 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::complex<float>& a) { assert (writing()); data(a); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::complex<float>& a) { assert (reading()); data(a); return *this; };
-   
-     /**
-      * Inputs or outputs a single complex<double>.
- --- 217,228 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::complex<float>& a) { assert (writing()); data(a); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::complex<float>& a) { assert (reading()); data(a); return *this; }
-   
-     /**
-      * Inputs or outputs a single complex<double>.
- ***************
- *** 232,243 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::complex<double>& a) { assert (writing()); data(a); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::complex<double>& a) { assert (reading()); data(a); return *this; };
-   
-   
-   #endif
- --- 232,243 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::complex<double>& a) { assert (writing()); data(a); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::complex<double>& a) { assert (reading()); data(a); return *this; }
-   
-   
-   #endif
- ***************
- *** 250,261 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector<int>& v) { assert (writing()); data(v); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector<int>& v) { assert (reading()); data(v); return *this; };
-   
-     /**
-      * Inputs or outputs a vector of unsigned integers.
- --- 250,261 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector<int>& v) { assert (writing()); data(v); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector<int>& v) { assert (reading()); data(v); return *this; }
-   
-     /**
-      * Inputs or outputs a vector of unsigned integers.
- ***************
- *** 265,276 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector<unsigned int>& v) { assert (writing()); data(v); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector<unsigned int>& v) { assert (reading()); data(v); return *this; };
-   
-     /**
-      * Inputs or outputs a vector of short integers.
- --- 265,276 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector<unsigned int>& v) { assert (writing()); data(v); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector<unsigned int>& v) { assert (reading()); data(v); return *this; }
-   
-     /**
-      * Inputs or outputs a vector of short integers.
- ***************
- *** 280,291 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector<short int>& v) { assert (writing()); data(v); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector<short int>& v) { assert (reading()); data(v); return *this; };
-   
-     /**
-      * Inputs or outputs a vector of unsigned short integers.
- --- 280,291 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector<short int>& v) { assert (writing()); data(v); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector<short int>& v) { assert (reading()); data(v); return *this; }
-   
-     /**
-      * Inputs or outputs a vector of unsigned short integers.
- ***************
- *** 295,306 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector<unsigned short int>& v) { assert (writing()); data(v); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector<unsigned short int>& v) { assert (reading()); data(v); return *this; };
-   
-     /**
-      * Inputs or outputs a vector of floats.
- --- 295,306 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector<unsigned short int>& v) { assert (writing()); data(v); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector<unsigned short int>& v) { assert (reading()); data(v); return *this; }
-   
-     /**
-      * Inputs or outputs a vector of floats.
- ***************
- *** 310,321 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector<float>& v) { assert (writing()); data(v); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector<float>& v) { assert (reading()); data(v); return *this; };
-   
-     /**
-      * Inputs or outputs a vector of doubles.
- --- 310,321 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector<float>& v) { assert (writing()); data(v); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector<float>& v) { assert (reading()); data(v); return *this; }
-   
-     /**
-      * Inputs or outputs a vector of doubles.
- ***************
- *** 325,336 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector<double>& v) { assert (writing()); data(v); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector<double>& v) { assert (reading()); data(v); return *this; };
-   
-   
-   #ifdef USE_COMPLEX_NUMBERS
- --- 325,336 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector<double>& v) { assert (writing()); data(v); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector<double>& v) { assert (reading()); data(v); return *this; }
-   
-   
-   #ifdef USE_COMPLEX_NUMBERS
- ***************
- *** 343,354 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector< std::complex<float> >& v) { assert (writing()); data(v); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector< std::complex<float> >& v) { assert (reading()); data(v); return *this; };
-   
-     /**
-      * Inputs or outputs a vector of complex<double>.
- --- 343,354 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector< std::complex<float> >& v) { assert (writing()); data(v); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector< std::complex<float> >& v) { assert (reading()); data(v); return *this; }
-   
-     /**
-      * Inputs or outputs a vector of complex<double>.
- ***************
- *** 358,369 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector< std::complex<double> >& v) { assert (writing()); data(v); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector< std::complex<double> >& v) { assert (reading()); data(v); return *this; };
-   
-   #endif
-   
- --- 358,369 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::vector< std::complex<double> >& v) { assert (writing()); data(v); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::vector< std::complex<double> >& v) { assert (reading()); data(v); return *this; }
-   
-   #endif
-   
- ***************
- *** 376,387 ****
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::string& v) { assert (writing()); data(v); return *this; };
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::string& v) { assert (reading()); data(v); return *this; };
-   
-   
-   private:
- --- 376,387 ----
-     /**
-      * Same, but provides an \p ostream like interface.
-      */
- !   Xdr& operator << (std::string& v) { assert (writing()); data(v); return *this; }
-   
-     /**
-      * Same, but provides an \p istream like interface.
-      */
- !   Xdr& operator >> (std::string& v) { assert (reading()); data(v); return *this; }
-   
-   
-   private:
- Index: src/apps/grid2grid.cc
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/apps/grid2grid.cc,v
- retrieving revision 1.3
- retrieving revision 1.4
- diff -c -r1.3 -r1.4
- *** src/apps/grid2grid.cc	3 Feb 2003 03:51:49 -0000	1.3
- --- src/apps/grid2grid.cc	14 Feb 2003 15:22:42 -0000	1.4
- ***************
- *** 5,10 ****
- --- 5,11 ----
-   
-   
-   // Local Includes
- + #include "libmesh.h"
-   #include "mesh.h"
-   #include "quadrature_gauss.h"
-   #include "fe.h"
- ***************
- *** 15,273 ****
-   
-   int main (int argc, char** argv)
-   {
- !   PerfLog perf_log("main()");
-     
- !   const unsigned int dim = 3;
-     
- !   if (argc < 6)
- !     {
- !       std::cerr << "Usage: " << argv[0] 
- ! 		<< " ivar m0.mesh m1.mesh s0.soln s1.soln"
- ! 		<< std::endl;
-   	
- !       error();
- !     };
-   
- !   // declare the coarse and fine meshes.
- !   Mesh mesh_coarse(dim);
- !   Mesh mesh_fine(dim);
- ! 
- !   // Read the coarse mesh
- !   {
- !     std::cout << "Reading Mesh " << argv[2] << std::endl;
- !     mesh_coarse.read(argv[2]);
- !     mesh_coarse.print_info();
- !     std::cout << std::endl;
- !   };
- !   // Read the fine mesh
- !   {
- !     std::cout << "Reading Mesh " << argv[3] << std::endl;
- !     mesh_fine.read(argv[3]);
- !     mesh_fine.print_info();
- !     std::cout << std::endl;
- !   };
-   
-   
- !   std::vector<Real> coarse_solution;
- !   std::vector<Real> fine_solution;
- !   std::vector<std::string> coarse_var_names;
- !   std::vector<std::string> fine_var_names;
-     
- !   // Read the coarse solution
- !   {
- !     std::cout << "Reading Soln " << argv[4] << std::endl;
- !     mesh_coarse.read_xdr_soln_binary(argv[4],
- ! 				     coarse_solution,
- ! 				     coarse_var_names);
- !   };
- !   // Read the fine solution
- !   {
- !     std::cout << "Reading Soln " << argv[5] << std::endl;
- !     mesh_fine.read_xdr_soln_binary(argv[5],
- ! 				   fine_solution,
- ! 				   fine_var_names);
- !   };
-   
-     
- !   assert (fine_var_names == coarse_var_names);
-   
-   
- !   std::vector<Real>        diff_solution  (fine_solution.size());
- !   std::vector<std::string> diff_var_names (fine_var_names);
-   
- !   // Declare an Octree.
- !   perf_log.start_event("octree build");
- !   Trees::OctTree octree_coarse(mesh_coarse,200);
- !   perf_log.stop_event("octree build");
-     
- !   std::cout << "n_active_bins() = " << octree_coarse.n_active_bins() << std::endl;
-   
- !   // sanity check.  Make sure that we can find all the element
- !   // centroids and all the mesh nodes!
- !   /*
- !   for (unsigned int e=0; e<mesh_coarse.n_elem(); e++)
- !     {
-         std::cout << "looking for centroid of element " << e << std::endl;
-         const Elem* elem = octree_coarse.find_element(mesh_coarse.elem(e)->centroid(mesh_coarse));
-   
-         assert (elem != NULL);
- !     }
- !   for (unsigned int n=0; n<mesh_coarse.n_nodes(); n++)
- !     {
-         std::cout << "looking for node " << n << std::endl;
-         const Elem* elem = octree_coarse.find_element(mesh_coarse.vertex(n));
-   
-         assert (elem != NULL);
- !     }
- !   */
-   
- !   // Here we will do the integration.  This deserves some explanation:
- !   // 1.) The integration will be done by looping over the fine mesh elements.
- !   //     The fine solution values will be computed at each Gauss point on the
- !   //     fine grid.
- !   // 2.) Then the coarse grid element containing the current Gauss point will
- !   //     be found.  The value of the coarse solution at the Gauss point will
- !   //     be interpolated.
- !   // 3.) The difference betwee the fine and coarse solutions will be integrated.
- !   {
- !     // Use super--accurate quadrature to avoid superconvergent points
- !     //    QGauss qrule (dim, NINTH);
- !     QGauss qrule (dim, FIFTH);
-       
- !     // Declare second--order elements for our Hex27's
- !     FiniteElements::FELagrange3D fe_coarse (SECOND);
- !     FiniteElements::FELagrange3D fe_fine   (SECOND);
-       
- !     fe_coarse.attach_quadrature_rule (&qrule);
- !     fe_fine.attach_quadrature_rule   (&qrule);
-       
- !     const std::vector<Real>& JxW               = fe_fine.get_JxW();
- !     const std::vector<Point>& q_point          = fe_fine.get_xyz();
- !     const std::vector<std::vector<Real> >& phi = fe_fine.get_phi();
- !     const int ivar = atoi(argv[1]);
- !     Real error = 0.;
- ! 
- !     // Initial coarse element
- !     Elem* coarse_element = mesh_coarse.elem(0);
- !     fe_coarse.reinit (coarse_element);
-   
-       
- !     // Loop over fine mesh elements
- !     for (unsigned int e=0; e<mesh_fine.n_elem(); e++)
- !       {
- ! 	const Elem* fine_element = mesh_fine.elem(e);
-   
- ! 	// Recompute the element--specific data for the current fine-mesh element.
- ! 	fe_fine.reinit(fine_element);
-   
- ! 	// Loop over the fine element's Gauss Points
- ! 	perf_log.start_event("gp_loop");
-   
- ! 	for (unsigned int gp=0; gp<q_point.size(); gp++)
- ! 	  {
- ! 	    Real fine_soln=0., coarse_soln=0.;
-   
- ! 	    assert (fe_fine.n_shape_functions() == fine_element->n_nodes());
-   	    
- ! 	    for (unsigned int i=0; i<fe_fine.n_shape_functions(); i++)
- ! 	      {
- ! 		const unsigned int nv = fine_var_names.size();
- ! 		const unsigned int gn = fine_element->node(i); // Global node number
-   				
- ! 		fine_soln += fine_solution[gn*nv + ivar]*phi[i][gp];
- ! 	      };
-   
-   
- ! 	    // Chances are this Gauss point is contained in the coarse-mesh element that contained
- ! 	    // the last Gauss point, so let's look there first and only do the OctTree search
- ! 	    // if necessary.
- ! 	    if (!coarse_element->contains_point(q_point[gp]))
- ! 	      {
- ! 		perf_log.pause_event("gp_loop");
- ! 		perf_log.start_event("element lookup");
-   
- ! 		coarse_element = octree_coarse.find_element(q_point[gp]);
-   		
- ! 		assert (coarse_element != NULL);
-   				
- ! 		// Recompute the element--specific data for the new coarse-mesh element.
- ! 		fe_coarse.reinit (coarse_element);
-   		
- ! 		perf_log.stop_event("element lookup");
- ! 		perf_log.restart_event("gp_loop");
- ! 	      }
-   	    
-   
- ! 	    // Find the point on the coarse reference element corresponding to the current Gauss
- ! 	    // point
- ! 	    const Point mapped_point = fe_coarse.inverse_map(coarse_element, q_point[gp]);
- ! 
- ! 	    // Interpolate the coarse grid solution.
- ! 	    for (unsigned int i=0; i<fe_coarse.n_shape_functions(); i++)
- ! 	      {		
- ! 		const unsigned int nv = coarse_var_names.size();
- ! 		const unsigned int gn = coarse_element->node(i); // Global node number
-   				
- ! 		coarse_soln += coarse_solution[gn*nv + ivar]*fe_coarse.shape(coarse_element,
- ! 									     SECOND,
- ! 									     i,
- ! 									     mapped_point);
- ! 	      };
-   
- ! 	    // Accumulate the error.
- ! 	    error += JxW[gp]*(coarse_soln - fine_soln)*(coarse_soln - fine_soln);
- ! 	  };
-   
- ! 	perf_log.stop_event("gp_loop");
-   
- !       }; // End element loop
-   
- !     error = sqrt(error);
-   
- !     std::cout << "Computed error=" << error
- ! 	      << std::endl;
-   
- !     // Now lets compute the error at each node in the fine mesh and plot it out.
- !     {
- !       perf_log.start_event ("diff_soln_loop");
-         
- !       const unsigned int nv = diff_var_names.size();
-   
- !       std::vector<unsigned char> already_done(mesh_fine.n_nodes(), 0);
-   
- !       Elem* coarse_element = mesh_coarse.elem(0);
-         
- !       for (unsigned int e=0; e<mesh_fine.n_elem(); e++)
- ! 	for (unsigned int n=0; n<mesh_fine.elem(e)->n_nodes(); n++)
- ! 	  {
- ! 	    const unsigned int gn = mesh_fine.elem(e)->node(n);
-   	    
- ! 	    if (!already_done[gn])
- ! 	      {
- ! 		already_done[gn] = 1;
-   	      
- ! 		const Point& p = mesh_fine.point(gn);
-   		
- ! 		if (!coarse_element->contains_point(p))
- ! 		  {
- ! 		    perf_log.pause_event ("diff_soln_loop");
- ! 		    perf_log.start_event ("element lookup 2");
-   		    
- ! 		    coarse_element = octree_coarse.find_element(p);
-   		
- ! 		    assert (coarse_element != NULL);
-   		    
- ! 		    // Recompute the element--specific data for the new coarse-mesh element.
- ! 		    fe_coarse.reinit (coarse_element);
-   		    
- ! 		    perf_log.stop_event ("element lookup 2");
- ! 		    perf_log.restart_event ("diff_soln_loop");
- ! 		  }
-   		
- ! 		const Point mapped_point = fe_coarse.inverse_map(coarse_element, p);
-   		
- ! 		for (unsigned int c=0; c<nv; c++)
- ! 		  {
- ! 		    Real coarse_soln = 0.;
-   		    
- ! 		    // Interpolate the coarse grid solution.
- ! 		    for (unsigned int i=0; i<fe_coarse.n_shape_functions(); i++)
- ! 		      coarse_soln += coarse_solution[coarse_element->node(i)*nv + c]*fe_coarse.shape(coarse_element,
- ! 												     SECOND,
- ! 												     i,
- ! 												     mapped_point);
-   		    
- ! 		    diff_solution[gn*nv + c] = coarse_soln - fine_solution[gn*nv + c];
- ! 		  };	    
- ! 	      };
- ! 	  };
- !       perf_log.stop_event ("diff_soln_loop");
- !     };
- !   mesh_fine.write_tecplot_binary("foo.plt", &diff_solution, &diff_var_names);
-   
-     };
- ! 
-       
- !   return 0;
-   };
-     
- --- 16,279 ----
-   
-   int main (int argc, char** argv)
-   {
- !   libMesh::init (argc, argv);
- ! 
-     
- !   {  
- !     PerfLog perf_log("main()");
- !     
- !     const unsigned int dim = 3;
-     
- !     if (argc < 6)
- !       {
- ! 	std::cerr << "Usage: " << argv[0] 
- ! 		  << " ivar m0.mesh m1.mesh s0.soln s1.soln"
- ! 		  << std::endl;
-   	
- ! 	error();
- !       };
-   
- !     // declare the coarse and fine meshes.
- !     Mesh mesh_coarse(dim);
- !     Mesh mesh_fine(dim);
- ! 
- !     // Read the coarse mesh
- !     {
- !       std::cout << "Reading Mesh " << argv[2] << std::endl;
- !       mesh_coarse.read(argv[2]);
- !       mesh_coarse.print_info();
- !       std::cout << std::endl;
- !     };
- !     // Read the fine mesh
- !     {
- !       std::cout << "Reading Mesh " << argv[3] << std::endl;
- !       mesh_fine.read(argv[3]);
- !       mesh_fine.print_info();
- !       std::cout << std::endl;
- !     };
-   
-   
- !     std::vector<Real> coarse_solution;
- !     std::vector<Real> fine_solution;
- !     std::vector<std::string> coarse_var_names;
- !     std::vector<std::string> fine_var_names;
-     
- !     // Read the coarse solution
- !     {
- !       std::cout << "Reading Soln " << argv[4] << std::endl;
- !       mesh_coarse.read_xdr_soln_binary(argv[4],
- ! 				       coarse_solution,
- ! 				       coarse_var_names);
- !     };
- !     // Read the fine solution
- !     {
- !       std::cout << "Reading Soln " << argv[5] << std::endl;
- !       mesh_fine.read_xdr_soln_binary(argv[5],
- ! 				     fine_solution,
- ! 				     fine_var_names);
- !     };
-   
-     
- !     assert (fine_var_names == coarse_var_names);
-   
-   
- !     std::vector<Real>        diff_solution  (fine_solution.size());
- !     std::vector<std::string> diff_var_names (fine_var_names);
-   
- !     // Declare an Octree.
- !     perf_log.start_event("octree build");
- !     Trees::OctTree octree_coarse(mesh_coarse,200);
- !     perf_log.stop_event("octree build");
-     
- !     std::cout << "n_active_bins() = " << octree_coarse.n_active_bins() << std::endl;
-   
- !     // sanity check.  Make sure that we can find all the element
- !     // centroids and all the mesh nodes!
- !     /*
- !       for (unsigned int e=0; e<mesh_coarse.n_elem(); e++)
- !       {
-         std::cout << "looking for centroid of element " << e << std::endl;
-         const Elem* elem = octree_coarse.find_element(mesh_coarse.elem(e)->centroid(mesh_coarse));
-   
-         assert (elem != NULL);
- !       }
- !       for (unsigned int n=0; n<mesh_coarse.n_nodes(); n++)
- !       {
-         std::cout << "looking for node " << n << std::endl;
-         const Elem* elem = octree_coarse.find_element(mesh_coarse.vertex(n));
-   
-         assert (elem != NULL);
- !       }
- !     */
-   
- !     // Here we will do the integration.  This deserves some explanation:
- !     // 1.) The integration will be done by looping over the fine mesh elements.
- !     //     The fine solution values will be computed at each Gauss point on the
- !     //     fine grid.
- !     // 2.) Then the coarse grid element containing the current Gauss point will
- !     //     be found.  The value of the coarse solution at the Gauss point will
- !     //     be interpolated.
- !     // 3.) The difference betwee the fine and coarse solutions will be integrated.
- !     {
- !       // Use super--accurate quadrature to avoid superconvergent points
- !       //    QGauss qrule (dim, NINTH);
- !       QGauss qrule (dim, FIFTH);
-       
- !       // Declare second--order elements for our Hex27's
- !       FiniteElements::FELagrange3D fe_coarse (SECOND);
- !       FiniteElements::FELagrange3D fe_fine   (SECOND);
-       
- !       fe_coarse.attach_quadrature_rule (&qrule);
- !       fe_fine.attach_quadrature_rule   (&qrule);
-       
- !       const std::vector<Real>& JxW               = fe_fine.get_JxW();
- !       const std::vector<Point>& q_point          = fe_fine.get_xyz();
- !       const std::vector<std::vector<Real> >& phi = fe_fine.get_phi();
- !       const int ivar = atoi(argv[1]);
- !       Real error = 0.;
- ! 
- !       // Initial coarse element
- !       Elem* coarse_element = mesh_coarse.elem(0);
- !       fe_coarse.reinit (coarse_element);
-   
-       
- !       // Loop over fine mesh elements
- !       for (unsigned int e=0; e<mesh_fine.n_elem(); e++)
- ! 	{
- ! 	  const Elem* fine_element = mesh_fine.elem(e);
-   
- ! 	  // Recompute the element--specific data for the current fine-mesh element.
- ! 	  fe_fine.reinit(fine_element);
-   
- ! 	  // Loop over the fine element's Gauss Points
- ! 	  perf_log.start_event("gp_loop");
-   
- ! 	  for (unsigned int gp=0; gp<q_point.size(); gp++)
- ! 	    {
- ! 	      Real fine_soln=0., coarse_soln=0.;
-   
- ! 	      assert (fe_fine.n_shape_functions() == fine_element->n_nodes());
-   	    
- ! 	      for (unsigned int i=0; i<fe_fine.n_shape_functions(); i++)
- ! 		{
- ! 		  const unsigned int nv = fine_var_names.size();
- ! 		  const unsigned int gn = fine_element->node(i); // Global node number
-   				
- ! 		  fine_soln += fine_solution[gn*nv + ivar]*phi[i][gp];
- ! 		};
-   
-   
- ! 	      // Chances are this Gauss point is contained in the coarse-mesh element that contained
- ! 	      // the last Gauss point, so let's look there first and only do the OctTree search
- ! 	      // if necessary.
- ! 	      if (!coarse_element->contains_point(q_point[gp]))
- ! 		{
- ! 		  perf_log.pause_event("gp_loop");
- ! 		  perf_log.start_event("element lookup");
-   
- ! 		  coarse_element = octree_coarse.find_element(q_point[gp]);
-   		
- ! 		  assert (coarse_element != NULL);
-   				
- ! 		  // Recompute the element--specific data for the new coarse-mesh element.
- ! 		  fe_coarse.reinit (coarse_element);
-   		
- ! 		  perf_log.stop_event("element lookup");
- ! 		  perf_log.restart_event("gp_loop");
- ! 		}
-   	    
-   
- ! 	      // Find the point on the coarse reference element corresponding to the current Gauss
- ! 	      // point
- ! 	      const Point mapped_point = fe_coarse.inverse_map(coarse_element, q_point[gp]);
- ! 
- ! 	      // Interpolate the coarse grid solution.
- ! 	      for (unsigned int i=0; i<fe_coarse.n_shape_functions(); i++)
- ! 		{		
- ! 		  const unsigned int nv = coarse_var_names.size();
- ! 		  const unsigned int gn = coarse_element->node(i); // Global node number
-   				
- ! 		  coarse_soln += coarse_solution[gn*nv + ivar]*fe_coarse.shape(coarse_element,
- ! 									       SECOND,
- ! 									       i,
- ! 									       mapped_point);
- ! 		};
-   
- ! 	      // Accumulate the error.
- ! 	      error += JxW[gp]*(coarse_soln - fine_soln)*(coarse_soln - fine_soln);
- ! 	    };
-   
- ! 	  perf_log.stop_event("gp_loop");
-   
- ! 	}; // End element loop
-   
- !       error = sqrt(error);
-   
- !       std::cout << "Computed error=" << error
- ! 		<< std::endl;
-   
- !       // Now lets compute the error at each node in the fine mesh and plot it out.
- !       {
- ! 	perf_log.start_event ("diff_soln_loop");
-         
- ! 	const unsigned int nv = diff_var_names.size();
-   
- ! 	std::vector<unsigned char> already_done(mesh_fine.n_nodes(), 0);
-   
- ! 	Elem* coarse_element = mesh_coarse.elem(0);
-         
- ! 	for (unsigned int e=0; e<mesh_fine.n_elem(); e++)
- ! 	  for (unsigned int n=0; n<mesh_fine.elem(e)->n_nodes(); n++)
- ! 	    {
- ! 	      const unsigned int gn = mesh_fine.elem(e)->node(n);
-   	    
- ! 	      if (!already_done[gn])
- ! 		{
- ! 		  already_done[gn] = 1;
-   	      
- ! 		  const Point& p = mesh_fine.point(gn);
-   		
- ! 		  if (!coarse_element->contains_point(p))
- ! 		    {
- ! 		      perf_log.pause_event ("diff_soln_loop");
- ! 		      perf_log.start_event ("element lookup 2");
-   		    
- ! 		      coarse_element = octree_coarse.find_element(p);
-   		
- ! 		      assert (coarse_element != NULL);
-   		    
- ! 		      // Recompute the element--specific data for the new coarse-mesh element.
- ! 		      fe_coarse.reinit (coarse_element);
-   		    
- ! 		      perf_log.stop_event ("element lookup 2");
- ! 		      perf_log.restart_event ("diff_soln_loop");
- ! 		    }
-   		
- ! 		  const Point mapped_point = fe_coarse.inverse_map(coarse_element, p);
-   		
- ! 		  for (unsigned int c=0; c<nv; c++)
- ! 		    {
- ! 		      Real coarse_soln = 0.;
-   		    
- ! 		      // Interpolate the coarse grid solution.
- ! 		      for (unsigned int i=0; i<fe_coarse.n_shape_functions(); i++)
- ! 			coarse_soln += coarse_solution[coarse_element->node(i)*nv + c]*fe_coarse.shape(coarse_element,
- ! 												       SECOND,
- ! 												       i,
- ! 												       mapped_point);
-   		    
- ! 		      diff_solution[gn*nv + c] = coarse_soln - fine_solution[gn*nv + c];
- ! 		    };	    
- ! 		};
- ! 	    };
- ! 	perf_log.stop_event ("diff_soln_loop");
- !       };
- !       mesh_fine.write_tecplot_binary("foo.plt", &diff_solution, &diff_var_names);
-   
- +     };
-     };
- !   
-       
- !   return libMesh::close();
-   };
-     
- Index: src/apps/meshtool.cc
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/apps/meshtool.cc,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** src/apps/meshtool.cc	4 Feb 2003 02:04:14 -0000	1.6
- --- src/apps/meshtool.cc	20 Feb 2003 23:18:09 -0000	1.8
- ***************
- *** 18,23 ****
- --- 18,24 ----
-   #include <algorithm>
-   
-   // Local Includes
- + #include "libmesh.h"
-   #include "mesh.h"
-   #include "dof_map.h"
-   #include "perfmon.h"
- ***************
- *** 361,375 ****
-   
-   int main (int argc, char** argv)
-   {
- !   PerfMon perfmon(argv[0]);
- ! 
- ! #ifdef HAVE_PETSC
- !   
- !   PetscInitialize (&argc, &argv, (char *)0, NULL);
- !   
- ! #endif
-     
-     {
-       unsigned int n_subdomains = 1;
-       unsigned int n_rsteps = 0;
-       unsigned int dim = static_cast<unsigned int>(-1); // invalid dimension
- --- 362,372 ----
-   
-   int main (int argc, char** argv)
-   {
- !   libMesh::init (argc, argv);
-     
-     {
- +     PerfMon perfmon(argv[0]);
- +     
-       unsigned int n_subdomains = 1;
-       unsigned int n_rsteps = 0;
-       unsigned int dim = static_cast<unsigned int>(-1); // invalid dimension
- ***************
- *** 389,395 ****
-         
-       std::vector<std::string> names;
-       std::vector<std::string> var_names;
- !     std::vector<Complex>     soln;
-   
-       process_cmd_line(argc, argv, names,
-   		     n_subdomains, n_rsteps,
- --- 386,392 ----
-         
-       std::vector<std::string> names;
-       std::vector<std::string> var_names;
- !     std::vector<Number>      soln;
-   
-       process_cmd_line(argc, argv, names,
-   		     n_subdomains, n_rsteps,
- ***************
- *** 652,658 ****
-         if (build_l)
-   	{
-   #ifdef HAVE_PETSC	  
- ! 	  PetscMatrix conn;
-   	  mesh.build_L_graph (conn);
-   	  conn.print_matlab();
-   #else
- --- 649,655 ----
-         if (build_l)
-   	{
-   #ifdef HAVE_PETSC	  
- ! 	  PetscMatrix<Number> conn;
-   	  mesh.build_L_graph (conn);
-   	  conn.print_matlab();
-   #else
- ***************
- *** 666,672 ****
-         if (build_script_l)
-   	{
-   #ifdef HAVE_PETSC	  
- ! 	  PetscMatrix conn;
-   	  mesh.build_script_L_graph (conn);
-   	  conn.print_matlab();
-   #else
- --- 663,669 ----
-         if (build_script_l)
-   	{
-   #ifdef HAVE_PETSC	  
- ! 	  PetscMatrix<Number> conn;
-   	  mesh.build_script_L_graph (conn);
-   	  conn.print_matlab();
-   #else
- ***************
- *** 719,732 ****
-       */
-     };
-   
- - 
- - #ifdef HAVE_PETSC
- - 
- -   PetscFinalize();
- -    
- - #endif
- - 
-     
- !   return 0;
-   };
-     
- --- 716,722 ----
-       */
-     };
-   
-     
- !   return libMesh::close();
-   };
-     
- Index: src/apps/testexodus.cc
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/apps/testexodus.cc,v
- retrieving revision 1.6
- retrieving revision 1.12
- diff -c -r1.6 -r1.12
- *** src/apps/testexodus.cc	3 Feb 2003 03:51:49 -0000	1.6
- --- src/apps/testexodus.cc	17 Feb 2003 04:05:48 -0000	1.12
- ***************
- *** 6,11 ****
- --- 6,12 ----
-   
-   // Local Includes
-   #include "mesh_config.h"
- + #include "libmesh.h"
-   #include "mesh.h"
-   #include "quadrature_gauss.h"
-   #include "quadrature_trap.h"
- ***************
- *** 15,31 ****
-   #include "boundary_info.h"
-   #include "elem.h"
-   #include "point.h"
- ! 
- ! #include "petsc_interface.h"
- ! #include "petsc_matrix.h"
- ! #include "petsc_vector.h"
- ! #include "dense_matrix.h"
- ! 
- ! #include "system_data.h"
-   #include "equation_systems.h"
- - 
-   #include "perfmon.h"
-   
-   
-   
-   
- --- 16,34 ----
-   #include "boundary_info.h"
-   #include "elem.h"
-   #include "point.h"
- ! #include "general_system.h"
-   #include "equation_systems.h"
-   #include "perfmon.h"
-   
- + #if defined(HAVE_PETSC)
- + extern "C" {
- + #include <petsc.h>
- + }
- + #elif defined(HAVE_MPI)
- + extern "C" {
- + #include <mpi.h>
- + }
- + #endif
-   
-   
-   
- ***************
- *** 40,54 ****
-   
-   int main (int argc, char** argv)
-   {
- ! 
- !   PetscInitialize (&argc, &argv, (char *)0, NULL);
-   
-     {
-       if (argc < 4)
-         std::cout << "Usage: ./prog -d DIM filename" << std::endl;
-       
-       // Variables to get us started
-       const unsigned int dim = atoi(argv[2]);
-       
-       std::string basename  (argv[3]);
-       std::string in_name    = basename;
- --- 43,74 ----
-   
-   int main (int argc, char** argv)
-   {
- !   libMesh::init (argc, argv);
-   
-     {
-       if (argc < 4)
-         std::cout << "Usage: ./prog -d DIM filename" << std::endl;
- +     else
- +       {
- + 	std::cout << " Running ";
- + 
- + 	for (int i=0; i<argc; i++)
- + 	  std::cout << argv[i] << " ";
- + 
- + 	std::cout << " on " << libMesh::n_processors()
- + 		  << " processors, I am processor "  << libMesh::processor_id()
- + 		  << std::endl
- + 		  << std::endl;	    
- +       }
-       
-       // Variables to get us started
-       const unsigned int dim = atoi(argv[2]);
- + 
- +     std::cout << std::endl
- + 	      << "Processor = " << libMesh::processor_id()
- + 	      << ", dim = " << dim
- + 	      << std::endl
- + 	      << std::endl;
-       
-       std::string basename  (argv[3]);
-       std::string in_name    = basename;
- ***************
- *** 60,79 ****
-       bndry_name += "_bndry.gmv";
-       tec_name   += ".plt";
-       gmv_name   += ".gmv";
- -       
- -     int proc_id = 0;
- -     int n_procs = 0;
-       
- -     MPI_Comm_rank (PETSC_COMM_WORLD, &proc_id);
- -     MPI_Comm_size (PETSC_COMM_WORLD, &n_procs);
- - 
-       PerfMon perfmon("Code performance");
-   
-       // declare a mesh...
- !     Mesh mesh(dim, proc_id);
-     
- -     PetscInterface petsc_interface;
- - 
-       // Read an Exodus mesh
-       //
-       // Then partition the domain and find all the neighbor
- --- 80,91 ----
-       bndry_name += "_bndry.gmv";
-       tec_name   += ".plt";
-       gmv_name   += ".gmv";
-       
-       PerfMon perfmon("Code performance");
-   
-       // declare a mesh...
- !     Mesh mesh(dim, libMesh::processor_id());
-     
-       // Read an Exodus mesh
-       //
-       // Then partition the domain and find all the neighbor
- ***************
- *** 89,95 ****
-         }
-         {
-   	PerfMon pm("Partitioner performance");
- ! 	mesh.metis_partition(n_procs);
-         }
-         mesh.print_info();
-       }
- --- 101,107 ----
-         }
-         {
-   	PerfMon pm("Partitioner performance");
- ! 	mesh.metis_partition(libMesh::n_processors());
-         }
-         mesh.print_info();
-       }
- ***************
- *** 118,126 ****
-   	es("primary").add_variable("U", SECOND);
-   	es("primary").add_variable("V", SECOND);
-         
- ! 	es("primary").dof_map.dof_coupling.resize(2);      
- ! 	es("primary").dof_map.dof_coupling(0,0) = 1;
- ! 	es("primary").dof_map.dof_coupling(1,1) = 1;
-   	
-   	es("primary").attach_assemble_function(assemble_primary);
-         };
- --- 130,138 ----
-   	es("primary").add_variable("U", SECOND);
-   	es("primary").add_variable("V", SECOND);
-         
- ! 	es("primary").get_dof_map().dof_coupling.resize(2);      
- ! 	es("primary").get_dof_map().dof_coupling(0,0) = 1;
- ! 	es("primary").get_dof_map().dof_coupling(1,1) = 1;
-   	
-   	es("primary").attach_assemble_function(assemble_primary);
-         };
- ***************
- *** 150,168 ****
-   
-         // clear the unneded matrix and
-         // Petsc interface
- !       es("primary").matrix.clear ();
- !       es("primary").petsc_interface.clear ();
-       };
-       
-       // assemble & solve the secondary
-       {
-         PerfMon pm ("Solver Performance");
-         
- !       // call the solver.  Don't solve
- !       // the secondary system if not in 3D
- !       if (dim == 3)
- ! 	es("secondary").solve ();
- ! 
-       };
-       
-   
- --- 162,177 ----
-   
-         // clear the unneded matrix and
-         // Petsc interface
- !       es("primary").matrix->clear ();
- !       es("primary").linear_solver_interface->clear ();
-       };
-       
-       // assemble & solve the secondary
-       {
-         PerfMon pm ("Solver Performance");
-         
- !       // call the solver.
- !       es("secondary").solve ();
-       };
-       
-   
- ***************
- *** 175,184 ****
-       es.write("out.xdr", Xdr::ENCODE);
-       es.write("out.xda", Xdr::WRITE);
-     };
- -   
- -   PetscFinalize();
-   
- !   return 0;
-   };
-     
-   
- --- 184,192 ----
-       es.write("out.xdr", Xdr::ENCODE);
-       es.write("out.xda", Xdr::WRITE);
-     };
-   
- !   
- !   return libMesh::close();
-   };
-     
-   
- ***************
- *** 197,211 ****
-   	
-     // Also use a 3x3x3 quadrature rule (3D).  Then tell the FE
-     // about the geometry of the problem and the quadrature rule
- -   FEType fe_type (SECOND);
-     
- !   AutoPtr<FEBase> fe(FEBase::build(dim, fe_type));
-     QGauss qrule(dim, SEVENTH);
-     //QTrap qrule(dim);
-     
-     fe->attach_quadrature_rule (&qrule);
-     
- !   AutoPtr<FEBase> fe_face(FEBase::build(dim, fe_type));
-     QGauss   qface0(dim, FIFTH);
-     //QTrap   qface0(dim);
-     //QSimpson   qface0(dim);
- --- 205,218 ----
-   	
-     // Also use a 3x3x3 quadrature rule (3D).  Then tell the FE
-     // about the geometry of the problem and the quadrature rule
-     
- !   AutoPtr<FEBase> fe(FEBase::build(dim, es("primary").get_dof_map().variable_type(0)));
-     QGauss qrule(dim, SEVENTH);
-     //QTrap qrule(dim);
-     
-     fe->attach_quadrature_rule (&qrule);
-     
- !   AutoPtr<FEBase> fe_face(FEBase::build(dim, es("primary").get_dof_map().variable_type(0)));
-     QGauss   qface0(dim, FIFTH);
-     //QTrap   qface0(dim);
-     //QSimpson   qface0(dim);
- ***************
- *** 249,256 ****
-         
-         //fe->print_info();
-   
- !       dof_map.dof_indices(e, dof_indices_U, 0);
- !       dof_map.dof_indices(e, dof_indices_V, 1);
-         
-         // zero the element matrix and vector
-         Kuu.resize (phi.size(),
- --- 256,263 ----
-         
-         //fe->print_info();
-   
- !       dof_map.dof_indices(elem, dof_indices_U, 0);
- !       dof_map.dof_indices(elem, dof_indices_V, 1);
-         
-         // zero the element matrix and vector
-         Kuu.resize (phi.size(),
- ***************
- *** 314,328 ****
-   	      }
-   	}
-   
- !       es("primary").rhs.add_vector(Fu,
- ! 				   dof_indices_U);
- !       es("primary").rhs.add_vector(Fv,
- ! 				   dof_indices_V);
- ! 
- !       es("primary").matrix.add_matrix(Kuu,
- ! 				      dof_indices_U);
- !       es("primary").matrix.add_matrix(Kvv,
- ! 				      dof_indices_V);
-       };
-     
-     std::cout << "Vol="  << vol << std::endl;
- --- 321,335 ----
-   	      }
-   	}
-   
- !       es("primary").rhs->add_vector(Fu,
- ! 				    dof_indices_U);
- !       es("primary").rhs->add_vector(Fv,
- ! 				    dof_indices_V);
- ! 
- !       es("primary").matrix->add_matrix(Kuu,
- ! 				       dof_indices_U);
- !       es("primary").matrix->add_matrix(Kvv,
- ! 				       dof_indices_V);
-       };
-     
-     std::cout << "Vol="  << vol << std::endl;
- ***************
- *** 345,358 ****
-     // In this section we assemble the matrix and rhs
-     PerfMon pm("Matrix Assembly (secondary)");
-   
- !   // The Finite Element type.
- !   FEType fe_type (es("secondary").dof_map.component_type(0));
- !   
- !   AutoPtr<FEBase> fe(FEBase::build(dim, fe_type));
-     QGauss qrule(dim, FIFTH);
-     
-     fe->attach_quadrature_rule (&qrule);
- -     
-     
-     // These are references to cell-specific data
-     const std::vector<Real>& JxW                 = fe->get_JxW();
- --- 352,361 ----
-     // In this section we assemble the matrix and rhs
-     PerfMon pm("Matrix Assembly (secondary)");
-   
- !   AutoPtr<FEBase> fe(FEBase::build(dim, es("secondary").get_dof_map().variable_type(0)));
-     QGauss qrule(dim, FIFTH);
-     
-     fe->attach_quadrature_rule (&qrule);
-     
-     // These are references to cell-specific data
-     const std::vector<Real>& JxW                 = fe->get_JxW();
- ***************
- *** 375,381 ****
-         if (elem->processor_id() != proc_id) continue;
-         if (!elem->active())                 continue;
-   	    
- !       dof_map.dof_indices(e, dof_indices);
-         
-         // recompute the element-specific data for the current element
-         fe->reinit (elem);
- --- 378,384 ----
-         if (elem->processor_id() != proc_id) continue;
-         if (!elem->active())                 continue;
-   	    
- !       dof_map.dof_indices(elem, dof_indices);
-         
-         // recompute the element-specific data for the current element
-         fe->reinit (elem);
- ***************
- *** 407,417 ****
-   	      Kww(i,j) += JxW[gp]*(phi[i][gp])*(phi[j][gp]);
-   	  };
-   
- !       es("secondary").matrix.add_matrix(Kww,
- ! 				   dof_indices);
-         
- !       es("secondary").rhs.add_vector(Fw,
- ! 				     dof_indices);
-         
-       };
-   };
- --- 410,420 ----
-   	      Kww(i,j) += JxW[gp]*(phi[i][gp])*(phi[j][gp]);
-   	  };
-   
- !       es("secondary").matrix->add_matrix(Kww,
- ! 					 dof_indices);
-         
- !       es("secondary").rhs->add_vector(Fw,
- ! 				      dof_indices);
-         
-       };
-   };
- Index: src/base/dof_map.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/base/dof_map.C,v
- retrieving revision 1.7
- diff -c -r1.7 dof_map.C
- *** src/base/dof_map.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/base/dof_map.C	21 Feb 2003 20:53:40 -0000
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 30,226 ****
-   #include "elem.h"
-   #include "mesh_base.h"
-   #include "fe_interface.h"
-   
-   
-   
-   
-   
-   // ------------------------------------------------------------
- - // DofMap static member initializations
- - const unsigned int DofMap::invalid_number = static_cast<unsigned int>(-1);
- - 
- - 
- - 
- - // ------------------------------------------------------------
-   // DofMap member functions
- ! DofMap::DofMap(const MeshBase& m) :
- !   _mesh(m),
- !   _dim(_mesh.mesh_dimension()),
- !   _n_nodes(0),
- !   _n_elem(0),
- !   _n_dfs(0),
- ! #ifdef ENABLE_PERFORMANCE_LOGGING
- !   perf_log("DofMap", true)
- ! #else
- !   perf_log("DofMap", false)
- ! #endif
- !   
- ! {
- ! };
- ! 
- ! 
- ! 
- ! DofMap::~DofMap()
-   {
- ! };
-   
-   
-   
- ! void DofMap::reinit()
-   {
- !   perf_log.start_event("reinit()");
-     
-     clear();
-   
- !   _n_nodes = _mesh.n_nodes();
- !   _n_elem  = _mesh.n_elem();
-   
- !   std::vector<unsigned int> max_dofs_per_node(n_components(), 0);
- !   std::vector<unsigned int> max_dofs_per_elem(n_components(), 0);
- !   
- !   // First compute the maximum number of DOFs per node
- !   // and element for each component.  We may not need to allocate
- !   // memory at all...
- !   for (unsigned int c=0; c<n_components(); c++)
- !     {
- !       const FEType fe_type = component_type(c);
- !        
- !       for (unsigned int e=0; e<_n_elem; e++)
- ! 	if (_mesh.elem(e)->active())
- ! 	  {
- ! 	    const Elem*    elem = _mesh.elem(e);
- ! 	    const ElemType type = elem->type();
- ! 	     
- ! 	    // Count the nodal DOFs
- ! 	    for (unsigned int node=0; node<elem->n_nodes(); node++)
- ! 	      {
- ! 		const unsigned int dofs_at_node =
- ! 		  FEInterface::n_dofs_at_node(_dim, fe_type, type, node);
- ! 		 
- ! 		max_dofs_per_node[c] = std::max(max_dofs_per_node[c],
- ! 						dofs_at_node);
- ! 	      };
- ! 	     
- ! 	    // Count the element DOFs
- ! 	    const unsigned int dofs_per_elem =
- ! 	      FEInterface::n_dofs_per_elem(_dim, fe_type, type);
- ! 	     
- ! 	    max_dofs_per_elem[c] = std::max(max_dofs_per_elem[c],
- ! 					    dofs_per_elem);
- ! 	  };
- !     };
-   
- !   
- ! #ifdef ENABLE_EXPENSIVE_DATA_STRUCTURES
-   
- !   // initialize the _node_dofs and _elem_dofs maps  
- !   _node_dofs.resize(n_components());
- !   _elem_dofs.resize(n_components());
-   
-     
- -   for (unsigned int c=0; c<n_components(); c++)
- -     {
- -       // No need to waste space...
- -       if (max_dofs_per_node[c] > 0)
- - 	_node_dofs[c].resize(_n_nodes);
-   
- -       if (max_dofs_per_elem[c] > 0)
- - 	_elem_dofs[c].resize(_n_elem);
- - 
- -       const FEType& fe_type = component_type(c);
- -       
- -       for (unsigned int e=0; e<_n_elem; e++)
- - 	if (_mesh.elem(e)->active())
- - 	  {
- - 	    const Elem* elem    = _mesh.elem(e);
- - 	    const ElemType type = elem->type();
- - 	    
- - 	    // Initialize the nodal dofs
- - 	    if (max_dofs_per_node[c] > 0)
- - 	      for (unsigned int node=0; node<elem->n_nodes(); node++)
- - 		{
- - 		  const unsigned int global_node  = elem->node(node);
- - 		  const unsigned int current_size =
- - 		    _node_dofs[c][global_node].size();
- - 		  
- - 		  const unsigned int dofs_per_node =
- - 		    FEInterface::n_dofs_at_node(_dim, fe_type, type, node);
- - 		  
- - 		  if (dofs_per_node > current_size)
- - 		    {
- - 		      _node_dofs[c][global_node].resize(dofs_per_node);
- - 		      
- - // 		      for (unsigned int i=0; i<dofs_per_node; i++)
- - // 			_node_dofs[c][global_node][i] = invalid_number;
- - 
- - 		      std::fill(_node_dofs[c][global_node].begin(),
- - 				_node_dofs[c][global_node].end(),
- - 				invalid_number);				
- - 		    };
- - 		};
- - 	    
- - 	    // Initialize the element dofs
- - 	    if (max_dofs_per_elem[c] > 0)
- - 	      {
- - 		const unsigned int current_size =
- - 		  _elem_dofs[c][e].size();
- - 		
- - 		const unsigned int dofs_per_elem =
- - 		  FEInterface::n_dofs_per_elem(_dim, fe_type, type);
- - 		
- - 		if (dofs_per_elem > current_size)
- - 		  {
- - 		    _elem_dofs[c][e].resize(dofs_per_elem);
- - 		    
- - // 		    for (unsigned int i=0; i<dofs_per_elem; i++)
- - // 		      _elem_dofs[c][e][i] = invalid_number;
- - 
- - 		    std::fill(_elem_dofs[c][e].begin(),
- - 			      _elem_dofs[c][e].end(),
- - 			      invalid_number);
- - 		  };
- - 	      };
- - 	  };
- -     };
- -    
- -    
- - #else
-     
- !   // initialize the _node_id_map, each entry should get assigned
- !   // invalid_number
- !   _node_id_map.resize(_n_nodes*n_components());
- ! 
- !   // Original Code
- !   // for (unsigned int i=0; i<_node_id_map.size(); i++)
- !   //     _node_id_map[i] = invalid_number;
- ! 
- ! 
- !   // New code 
- !   std::fill(_node_id_map.begin(),
- ! 	    _node_id_map.end(),
- ! 	    invalid_number);
- ! 
- ! 
- ! 
- ! 
- !   // initialize the _elem_id_map, each entry should get assigned
- !   // invalid_number
- !   _elem_id_map.resize(_n_elem*n_components());
- ! 
- !   // Original Code
- !   // for (unsigned int i=0; i<_elem_id_map.size(); i++)
- !   //     _elem_id_map[i] = invalid_number;
- ! 
- ! 
- !   // New code 
- !   std::fill(_elem_id_map.begin(),
- ! 	    _elem_id_map.end(),
- ! 	    invalid_number);
-   
- ! #endif
-     
- !   perf_log.stop_event("reinit()");
- ! };
-   
-   
-   
- --- 30,119 ----
-   #include "elem.h"
-   #include "mesh_base.h"
-   #include "fe_interface.h"
- + #include "sparse_matrix.h"
- + #include "libmesh.h"
-   
-   
-   
-   
-   
-   // ------------------------------------------------------------
-   // DofMap member functions
- ! void DofMap::attach_matrix (SparseMatrix<Number>& matrix)
-   {
- !   _matrix = &matrix;
- !   
- !   _matrix->attach_dof_map (*this);
- ! }
-   
-   
-   
- ! void DofMap::reinit(MeshBase& mesh)
-   {
- !   libMesh::log.start_event("reinit()");
-     
-     clear();
-   
- !   _n_nodes = mesh.n_nodes();
- !   _n_elem  = mesh.n_elem();
-   
- !   const unsigned int n_var = n_variables();
- !   const unsigned int dim    = mesh.mesh_dimension();
-   
- !   // First set the number of variables for each \p DofObject
- !   // equal to n_variables() for this system.
- !   {
- !     // All the nodes
- !     node_iterator       node_it  (mesh.nodes_begin());
- !     const node_iterator node_end (mesh.nodes_end());
-   
- !     for ( ; node_it != node_end; ++node_it)
- !       (*node_it)->set_n_vars(sys_number(),n_var);
- !     
- !     // All the elements
- !     elem_iterator       elem_it (mesh.elements_begin());
- !     const elem_iterator elem_end(mesh.elements_end());
-   
- +     for ( ; elem_it != elem_end; ++elem_it)
- +       (*elem_it)->set_n_vars(sys_number(),n_var);
- +   }
-     
-   
-     
- !   for (unsigned int var=0; var<n_variables(); var++)
- !     {
- !       const FEType& fe_type = variable_type(var);
-   
- !       // For all the active elements
- !       active_elem_iterator       elem_it (mesh.elements_begin());
- !       const active_elem_iterator elem_end(mesh.elements_end());
- !       
- !       for ( ; elem_it != elem_end; ++elem_it)
- ! 	{
- ! 	  Elem*    elem       = *elem_it;
- ! 	  const ElemType type = elem->type();
- ! 	     
- ! 	  // Allocate the nodal DOFs
- ! 	  for (unsigned int n=0; n<elem->n_nodes(); n++)
- ! 	    {
- ! 	      const unsigned int dofs_at_node =
- ! 		FEInterface::n_dofs_at_node(dim, fe_type, type, n);
- ! 	      
- ! 	      if (dofs_at_node > elem->get_node(n)->n_comp(sys_number(),var))
- ! 		elem->get_node(n)->set_n_comp(sys_number(), var, dofs_at_node);
- ! 	    }
- ! 	     
- ! 	  // Allocate the element DOFs
- ! 	  const unsigned int dofs_per_elem =
- ! 	    FEInterface::n_dofs_per_elem(dim, fe_type, type);
- ! 	  
- ! 	  if (dofs_per_elem > elem->n_comp(sys_number(), var))
- ! 	    elem->set_n_comp(sys_number(), var, dofs_per_elem);
- ! 	}
- !     }
-     
- !   libMesh::log.stop_event("reinit()");
- ! }
-   
-   
-   
- ***************
- *** 231,248 ****
-     // It should not change...
-     //dof_coupling.clear();
-     
- - #ifdef ENABLE_EXPENSIVE_DATA_STRUCTURES
- - 
- -   _node_dofs.clear();
- -   _elem_dofs.clear();
- -   
- - #else
- -   
- -   _node_id_map.clear();
- -   _elem_id_map.clear();
- - 
- - #endif
- -   
-     _first_df.clear();
-     _last_df.clear();
-     _send_list.clear();
- --- 124,129 ----
- ***************
- *** 255,365 ****
-     _dof_constraints.clear();
-   
-   #endif
-     
-     _n_dfs =
-       _n_nodes =
-       _n_elem =
-       0;
- ! };
-   
-   
-   
-   
- ! void DofMap::distribute_dofs(const unsigned int proc_id)
-   {
- !   assert (n_components());
- !   assert (proc_id < _mesh.n_processors());
-     
- !   // re-init in case the underlying mesh has changed
- !   reinit();
-   
-     assert (_n_nodes);
-     assert (_n_elem);
-   
- !   perf_log.start_event("distribute_dofs()");
-   
-     unsigned int next_free_dof=0;
-   
- !   _first_df.resize(_mesh.n_processors());
- !   _last_df.resize(_mesh.n_processors());
- ! 
- !   for (unsigned int s=0; s<_mesh.n_processors(); ++s)
- !     _first_df[s] = _last_df[s] = 0;
-   
-     _send_list.clear();
-     
-     //------------------------------------------------------------
-     // DOF numbering
- !   for (unsigned int processor=0; processor<_mesh.n_processors();
- !        ++processor)
-       {
-         _first_df[processor] = next_free_dof;
-         
- !       for (unsigned comp=0; comp<n_components(); comp++)
-   	{
- ! 	  const FEType fe_type = component_type(comp);
- ! 	  
- ! 	  for (unsigned int e=0; e<_n_elem; ++e)
- ! 	    if (_mesh.elem(e)->active())  
- ! 	      if (_mesh.elem(e)->processor_id() == processor)  
- ! 		{   // Only number dofs connected to active
- ! 		    // elements on this processor.
- ! 		  
- ! 		  const Elem* elem           = _mesh.elem(e);
- ! 		  const unsigned int n_nodes = elem->n_nodes();
- ! 		  const ElemType type        = elem->type();
- ! 		  
- ! 		  // First number the nodal DOFS
- ! 		  for (unsigned int node=0; node<n_nodes; node++)
- ! 		    for (unsigned int index=0;
- ! 			 index<FEInterface::n_dofs_at_node(_dim, fe_type, type, node);
- ! 			 index++)
- ! 		      {
- ! 			// Global node index
- ! 			const unsigned int ig = elem->node(node);
- ! 			
- ! 			// only assign a dof number if there isn't one
- ! 			// already there
- ! 			if (node_dof_number(ig,comp,index) == invalid_number)
- ! 			  {
- ! 			    set_node_dof_number(ig,comp,index) =
- ! 			      next_free_dof++;
- ! 			  
- ! 			    if (processor == proc_id)
- ! 			      _send_list.push_back(node_dof_number(ig,comp,index));
- ! 			  }
- ! 			// if there is an entry there and it isn't on this
- ! 			// processor it also needs to be added to the send list
- ! 			else if (node_dof_number(ig,comp,index) <
- ! 				 _first_df[proc_id])
- ! 			  {
- ! 			    if (processor == proc_id)
- ! 			      _send_list.push_back(node_dof_number(ig,comp,index));
- ! 			  };
- ! 		      };
- ! 
- ! 		  // Now number the element DOFS
- ! 		  const unsigned int ig = e;
-   
- ! 		  for (unsigned int index=0;
- ! 		       index<FEInterface::n_dofs_per_elem(_dim, fe_type, type); index++)
-   		    {
-   		  
- ! 		      // No way we could have already numbered this DOF!
- ! 		      assert (elem_dof_number(ig,comp,index) ==
- ! 			      invalid_number);
-   		  
- ! 		      set_elem_dof_number(ig,comp,index) =
- ! 			next_free_dof++;
-   		  
- ! 		      if (processor == proc_id)
- ! 			_send_list.push_back(elem_dof_number(ig,comp,index));
- ! 		    };
- ! 		};
- ! 	};
-         
-         _last_df[processor] = (next_free_dof-1);
- !     };
-     
-     _n_dfs = next_free_dof;
-   
- --- 136,241 ----
-     _dof_constraints.clear();
-   
-   #endif
- + 
- +   _matrix = NULL;
-     
-     _n_dfs =
-       _n_nodes =
-       _n_elem =
-       0;
- ! }
-   
-   
-   
-   
- ! void DofMap::distribute_dofs(MeshBase& mesh)
-   {
- !   const unsigned int proc_id = mesh.processor_id();
- !   const unsigned int n_proc  = mesh.n_processors();
-     
- !   assert (n_variables() != 0);
- !   assert (proc_id < mesh.n_processors());
- !   
- !   // re-init in case the mesh has changed
- !   reinit(mesh);
-   
-     assert (_n_nodes);
-     assert (_n_elem);
-   
- !   // Log how long it takes to distribute the degrees of freedom
- !   libMesh::log.start_event("distribute_dofs()");
-   
-     unsigned int next_free_dof=0;
-   
- !   // Resize the _first_df and _last_df arrays, fill with 0.
- !   _first_df.resize(n_proc); std::fill(_first_df.begin(), _first_df.end(), 0);
- !   _last_df.resize (n_proc); std::fill(_last_df.begin(),  _last_df.end(),  0);
-   
-     _send_list.clear();
-     
-     //------------------------------------------------------------
-     // DOF numbering
- !   for (unsigned int processor=0; processor<n_proc; processor++)
-       {
-         _first_df[processor] = next_free_dof;
-         
- !       for (unsigned var=0; var<n_variables(); var++)
-   	{
- ! 	  active_pid_elem_iterator       elem_it (mesh.elements_begin(), processor);
- ! 	  const active_pid_elem_iterator elem_end(mesh.elements_end(),   processor);
-   
- ! 	  for ( ; elem_it != elem_end; ++elem_it)
- ! 	    {
- ! 	      // Only number dofs connected to active
- ! 	      // elements on this processor.
- ! 	      
- ! 	      Elem* elem                 = *elem_it;
- ! 	      const unsigned int n_nodes = elem->n_nodes();
- ! 	      
- ! 	      // First number the nodal DOFS
- ! 	      for (unsigned int n=0; n<n_nodes; n++)
- ! 		{
- ! 		  Node* node = elem->get_node(n);
- ! 		  
- ! 		  for (unsigned int index=0; index<node->n_comp(sys_number(),var); index++)
-   		    {
- + 		      // only assign a dof number if there isn't one
- + 		      // already there
- + 		      if (node->dof_number(sys_number(),var,index) == DofObject::invalid_id)
- + 			{
- + 			  node->set_dof_number(sys_number(),var,index,next_free_dof++);
- + 			  
- + 			  if (processor == proc_id)
- + 			    _send_list.push_back(node->dof_number(sys_number(),var,index));
- + 			}
- + 		      // if there is an entry there and it isn't on this
- + 		      // processor it also needs to be added to the send list
- + 		      else if (node->dof_number(sys_number(),var,index) <
- + 			       _first_df[proc_id])
- + 			{
- + 			  if (processor == proc_id)
- + 			    _send_list.push_back(node->dof_number(sys_number(),var,index));
- + 			}
- + 		    }
- + 		}
-   		  
- ! 	      // Now number the element DOFS
- ! 	      for (unsigned int index=0; index<elem->n_comp(sys_number(),var); index++)
- ! 		{		  
- ! 		  // No way we could have already numbered this DOF!
- ! 		  assert (elem->dof_number(sys_number(),var,index) ==
- ! 			  DofObject::invalid_id);
-   		  
- ! 		  elem->set_dof_number(sys_number(),var,index,next_free_dof++);
-   		  
- ! 		  if (processor == proc_id)
- ! 		    _send_list.push_back(elem->dof_number(sys_number(),var,index));
- ! 		}
- ! 	    }
- ! 	}
-         
-         _last_df[processor] = (next_free_dof-1);
- !     }
-     
-     _n_dfs = next_free_dof;
-   
- ***************
- *** 371,376 ****
- --- 247,261 ----
-       std::sort(_send_list.begin(), _send_list.end());
-       std::vector<unsigned int> new_send_list;
-   
- +     // The new send list will be <= the size of the
- +     // current _send_list.  Let's reserve memory
- +     // assuming it will be the same size.  This will
- +     // allow us to efficiently use the push_back()
- +     // member (and probably will actually _save_
- +     // space since vector reallocations generally
- +     // occur in powers of 2).
- +     new_send_list.reserve (_send_list.size());
- +     
-       new_send_list.push_back(_send_list[0]);
-       
-       for (unsigned int i=1; i<_send_list.size(); i++)
- ***************
- *** 378,397 ****
-   	new_send_list.push_back(_send_list[i]);
-   
-       _send_list = new_send_list;
- !   };
- !   
- !   perf_log.stop_event("distribute_dofs()");
- !     
- !   return;
- ! };
-   
-   
-   
- ! void DofMap::compute_sparsity(const unsigned int proc_id)
-   {
- !   assert (n_components());
-   
- -   perf_log.start_event("compute_sparsity()");
-     
-     /**
-      * Compute the sparsity structure of the global matrix.  This can be
- --- 263,283 ----
-   	new_send_list.push_back(_send_list[i]);
-   
-       _send_list = new_send_list;
- !   }
-   
- +   // All done. Stop logging.
- +   libMesh::log.stop_event("distribute_dofs()");    
- + }
-   
-   
- ! 
- ! void DofMap::compute_sparsity(MeshBase& mesh)
-   {
- !   assert (n_variables());
- ! 
- !   libMesh::log.start_event("compute_sparsity()");
- ! 
-   
-     
-     /**
-      * Compute the sparsity structure of the global matrix.  This can be
- ***************
- *** 399,404 ****
- --- 285,291 ----
-      * necessary to store the matrix.  This algorithm should be linear
-      * in the (# of elements)*(# nodes per element)
-      */
- +   const unsigned int proc_id           = mesh.processor_id();
-     const unsigned int n_dofs_on_proc    = n_dofs_on_processor(proc_id);
-     const unsigned int first_dof_on_proc = first_dof(proc_id);
-     const unsigned int last_dof_on_proc  = last_dof(proc_id);
- ***************
- *** 409,415 ****
-     /**
-      * If the user did not explicitly specify the DOF coupling
-      * then all the DOFS are coupled to each other.  Furthermore,
- !    * we can take a shortcut and to this more quickly here.  So
-      * we use an if-test.
-      */  
-     if (dof_coupling.empty())
- --- 296,302 ----
-     /**
-      * If the user did not explicitly specify the DOF coupling
-      * then all the DOFS are coupled to each other.  Furthermore,
- !    * we can take a shortcut and do this more quickly here.  So
-      * we use an if-test.
-      */  
-     if (dof_coupling.empty())
- ***************
- *** 417,425 ****
-         std::vector<unsigned int> element_dofs;
-         
-         for (unsigned int e=0; e<_n_elem; e++)
- ! 	if (_mesh.elem(e)->active())
-   	  {
- ! 	    dof_indices (e, element_dofs);
-   	    find_connected_dofs (element_dofs);
-   	    
-   	    const unsigned int n_dofs_on_element = element_dofs.size();
- --- 304,312 ----
-         std::vector<unsigned int> element_dofs;
-         
-         for (unsigned int e=0; e<_n_elem; e++)
- ! 	if (mesh.elem(e)->active())
-   	  {
- ! 	    dof_indices (mesh.elem(e), element_dofs);
-   	    find_connected_dofs (element_dofs);
-   	    
-   	    const unsigned int n_dofs_on_element = element_dofs.size();
- ***************
- *** 434,440 ****
-   		    (ig <= last_dof_on_proc))
-   		  {
-   		    // This is what I mean
- ! 		    //assert ((ig - first_dof_on_proc) >= 0);
-   		    // but do the test like this because ig and
-   		    // first_dof_on_proc are unsigned ints
-   		    assert (ig >= first_dof_on_proc);
- --- 321,327 ----
-   		    (ig <= last_dof_on_proc))
-   		  {
-   		    // This is what I mean
- ! 		    // assert ((ig - first_dof_on_proc) >= 0);
-   		    // but do the test like this because ig and
-   		    // first_dof_on_proc are unsigned ints
-   		    assert (ig >= first_dof_on_proc);
- ***************
- *** 448,457 ****
-   			const unsigned int jg = element_dofs[j];
-   			
-   			row.insert(jg);
- ! 		      };
- ! 		  };
- ! 	      };
- ! 	  };      
-       } 
-   
-   
- --- 335,344 ----
-   			const unsigned int jg = element_dofs[j];
-   			
-   			row.insert(jg);
- ! 		      }
- ! 		  }
- ! 	      }
- ! 	  }      
-       } 
-   
-   
- ***************
- *** 463,491 ****
-     else
-       {
-         assert (dof_coupling.size() ==
- ! 	      n_components());
-         
- !       const unsigned int n_comp = n_components();
-         
-         std::vector<unsigned int> element_dofs_i;
-         std::vector<unsigned int> element_dofs_j;
-         
-         
-         for (unsigned int e=0; e<_n_elem; e++)
- ! 	if (_mesh.elem(e)->active())
- ! 	  for (unsigned int ci=0; ci<n_comp; ci++)
-   	    {
- ! 	      // Find element dofs for component ci
- ! 	      dof_indices (e, element_dofs_i, ci);
-   	      find_connected_dofs (element_dofs_i);
-   	      
-   	      const unsigned int n_dofs_on_element_i = element_dofs_i.size();
-   
- ! 	      for (unsigned int cj=0; cj<n_comp; cj++)
- ! 		if (dof_coupling(ci,cj)) // If ci couples to cj
-   		  {
- ! 		    // Find element dofs for component cj
- ! 		    dof_indices (e, element_dofs_j, cj);
-   		    find_connected_dofs (element_dofs_j);	    
-   		    
-   		    const unsigned int n_dofs_on_element_j = element_dofs_j.size();
- --- 350,378 ----
-     else
-       {
-         assert (dof_coupling.size() ==
- ! 	      n_variables());
-         
- !       const unsigned int n_var = n_variables();
-         
-         std::vector<unsigned int> element_dofs_i;
-         std::vector<unsigned int> element_dofs_j;
-         
-         
-         for (unsigned int e=0; e<_n_elem; e++)
- ! 	if (mesh.elem(e)->active())
- ! 	  for (unsigned int vi=0; vi<n_var; vi++)
-   	    {
- ! 	      // Find element dofs for variable vi
- ! 	      dof_indices (mesh.elem(e), element_dofs_i, vi);
-   	      find_connected_dofs (element_dofs_i);
-   	      
-   	      const unsigned int n_dofs_on_element_i = element_dofs_i.size();
-   
- ! 	      for (unsigned int vj=0; vj<n_var; vj++)
- ! 		if (dof_coupling(vi,vj)) // If vi couples to vj
-   		  {
- ! 		    // Find element dofs for variable vj
- ! 		    dof_indices (mesh.elem(e), element_dofs_j, vj);
-   		    find_connected_dofs (element_dofs_j);	    
-   		    
-   		    const unsigned int n_dofs_on_element_j = element_dofs_j.size();
- ***************
- *** 504,510 ****
-   			    // but do the test like this because ig and
-   			    // first_dof_on_proc are unsigned ints
-   			    assert (ig >= first_dof_on_proc);
- ! 			    assert ((ig - first_dof_on_proc) < sparsity_pattern.size());
-   		    
-   			    std::set<unsigned int>& row =
-   			      sparsity_pattern[ig - first_dof_on_proc];
- --- 391,397 ----
-   			    // but do the test like this because ig and
-   			    // first_dof_on_proc are unsigned ints
-   			    assert (ig >= first_dof_on_proc);
- ! 			    assert (ig < (sparsity_pattern.size() + first_dof_on_proc));
-   		    
-   			    std::set<unsigned int>& row =
-   			      sparsity_pattern[ig - first_dof_on_proc];
- ***************
- *** 514,525 ****
-   				const unsigned int jg = element_dofs_j[j];
-   			
-   				row.insert(jg);
- ! 			      };
- ! 			  };
- ! 		      };
- ! 		  };
- ! 	    };
- !     };      
-   
-   
-   
- --- 401,412 ----
-   				const unsigned int jg = element_dofs_j[j];
-   			
-   				row.insert(jg);
- ! 			      }
- ! 			  }
- ! 		      }
- ! 		  }
- ! 	    }
- !     }      
-   
-   
-   
- ***************
- *** 527,539 ****
-     // DOFs connected to our rows of the matrix.
-     _n_nz.resize (n_dofs_on_proc);
-     _n_oz.resize (n_dofs_on_proc);
-     
-     for (unsigned int i=0; i<n_dofs_on_proc; i++)
-       {
- !       // First zero the counters.
- !       _n_nz[i] = _n_oz[i] = 0;
- !       
- !       // Then get the row of the sparsity pattern
-         const std::set<unsigned int>& row = sparsity_pattern[i];
-         
-         // Now loop over the row and increment the appropriate
- --- 414,427 ----
-     // DOFs connected to our rows of the matrix.
-     _n_nz.resize (n_dofs_on_proc);
-     _n_oz.resize (n_dofs_on_proc);
- + 
- +   // First zero the counters.
- +   std::fill(_n_nz.begin(), _n_nz.end(), 0);
- +   std::fill(_n_oz.begin(), _n_oz.end(), 0);
-     
-     for (unsigned int i=0; i<n_dofs_on_proc; i++)
-       {
- !       // Get the row of the sparsity pattern
-         const std::set<unsigned int>& row = sparsity_pattern[i];
-         
-         // Now loop over the row and increment the appropriate
- ***************
- *** 547,573 ****
-   	  _n_nz[i]++;
-   	else
-   	  _n_oz[i]++;
- !     };
-   
- - 
- -   // Explicity clear the sparsity pattern now.
- -   // it is about to go out of scope, but maybe this
- -   // will expedite freeing up its memory?
- -   sparsity_pattern.clear();
-     
- !   perf_log.stop_event("compute_sparsity()");
- ! };
-   
-   
-   
- ! void DofMap::dof_indices (const unsigned int e,
-   			  std::vector<unsigned int>& di,
- ! 			  const unsigned int cn) const
-   {
- -   assert (e < _mesh.n_elem());
- - 
- -   const Elem* elem = _mesh.elem(e);
- -   
-     assert (elem != NULL);
-   
-   
- --- 435,471 ----
-   	  _n_nz[i]++;
-   	else
-   	  _n_oz[i]++;
- !     }
-   
-     
- !   libMesh::log.stop_event("compute_sparsity()");
- ! 
- !   // We are done with the sparsity_pattern.  However, quite a
- !   // lot has gone into computing it.  It is possible that some
- !   // \p SparseMatrix implementations want to see it.  Let them
- !   // see it before we throw it away.
- !   //
- !   // NOTE:  The \p SparseMatrix::update_sparsity_pattern() is NOT
- !   // const, so the \p SparseMatrix may freely trash the
- !   // sparsity_pattern.  DO NOT expect to use it any more after
- !   // this call.
- !   {
- !     if (_matrix != NULL)
- !       _matrix->update_sparsity_pattern (sparsity_pattern);
- !     
- !     // Explicity clear the sparsity pattern now.
- !     // it is about to go out of scope, but maybe this
- !     // will expedite freeing up its memory?
- !     sparsity_pattern.clear();
- !   }
- ! }
-   
-   
-   
- ! void DofMap::dof_indices (const Elem* elem,
-   			  std::vector<unsigned int>& di,
- ! 			  const unsigned int vn) const
-   {
-     assert (elem != NULL);
-   
-   
- ***************
- *** 576,614 ****
-     
-     // Clear the DOF indices vector.
-     di.clear();
-     
-     // Get the dof numbers
- !   for (unsigned int c=0; c<n_components(); c++)
- !     if ((c == cn) || (cn == invalid_number))
- !       { // Do this for all the components if one was not specified
- ! 	// or just for the specified component
- ! 	const FEType fe_type = component_type(c);
-   	
-   	// Get the node-based DOF numbers
-   	for (unsigned int n=0; n<n_nodes; n++)
-   	  {
- ! 	    const unsigned int global_node = elem->node(n);
-   	    
- ! 	    for (unsigned int i=0;
- ! 		 i<FEInterface::n_dofs_at_node(_dim, fe_type, type, n); i++)
-   	      {
- ! 		assert (node_dof_number(global_node, c, i) !=
- ! 			invalid_number);
-   		
- ! 		di.push_back(node_dof_number(global_node, c, i));
- ! 	      };
- ! 	  };
-   	
-   	// Get the element-based DOF numbers	  
- ! 	for (unsigned int i=0; i<FEInterface::n_dofs_per_elem(_dim, fe_type, type); i++)
-   	  {
- ! 	    assert (elem_dof_number(e, c, i) !=
- ! 		    invalid_number);
-   	    
- ! 	    di.push_back(elem_dof_number(e, c, i));
- ! 	  };
- !       };
- ! };
-   
-   
-   
- --- 474,521 ----
-     
-     // Clear the DOF indices vector.
-     di.clear();
- + 
- +   unsigned int tot_size = 0;
-     
-     // Get the dof numbers
- !   for (unsigned int v=0; v<n_variables(); v++)
- !     if ((v == vn) || (vn == static_cast<unsigned int>(-1)))
- !       { // Do this for all the variables if one was not specified
- ! 	// or just for the specified variable
- ! 	const FEType& fe_type = variable_type(v);
- ! 
- ! 	const unsigned int size = FEInterface::n_dofs(elem->dim(), fe_type, type);
- ! 	tot_size += size;
- ! 	// Reserve space in the di vector
- ! 	// so we can use push_back effectively
- ! 	//di.reserve (size);
-   	
-   	// Get the node-based DOF numbers
-   	for (unsigned int n=0; n<n_nodes; n++)
-   	  {
- ! 	    const Node* node = elem->get_node(n);
-   	    
- ! 	    for (unsigned int i=0; i<node->n_comp(sys_number(),v); i++)
-   	      {
- ! 		assert (node->dof_number(sys_number(),v,i) !=
- ! 			DofObject::invalid_id);
-   		
- ! 		di.push_back(node->dof_number(sys_number(),v,i));
- ! 	      }
- ! 	  }
-   	
-   	// Get the element-based DOF numbers	  
- ! 	for (unsigned int i=0; i<elem->n_comp(sys_number(),v); i++)
-   	  {
- ! 	    assert (elem->dof_number(sys_number(),v,i) !=
- ! 		    DofObject::invalid_id);
-   	    
- ! 	    di.push_back(elem->dof_number(sys_number(),v,i));
- ! 	  }
- !       }
- ! 
- !   assert (tot_size = di.size());
- ! }
-   
-   
-   
- ***************
- *** 620,630 ****
-   #ifdef ENABLE_AMR
-   
-   
- ! void DofMap::create_dof_constraints()
-   {
- !   perf_log.start_event("create_dof_constraints()");
-   
-   
-     
-     // Here we build the hanging node constraints.  This is done
-     // by enforcing the condition u_a = u_b along hanging sides.
- --- 527,541 ----
-   #ifdef ENABLE_AMR
-   
-   
- ! void DofMap::create_dof_constraints(MeshBase& mesh)
-   {
- !   libMesh::log.start_event("create_dof_constraints()");
-   
- +   const unsigned int dim = mesh.mesh_dimension();
-   
- +   // Constraints are not necessary in 1D
- +   if (dim == 1)
- +     return;
-     
-     // Here we build the hanging node constraints.  This is done
-     // by enforcing the condition u_a = u_b along hanging sides.
- ***************
- *** 637,695 ****
-     // Look at the element faces.  Check to see if we need to 
-     // build constraints.
-     for (unsigned int e=0; e<_n_elem; e++)
- !     if (_mesh.elem(e)->active())
- !       for (unsigned int s=0; s<_mesh.elem(e)->n_sides(); s++)
- ! 	if (_mesh.elem(e)->neighbor(s) != NULL)
- ! 	  if (_mesh.elem(e)->neighbor(s)->level() < _mesh.elem(e)->level()) // constrain dofs shared between
-   	    {                                                               // this element and ones coarser
-   	                                                                    // than this element.
- ! 	      // Get pointers to the two elements of interest.  
- ! 	      const AutoPtr<Elem> my_side(_mesh.elem(e)->build_side(s));
-   	      
- ! 	      const Elem* neighbor(_mesh.elem(e)->neighbor(s));
-   
- ! 	      // Look at all the components in the system
- ! 	      for (unsigned int component=0; component<n_components();
- ! 		   ++component)
-   		{
- ! 		  const FEType& fe_type = component_type(component);
-   	      
-   		  for (unsigned int my_dof=0;
- ! 		       my_dof<FEInterface::n_dofs(_dim-1, fe_type, my_side->type());
-   		       my_dof++)
-   		    {
-   		      assert (my_dof < my_side->n_nodes());
-   
-   		      // My global node and dof indices.
- ! 		      const unsigned int my_node_g = my_side->node(my_dof);
- ! 		      const unsigned int my_dof_g  = node_dof_number(my_node_g, component);
-   
-   		      // Figure out where my node lies on their reference element.
- ! 		      const Point mapped_point = FEInterface::inverse_map(_dim, fe_type,
- ! 									  neighbor,
- ! 									  _mesh.point(my_node_g));
-   
- ! 		      // Compute the neighbor shape function values.
-   		      for (unsigned int their_dof=0;
- ! 			   their_dof<FEInterface::n_dofs(_dim, fe_type, neighbor->type());
-   			   their_dof++)
-   			{
- ! 			  assert (their_dof < neighbor->n_nodes());
-   			  
-   			  // Their global node and dof indices.
- ! 			  const unsigned int their_node_g = neighbor->node(their_dof);
- ! 			  const unsigned int their_dof_g  = node_dof_number(their_node_g, component);
-   
- ! 			  const Real their_dof_value = FEInterface::shape(_dim,
-   									  fe_type,
- ! 									  neighbor->type(),
-   									  their_dof,
-   									  mapped_point);
-   
-   			  // Only add non-zero and non-identity values
-   			  // for Lagrange basis functions.
-   			  if ((fabs(their_dof_value) > 1.e-5) &&
- ! 			      (fabs(their_dof_value) < .999))
-   			    {
-   			      // A reference to the constraint row.
-   			      DofConstraintRow& constraint_row = _dof_constraints[my_dof_g];
- --- 548,616 ----
-     // Look at the element faces.  Check to see if we need to 
-     // build constraints.
-     for (unsigned int e=0; e<_n_elem; e++)
- !     if (mesh.elem(e)->active())
- !       for (unsigned int s=0; s<mesh.elem(e)->n_sides(); s++)
- ! 	if (mesh.elem(e)->neighbor(s) != NULL)
- ! 	  if (mesh.elem(e)->neighbor(s)->level() < mesh.elem(e)->level()) // constrain dofs shared between
-   	    {                                                               // this element and ones coarser
-   	                                                                    // than this element.
- ! 	      // Get pointers to the elements of interest and its parent.
- ! 	      const Elem* elem   = mesh.elem(e);
- ! 	      const Elem* parent = elem->parent();
- ! 
- ! 	      // This can't happen...  Only level-0 elements have NULL
- ! 	      // parents, and no level-0 elements can be at a higher
- ! 	      // level than their neighbors!
- ! 	      assert (parent != NULL);
-   	      
- ! 	      const AutoPtr<Elem> my_side     (elem->build_side(s));
- ! 	      const AutoPtr<Elem> parent_side (parent->build_side(s));
-   
- ! 	      // Look at all the variables in the system
- ! 	      for (unsigned int variable=0; variable<n_variables();
- ! 		   ++variable)
-   		{
- ! 		  const FEType& fe_type = variable_type(variable);
-   	      
-   		  for (unsigned int my_dof=0;
- ! 		       my_dof<FEInterface::n_dofs(dim-1, fe_type, my_side->type());
-   		       my_dof++)
-   		    {
-   		      assert (my_dof < my_side->n_nodes());
-   
-   		      // My global node and dof indices.
- ! 		      const Node* my_node          = my_side->get_node(my_dof);
- ! 		      const unsigned int my_dof_g  = my_node->dof_number(sys_number(), variable, 0);
- ! 
- ! 		      // The support point of the DOF
- ! 		      const Point& support_point = my_side->point(my_dof);
-   
-   		      // Figure out where my node lies on their reference element.
- ! 		      const Point mapped_point = FEInterface::inverse_map(dim-1, fe_type,
- ! 									  parent_side.get(),
- ! 									  support_point);
-   
- ! 		      // Compute the parent's side shape function values.
-   		      for (unsigned int their_dof=0;
- ! 			   their_dof<FEInterface::n_dofs(dim-1, fe_type, parent_side->type());
-   			   their_dof++)
-   			{
- ! 			  assert (their_dof < parent_side->n_nodes());
-   			  
-   			  // Their global node and dof indices.
- ! 			  const Node* their_node          = parent_side->get_node(their_dof);
- ! 			  const unsigned int their_dof_g  = their_node->dof_number(sys_number(), variable, 0);
-   
- ! 			  const Real their_dof_value = FEInterface::shape(dim-1,
-   									  fe_type,
- ! 									  parent_side->type(),
-   									  their_dof,
-   									  mapped_point);
-   
-   			  // Only add non-zero and non-identity values
-   			  // for Lagrange basis functions.
-   			  if ((fabs(their_dof_value) > 1.e-5) &&
- ! 			      (fabs(their_dof_value) < .999)) 
-   			    {
-   			      // A reference to the constraint row.
-   			      DofConstraintRow& constraint_row = _dof_constraints[my_dof_g];
- ***************
- *** 698,711 ****
-   								      static_cast<float>(their_dof_value));
-   
-   			      constraint_row.insert(p);
- ! 			    };
- ! 			};		      
- ! 		    };
- ! 		};
- ! 	    };
-     
- !   perf_log.stop_event("create_dof_constraints()");
- ! };
-   
-   
-   
- --- 619,632 ----
-   								      static_cast<float>(their_dof_value));
-   
-   			      constraint_row.insert(p);
- ! 			    }
- ! 			}		      
- ! 		    }
- ! 		}
- ! 	    }
-     
- !   libMesh::log.stop_event("create_dof_constraints()");
- ! }
-   
-   
-   
- ***************
- *** 720,726 ****
-     std::pair<unsigned int, DofConstraintRow> kv(dof_number, constraint_row);
-   
-     _dof_constraints.insert(kv);
- ! };
-   
-   
-   
- --- 641,647 ----
-     std::pair<unsigned int, DofConstraintRow> kv(dof_number, constraint_row);
-   
-     _dof_constraints.insert(kv);
- ! }
-   
-   
-   
- ***************
- *** 744,751 ****
-   		  << pos->second << ")\t";
-   
-         std::cout << std::endl;
- !     };
- ! };
-   
-   
-   
- --- 665,672 ----
-   		  << pos->second << ")\t";
-   
-         std::cout << std::endl;
- !     }
- ! }
-   
-   
-   
- ***************
- *** 800,808 ****
-   	      for (unsigned int j=0; j<elem_dofs.size(); j++)
-   		if (elem_dofs[j] == it->first)
-   		  matrix(i,j) = -it->second;	
- ! 	  };
- !     }; // end if is constrained...
- ! };
-   
-   
-   
- --- 721,729 ----
-   	      for (unsigned int j=0; j<elem_dofs.size(); j++)
-   		if (elem_dofs[j] == it->first)
-   		  matrix(i,j) = -it->second;	
- ! 	  }
- !     } // end if is constrained...
- ! }
-   
-   
-   
- ***************
- *** 859,865 ****
-   	      for (unsigned int j=0; j<elem_dofs.size(); j++)
-   		if (elem_dofs[j] == it->first)
-   		  matrix(i,j) = -it->second;	
- ! 	  };
-   
-         
-         // Compute the matrix-vector product C^T F
- --- 780,786 ----
-   	      for (unsigned int j=0; j<elem_dofs.size(); j++)
-   		if (elem_dofs[j] == it->first)
-   		  matrix(i,j) = -it->second;	
- ! 	  }
-   
-         
-         // Compute the matrix-vector product C^T F
- ***************
- *** 875,881 ****
-   	  
-   	  for (unsigned int j=0; j<old_rhs.size(); j++)
-   	    rhs[i] += C.transpose(i,j)*old_rhs[j];
- ! 	};
-   
-   
-         assert (elem_dofs.size() == rhs.size());
- --- 796,802 ----
-   	  
-   	  for (unsigned int j=0; j<old_rhs.size(); j++)
-   	    rhs[i] += C.transpose(i,j)*old_rhs[j];
- ! 	}
-   
-   
-         assert (elem_dofs.size() == rhs.size());
- ***************
- *** 885,893 ****
-   	  {	
-   	    // If the DOF is constrained
-   	    rhs[i] = 0.;
- ! 	  };
- !     }; // end if is constrained...
- ! };
-   
-   
-   
- --- 806,814 ----
-   	  {	
-   	    // If the DOF is constrained
-   	    rhs[i] = 0.;
- ! 	  }
- !     } // end if is constrained...
- ! }
-   
-   
-   
- ***************
- *** 959,967 ****
-   	      for (unsigned int j=0; j<col_dofs.size(); j++)
-   		if (col_dofs[j] == it->first)
-   		  matrix(i,j) = -it->second;	
- ! 	  };
- !     }; // end if is constrained...
- ! };
-   
-   
-   
- --- 880,888 ----
-   	      for (unsigned int j=0; j<col_dofs.size(); j++)
-   		if (col_dofs[j] == it->first)
-   		  matrix(i,j) = -it->second;	
- ! 	  }
- !     } // end if is constrained...
- ! }
-   
-   
-   
- ***************
- *** 994,1000 ****
-   	  
-   	  for (unsigned int j=0; j<old_rhs.size(); j++)
-   	    rhs[i] += R.transpose(i,j)*old_rhs[j];
- ! 	};
-   
-   
-         assert (row_dofs.size() == rhs.size());
- --- 915,921 ----
-   	  
-   	  for (unsigned int j=0; j<old_rhs.size(); j++)
-   	    rhs[i] += R.transpose(i,j)*old_rhs[j];
- ! 	}
-   
-   
-         assert (row_dofs.size() == rhs.size());
- ***************
- *** 1004,1012 ****
-   	  {	
-   	    // If the DOF is constrained
-   	    rhs[i] = 0.;
- ! 	  };
- !     }; // end if the RHS is constrained.
- ! };
-   
-   
-   
- --- 925,933 ----
-   	  {	
-   	    // If the DOF is constrained
-   	    rhs[i] = 0.;
- ! 	  }
- !     } // end if the RHS is constrained.
- ! }
-   
-   
-   
- ***************
- *** 1022,1028 ****
-     {
-       for (unsigned int i=0; i<elem_dofs.size(); i++)
-         dof_set.insert(elem_dofs[i]);
- !   };
-     
-   
-     // Next insert any dofs those might be constrained in terms
- --- 943,949 ----
-     {
-       for (unsigned int i=0; i<elem_dofs.size(); i++)
-         dof_set.insert(elem_dofs[i]);
- !   }
-     
-   
-     // Next insert any dofs those might be constrained in terms
- ***************
- *** 1050,1063 ****
-   		 it=constraint_row.begin(); it != constraint_row.end();
-   	       ++it)
-   	    dof_set.insert (it->first);
- ! 	};
-   
-       // If we added any DOFS then we need to do this recursively.
-       // It is possible that we just added a DOF that is also
-       // constrained!
-       if (dof_set.size() != orig_dof_set_size)
-         done = false;
- !   };
-   
-   
-     // If not done then we need to do more work
- --- 971,984 ----
-   		 it=constraint_row.begin(); it != constraint_row.end();
-   	       ++it)
-   	    dof_set.insert (it->first);
- ! 	}
-   
-       // If we added any DOFS then we need to do this recursively.
-       // It is possible that we just added a DOF that is also
-       // constrained!
-       if (dof_set.size() != orig_dof_set_size)
-         done = false;
- !   }
-   
-   
-     // If not done then we need to do more work
- ***************
- *** 1074,1080 ****
-   	for (RCSet::const_iterator it=dof_set.begin();
-   	     it != end_it; ++it)
-   	  new_elem_dofs[i++] = *it;
- !       };
-         
-         // Now we can build the constraint matrix.
-         // Note that resize also zeros for a RealDenseMatrix.
- --- 995,1001 ----
-   	for (RCSet::const_iterator it=dof_set.begin();
-   	     it != end_it; ++it)
-   	  new_elem_dofs[i++] = *it;
- !       }
-         
-         // Now we can build the constraint matrix.
-         // Note that resize also zeros for a RealDenseMatrix.
- ***************
- *** 1107,1115 ****
-   	      for (unsigned int j=0; j<new_elem_dofs.size(); j++)
-   		if (new_elem_dofs[j] == elem_dofs[i])
-   		  C(i,j) =  1.;
- ! 	    };	
-   	//C.print();
- !       };
-   
-         // May need to do this recursively.  It is possible
-         // that we just replaced a constrained DOF with another
- --- 1028,1036 ----
-   	      for (unsigned int j=0; j<new_elem_dofs.size(); j++)
-   		if (new_elem_dofs[j] == elem_dofs[i])
-   		  C(i,j) =  1.;
- ! 	    }	
-   	//C.print();
- !       }
-   
-         // May need to do this recursively.  It is possible
-         // that we just replaced a constrained DOF with another
- ***************
- *** 1125,1139 ****
-   	{                                 // is constrained...
-   	  //here();
-   	  C.right_multiply(Cnew, false);
- ! 	};
-         
-         assert (C.n() == elem_dofs.size());
- !     }; // end if (!done)
- ! };
-   
-   
- - // endif of ENABLE_AMR
- - #endif
-   
-   
-   
- --- 1046,1059 ----
-   	{                                 // is constrained...
-   	  //here();
-   	  C.right_multiply(Cnew, false);
- ! 	}
-         
-         assert (C.n() == elem_dofs.size());
- !     } // end if (!done)
- ! }
-   
- + #endif // #ifdef ENABLE_AMR
-   
-   
-   
-   
- ***************
- *** 1184,1197 ****
-   		 it=constraint_row.begin(); it != constraint_row.end();
-   	       ++it)
-   	    dof_set.insert (it->first);
- ! 	};
-   
-       // If we added any DOFS then we need to do this recursively.
-       // It is possible that we just added a DOF that is also
-       // constrained!
-       if (dof_set.size() != orig_dof_set_size)
-         done = false;
- !   };
-   
-   
-     // If not done then we need to do more work
- --- 1104,1117 ----
-   		 it=constraint_row.begin(); it != constraint_row.end();
-   	       ++it)
-   	    dof_set.insert (it->first);
- ! 	}
-   
-       // If we added any DOFS then we need to do this recursively.
-       // It is possible that we just added a DOF that is also
-       // constrained!
-       if (dof_set.size() != orig_dof_set_size)
-         done = false;
- !   }
-   
-   
-     // If not done then we need to do more work
- ***************
- *** 1208,1214 ****
-   	for (RCSet::const_iterator it=dof_set.begin();
-   	     it != end_it; ++it)
-   	  elem_dofs[i++] = *it;
- !       };
-         
-   
-         // May need to do this recursively.  It is possible
- --- 1128,1134 ----
-   	for (RCSet::const_iterator it=dof_set.begin();
-   	     it != end_it; ++it)
-   	  elem_dofs[i++] = *it;
- !       }
-         
-   
-         // May need to do this recursively.  It is possible
- ***************
- *** 1216,1224 ****
-         // constrained DOF.
-         find_connected_dofs (elem_dofs);
-         
- !     }; // end if (!done)
-   
-   
- ! #endif
-   
- ! };
- --- 1136,1145 ----
-         // constrained DOF.
-         find_connected_dofs (elem_dofs);
-         
- !     } // end if (!done)
-   
-   
- ! #endif // #ifdef ENABLE_AMR
- ! 
-   
- ! }
- Index: src/base/equation_systems.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/base/equation_systems.C,v
- retrieving revision 1.6
- retrieving revision 1.19
- diff -c -r1.6 -r1.19
- *** src/base/equation_systems.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/base/equation_systems.C	20 Feb 2003 04:59:58 -0000	1.19
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 22,33 ****
-   #include <sstream>
-   
-   // Local Includes
-   #include "fe_interface.h"
- ! #include "petsc_vector.h"
- ! #include "petsc_matrix.h"
- ! #include "petsc_interface.h"
- ! #include "system_data.h"
-   #include "equation_systems.h"
-   
-   // Forward Declarations
-   
- --- 22,32 ----
-   #include <sstream>
-   
-   // Local Includes
- + #include "libmesh.h"
-   #include "fe_interface.h"
- ! #include "linear_solver_interface.h"
-   #include "equation_systems.h"
- + #include "general_system.h"
-   
-   // Forward Declarations
-   
- ***************
- *** 36,178 ****
-   
-   // ------------------------------------------------------------
-   // EquationSystem class implementation
- ! EquationSystems::EquationSystems (const Mesh& m, const bool up) :
- !   mesh(m),
- !   use_petsc(up)
-   {
-     // Default parameters
-     set_parameter("linear solver tolerance")          = 1.e-12;
-     set_parameter("linear solver maximum iterations") = 5000;
- ! };
-   
-   
-   
-   EquationSystems::~EquationSystems ()
-   {
- ! };
-   
-   
-   
-   void EquationSystems::clear ()
-   {
- !   systems.clear ();
-   
- !   flags.clear ();
-   
- !   parameters.clear ();
- ! };
-   
-   
-   
-   void EquationSystems::init ()
-   {
- !   assert (!systems.empty());
-   
-   
- !   for (std::map<std::string, SystemData>::iterator
- ! 	 sys = systems.begin(); sys != systems.end();
-          ++sys)
-       {
- - //        /**
- - //         * Pass our parameters on to the system
- - //         */
- - //        for (std::map<std::string, Real>::const_iterator
- - //  	     param = parameters.begin();
- - //  	   param != parameters.end(); ++param)
- - //  	sys->second.set_parameter(param->first) =
- - //  	  param->second;
- - 
- - //        /**
- - //         * Pass our flags on to the system
- - //         */
- - //        for (std::set<std::string>::const_iterator
- - //  	     fl = flags.begin(); fl != flags.end();
- - //  	   ++fl)
- - //  	sys->second.set_flag(*fl);
- - 
-         /**
-          * Initialize the system.
-          */
- !       sys->second.init();
- !     };
- ! };
-   
-   
-   
-   void EquationSystems::add_system (const std::string& name)
-   {
- !   if (!systems.count(name))
- !     {  
- !       SystemData sd(*this, name);
- !       
- !       std::pair<std::string, SystemData>
- ! 	kv(name, sd);
-         
- !       systems.insert (kv);
-       }
-     else
-       {
- !       std::cerr << "WARNING: There was already a system"
-   		<< " named " << name
-   		<< std::endl;
-       }
- ! };
-   
-   
-   
-   void EquationSystems::delete_system (const std::string& name)
-   {
- !   if (!systems.count(name))
-       {
-         std::cerr << "ERROR: no system named "
-   		<< name  << std::endl;
-   
-         error();
-       }
- ! 
- !   systems.erase (name);
- ! };
-   
-   
-   
-   unsigned int EquationSystems::n_vars () const
-   {
- !   if (systems.empty())
-       return 0;
-   
-     unsigned int tot=0;
-     
- !   for (std::map<std::string, SystemData>::const_iterator
- ! 	 pos = systems.begin(); pos != systems.end(); ++pos)
- !     tot += pos->second.n_vars();
-   
-     return tot;      
- ! };
-   
-   
-   
-   unsigned int EquationSystems::n_dofs () const
-   {
- !   if (systems.empty())
-       return 0;
-   
-     unsigned int tot=0;
-     
- !   for (std::map<std::string, SystemData>::const_iterator
- ! 	 pos = systems.begin(); pos != systems.end(); ++pos)
- !     tot += pos->second.n_dofs();
-   
-     return tot;      
- ! };
-   
-   
-   
- ! SystemData & EquationSystems::operator () (const std::string& name)
-   {
- !   std::map<std::string, SystemData>::iterator
- !     pos = systems.find(name);
-     
- !   if (pos == systems.end())
-       {
-         std::cerr << "ERROR: system "
-   		<< name
- --- 35,219 ----
-   
-   // ------------------------------------------------------------
-   // EquationSystem class implementation
- ! EquationSystems::EquationSystems (Mesh& m,
- ! 				  const SolverPackage sp) :
- !   _mesh(m),
- !   _solver_package(sp)
-   {
-     // Default parameters
-     set_parameter("linear solver tolerance")          = 1.e-12;
-     set_parameter("linear solver maximum iterations") = 5000;
- ! }
-   
-   
-   
-   EquationSystems::~EquationSystems ()
-   {
- !   clear();
- ! 
- !   assert (!libMesh::closed());
- ! }
-   
-   
-   
-   void EquationSystems::clear ()
-   {
- !   for (std::map<std::string, GeneralSystem*>::iterator
- ! 	 pos = _systems.begin(); pos != _systems.end();
- !        ++pos)
- !     delete pos->second;
- !   
- !   _systems.clear ();
-   
- !   _flags.clear ();
-   
- !   _parameters.clear ();
- ! }
-   
-   
-   
-   void EquationSystems::init ()
-   {
- !   const unsigned int n_sys = n_systems();
- !   
- !   assert (n_sys != 0);
- ! 
- ! //   /**
- ! //    * Tell all the \p DofObject entities how many systems
- ! //    * there are.
- ! //    */
- ! //   {
- ! //     // All the nodes
- ! //     node_iterator       node_it  (_mesh.nodes_begin());
- ! //     const node_iterator node_end (_mesh.nodes_end());
- !     
- ! //     for ( ; node_it != node_end; ++node_it)
- ! //       (*node_it)->set_n_systems(n_sys);
- !     
- ! //     // All the elements
- ! //     elem_iterator       elem_it (_mesh.elements_begin());
- ! //     const elem_iterator elem_end(_mesh.elements_end());
- !     
- ! //     for ( ; elem_it != elem_end; ++elem_it)
- ! //       (*elem_it)->set_n_systems(n_sys);
- ! //   }
-   
-   
- !   for (std::map<std::string, GeneralSystem*>::iterator
- ! 	 sys = _systems.begin(); sys != _systems.end();
-          ++sys)
-       {
-         /**
-          * Initialize the system.
-          */
- !       sys->second->init();
- !     }
- ! }
-   
-   
-   
-   void EquationSystems::add_system (const std::string& name)
-   {
- !   if (!_systems.count(name))
- !     {
- !       const unsigned int num = n_systems();
-         
- !       _systems.insert (std::pair<std::string,
- ! 		                 GeneralSystem*>(name,
- ! 						 new GeneralSystem(*this,
- ! 								   name,
- ! 								   num,
- ! 								   _solver_package)
- ! 						 )
- ! 		       );
-       }
-     else
-       {
- !       std::cerr << "ERROR: There was already a system"
-   		<< " named " << name
-   		<< std::endl;
- + 
- +       error();
-       }
- ! 
- !   
- !   /**
- !    * Tell all the \p DofObject entities to add a system.
- !    */
- !   {
- !     // All the nodes
- !     node_iterator       node_it  (_mesh.nodes_begin());
- !     const node_iterator node_end (_mesh.nodes_end());
- !     
- !     for ( ; node_it != node_end; ++node_it)
- !       (*node_it)->add_system();
- !     
- !     // All the elements
- !     elem_iterator       elem_it (_mesh.elements_begin());
- !     const elem_iterator elem_end(_mesh.elements_end());
- !     
- !     for ( ; elem_it != elem_end; ++elem_it)
- !       (*elem_it)->add_system();
- !   }
- ! }
-   
-   
-   
-   void EquationSystems::delete_system (const std::string& name)
-   {
- !   if (!_systems.count(name))
-       {
-         std::cerr << "ERROR: no system named "
-   		<< name  << std::endl;
-   
-         error();
-       }
- !   
- !   delete _systems[name];
- !   
- !   _systems.erase (name);
- ! }
-   
-   
-   
-   unsigned int EquationSystems::n_vars () const
-   {
- !   if (_systems.empty())
-       return 0;
-   
-     unsigned int tot=0;
-     
- !   for (std::map<std::string, GeneralSystem*>::const_iterator
- ! 	 pos = _systems.begin(); pos != _systems.end(); ++pos)
- !     tot += pos->second->n_vars();
-   
-     return tot;      
- ! }
-   
-   
-   
-   unsigned int EquationSystems::n_dofs () const
-   {
- !   if (_systems.empty())
-       return 0;
-   
-     unsigned int tot=0;
-     
- !   for (std::map<std::string, GeneralSystem*>::const_iterator
- ! 	 pos = _systems.begin(); pos != _systems.end(); ++pos)
- !     tot += pos->second->n_dofs();
-   
-     return tot;      
- ! }
-   
-   
-   
- ! GeneralSystem & EquationSystems::operator () (const std::string& name)
-   {
- !   std::map<std::string, GeneralSystem*>::iterator
- !     pos = _systems.find(name);
-     
- !   if (pos == _systems.end())
-       {
-         std::cerr << "ERROR: system "
-   		<< name
- ***************
- *** 182,198 ****
-         error();
-       }
-   
- !   return pos->second;
- ! };
-   
-   
-   
- ! const SystemData & EquationSystems::operator () (const std::string& name) const
-   {
- !   std::map<std::string, SystemData>::const_iterator
- !     pos = systems.find(name);
-     
- !   if (pos == systems.end())
-       {
-         std::cerr << "ERROR: system "
-   		<< name
- --- 223,239 ----
-         error();
-       }
-   
- !   return *pos->second;
- ! }
-   
-   
-   
- ! const GeneralSystem & EquationSystems::operator () (const std::string& name) const
-   {
- !   std::map<std::string, GeneralSystem*>::const_iterator
- !     pos = _systems.find(name);
-     
- !   if (pos == _systems.end())
-       {
-         std::cerr << "ERROR: system "
-   		<< name
- ***************
- *** 202,209 ****
-         error();
-       }
-   
- !   return pos->second;
- ! };
-   
-   
-   
- --- 243,250 ----
-         error();
-       }
-   
- !   return *pos->second;
- ! }
-   
-   
-   
- ***************
- *** 212,264 ****
-   {
-     assert (num < n_systems());
-   
- !   std::map<std::string, SystemData>::const_iterator
- !     pos = systems.begin();
- !   
- !   for (unsigned int i=0; i<num; i++)
- !     ++pos;
-   
-     return pos->first;
- ! };
-   
-   
-   
-   
- ! SystemData & EquationSystems::operator () (const unsigned int num)
-   {
-     assert (num < n_systems());
-   
- !   std::map<std::string, SystemData>::iterator
- !     pos = systems.begin();
-     
- !   for (unsigned int i=0; i<num; i++)
- !     ++pos;
-   
- !   return pos->second;
- ! };
-   
-   
-   
- ! const SystemData & EquationSystems::operator ()  (const unsigned int num) const
-   {
-     assert (num < n_systems());
-   
- !   std::map<std::string, SystemData>::const_iterator
- !     pos = systems.begin();
-     
- !   for (unsigned int i=0; i<num; i++)
- !     ++pos;
- ! 
- !   return pos->second;
- ! };
-   
-   
-   
-   
-   bool EquationSystems::flag (const std::string& fl) const
-   {
- !   return (flags.count(fl) != 0);
- ! };
-   
-   
-   
- --- 253,329 ----
-   {
-     assert (num < n_systems());
-   
- !   std::map<std::string, GeneralSystem*>::const_iterator
- !     pos = _systems.begin();
- ! 
- !   // New code
- ! #if (__GNUC__ == 2)
- !   std::advance (pos, static_cast<int>(num));
- ! #else
- !   std::advance (pos, num);
- ! #endif
- ! 
- !   // Old code
- ! //  for (unsigned int i=0; i<num; i++)
- ! //    ++pos;
-   
-     return pos->first;
- ! }
-   
-   
-   
-   
- ! GeneralSystem & EquationSystems::operator () (const unsigned int num)
-   {
-     assert (num < n_systems());
-   
- !   std::map<std::string, GeneralSystem*>::iterator
- !     pos = _systems.begin();
-     
- !   // New code
- ! #if (__GNUC__ == 2)
- !   std::advance (pos, static_cast<int>(num));
- ! #else
- !   std::advance (pos, num);
- ! #endif
-   
- !   // Old code
- ! //  for (unsigned int i=0; i<num; i++)
- ! //    ++pos;
-   
- +   return *pos->second;
- + }
-   
-   
- ! 
- ! const GeneralSystem & EquationSystems::operator ()  (const unsigned int num) const
-   {
-     assert (num < n_systems());
-   
- !   std::map<std::string, GeneralSystem*>::const_iterator
- !     pos = _systems.begin();
-     
- !     // New code
- ! #if (__GNUC__ == 2)
- !   std::advance (pos, static_cast<int>(num));
- ! #else
- !   std::advance (pos, num);
- ! #endif
- !   
- !   // Old code
- !   //  for (unsigned int i=0; i<num; i++)
- ! //    ++pos;
- !   
- !   return *pos->second;
- ! }
-   
-   
-   
-   
-   bool EquationSystems::flag (const std::string& fl) const
-   {
- !   return (_flags.count(fl) != 0);
- ! }
-   
-   
-   
- ***************
- *** 277,291 ****
-     */
-   #endif
-   
- !   flags.insert (fl);
- ! };
-   
-   
-   
-   void EquationSystems::unset_flag (const std::string& fl)
-   {
-     // Look for the flag in the database
- !   if (!flags.count(fl))
-       {
-         std::cerr << "ERROR: flag " << fl
-   		<< " was not set!"
- --- 342,356 ----
-     */
-   #endif
-   
- !   _flags.insert (fl);
- ! }
-   
-   
-   
-   void EquationSystems::unset_flag (const std::string& fl)
-   {
-     // Look for the flag in the database
- !   if (!_flags.count(fl))
-       {
-         std::cerr << "ERROR: flag " << fl
-   		<< " was not set!"
- ***************
- *** 294,301 ****
-       }
-   
-     // Remove the flag
- !   flags.erase (fl);  
- ! };
-   
-   
-   
- --- 359,366 ----
-       }
-   
-     // Remove the flag
- !   _flags.erase (fl);  
- ! }
-   
-   
-   
- ***************
- *** 303,311 ****
-   {
-     // Look for the id in the database
-     std::map<std::string, Real>::const_iterator
- !     pos = parameters.find(id);
-     
- !   if (pos == parameters.end())
-       {
-         std::cerr << "ERROR: parameter " << id
-   		<< " was not set!"
- --- 368,376 ----
-   {
-     // Look for the id in the database
-     std::map<std::string, Real>::const_iterator
- !     pos = _parameters.find(id);
-     
- !   if (pos == _parameters.end())
-       {
-         std::cerr << "ERROR: parameter " << id
-   		<< " was not set!"
- ***************
- *** 315,321 ****
-     
-     // Return the parameter value if found
-     return pos->second;
- ! };
-   
-   
-   
- --- 380,386 ----
-     
-     // Return the parameter value if found
-     return pos->second;
- ! }
-   
-   
-   
- ***************
- *** 335,342 ****
-   #endif
-     
-     // Insert the parameter/value pair into the database
- !   return parameters[id];
- ! };
-   
-   
-   
- --- 400,407 ----
-   #endif
-     
-     // Insert the parameter/value pair into the database
- !   return _parameters[id];
- ! }
-   
-   
-   
- ***************
- *** 344,353 ****
-   {
-     // Look for the id in the database
-     std::map<std::string, Real>::iterator
- !     pos = parameters.find(id);
-     
-     // Make sure the parameter was found
- !   if (pos == parameters.end())
-       {
-         std::cerr << "ERROR: parameter " << id
-   		<< " was not set!"
- --- 409,418 ----
-   {
-     // Look for the id in the database
-     std::map<std::string, Real>::iterator
- !     pos = _parameters.find(id);
-     
-     // Make sure the parameter was found
- !   if (pos == _parameters.end())
-       {
-         std::cerr << "ERROR: parameter " << id
-   		<< " was not set!"
- ***************
- *** 356,363 ****
-       }
-     
-     // Erase the entry
- !   parameters.erase(pos);
- ! };
-   
-   
-   
- --- 421,428 ----
-       }
-     
-     // Erase the entry
- !   _parameters.erase(pos);
- ! }
-   
-   
-   
- ***************
- *** 372,417 ****
-     for (unsigned int sys=0; sys<n_systems(); sys++)
-       for (unsigned int vn=0; vn < (*this)(sys).n_vars(); vn++)
-         var_names[var_num++] = (*this)(sys).variable_name(vn);	   
- ! };
-   
-   
-   
- ! void EquationSystems::build_solution_vector (std::vector<Complex>& soln)
-   {
-     assert (n_systems());
-   
- !   const unsigned int dim = mesh.mesh_dimension();
- !   const unsigned int nn  = mesh.n_nodes();
-     const unsigned int nv  = n_vars();
-   
- !   if (mesh.processor_id() == 0)
-       soln.resize(nn*nv);
-   
- !   std::vector<Complex> sys_soln; 
-     
-     unsigned int var_num=0;
-   
-     for (unsigned int sys=0; sys<n_systems(); sys++)
-       {
- !       const unsigned int nv_sys = (*this)(sys).n_vars();
-         
- !       (*this)(sys).update_global_solution (sys_soln);
-   
- !       if (mesh.processor_id() == 0)
-   	{
- ! 	  std::vector<Complex>      elem_soln; // The finite element solution
- ! 	  std::vector<Complex>      nodal_soln;  // The finite elemnt solution interpolated to the nodes
-   	  std::vector<unsigned int> dof_indices; // The DOF indices for the finite element 
-   	      
-   	  for (unsigned int var=0; var<nv_sys; var++)
-   	    {
- ! 	      const FEType fe_type = (*this)(sys).variable_type(var);
-   	      
- ! 	      for (unsigned int e=0; e<mesh.n_elem(); e++)
- ! 		if (mesh.elem(e)->active())
-   		  {
- ! 		    const Elem* elem = mesh.elem(e);
- ! 		    (*this)(sys).dof_map.dof_indices (e, dof_indices, var);
-   		    
-   		    elem_soln.resize(dof_indices.size());
-   
- --- 437,483 ----
-     for (unsigned int sys=0; sys<n_systems(); sys++)
-       for (unsigned int vn=0; vn < (*this)(sys).n_vars(); vn++)
-         var_names[var_num++] = (*this)(sys).variable_name(vn);	   
- ! }
-   
-   
-   
- ! void EquationSystems::build_solution_vector (std::vector<Number>& soln)
-   {
-     assert (n_systems());
-   
- !   const unsigned int dim = _mesh.mesh_dimension();
- !   const unsigned int nn  = _mesh.n_nodes();
-     const unsigned int nv  = n_vars();
-   
- !   if (_mesh.processor_id() == 0)
-       soln.resize(nn*nv);
-   
- !   std::vector<Number> sys_soln; 
-     
-     unsigned int var_num=0;
-   
-     for (unsigned int sys=0; sys<n_systems(); sys++)
-       {
- !       const GeneralSystem& system  = (*this)(sys);	      
- !       const unsigned int nv_sys    = system.n_vars();
-         
- !       system.update_global_solution (sys_soln);
-   
- !       if (_mesh.processor_id() == 0)
-   	{
- ! 	  std::vector<Number>      elem_soln;   // The finite element solution
- ! 	  std::vector<Number>      nodal_soln;  // The finite elemnt solution interpolated to the nodes
-   	  std::vector<unsigned int> dof_indices; // The DOF indices for the finite element 
-   	      
-   	  for (unsigned int var=0; var<nv_sys; var++)
-   	    {
- ! 	      const FEType& fe_type    = system.variable_type(var);
-   	      
- ! 	      for (unsigned int e=0; e<_mesh.n_elem(); e++)
- ! 		if (_mesh.elem(e)->active())
-   		  {
- ! 		    const Elem* elem = _mesh.elem(e);
- ! 		    system.get_dof_map().dof_indices (elem, dof_indices, var);
-   		    
-   		    elem_soln.resize(dof_indices.size());
-   
- ***************
- *** 426,438 ****
-   		    for (unsigned int n=0; n<elem->n_nodes(); n++)
-   		      soln[nv*(elem->node(n)) + (var + var_num)] =
-   			nodal_soln[n];
- ! 		  };
- ! 	    };	 
- ! 	};
-   
-         var_num += nv_sys;
- !     };
- ! };
-   
-   
-   
- --- 492,504 ----
-   		    for (unsigned int n=0; n<elem->n_nodes(); n++)
-   		      soln[nv*(elem->node(n)) + (var + var_num)] =
-   			nodal_soln[n];
- ! 		  }
- ! 	    }	 
- ! 	}
-   
-         var_num += nv_sys;
- !     }
- ! }
-   
-   
-   
- ***************
- *** 443,453 ****
-     out << " EquationSystems:" << std::endl
-         << "  n_systems()=" << n_systems() << std::endl;
-     
- !   for (std::map<std::string, SystemData>::const_iterator it=systems.begin();
- !        it != systems.end(); ++it)
-       {
- !       const std::string& sys_name = it->first;
- !       const SystemData&  system   = it->second;
-         
-         out << "   System \"" << sys_name << "\"" << std::endl
-   	  << "    Variables=";
- --- 509,519 ----
-     out << " EquationSystems:" << std::endl
-         << "  n_systems()=" << n_systems() << std::endl;
-     
- !   for (std::map<std::string, GeneralSystem*>::const_iterator it=_systems.begin();
- !        it != _systems.end(); ++it)
-       {
- !       const std::string& sys_name    = it->first;
- !       const GeneralSystem&  system   = *it->second;
-         
-         out << "   System \"" << sys_name << "\"" << std::endl
-   	  << "    Variables=";
- ***************
- *** 456,478 ****
-        
-         out << std::endl;
-   
-         out << "    Finite Element Types=";
-         for (unsigned int vn=0; vn<system.n_vars(); vn++)
-         {
- ! #ifndef ENABLE_INFINITE_ELEMENTS
- ! 	out << "\"" << system.dof_map.component_type(vn).family << "\" ";
-   #else
- ! 	out << "(" << system.dof_map.component_type(vn).family << ",";
- ! 	out << system.dof_map.component_type(vn).base_family << ") ";
- ! #endif
- !       };      
-   
-         out << std::endl;
-         
-         out << "    Approximation Orders=";
-         for (unsigned int vn=0; vn<system.n_vars(); vn++)
- ! 	out << "\"" << system.dof_map.component_order(vn) << "\" ";
- !       
-         out << std::endl;
-         
-         out << "    n_dofs()="             << system.n_dofs()             << std::endl;
- --- 522,561 ----
-        
-         out << std::endl;
-   
- + #ifndef ENABLE_INFINITE_ELEMENTS
-         out << "    Finite Element Types=";
-         for (unsigned int vn=0; vn<system.n_vars(); vn++)
-         {
- ! 	out << "\"" << system.get_dof_map().variable_type(vn).family << "\" ";
- !       }
-   #else
- !       out << "    Finite Element Types=";
- !       for (unsigned int vn=0; vn<system.n_vars(); vn++)
- !       {
- ! 	out << "\"" << system.get_dof_map().variable_type(vn).family << "\", ";
- ! 	out << "\"" << system.get_dof_map().variable_type(vn).radial_family << "\" ";
- !       }
- ! 
- !       out << std::endl << "    Infinite Element Mapping=";
- !       for (unsigned int vn=0; vn<system.n_vars(); vn++)
- !       {
- ! 	out << "\"" << system.get_dof_map().variable_type(vn).inf_map << "\" ";
- !       }
- ! #endif      
-   
-         out << std::endl;
-         
-         out << "    Approximation Orders=";
-         for (unsigned int vn=0; vn<system.n_vars(); vn++)
- !       {
- ! #ifndef ENABLE_INFINITE_ELEMENTS
- ! 	out << "\"" << system.get_dof_map().variable_type(vn).order << "\" ";
- ! #else
- ! 	out << "\"" << system.get_dof_map().variable_type(vn).order << "\", ";
- ! 	out << "\"" << system.get_dof_map().variable_type(vn).radial_order << "\" ";
- ! #endif
- !       }
- ! 
-         out << std::endl;
-         
-         out << "    n_dofs()="             << system.n_dofs()             << std::endl;
- ***************
- *** 480,508 ****
-   #ifdef ENABLE_AMR
-         out << "    n_constrained_dofs()=" << system.n_constrained_dofs() << std::endl;
-   #endif
- !     };
-     
-     
- !   if (!flags.empty())
-       {  
-         out << "  Flags:" << std::endl;
-         
- !       for (std::set<std::string>::const_iterator flag = flags.begin();
- ! 	   flag != flags.end(); ++flag)
-   	out << "   "
-   	    << "\""
-   	    << *flag
-   	    << "\""
-   	    << std::endl;
- !     };
-     
-     
- !   if (!parameters.empty())
-       {  
-         out << "  Parameters:" << std::endl;
-         
-         for (std::map<std::string, Real>::const_iterator
- ! 	     param = parameters.begin(); param != parameters.end();
-   	   ++param)
-   	out << "   "
-   	    << "\""
- --- 563,591 ----
-   #ifdef ENABLE_AMR
-         out << "    n_constrained_dofs()=" << system.n_constrained_dofs() << std::endl;
-   #endif
- !     }
-     
-     
- !   if (!_flags.empty())
-       {  
-         out << "  Flags:" << std::endl;
-         
- !       for (std::set<std::string>::const_iterator flag = _flags.begin();
- ! 	   flag != _flags.end(); ++flag)
-   	out << "   "
-   	    << "\""
-   	    << *flag
-   	    << "\""
-   	    << std::endl;
- !     }
-     
-     
- !   if (!_parameters.empty())
-       {  
-         out << "  Parameters:" << std::endl;
-         
-         for (std::map<std::string, Real>::const_iterator
- ! 	     param = _parameters.begin(); param != _parameters.end();
-   	   ++param)
-   	out << "   "
-   	    << "\""
- ***************
- *** 511,517 ****
-   	    << "="
-   	    << param->second
-   	    << std::endl;
- !     };
-     
-     return out.str();
- ! };
- --- 594,600 ----
-   	    << "="
-   	    << param->second
-   	    << std::endl;
- !     }
-     
-     return out.str();
- ! }
- Index: src/base/equation_systems_io.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/base/equation_systems_io.C,v
- retrieving revision 1.6
- retrieving revision 1.15
- diff -c -r1.6 -r1.15
- *** src/base/equation_systems_io.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/base/equation_systems_io.C	20 Feb 2003 04:59:58 -0000	1.15
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 31,38 ****
-   // Local Includes
-   #include "fe_type.h"
-   #include "petsc_interface.h"
- - #include "system_data.h"
-   #include "equation_systems.h"
-   
-   // Forward Declarations
-   
- --- 31,38 ----
-   // Local Includes
-   #include "fe_type.h"
-   #include "petsc_interface.h"
-   #include "equation_systems.h"
- + #include "general_system.h"
-   
-   // Forward Declarations
-   
- ***************
- *** 46,60 ****
-   			   const bool read_header,
-   			   const bool read_data)
-   {
- - #ifndef HAVE_PETSC
- - 
- -   std::cerr << "ERROR:  this requires PETSc support!"
- - 	    << std::endl;
- - 
- -   error();
- - 
- - #else
- - 
-     /**
-      * This program implements the output of an 
-      * EquationSystems object.  This warrants some 
- --- 46,51 ----
- ***************
- *** 71,78 ****
-      *   for each variable in the system
-      *     
-      *     4.) The name of the variable (string)
- !    *     5.) The approximation order of the variable (Order Enum, cast to int)
- !    *     6.) The finite element family/ies of the variable (FEType struct, cast to int/s)
-      *
-      *   end variable loop
-      * end system loop
- --- 62,70 ----
-      *   for each variable in the system
-      *     
-      *     4.) The name of the variable (string)
- !    *     5. & 6.) Combined in an FEType:
- !    *              - The approximation order of the variable (Order Enum, cast to int)
- !    *              - The finite element family/ies of the variable (FEType struct, cast to int/s)
-      *
-      *   end variable loop
-      * end system loop
- ***************
- *** 126,132 ****
-         
-         if (read_header) add_system (sys_name);
-   	  
- !       SystemData& new_system = (*this)(sys_name);
-   	  
-         /**
-          * 3.) 
- --- 118,124 ----
-         
-         if (read_header) add_system (sys_name);
-   	  
- !       GeneralSystem& new_system = (*this)(sys_name);
-   	  
-         /**
-          * 3.) 
- ***************
- *** 151,162 ****
-   	  /**
-   	   * 5.)
-   	   *
- ! 	   * Read the approximation order of the jth variable 
-   	   * in the ith system
-   	   */
-   	  int order=0;
-   	  
-   	  io.data (order);
-   	      
-   	  /**
-   	   * 6.)
- --- 143,164 ----
-   	  /**
-   	   * 5.)
-   	   *
- ! 	   * Read the approximation order(s) of the jth variable 
-   	   * in the ith system
-   	   */
-   	  int order=0;
-   	  
-   	  io.data (order);
- + 
- + #ifdef ENABLE_INFINITE_ELEMENTS
- + 	  /**
- + 	   * do the same for radial_order
- + 	   */
- + 	  int rad_order=0;
- + 	  
- + 	  io.data(rad_order);
- + #endif
- + 
-   	      
-   	  /**
-   	   * 6.)
- ***************
- *** 164,203 ****
-   	   * Read the finite element type of the jth variable 
-   	   * in the ith system
-   	   */
- - #ifndef ENABLE_INFINITE_ELEMENTS
- - 
-   	  int fam=0;
-   	  
-   	  io.data (fam);
-   
-   	  FEType type;
-   	  type.order  = static_cast<Order>(order);
-   	  type.family = static_cast<FEFamily>(fam);
- - 	  
- - 	  if (read_header) new_system.add_variable (var_name,
- - 						    type);
-   
-   #else
-   
- - 
-   //TODO:[DD] flag the use of infinite elements, somewhere in the outfile?
- ! 	  int fam=0;
- ! 	  int base_fam=0;
-   	  
- ! 	  io.data (fam);
- ! 	  io.data (base_fam);
-   
- - 	  FEType type;
- - 	  type.order       = static_cast<Order>(order);
- - 	  type.family      = static_cast<FEFamily>(fam);
- - 	  type.base_family = static_cast<FEFamily>(base_fam);
- - 	  
-   	  if (read_header) new_system.add_variable (var_name,
-   						    type);
-   
- ! #endif
- ! 	};
- !     };
-         
-     /**
-      * Now we are ready to initialize the underlying data
- --- 166,206 ----
-   	   * Read the finite element type of the jth variable 
-   	   * in the ith system
-   	   */
-   	  int fam=0;
-   	  
-   	  io.data (fam);
-   
-   	  FEType type;
- + 
- + #ifndef ENABLE_INFINITE_ELEMENTS
- + 
-   	  type.order  = static_cast<Order>(order);
-   	  type.family = static_cast<FEFamily>(fam);
-   
-   #else
-   
-   //TODO:[DD] flag the use of infinite elements, somewhere in the outfile?
- ! 	  int radial_fam=0;
- ! 	  int i_map=0;
-   	  
- ! 	  io.data (radial_fam);
- ! 	  io.data (i_map);
- ! 
- ! 	  type.order         = static_cast<Order>(order);
- ! 	  type.radial_order  = static_cast<Order>(rad_order);
- ! 	  type.family        = static_cast<FEFamily>(fam);
- ! 	  type.radial_family = static_cast<FEFamily>(radial_fam);
- ! 	  type.inf_map       = static_cast<InfMapType>(i_map);	  
- ! #endif
- ! 
-   
-   	  if (read_header) new_system.add_variable (var_name,
-   						    type);
-   
- ! 
- ! 
- ! 	}
- !     }
-         
-     /**
-      * Now we are ready to initialize the underlying data
- ***************
- *** 216,225 ****
-     if (read_data)
-       for (unsigned int sys=0; sys<n_systems(); sys++)
-         {
- ! 	SystemData& system  = (*this)(sys);
- ! 	DofMap&     dof_map = system.dof_map; 
- ! 	std::vector<Complex> global_soln;
- ! 	std::vector<Complex> reordered_soln;
-   	
-   	io.data (global_soln);	  
-   	
- --- 219,227 ----
-     if (read_data)
-       for (unsigned int sys=0; sys<n_systems(); sys++)
-         {
- ! 	GeneralSystem& system = (*this)(sys);
- ! 	std::vector<Number> global_soln;
- ! 	std::vector<Number> reordered_soln;
-   	
-   	io.data (global_soln);	  
-   	
- ***************
- *** 235,281 ****
-   	unsigned int cnt=0;
-   
-   	const unsigned int n_vars  = system.n_vars();
- ! 	const unsigned int n_nodes = mesh.n_nodes();
- ! 	const unsigned int n_elem  = mesh.n_elem();
-   	
-   	for (unsigned int var=0; var<n_vars; var++)
-   	  {
-   	    // First reorder the nodal DOF values
-   	    for (unsigned int node=0; node<n_nodes; node++)
- ! 	      for (unsigned int index=0;
- ! 		   index<dof_map.n_dofs_at_node(node, var); index++)
-   		{
-   		  
- ! 		  assert (dof_map.node_dof_number(node, var, index) !=
- ! 			  dof_map.invalid_number);
-   
-   		  assert (cnt < global_soln.size());
-   		  
- ! 		  reordered_soln[dof_map.node_dof_number(node, var, index)] =
-   		    global_soln[cnt++]; 
- ! 		};
-   
-   	    // Then reorder the element DOF values
-   	    for (unsigned int elem=0; elem<n_elem; elem++)
- ! 	      for (unsigned int index=0;
- ! 		   index<dof_map.n_dofs_on_elem(elem, var); index++)
-   		{
-   		  
- ! 		  assert (dof_map.elem_dof_number(elem, var, index) !=
- ! 			  dof_map.invalid_number);
- ! 
-   		  assert (cnt < global_soln.size());
-   		  
- ! 		  reordered_soln[dof_map.elem_dof_number(elem, var, index)] =
-   		    global_soln[cnt++]; 
- ! 		};
- ! 	  };
-   	    
- ! 	system.solution = reordered_soln;
- !       };
- ! 
- ! #endif
- ! };
-   
-   
-   
- --- 237,279 ----
-   	unsigned int cnt=0;
-   
-   	const unsigned int n_vars  = system.n_vars();
- ! 	const unsigned int n_nodes = _mesh.n_nodes();
- ! 	const unsigned int n_elem  = _mesh.n_elem();
-   	
-   	for (unsigned int var=0; var<n_vars; var++)
-   	  {
-   	    // First reorder the nodal DOF values
-   	    for (unsigned int node=0; node<n_nodes; node++)
- ! 	      for (unsigned int index=0; index<_mesh.node(node).n_comp(sys,var); index++)
-   		{
-   		  
- ! 		  assert (_mesh.node(node).dof_number(sys, var, index) !=
- ! 			  DofObject::invalid_id);
-   
-   		  assert (cnt < global_soln.size());
-   		  
- ! 		  reordered_soln[_mesh.node(node).dof_number(sys, var, index)] =
-   		    global_soln[cnt++]; 
- ! 		}
-   
-   	    // Then reorder the element DOF values
-   	    for (unsigned int elem=0; elem<n_elem; elem++)
- ! 	      for (unsigned int index=0; index<_mesh.elem(elem)->n_comp(sys,var); index++)
-   		{
-   		  
- ! 		  assert (_mesh.elem(elem)->dof_number(sys, var, index) !=
- ! 			  DofObject::invalid_id);
- ! 		  
-   		  assert (cnt < global_soln.size());
-   		  
- ! 		  reordered_soln[_mesh.elem(elem)->dof_number(sys, var, index)] =
-   		    global_soln[cnt++]; 
- ! 		}
- ! 	  }
-   	    
- ! 	*(system.solution) = reordered_soln;
- !       }
- ! }
-   
-   
-   
- ***************
- *** 283,297 ****
-   			    const Xdr::XdrMODE mode,
-   			    const bool write_data)
-   {
- - #ifndef HAVE_PETSC
- - 
- -   std::cerr << "ERROR:  this requires PETSc support!"
- - 	    << std::endl;
- - 
- -   error();
- - 
- - #else
- - 
-     /**
-      * This program implements the output of an 
-      * EquationSystems object.  This warrants some 
- --- 281,286 ----
- ***************
- *** 308,315 ****
-      *   for each variable in the system
-      *     
-      *     4.) The name of the variable (string)
- !    *     5.) The approximation order of the variable (Order Enum, cast to int)
- !    *     6.) The finite element family/ies of the variable (FEType struct, cast to int)
-      *
-      *   end variable loop
-      * end system loop
- --- 297,305 ----
-      *   for each variable in the system
-      *     
-      *     4.) The name of the variable (string)
- !    *     5. & 6.) Combined in an FEType:
- !    *              - The approximation order(s) of the variable (Order Enum, cast to int/s)
- !    *              - The finite element family/ies of the variable (FEType struct, cast to int/s)
-      *
-      *   end variable loop
-      * end system loop
- ***************
- *** 333,345 ****
-   
-     assert (io.writing());
-   
- !   const unsigned int proc_id = mesh.processor_id();
-     unsigned int n_sys         = n_systems();
-   
- !   std::map<std::string, SystemData>::iterator
- !     pos = systems.begin();
-     
- -   unsigned int sys_num=0;
-     std::string comment;
-     char buf[80];
-   
- --- 323,334 ----
-   
-     assert (io.writing());
-   
- !   const unsigned int proc_id = _mesh.processor_id();
-     unsigned int n_sys         = n_systems();
-   
- !   std::map<std::string, GeneralSystem*>::iterator
- !     pos = _systems.begin();
-     
-     std::string comment;
-     char buf[80];
-   
- ***************
- *** 358,370 ****
-          */
-         io.data (n_sys, "# The number of equation systems");
-           
- !       while (pos != systems.end())
-   	{
- ! 	  std::string sys_name = pos->first;
- ! 	  SystemData& system   = pos->second;
-   	  
-   
- - 
-   	  /**
-   	   * 2.)
-   	   *
- --- 347,359 ----
-          */
-         io.data (n_sys, "# The number of equation systems");
-           
- !       while (pos != _systems.end())
-   	{
- ! 	  std::string sys_name       = pos->first;
- ! 	  GeneralSystem& system      = *pos->second;
- ! 	  const unsigned int sys_num = system.number();
-   	  
-   
-   	  /**
-   	   * 2.)
-   	   *
- ***************
- *** 445,455 ****
-   		comment += ", approximation order";
-   	      }
-   	      
- ! 	      int order = static_cast<int>(system.variable_order(var));
-   	      
-   	      io.data (order, comment.c_str());
-   	      
- ! 	      
-   
-   
-   	      /**
- --- 434,454 ----
-   		comment += ", approximation order";
-   	      }
-   	      
- ! 	      int order = static_cast<int>(system.variable_type(var).order);
-   	      
-   	      io.data (order, comment.c_str());
- + 	   
- + 
- + #ifdef ENABLE_INFINITE_ELEMENTS
- + 	      /**
- + 	       * do the same for radial_order
- + 	       */
- + 	      int rad_order = static_cast<int>(system.variable_type(var).radial_order);
-   	      
- ! 	      io.data (rad_order);
- ! 
- ! #endif
- !    
-   
-   
-   	      /**
- ***************
- *** 471,520 ****
-   	      }
-   
-   	      FEType type = system.variable_type(var);
- - 
- - #ifndef ENABLE_INFINITE_ELEMENTS
-   	      
-   	      int fam = static_cast<int>(type.family);
-   	      
-   	      io.data (fam, comment.c_str());
-   
- - #else
-   
- ! 	      int fam = static_cast<int>(type.family);
- ! 	      int base_fam = static_cast<int>(type.base_family);
- ! 	      
- ! 	      io.data (fam, comment.c_str());
- ! 	      io.data (base_fam);
-   
-   
-   #endif
- ! 	    };
-   
-   	  ++pos;
- ! 	  ++sys_num;
- ! 	};      
- !     };
-   
- !   pos     = systems.begin();
- !   sys_num = 0;
-   
-     /**
-      * All processors contribute numeric vector values
-      */
-     if (write_data)
- !     while (pos != systems.end())
-         {
-   	// Convenient references
- ! 	std::string sys_name   = pos->first;
- ! 	SystemData& system     = pos->second;
- ! 	DofMap&     dof_map    = system.dof_map;
- ! 
- ! 	std::vector<Complex> global_soln;
-   	
-   	/**
-   	 * Collect the global solution on one processor
-   	 */
- ! 	system.solution.localize_to_one (global_soln, 0);       
-         
-   
-   	/**
- --- 470,517 ----
-   	      }
-   
-   	      FEType type = system.variable_type(var);
-   	      
-   	      int fam = static_cast<int>(type.family);
-   	      
-   	      io.data (fam, comment.c_str());
-   
-   
- ! #ifdef ENABLE_INFINITE_ELEMENTS
-   
- + 	      int radial_fam = static_cast<int>(type.radial_family);
- + 	      int i_map = static_cast<int>(type.inf_map);
- + 	      
- + 	      io.data (radial_fam);
- + 	      io.data (i_map);
-   
-   #endif
- ! 
- ! 
- ! 	    }
-   
-   	  ++pos;
- ! 	}      
- !     }
-   
- !   pos = _systems.begin();
-   
-     /**
-      * All processors contribute numeric vector values
-      */
-     if (write_data)
- !     while (pos != _systems.end())
-         {
-   	// Convenient references
- ! 	std::string sys_name       = pos->first;
- ! 	GeneralSystem& system      = *pos->second;
- ! 	const unsigned int sys_num = system.number();
- ! 	
- ! 	std::vector<Number> global_soln;
-   	
-   	/**
-   	 * Collect the global solution on one processor
-   	 */
- ! 	system.solution->localize_to_one (global_soln, 0);       
-         
-   
-   	/**
- ***************
- *** 534,578 ****
-   	     * Obviously, a value is only written out if it corresponds
-   	     * to a global DOF.  The code should make this clear.
-   	     */
- ! 	    std::vector<Complex> reordered_soln(global_soln.size());
-   	  
-   	    unsigned int cnt=0;
-   
-   	    const unsigned int n_vars  = system.n_vars();
- ! 	    const unsigned int n_nodes = mesh.n_nodes();
- ! 	    const unsigned int n_elem  = mesh.n_elem();
-   
-   	    for (unsigned int var=0; var<n_vars; var++)
-   	      {		
-   		// First write the nodal DOF values
-   		for (unsigned int node=0; node<n_nodes; node++)
- ! 		  for (unsigned int index=0;
- ! 		       index<dof_map.n_dofs_at_node(node, var); index++)
-   		    {
- ! 		      assert (dof_map.node_dof_number(node, var, index) !=
- ! 			      dof_map.invalid_number);
-   		      
-   		      assert (cnt < reordered_soln.size());
-   		      
-   		      reordered_soln[cnt++] = 
- ! 			global_soln[dof_map.node_dof_number(node, var, index)];
- ! 		    };
-   
-   		// Then write the element DOF values
-   		for (unsigned int elem=0; elem<n_elem; elem++)
- ! 		  if (mesh.elem(elem)->active())
- ! 		    for (unsigned int index=0;
- ! 			 index<dof_map.n_dofs_on_elem(elem, var); index++)
-   		      {
- ! 			assert (dof_map.elem_dof_number(elem, var, index) !=
- ! 				dof_map.invalid_number);
-   			
-   			assert (cnt < reordered_soln.size());
-   			
-   			reordered_soln[cnt++] = 
- ! 			  global_soln[dof_map.elem_dof_number(elem, var, index)];
- ! 		      };
- ! 	      };
-   	    
-   	    /**
-   	     * 7.)
- --- 531,573 ----
-   	     * Obviously, a value is only written out if it corresponds
-   	     * to a global DOF.  The code should make this clear.
-   	     */
- ! 	    std::vector<Number> reordered_soln(global_soln.size());
-   	  
-   	    unsigned int cnt=0;
-   
-   	    const unsigned int n_vars  = system.n_vars();
- ! 	    const unsigned int n_nodes = _mesh.n_nodes();
- ! 	    const unsigned int n_elem  = _mesh.n_elem();
-   
-   	    for (unsigned int var=0; var<n_vars; var++)
-   	      {		
-   		// First write the nodal DOF values
-   		for (unsigned int node=0; node<n_nodes; node++)
- ! 		  for (unsigned int index=0; index<_mesh.node(node).n_comp(sys_num, var); index++)
-   		    {
- ! 		      assert (_mesh.node(node).dof_number(sys_num, var, index) !=
- ! 			      DofObject::invalid_id);
-   		      
-   		      assert (cnt < reordered_soln.size());
-   		      
-   		      reordered_soln[cnt++] = 
- ! 			global_soln[_mesh.node(node).dof_number(sys_num, var, index)];
- ! 		    }
-   
-   		// Then write the element DOF values
-   		for (unsigned int elem=0; elem<n_elem; elem++)
- ! 		  if (_mesh.elem(elem)->active())
- ! 		    for (unsigned int index=0; index<_mesh.elem(elem)->n_comp(sys_num, var); index++)
-   		      {
- ! 			assert (_mesh.elem(elem)->dof_number(sys_num, var, index) !=
- ! 				DofObject::invalid_id);
-   			
-   			assert (cnt < reordered_soln.size());
-   			
-   			reordered_soln[cnt++] = 
- ! 			  global_soln[_mesh.elem(elem)->dof_number(sys_num, var, index)];
- ! 		      }
- ! 	      }
-   	    
-   	    /**
-   	     * 7.)
- ***************
- *** 590,600 ****
-   	    }
-   
-   	    io.data (reordered_soln, comment.c_str());	  
- ! 	  };
-   
-   	++pos;
- ! 	++sys_num;
- !       };
- ! 
- ! #endif
- ! };
- --- 585,592 ----
-   	    }
-   
-   	    io.data (reordered_soln, comment.c_str());	  
- ! 	  }
-   
-   	++pos;
- !       }
- ! }
- Index: src/base/node.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/base/node.C,v
- retrieving revision 1.4
- retrieving revision 1.5
- diff -c -r1.4 -r1.5
- *** src/base/node.C	24 Jan 2003 17:24:40 -0000	1.4
- --- src/base/node.C	13 Feb 2003 01:49:49 -0000	1.5
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 28,34 ****
-   
-   // ------------------------------------------------------------
-   // Node class static member initialization
- ! const unsigned int Node::invalid_id = static_cast<unsigned int>(-1);
-   
-   
-   
- --- 28,34 ----
-   
-   // ------------------------------------------------------------
-   // Node class static member initialization
- ! //const unsigned int Node::invalid_id = static_cast<unsigned int>(-1);
-   
-   
-   
- Index: src/base/reference_counter.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/base/reference_counter.C,v
- retrieving revision 1.4
- retrieving revision 1.7
- diff -c -r1.4 -r1.7
- *** src/base/reference_counter.C	24 Jan 2003 17:24:40 -0000	1.4
- --- src/base/reference_counter.C	14 Feb 2003 15:22:47 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 33,38 ****
- --- 33,39 ----
-   
-   ReferenceCounter::Counts ReferenceCounter::_counts;
-   unsigned int             ReferenceCounter::_n_objects=0;
- + bool                     ReferenceCounter::_have_printed_info=false;
-   
-   #endif
-   
- ***************
- *** 42,55 ****
-   // ReferenceCounter class members
-   std::string ReferenceCounter::get_info ()
-   {
- -   std::ostringstream out;
- -   
-   #if defined(ENABLE_REFERENCE_COUNTING) && defined(DEBUG)
-   
-     out << std::endl
- !       << " -------------------------------------------------"  << std::endl
- !       << "| Reference count information                     |" << std::endl
- !       << " -------------------------------------------------"  << std::endl;
-     
-     for (Counts::iterator it = _counts.begin();
-          it != _counts.end(); ++it)
- --- 43,56 ----
-   // ReferenceCounter class members
-   std::string ReferenceCounter::get_info ()
-   {
-   #if defined(ENABLE_REFERENCE_COUNTING) && defined(DEBUG)
-   
- +   std::ostringstream out;
- +   
-     out << std::endl
- !       << " ---------------------------------------------------------------------------- "  << std::endl
- !       << "| Reference count information                                                |" << std::endl
- !       << " ---------------------------------------------------------------------------- "  << std::endl;
-     
-     for (Counts::iterator it = _counts.begin();
-          it != _counts.end(); ++it)
- ***************
- *** 58,83 ****
-         const unsigned int creations    = it->second.first;
-         const unsigned int destructions = it->second.second;
-   
- !       out << name
-   	  << " class reference count information:"
-   	  << std::endl
- ! 	  << " Creations:    " << creations
-   	  << std::endl
- ! 	  << " Destructions: " << destructions
-   	  << std::endl;
-   
-         if (creations != destructions)
- ! 	out << " WARNING: class "
-   	    << name << " "
-   	    << creations - destructions
-   	    << " items leaked!"
-   	    << std::endl;
-         
- !     };
-     
- !   out << " -------------------------------------------------"  << std::endl;
- ! 
- ! #endif
-   
-     return out.str();
- ! };
- --- 59,89 ----
-         const unsigned int creations    = it->second.first;
-         const unsigned int destructions = it->second.second;
-   
- !       out << "| "
- ! 	  << name
-   	  << " class reference count information:"
-   	  << std::endl
- ! 	  << "| Creations:    " << creations
-   	  << std::endl
- ! 	  << "| Destructions: " << destructions
-   	  << std::endl;
-   
-         if (creations != destructions)
- ! 	out << "| WARNING: class "
-   	    << name << " "
-   	    << creations - destructions
-   	    << " items leaked!"
-   	    << std::endl;
-         
- !     }
-     
- !   out << " ---------------------------------------------------------------------------- "  << std::endl;
-   
-     return out.str();
- ! 
- ! #else
- ! 
- !   return "";
- !   
- ! #endif
- ! }
- Index: src/fe/fe.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe.C,v
- retrieving revision 1.6
- retrieving revision 1.11
- diff -c -r1.6 -r1.11
- *** src/fe/fe.C	24 Jan 2003 19:38:45 -0000	1.6
- --- src/fe/fe.C	13 Feb 2003 22:56:09 -0000	1.11
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 23,28 ****
- --- 23,29 ----
-   #include "fe.h"
-   #include "inf_fe.h"
-   #include "quadrature.h"
- + #include "elem.h"
-   
-   
-   // ------------------------------------------------------------
- ***************
- *** 32,38 ****
-   { 
-     assert (qrule != NULL);  
-     return qrule->n_points(); 
- ! };
-   
-   
-   
- --- 33,40 ----
-   { 
-     assert (qrule != NULL);  
-     return qrule->n_points(); 
- ! }
- ! 
-   
-   
-   
- ***************
- *** 62,68 ****
-     // Compute the shape functions and the derivatives at all of the
-     // quadrature points.  This part is dimension-independet
-     compute_shape_functions (qrule);
- ! };
-   
-   
-   
- --- 64,70 ----
-     // Compute the shape functions and the derivatives at all of the
-     // quadrature points.  This part is dimension-independet
-     compute_shape_functions (qrule);
- ! }
-   
-   
-   
- ***************
- *** 138,144 ****
-   	if (Dim == 3)	     
-   	  dphidzeta[i].resize (n_qp);
-   	     
- !       };
-          
-       for (unsigned int i=0; i<n_mapping_shape_functions; i++)
-         {
- --- 140,146 ----
-   	if (Dim == 3)	     
-   	  dphidzeta[i].resize (n_qp);
-   	     
- !       }
-          
-       for (unsigned int i=0; i<n_mapping_shape_functions; i++)
-         {
- ***************
- *** 150,160 ****
-   	   
-   	if (Dim == 3)
-   	  dphidzeta_map[i].resize (n_qp);
- !       };
- !   };
-   
-   
- -   
-     
-     switch (Dim)
-       {
- --- 152,185 ----
-   	   
-   	if (Dim == 3)
-   	  dphidzeta_map[i].resize (n_qp);
- !       }
- !   }
- ! 
- ! 
- !       
- ! #ifdef ENABLE_INFINITE_ELEMENTS
- !   //------------------------------------------------------------
- !   // Initialize the data fields, which should only be used for infinite 
- !   // elements, to some sensible values, so that using a FE with the
- !   // variational formulation of an InfFE, correct element matrices are
- !   // returned
- ! 
- !  {
- !     weight.resize  (n_qp);
- !     dweight.resize (n_qp);
- !     dphase.resize  (n_qp);
- !     
- !     for (unsigned int p=0; p<n_qp; p++)
- !       {
- !         weight[p] = 1.;
- ! 	dweight[p].zero();
- ! 	dphase[p].zero();
- !       }
- ! 
- !  }
- ! #endif // ifdef ENABLE_INFINITE_ELEMENTS
-   
-   
-     
-     switch (Dim)
-       {
- ***************
- *** 169,175 ****
-   	    {
-   	      phi[i][p]      = FE<Dim,T>::shape       (elem, get_order(), i,    qp[p]);
-   	      dphidxi[i][p]  = FE<Dim,T>::shape_deriv (elem, get_order(), i, 0, qp[p]);
- ! 	    };
-   	
-   	// Compute the value of the mapping shape function i at quadrature point p
-   	// (Lagrange shape functions are used for mapping)
- --- 194,200 ----
-   	    {
-   	      phi[i][p]      = FE<Dim,T>::shape       (elem, get_order(), i,    qp[p]);
-   	      dphidxi[i][p]  = FE<Dim,T>::shape_deriv (elem, get_order(), i, 0, qp[p]);
- ! 	    }
-   	
-   	// Compute the value of the mapping shape function i at quadrature point p
-   	// (Lagrange shape functions are used for mapping)
- ***************
- *** 178,187 ****
-   	    {
-   	      phi_map[i][p]      = FE<Dim,LAGRANGE>::shape       (mapping_elem_type, mapping_order, i,    qp[p]);
-   	      dphidxi_map[i][p]  = FE<Dim,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 0, qp[p]);
- ! 	    };
-   		
-   	return;
- !       };
-   
-   
-         
- --- 203,212 ----
-   	    {
-   	      phi_map[i][p]      = FE<Dim,LAGRANGE>::shape       (mapping_elem_type, mapping_order, i,    qp[p]);
-   	      dphidxi_map[i][p]  = FE<Dim,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 0, qp[p]);
- ! 	    }
-   		
-   	return;
- !       }
-   
-   
-         
- ***************
- *** 196,202 ****
-   	      phi[i][p]      = FE<Dim,T>::shape       (elem, get_order(), i,    qp[p]);
-   	      dphidxi[i][p]  = FE<Dim,T>::shape_deriv (elem, get_order(), i, 0, qp[p]);
-   	      dphideta[i][p] = FE<Dim,T>::shape_deriv (elem, get_order(), i, 1, qp[p]);
- ! 	    };
-   	
-   	// Compute the value of the mapping shape function i at quadrature point p
-   	// (Lagrange shape functions are used for mapping)
- --- 221,227 ----
-   	      phi[i][p]      = FE<Dim,T>::shape       (elem, get_order(), i,    qp[p]);
-   	      dphidxi[i][p]  = FE<Dim,T>::shape_deriv (elem, get_order(), i, 0, qp[p]);
-   	      dphideta[i][p] = FE<Dim,T>::shape_deriv (elem, get_order(), i, 1, qp[p]);
- ! 	    }
-   	
-   	// Compute the value of the mapping shape function i at quadrature point p
-   	// (Lagrange shape functions are used for mapping)
- ***************
- *** 206,215 ****
-   	      phi_map[i][p]      = FE<Dim,LAGRANGE>::shape       (mapping_elem_type, mapping_order, i,    qp[p]);
-   	      dphidxi_map[i][p]  = FE<Dim,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 0, qp[p]);
-   	      dphideta_map[i][p] = FE<Dim,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 1, qp[p]);
- ! 	    };
-   			
-          	return;
- !       };
-   
-   
-         
- --- 231,240 ----
-   	      phi_map[i][p]      = FE<Dim,LAGRANGE>::shape       (mapping_elem_type, mapping_order, i,    qp[p]);
-   	      dphidxi_map[i][p]  = FE<Dim,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 0, qp[p]);
-   	      dphideta_map[i][p] = FE<Dim,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 1, qp[p]);
- ! 	    }
-   			
-          	return;
- !       }
-   
-   
-         
- ***************
- *** 225,231 ****
-   	      dphidxi[i][p]   = FE<Dim,T>::shape_deriv (elem, get_order(), i, 0, qp[p]);
-   	      dphideta[i][p]  = FE<Dim,T>::shape_deriv (elem, get_order(), i, 1, qp[p]);
-   	      dphidzeta[i][p] = FE<Dim,T>::shape_deriv (elem, get_order(), i, 2, qp[p]);
- ! 	    };
-   	
-   	// Compute the value of the mapping shape function i at quadrature point p
-   	// (Lagrange shape functions are used for mapping)
- --- 250,256 ----
-   	      dphidxi[i][p]   = FE<Dim,T>::shape_deriv (elem, get_order(), i, 0, qp[p]);
-   	      dphideta[i][p]  = FE<Dim,T>::shape_deriv (elem, get_order(), i, 1, qp[p]);
-   	      dphidzeta[i][p] = FE<Dim,T>::shape_deriv (elem, get_order(), i, 2, qp[p]);
- ! 	    }
-   	
-   	// Compute the value of the mapping shape function i at quadrature point p
-   	// (Lagrange shape functions are used for mapping)
- ***************
- *** 236,259 ****
-   	      dphidxi_map[i][p]   = FE<Dim,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 0, qp[p]);
-   	      dphideta_map[i][p]  = FE<Dim,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 1, qp[p]);
-   	      dphidzeta_map[i][p] = FE<Dim,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 2, qp[p]);
- ! 	    };
-   			
-   	return;
- !       };
-   
-   
-       default:
-         error();
- !     };
-   
- -   error();
- -   return;
- - };
-   
-   
-   
-   
-   
-   
-   
-   //--------------------------------------------------------------
- --- 261,292 ----
-   	      dphidxi_map[i][p]   = FE<Dim,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 0, qp[p]);
-   	      dphideta_map[i][p]  = FE<Dim,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 1, qp[p]);
-   	      dphidzeta_map[i][p] = FE<Dim,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 2, qp[p]);
- ! 	    }
-   			
-   	return;
- !       }
-   
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
-   
- +     
- + #ifdef ENABLE_INFINITE_ELEMENTS
-   
- + template <unsigned int Dim, FEFamily T>
- + void FE<Dim,T>::init_base_shape_functions(const QBase* q, 
- + 					  const Elem* e)
- + { 
- +   elem_type = e->type(); 
- +   init_shape_functions(q, e); 
- + }
-   
- + #endif
-   
-   
-   //--------------------------------------------------------------
- Index: src/fe/fe_base.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_base.C,v
- retrieving revision 1.3
- retrieving revision 1.6
- diff -c -r1.3 -r1.6
- *** src/fe/fe_base.C	3 Feb 2003 03:51:49 -0000	1.3
- --- src/fe/fe_base.C	13 Feb 2003 22:56:09 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 43,67 ****
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<1,LAGRANGE>(fet));
-   	      return ap;
- ! 	    };
-   		   
-   	  case HIERARCHIC:
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<1,HIERARCHIC>(fet));
-   	      return ap;
- ! 	    };
-   	    
-   	  case MONOMIAL:
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<1,MONOMIAL>(fet));
-   	      return ap;
- ! 	    };
-   	    
-   	  default:
-   	    std::cout << "ERROR: Bad FEType.family= " << fet.family << std::endl;
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 2D
- --- 43,67 ----
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<1,LAGRANGE>(fet));
-   	      return ap;
- ! 	    }
-   		   
-   	  case HIERARCHIC:
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<1,HIERARCHIC>(fet));
-   	      return ap;
- ! 	    }
-   	    
-   	  case MONOMIAL:
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<1,MONOMIAL>(fet));
-   	      return ap;
- ! 	    }
-   	    
-   	  default:
-   	    std::cout << "ERROR: Bad FEType.family= " << fet.family << std::endl;
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 2D
- ***************
- *** 73,97 ****
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<2,LAGRANGE>(fet));
-   	      return ap;
- ! 	    };
-   	    
-   	  case HIERARCHIC:
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<2,HIERARCHIC>(fet));
-   	      return ap;
- ! 	    };
-   	    
-   	  case MONOMIAL:
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<2,MONOMIAL>(fet));
-   	      return ap;
- ! 	    };
-   	    
-   	  default:
-   	    std::cout << "ERROR: Bad FEType.family= " << fet.family << std::endl;
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 3D
- --- 73,97 ----
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<2,LAGRANGE>(fet));
-   	      return ap;
- ! 	    }
-   	    
-   	  case HIERARCHIC:
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<2,HIERARCHIC>(fet));
-   	      return ap;
- ! 	    }
-   	    
-   	  case MONOMIAL:
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<2,MONOMIAL>(fet));
-   	      return ap;
- ! 	    }
-   	    
-   	  default:
-   	    std::cout << "ERROR: Bad FEType.family= " << fet.family << std::endl;
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 3D
- ***************
- *** 103,131 ****
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<3,LAGRANGE>(fet));
-   	      return ap;
- ! 	    };
-   	    
-   	  case HIERARCHIC:
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<3,HIERARCHIC>(fet));
-   	      return ap;
- ! 	    };
-   	    
-   	  case MONOMIAL:
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<3,MONOMIAL>(fet));
-   	      return ap;
- ! 	    };
-   
-   
-   #ifdef ENABLE_INFINITE_ELEMENTS
-   
-   	  case INFINITE_MAP:
-   	    {
- ! 	      std::cout << "ERROR: Don't build an infinite element " << std::endl
- ! 			<< " with FEFamily = " << fet.family << std::endl;
-   	      error();
- ! 	    };
-   
-   	  case JACOBI_20_00:
-   	    {
- --- 103,342 ----
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<3,LAGRANGE>(fet));
-   	      return ap;
- ! 	    }
-   	    
-   	  case HIERARCHIC:
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<3,HIERARCHIC>(fet));
-   	      return ap;
- ! 	    }
-   	    
-   	  case MONOMIAL:
-   	    {
-   	      AutoPtr<FEBase> ap(new FE<3,MONOMIAL>(fet));
-   	      return ap;
- ! 	    }
- ! 	    
- ! 	  default:
- ! 	    std::cout << "ERROR: Bad FEType.family= " << fet.family << std::endl;
- ! 	    error();
- ! 	  }
- !       }
- ! 
- !     default:
- !       error();
- !     }
- ! 
- !   error();
- !   AutoPtr<FEBase> ap(NULL);
- !   return ap;
- ! }
- ! 
- ! 
- ! 
- ! 
- ! 
-   
-   
-   #ifdef ENABLE_INFINITE_ELEMENTS
-   
- + 
- + AutoPtr<FEBase> FEBase::build_InfFE (const unsigned int dim,
- + 				     const FEType& fet)
- + {
- +   // The stupid AutoPtr<FEBase> ap(); return ap;
- +   // construct is required to satisfy IBM's xlC
- + 
- +   switch (dim)
- +     {
- + 
- +       // 1D
- +     case 1:
- +       {
- + 	switch (fet.radial_family)
- + 	  {
- + 	  case INFINITE_MAP:
- + 	    {
- + 	      std::cerr << "ERROR: Don't build an infinite element " << std::endl
- + 			<< " with FEFamily = " << fet.radial_family << std::endl;
- + 	      error();
- + 	    }
- + 
- + 	  case JACOBI_20_00:
- + 	    {
- +   	      switch (fet.inf_map)
- + 	        {
- + 		  case CARTESIAN:
- + 		    {
- + 		      AutoPtr<FEBase> ap(new InfFE<1,JACOBI_20_00,CARTESIAN>(fet));
- + 		      return ap;
- + 		    }
- + 		  default:
- + 		    std::cerr << "ERROR: Don't build an infinite element " << std::endl
- + 			      << " with InfMapType = " << fet.inf_map << std::endl;
- + 		    error();
- + 		}
- + 	    }
- + 
- + 	  case JACOBI_30_00:
- + 	    {
- +   	      switch (fet.inf_map)
- + 	        {
- + 		  case CARTESIAN:
- + 		    {
- + 		      AutoPtr<FEBase> ap(new InfFE<1,JACOBI_30_00,CARTESIAN>(fet));
- + 		      return ap;
- + 		    }
- + 		  default:
- + 		    std::cerr << "ERROR: Don't build an infinite element " << std::endl
- + 			      << " with InfMapType = " << fet.inf_map << std::endl;
- + 		    error();
- + 		}
- + 	    }
- + 
- + 	  case LEGENDRE:
- + 	    {
- +   	      switch (fet.inf_map)
- + 	        {
- + 		  case CARTESIAN:
- + 		    {
- + 		      AutoPtr<FEBase> ap(new InfFE<1,LEGENDRE,CARTESIAN>(fet));
- + 		      return ap;
- + 		    }
- + 		  default:
- + 		    std::cerr << "ERROR: Don't build an infinite element " << std::endl
- + 			      << " with InfMapType = " << fet.inf_map << std::endl;
- + 		    error();
- + 		}
- + 	    }
- + 
- + 	  case LAGRANGE:
- + 	    {
- +   	      switch (fet.inf_map)
- + 	        {
- + 		  case CARTESIAN:
- + 		    {
- + 		      AutoPtr<FEBase> ap(new InfFE<1,LAGRANGE,CARTESIAN>(fet));
- + 		      return ap;
- + 		    }
- + 		  default:
- + 		    std::cerr << "ERROR: Don't build an infinite element " << std::endl
- + 			      << " with InfMapType = " << fet.inf_map << std::endl;
- + 		    error();
- + 		}
- + 	    }
- + 
- + 
- + 	    
- + 	  default:
- + 	    std::cerr << "ERROR: Bad FEType.radial_family= " << fet.radial_family << std::endl;
- + 	    error();
- + 	  }
- + 
- +       }
- + 
- +       
- + 
- + 
- +       // 2D
- +     case 2:
- +       {
- + 	switch (fet.radial_family)
- + 	  {
- + 	  case INFINITE_MAP:
- + 	    {
- + 	      std::cerr << "ERROR: Don't build an infinite element " << std::endl
- + 			<< " with FEFamily = " << fet.radial_family << std::endl;
- + 	      error();
- + 	    }
- + 
- + 	  case JACOBI_20_00:
- + 	    {
- +   	      switch (fet.inf_map)
- + 	        {
- + 		  case CARTESIAN:
- + 		    {
- + 		      AutoPtr<FEBase> ap(new InfFE<2,JACOBI_20_00,CARTESIAN>(fet));
- + 		      return ap;
- + 		    }
- + 		  default:
- + 		    std::cerr << "ERROR: Don't build an infinite element " << std::endl
- + 			      << " with InfMapType = " << fet.inf_map << std::endl;
- + 		    error();
- + 		}
- + 	    }
- + 
- + 	  case JACOBI_30_00:
- + 	    {
- +   	      switch (fet.inf_map)
- + 	        {
- + 		  case CARTESIAN:
- + 		    {
- + 		      AutoPtr<FEBase> ap(new InfFE<2,JACOBI_30_00,CARTESIAN>(fet));
- + 		      return ap;
- + 		    }
- + 		  default:
- + 		    std::cerr << "ERROR: Don't build an infinite element " << std::endl
- + 			      << " with InfMapType = " << fet.inf_map << std::endl;
- + 		    error();
- + 		}
- + 	    }
- + 
- + 	  case LEGENDRE:
- + 	    {
- +   	      switch (fet.inf_map)
- + 	        {
- + 		  case CARTESIAN:
- + 		    {
- + 		      AutoPtr<FEBase> ap(new InfFE<2,LEGENDRE,CARTESIAN>(fet));
- + 		      return ap;
- + 		    }
- + 		  default:
- + 		    std::cerr << "ERROR: Don't build an infinite element " << std::endl
- + 			      << " with InfMapType = " << fet.inf_map << std::endl;
- + 		    error();
- + 		}
- + 	    }
- + 
- + 	  case LAGRANGE:
- + 	    {
- +   	      switch (fet.inf_map)
- + 	        {
- + 		  case CARTESIAN:
- + 		    {
- + 		      AutoPtr<FEBase> ap(new InfFE<2,LAGRANGE,CARTESIAN>(fet));
- + 		      return ap;
- + 		    }
- + 		  default:
- + 		    std::cerr << "ERROR: Don't build an infinite element " << std::endl
- + 			      << " with InfMapType = " << fet.inf_map << std::endl;
- + 		    error();
- + 		}
- + 	    }
- + 
- + 
- + 	    
- + 	  default:
- + 	    std::cerr << "ERROR: Bad FEType.radial_family= " << fet.radial_family << std::endl;
- + 	    error();
- + 	  }
- + 
- +       }
- + 
- +       
- + 
- + 
- +       // 3D
- +     case 3:
- +       {
- + 	switch (fet.radial_family)
- + 	  {
-   	  case INFINITE_MAP:
-   	    {
- ! 	      std::cerr << "ERROR: Don't build an infinite element " << std::endl
- ! 			<< " with FEFamily = " << fet.radial_family << std::endl;
-   	      error();
- ! 	    }
-   
-   	  case JACOBI_20_00:
-   	    {
- ***************
- *** 135,147 ****
-   		    {
-   		      AutoPtr<FEBase> ap(new InfFE<3,JACOBI_20_00,CARTESIAN>(fet));
-   		      return ap;
- ! 		    };
-   		  default:
- ! 		    std::cout << "ERROR: Don't build an infinite element " << std::endl
- ! 			      << " with FEFamily = " << fet.family << std::endl;
-   		    error();
- ! 		};
- ! 	    };
-   
-   	  case JACOBI_30_00:
-   	    {
- --- 346,358 ----
-   		    {
-   		      AutoPtr<FEBase> ap(new InfFE<3,JACOBI_20_00,CARTESIAN>(fet));
-   		      return ap;
- ! 		    }
-   		  default:
- ! 		    std::cerr << "ERROR: Don't build an infinite element " << std::endl
- ! 			      << " with InfMapType = " << fet.inf_map << std::endl;
-   		    error();
- ! 		}
- ! 	    }
-   
-   	  case JACOBI_30_00:
-   	    {
- ***************
- *** 151,163 ****
-   		    {
-   		      AutoPtr<FEBase> ap(new InfFE<3,JACOBI_30_00,CARTESIAN>(fet));
-   		      return ap;
- ! 		    };
-   		  default:
- ! 		    std::cout << "ERROR: Don't build an infinite element " << std::endl
- ! 			      << " with FEFamily = " << fet.family << std::endl;
-   		    error();
- ! 		};
- ! 	    };
-   
-   	  case LEGENDRE:
-   	    {
- --- 362,374 ----
-   		    {
-   		      AutoPtr<FEBase> ap(new InfFE<3,JACOBI_30_00,CARTESIAN>(fet));
-   		      return ap;
- ! 		    }
-   		  default:
- ! 		    std::cerr << "ERROR: Don't build an infinite element " << std::endl
- ! 			      << " with InfMapType = " << fet.inf_map << std::endl;
-   		    error();
- ! 		}
- ! 	    }
-   
-   	  case LEGENDRE:
-   	    {
- ***************
- *** 167,212 ****
-   		    {
-   		      AutoPtr<FEBase> ap(new InfFE<3,LEGENDRE,CARTESIAN>(fet));
-   		      return ap;
- ! 		    };
-   		  default:
- ! 		    std::cout << "ERROR: Don't build an infinite element " << std::endl
- ! 			      << " with FEFamily = " << fet.family << std::endl;
-   		    error();
- ! 		};
- ! 	    };
-   
- ! 	  case INF_LAGRANGE:
-   	    {
-     	      switch (fet.inf_map)
-   	        {
-   		  case CARTESIAN:
-   		    {
- ! 		      AutoPtr<FEBase> ap(new InfFE<3,INF_LAGRANGE,CARTESIAN>(fet));
-   		      return ap;
- ! 		    };
-   		  default:
- ! 		    std::cout << "ERROR: Don't build an infinite element " << std::endl
- ! 			      << " with FEFamily = " << fet.family << std::endl;
-   		    error();
- ! 		};
- ! 	    };
-   
- - #endif
-   	    
-   	  default:
- ! 	    std::cout << "ERROR: Bad FEType.family= " << fet.family << std::endl;
-   	    error();
- ! 	  };
- !       };
-   
-       default:
-         error();
- !     };
-   
-     error();
-     AutoPtr<FEBase> ap(NULL);
-     return ap;
- ! };
-   
-   
-   
- --- 378,433 ----
-   		    {
-   		      AutoPtr<FEBase> ap(new InfFE<3,LEGENDRE,CARTESIAN>(fet));
-   		      return ap;
- ! 		    }
-   		  default:
- ! 		    std::cerr << "ERROR: Don't build an infinite element " << std::endl
- ! 			      << " with InfMapType = " << fet.inf_map << std::endl;
-   		    error();
- ! 		}
- ! 	    }
-   
- ! 	  case LAGRANGE:
-   	    {
-     	      switch (fet.inf_map)
-   	        {
-   		  case CARTESIAN:
-   		    {
- ! 		      AutoPtr<FEBase> ap(new InfFE<3,LAGRANGE,CARTESIAN>(fet));
-   		      return ap;
- ! 		    }
-   		  default:
- ! 		    std::cerr << "ERROR: Don't build an infinite element " << std::endl
- ! 			      << " with InfMapType = " << fet.inf_map << std::endl;
-   		    error();
- ! 		}
- ! 	    }
- ! 
-   
-   	    
-   	  default:
- ! 	    std::cerr << "ERROR: Bad FEType.radial_family= " << fet.radial_family << std::endl;
-   	    error();
- ! 	  }
- !       }
-   
-       default:
-         error();
- !     }
-   
-     error();
-     AutoPtr<FEBase> ap(NULL);
-     return ap;
- ! }
- ! 
- ! 
- ! 
- ! 
- ! #endif // ifdef ENABLE_INFINITE_ELEMENTS
- ! 
- ! 
- ! 
- ! 
- ! 
-   
-   
-   
- ***************
- *** 240,249 ****
-   	      
-   	      dphi[i][p](1) = dphidy[i][p] = 0.;
-   	      dphi[i][p](2) = dphidz[i][p] = 0.;
- ! 	    };
-   	  
-   	break;
- !       };
-   
-       case 2:
-         {
- --- 461,470 ----
-   	      
-   	      dphi[i][p](1) = dphidy[i][p] = 0.;
-   	      dphi[i][p](2) = dphidz[i][p] = 0.;
- ! 	    }
-   	  
-   	break;
- !       }
-   
-       case 2:
-         {
- ***************
- *** 261,270 ****
-   				dphideta[i][p]*detady_map[p]);
-   
-   	      dphi[i][p](2) = dphidz[i][p] = 0.;
- ! 	    };
-   
-   	break;
- !       };
-       
-       case 3:
-         {
- --- 482,491 ----
-   				dphideta[i][p]*detady_map[p]);
-   
-   	      dphi[i][p](2) = dphidz[i][p] = 0.;
- ! 	    }
-   
-   	break;
- !       }
-       
-       case 3:
-         {
- ***************
- *** 288,304 ****
-   		dphidz[i][p] = (dphidxi[i][p]*dxidz_map[p] +
-   				dphideta[i][p]*detadz_map[p] +
-   				dphidzeta[i][p]*dzetadz_map[p]);	      
- ! 	    };
-   
-   	break;
- !       };
-   
-       default:
-         {
-   	error();
- !       };
- !     };
- ! };
-   
-   
-   
- --- 509,525 ----
-   		dphidz[i][p] = (dphidxi[i][p]*dxidz_map[p] +
-   				dphideta[i][p]*detadz_map[p] +
-   				dphidzeta[i][p]*dzetadz_map[p]);	      
- ! 	    }
-   
-   	break;
- !       }
-   
-       default:
-         {
-   	error();
- !       }
- !     }
- ! }
-   
-   
-   
- ***************
- *** 323,329 ****
-   	  return true;
-   
-   	break;
- !       };
-   
-         
-       case TRI3:
- --- 544,550 ----
-   	  return true;
-   
-   	break;
- !       }
-   
-         
-       case TRI3:
- ***************
- *** 337,343 ****
-   	  return true;
-   
-   	break;
- !       };
-   
-         
-       case QUAD4:
- --- 558,564 ----
-   	  return true;
-   
-   	break;
- !       }
-   
-         
-       case QUAD4:
- ***************
- *** 352,358 ****
-   	  return true;
-   		
-   	break;
- !       };
-   
-   
-       case TET4:
- --- 573,579 ----
-   	  return true;
-   		
-   	break;
- !       }
-   
-   
-       case TET4:
- ***************
- *** 368,374 ****
-   	  return true;
-   		
-   	break;
- !       };
-   
-         
-       case HEX8:
- --- 589,595 ----
-   	  return true;
-   		
-   	break;
- !       }
-   
-         
-       case HEX8:
- ***************
- *** 399,405 ****
-   	  }
-   
-   	break;
- !       };
-   
-       case PRISM6:
-       case PRISM18:
- --- 620,626 ----
-   	  }
-   
-   	break;
- !       }
-   
-       case PRISM6:
-       case PRISM18:
- ***************
- *** 413,419 ****
-   	  return true;
-   
-   	break;
- !       };
-   
-   
-       case PYRAMID5:
- --- 634,640 ----
-   	  return true;
-   
-   	break;
- !       }
-   
-   
-       case PYRAMID5:
- ***************
- *** 423,439 ****
-   	error();
-   
-   	break;
- !       };
-         
-       default:
-         std::cerr << "ERROR: Unknown element type " << t << std::endl;
-         error();
- !     };
-   
-     // If we get here then the point is _not_ in the
-     // reference element.   Better return false.
-     
-     return false;
- ! };
-   
-   
- --- 644,660 ----
-   	error();
-   
-   	break;
- !       }
-         
-       default:
-         std::cerr << "ERROR: Unknown element type " << t << std::endl;
-         error();
- !     }
-   
-     // If we get here then the point is _not_ in the
-     // reference element.   Better return false.
-     
-     return false;
- ! }
-   
-   
- Index: src/fe/fe_boundary.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_boundary.C,v
- retrieving revision 1.6
- retrieving revision 1.11
- diff -c -r1.6 -r1.11
- *** src/fe/fe_boundary.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/fe_boundary.C	17 Feb 2003 01:23:02 -0000	1.11
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 41,47 ****
-     std::cerr << "ERROR: This method only makes sense for 2D, 3D elements!"
-   	    << std::endl;
-     error();
- ! };
-   
-   
-   
- --- 41,47 ----
-     std::cerr << "ERROR: This method only makes sense for 2D, 3D elements!"
-   	    << std::endl;
-     error();
- ! }
-   
-   
-   
- ***************
- *** 55,61 ****
-     std::cerr << "ERROR: This method only makes sense for 2D, 3D elements!"
-   	    << std::endl;
-     error();
- ! };
-   
-   
-   
- --- 55,61 ----
-     std::cerr << "ERROR: This method only makes sense for 2D, 3D elements!"
-   	    << std::endl;
-     error();
- ! }
-   
-   
-   
- ***************
- *** 69,75 ****
-     std::cerr << "ERROR: This method only makes sense for 2D, 3D elements!"
-   	    << std::endl;
-     error();
- ! };
-   
-   
-   
- --- 69,75 ----
-     std::cerr << "ERROR: This method only makes sense for 2D, 3D elements!"
-   	    << std::endl;
-     error();
- ! }
-   
-   
-   
- ***************
- *** 97,108 ****
-     assert (qrule->n_points() == qside->n_points());
-     
-     
- !   // Compute the Jacobian on the face for integration
-     {
-       elem_type = side->type();
-       init_shape_functions (qside, elem, s);
-       compute_map          (qside, elem, s);
- !   };
-     
-     // make a copy of the Jacobian for integration
-     const std::vector<Real>  JxW_int(JxW);
- --- 97,108 ----
-     assert (qrule->n_points() == qside->n_points());
-     
-     
- !   // Compute the Jacobian*Weight on the face for integration
-     {
-       elem_type = side->type();
-       init_shape_functions (qside, elem, s);
-       compute_map          (qside, elem, s);
- !   }
-     
-     // make a copy of the Jacobian for integration
-     const std::vector<Real>  JxW_int(JxW);
- ***************
- *** 114,129 ****
-       init_shape_functions    (qrule, elem);
-       compute_map             (qrule, elem);
-       compute_shape_functions (qrule);
- !   };  
-     
-     // copy back old data
-     {
-       JxW = JxW_int;
-       xyz = xyz_int;
- !   };
- !   
- !   return;
- ! };
-   
-   
-   
- --- 114,127 ----
-       init_shape_functions    (qrule, elem);
-       compute_map             (qrule, elem);
-       compute_shape_functions (qrule);
- !   }  
-     
-     // copy back old data
-     {
-       JxW = JxW_int;
-       xyz = xyz_int;
- !   }
- ! }
-   
-   
-   
- ***************
- *** 163,170 ****
-   	dpsidxi_map[i].resize    (n_qp);
-   	if (Dim == 3)
-   	  dpsideta_map[i].resize (n_qp);
- !       };
- !   };
-     
-     
-     // Compute the value of shape function i at quadrature point p
- --- 161,168 ----
-   	dpsidxi_map[i].resize    (n_qp);
-   	if (Dim == 3)
-   	  dpsideta_map[i].resize (n_qp);
- !       }
- !   }
-     
-     
-     // Compute the value of shape function i at quadrature point p
- ***************
- *** 176,182 ****
-   	dpsidxi_map[i][p]    = FE<Dim-1,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 0, qp[p]);
-   	if (Dim == 3)
-   	  dpsideta_map[i][p] = FE<Dim-1,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 1, qp[p]);
- !       };
-   
-     // compute the normal vectors at each quadrature point p
-     tangents.resize(n_qp);
- --- 174,180 ----
-   	dpsidxi_map[i][p]    = FE<Dim-1,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 0, qp[p]);
-   	if (Dim == 3)
-   	  dpsideta_map[i][p] = FE<Dim-1,LAGRANGE>::shape_deriv (mapping_elem_type, mapping_order, i, 1, qp[p]);
- !       }
-   
-     // compute the normal vectors at each quadrature point p
-     tangents.resize(n_qp);
- ***************
- *** 192,198 ****
-   	  Point dxyzdxi_map;
-   
-   	  for (unsigned int i=0; i<n_mapping_shape_functions; i++)
- ! 	    dxyzdxi_map  += side->point(i)*dpsidxi_map [i][p];
-   	  
-   	  const Point n(dxyzdxi_map(1), -dxyzdxi_map(0), 0.);
-   	  
- --- 190,196 ----
-   	  Point dxyzdxi_map;
-   
-   	  for (unsigned int i=0; i<n_mapping_shape_functions; i++)
- ! 	    dxyzdxi_map.add_scaled(side->point(i), dpsidxi_map[i][p]);
-   	  
-   	  const Point n(dxyzdxi_map(1), -dxyzdxi_map(0), 0.);
-   	  
- ***************
- *** 210,228 ****
-   
-   	  for (unsigned int i=0; i<n_mapping_shape_functions; i++)
-   	    {
- ! 	      dxyzdxi_map  += side->point(i)*dpsidxi_map [i][p];
- ! 	      dxyzdeta_map += side->point(i)*dpsideta_map[i][p];
- ! 	    };
-   	  
-   	  const Point n  = dxyzdxi_map.cross(dxyzdeta_map);
-   	  normals[p]     = n.unit();
-   	  tangents[p][0] = dxyzdxi_map.unit();
-   	  tangents[p][1] = n.cross(dxyzdxi_map).unit();
- ! 	};
- !     };
- !   
- !   return;
- ! };
-   
-     
-   
- --- 208,224 ----
-   
-   	  for (unsigned int i=0; i<n_mapping_shape_functions; i++)
-   	    {
- ! 	      dxyzdxi_map.add_scaled (side->point(i), dpsidxi_map[i][p]);
- ! 	      dxyzdeta_map.add_scaled(side->point(i), dpsideta_map[i][p]);
- ! 	    }
-   	  
-   	  const Point n  = dxyzdxi_map.cross(dxyzdeta_map);
-   	  normals[p]     = n.unit();
-   	  tangents[p][0] = dxyzdxi_map.unit();
-   	  tangents[p][1] = n.cross(dxyzdxi_map).unit();
- ! 	}
- !     }
- ! }
-   
-     
-   
- ***************
- *** 251,288 ****
-   	    xyz.resize(n_qp);
-   	    dxyzdxi_map.resize(n_qp);
-   	    
- - 	    jac.resize(n_qp);
-   	    JxW.resize(n_qp);
-   	  }
-   	  
-   	  // Clear the entities that will be summed
-   	  for (unsigned int p=0; p<n_qp; p++)
-   	    {
- ! 	      xyz[p].clear();
- ! 	      dxyzdxi_map[p].clear();
- ! 	    };
-   	  
-   	  // compute x, dxdxi at the quadrature points    
-   	  for (unsigned int i=0; i<psi_map.size(); i++) // sum over the nodes
- ! 	    for (unsigned int p=0; p<n_qp; p++) // for each quadrature point...
- ! 	      {	  
- ! 		xyz[p]         += side->point(i)*psi_map[i][p];
- ! 		dxyzdxi_map[p] += side->point(i)*dpsidxi_map[i][p];
- ! 	      };
-   	  
-   	  
-   	  // compute the jacobian at the quadrature points
-   	  for (unsigned int p=0; p<n_qp; p++)
-   	    {
-   	      
- ! 	      jac[p] = sqrt(dxdxi_map(p)*dxdxi_map(p) +
- ! 			    dydxi_map(p)*dydxi_map(p));
-   	      
- ! 	      assert (jac[p] > 0.);
-   	      
- ! 	      JxW[p] = jac[p]*qw[p];
- ! 	    };
- ! 	};
-   	// done computing the map
-   	
-   	return;
- --- 247,287 ----
-   	    xyz.resize(n_qp);
-   	    dxyzdxi_map.resize(n_qp);
-   	    
-   	    JxW.resize(n_qp);
-   	  }
-   	  
-   	  // Clear the entities that will be summed
-   	  for (unsigned int p=0; p<n_qp; p++)
-   	    {
- ! 	      xyz[p].zero();
- ! 	      dxyzdxi_map[p].zero();
- ! 	    }
-   	  
-   	  // compute x, dxdxi at the quadrature points    
-   	  for (unsigned int i=0; i<psi_map.size(); i++) // sum over the nodes
- ! 	    {
- ! 	      const Point& side_point = side->point(i);
- ! 	      
- ! 	      for (unsigned int p=0; p<n_qp; p++) // for each quadrature point...
- ! 		{	  
- ! 		  xyz[p].add_scaled        (side_point, psi_map[i][p]);
- ! 		  dxyzdxi_map[p].add_scaled(side_point, dpsidxi_map[i][p]);
- ! 		}
- ! 	    }
-   	  
-   	  
-   	  // compute the jacobian at the quadrature points
-   	  for (unsigned int p=0; p<n_qp; p++)
-   	    {
-   	      
- ! 	      const Real jac = sqrt(dxdxi_map(p)*dxdxi_map(p) +
- ! 				    dydxi_map(p)*dydxi_map(p));
-   	      
- ! 	      assert (jac > 0.);
-   	      
- ! 	      JxW[p] = jac*qw[p];
- ! 	    }
- ! 	}
-   	// done computing the map
-   	
-   	return;
- ***************
- *** 308,333 ****
-   	    dxyzdxi_map.resize(n_qp);
-   	    dxyzdeta_map.resize(n_qp);
-         
- - 	    jac.resize(n_qp);
-   	    JxW.resize(n_qp);
-   	  }
-       
-   	  // Clear the entities that will be summed
-   	  for (unsigned int p=0; p<n_qp; p++)
-   	    {
- ! 	      xyz[p].clear();
- ! 	      dxyzdxi_map[p].clear();
- ! 	      dxyzdeta_map[p].clear();
- ! 	    };
-       
-   	  // compute x, dxdxi at the quadrature points    
-   	  for (unsigned int i=0; i<psi_map.size(); i++) // sum over the nodes
- ! 	    for (unsigned int p=0; p<n_qp; p++) // for each quadrature point...
- ! 	      {
- ! 		xyz[p]          += side->point(i)*psi_map[i][p];
- ! 		dxyzdxi_map[p]  += side->point(i)*dpsidxi_map[i][p];
- ! 		dxyzdeta_map[p] += side->point(i)*dpsideta_map[i][p];
- ! 	      }
-       
-       
-   
- --- 307,335 ----
-   	    dxyzdxi_map.resize(n_qp);
-   	    dxyzdeta_map.resize(n_qp);
-         
-   	    JxW.resize(n_qp);
-   	  }
-       
-   	  // Clear the entities that will be summed
-   	  for (unsigned int p=0; p<n_qp; p++)
-   	    {
- ! 	      xyz[p].zero();
- ! 	      dxyzdxi_map[p].zero();
- ! 	      dxyzdeta_map[p].zero();
- ! 	    }
-       
-   	  // compute x, dxdxi at the quadrature points    
-   	  for (unsigned int i=0; i<psi_map.size(); i++) // sum over the nodes
- ! 	    {
- ! 	      const Point& side_point = side->point(i);
- ! 	      
- ! 	      for (unsigned int p=0; p<n_qp; p++) // for each quadrature point...
- ! 		{
- ! 		  xyz[p].add_scaled         (side_point, psi_map[i][p]);
- ! 		  dxyzdxi_map[p].add_scaled (side_point, dpsidxi_map[i][p]);
- ! 		  dxyzdeta_map[p].add_scaled(side_point, dpsideta_map[i][p]);
- ! 		}
- ! 	    }
-       
-       
-   
- ***************
- *** 351,363 ****
-   				dzdeta_map(p)*dzdeta_map(p));
-   	
-   	
- ! 	      jac[p] = sqrt(g11*g22 - g12*g21);
-   	
- ! 	      assert (jac[p] > 0.);
-   
- ! 	      JxW[p] = jac[p]*qw[p];
- ! 	    };
- ! 	};
-   	// done computing the map
-   
-   	return;  
- --- 353,365 ----
-   				dzdeta_map(p)*dzdeta_map(p));
-   	
-   	
- ! 	      const Real jac = sqrt(g11*g22 - g12*g21);
-   	
- ! 	      assert (jac > 0.);
-   
- ! 	      JxW[p] = jac*qw[p];
- ! 	    }
- ! 	}
-   	// done computing the map
-   
-   	return;  
- ***************
- *** 367,378 ****
-       default:
-         error();
-   
- !     };
- ! 
- !   error();
- ! 
- !   return;
- ! };
-   
-   
-   
- --- 369,376 ----
-       default:
-         error();
-   
- !     }
- ! }
-   
-   
-   
- Index: src/fe/fe_hierarchic.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_hierarchic.C,v
- retrieving revision 1.6
- retrieving revision 1.10
- diff -c -r1.6 -r1.10
- *** src/fe/fe_hierarchic.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/fe_hierarchic.C	20 Feb 2003 04:59:58 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 31,38 ****
-   template <unsigned int Dim, FEFamily T>
-   void FE<Dim,T>::nodal_soln(const Elem* elem,
-   			   const Order order,
- ! 			   const std::vector<Complex>& elem_soln,
- ! 			   std::vector<Complex>&       nodal_soln)
-   {
-     const unsigned int n_nodes = elem->n_nodes();
-     
- --- 31,38 ----
-   template <unsigned int Dim, FEFamily T>
-   void FE<Dim,T>::nodal_soln(const Elem* elem,
-   			   const Order order,
- ! 			   const std::vector<Number>& elem_soln,
- ! 			   std::vector<Number>&       nodal_soln)
-   {
-     const unsigned int n_nodes = elem->n_nodes();
-     
- ***************
- *** 49,61 ****
-         {
-   	assert (elem_soln.size() == 1);
-   	
- ! 	const Complex val = elem_soln[0];
-   	
-   	for (unsigned int n=0; n<n_nodes; n++)
-   	  nodal_soln[n] = val;
-   	
-   	return;
- !       };
-   
-   
-         // For other bases do interpolation at the nodes
- --- 49,61 ----
-         {
-   	assert (elem_soln.size() == 1);
-   	
- ! 	const Number val = elem_soln[0];
-   	
-   	for (unsigned int n=0; n<n_nodes; n++)
-   	  nodal_soln[n] = val;
-   	
-   	return;
- !       }
-   
-   
-         // For other bases do interpolation at the nodes
- ***************
- *** 86,108 ****
-   							     order,
-   							     i,
-   							     mapped_point);	    
- ! 	  };
-   
-   	return;
- !       };
-         
-       default:
-         {
-   	error();
- ! 	return;
- !       };
- !     };
- ! 
- !   
- !   // How did we get here?
- !   error();  
- !   return;
- ! };
-   
-   
-   
- --- 86,102 ----
-   							     order,
-   							     i,
-   							     mapped_point);	    
- ! 	  }
-   
-   	return;
- !       }
-         
-       default:
-         {
-   	error();
- !       }
- !     }
- ! }
-   
-   
-   
- ***************
- *** 131,139 ****
-   	    return 8;
-   
-   	  default:
- ! 	    error();
- ! 	  };
- !       };
-   
-   
-         // Hierarchic 2nd-order polynomials.
- --- 125,140 ----
-   	    return 8;
-   
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-   
-         // Hierarchic 2nd-order polynomials.
- ***************
- *** 156,164 ****
-   	    return 27;
-   
-   	  default:
- ! 	    error();
- ! 	  };
- !       };
-   
-   
-         // Hierarchic 3rd-order polynomials.
- --- 157,172 ----
-   	    return 27;
-   
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-   
-         // Hierarchic 3rd-order polynomials.
- ***************
- *** 181,189 ****
-   	    return 64;
-   
-   	  default:
- ! 	    error();
- ! 	  };
- !       };
-   
-   
-         // Hierarchic 4th-order polynomials.
- --- 189,204 ----
-   	    return 64;
-   
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-   
-         // Hierarchic 4th-order polynomials.
- ***************
- *** 206,214 ****
-   	    return 125;
-   
-   	  default:
- ! 	    error();
- ! 	  };
- !       };
-   
-   
-         // Hierarchic 5th-order polynomials.
- --- 221,236 ----
-   	    return 125;
-   
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-   
-         // Hierarchic 5th-order polynomials.
- ***************
- *** 231,250 ****
-   	    return 216;
-   
-   	  default:
- ! 	    error();
- ! 	  };
- !       };
-   
-         
-       default:
-         {
-   	error();
- !       };
- !     };
-     
-     error();  
-     return 0;
- ! };
-   
-   
-   
- --- 253,279 ----
-   	    return 216;
-   
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-         
-       default:
-         {
-   	error();
- !       }
- !     }
-     
-     error();  
-     return 0;
- ! }
-   
-   
-   
- ***************
- *** 275,282 ****
-   		  
-   		default:
-   		  error();		  
- ! 		};
- ! 	    };
-   
-   	    
-   	    // The 2D hierarchic defined on a 6-noded triangle
- --- 304,311 ----
-   		  
-   		default:
-   		  error();		  
- ! 		}
- ! 	    }
-   
-   	    
-   	    // The 2D hierarchic defined on a 6-noded triangle
- ***************
- *** 296,303 ****
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   	    
-   
-   	    // The 2D tensor-product hierarchics defined on a
- --- 325,332 ----
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   	    
-   
-   	    // The 2D tensor-product hierarchics defined on a
- ***************
- *** 324,331 ****
-   		  
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    // The 3D tensor-product hierarchics defined on a
-   	    // twenty-seven noded hexahedral.
- --- 353,360 ----
-   		  
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    // The 3D tensor-product hierarchics defined on a
-   	    // twenty-seven noded hexahedral.
- ***************
- *** 367,380 ****
-   		  
-   		case 26:
-   		  return 0;
- ! 		};
- ! 	    };
-   	    
-   	  default:
- ! 	    error();
-   	    
- ! 	  };
- !       };
-   
-   
-   
- --- 396,416 ----
-   		  
-   		case 26:
-   		  return 0;
- ! 		}
- ! 	    }
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
-   	    
- ! 	  }
- !       }
-   
-   
-   
- ***************
- *** 398,405 ****
-   		  
-   		default:
-   		  error();		  
- ! 		};
- ! 	    };
-   
-   	    
-   	    // The 2D hierarchic defined on a 6-noded triangle
- --- 434,441 ----
-   		  
-   		default:
-   		  error();		  
- ! 		}
- ! 	    }
-   
-   	    
-   	    // The 2D hierarchic defined on a 6-noded triangle
- ***************
- *** 419,426 ****
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   
-   	    // The 2D tensor-product hierarchics defined on a
- --- 455,462 ----
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   
-   	    // The 2D tensor-product hierarchics defined on a
- ***************
- *** 447,454 ****
-   		  
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    // The 3D tensor-product hierarchics defined on a
-   	    // twenty-seven noded hexahedral.
- --- 483,490 ----
-   		  
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    // The 3D tensor-product hierarchics defined on a
-   	    // twenty-seven noded hexahedral.
- ***************
- *** 490,503 ****
-   		  
-   		case 26:
-   		  return 1;
- ! 		};
- ! 	    };
-   	    
-   	  default:
- ! 	    error();
-   	    
- ! 	  };
- !       };
-   
-   
-   
- --- 526,546 ----
-   		  
-   		case 26:
-   		  return 1;
- ! 		}
- ! 	    }
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
-   	    
- ! 	  }
- !       }
-   
-   
-   
- ***************
- *** 521,528 ****
-   		  
-   		default:
-   		  error();		  
- ! 		};
- ! 	    };
-   
-   	    
-   	    // The 2D hierarchic defined on a 6-noded triangle
- --- 564,571 ----
-   		  
-   		default:
-   		  error();		  
- ! 		}
- ! 	    }
-   
-   	    
-   	    // The 2D hierarchic defined on a 6-noded triangle
- ***************
- *** 542,549 ****
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   
-   	    // The 2D tensor-product hierarchics defined on a
- --- 585,592 ----
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   
-   	    // The 2D tensor-product hierarchics defined on a
- ***************
- *** 570,577 ****
-   		  
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    // The 3D tensor-product hierarchics defined on a
-   	    // twenty-seven noded hexahedral.
- --- 613,620 ----
-   		  
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    // The 3D tensor-product hierarchics defined on a
-   	    // twenty-seven noded hexahedral.
- ***************
- *** 613,626 ****
-   		  
-   		case 26:
-   		  return 8;
- ! 		};
- ! 	    };
-   	    
-   	  default:
- ! 	    error();
-   	    
- ! 	  };
- !       };
-   
-   
-   
- --- 656,676 ----
-   		  
-   		case 26:
-   		  return 8;
- ! 		}
- ! 	    }
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
-   	    
- ! 	  }
- !       }
-   
-   
-   
- ***************
- *** 644,651 ****
-   		  
-   		default:
-   		  error();		  
- ! 		};
- ! 	    };
-   
-   	    
-   	    // The 2D hierarchic defined on a 6-noded triangle
- --- 694,701 ----
-   		  
-   		default:
-   		  error();		  
- ! 		}
- ! 	    }
-   
-   	    
-   	    // The 2D hierarchic defined on a 6-noded triangle
- ***************
- *** 665,672 ****
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   
-   	    // The 2D tensor-product hierarchics defined on a
- --- 715,722 ----
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   
-   	    // The 2D tensor-product hierarchics defined on a
- ***************
- *** 693,700 ****
-   		  
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    // The 3D tensor-product hierarchics defined on a
-   	    // twenty-seven noded hexahedral.
- --- 743,750 ----
-   		  
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    // The 3D tensor-product hierarchics defined on a
-   	    // twenty-seven noded hexahedral.
- ***************
- *** 736,749 ****
-   		  
-   		case 26:
-   		  return 27;
- ! 		};
- ! 	    };
-   	    
-   	  default:
- ! 	    error();
-   	    
- ! 	  };
- !       };
-   
-   
-   
- --- 786,806 ----
-   		  
-   		case 26:
-   		  return 27;
- ! 		}
- ! 	    }
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
-   	    
- ! 	  }
- !       }
-   
-   
-   
- ***************
- *** 767,774 ****
-   		  
-   		default:
-   		  error();		  
- ! 		};
- ! 	    };
-   
-   	    
-   	    // The 2D hierarchic defined on a 6-noded triangle
- --- 824,831 ----
-   		  
-   		default:
-   		  error();		  
- ! 		}
- ! 	    }
-   
-   	    
-   	    // The 2D hierarchic defined on a 6-noded triangle
- ***************
- *** 788,795 ****
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   
-   	    // The 2D tensor-product hierarchics defined on a
- --- 845,852 ----
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   
-   	    // The 2D tensor-product hierarchics defined on a
- ***************
- *** 816,823 ****
-   		  
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    // The 3D tensor-product hierarchics defined on a
-   	    // twenty-seven noded hexahedral.
- --- 873,880 ----
-   		  
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    // The 3D tensor-product hierarchics defined on a
-   	    // twenty-seven noded hexahedral.
- ***************
- *** 859,885 ****
-   		  
-   		case 26:
-   		  return 64;
- ! 		};
- ! 	    };
-   	    
-   	  default:
- ! 	    error();
-   	    
- ! 	  };
- !       };
-   
-   
-         
-       default:
-         {
-   	error();
- !       };
- !     };
-     
-     error();
-     
-     return 0;
- ! };
-   
-   
-   
- --- 916,949 ----
-   		  
-   		case 26:
-   		  return 64;
- ! 		}
- ! 	    }
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
-   	    
- ! 	  }
- !       }
-   
-   
-         
-       default:
-         {
-   	error();
- !       }
- !     }
-     
-     error();
-     
-     return 0;
- ! }
-   
-   
-   
- ***************
- *** 924,933 ****
-   	    
-   	    
-   	  default:
- ! 	    error();
-   	    
- ! 	  };
- !       };
-   
-   
-   
- --- 988,1004 ----
-   	    
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
-   	    
- ! 	  }
- !       }
-   
-   
-   
- ***************
- *** 966,975 ****
-   
-   	    
-   	  default:
- ! 	    error();
-   	    
- ! 	  };
- !       };
-   
-   
-   
- --- 1037,1053 ----
-   
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
-   	    
- ! 	  }
- !       }
-   
-   
-   
- ***************
- *** 1008,1017 ****
-   
-   	    
-   	  default:
- ! 	    error();
-   	    
- ! 	  };
- !       };
-   
-   
-   
- --- 1086,1102 ----
-   
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
-   	    
- ! 	  }
- !       }
-   
-   
-   
- ***************
- *** 1050,1059 ****
-   
-   	    
-   	  default:
- ! 	    error();
-   	    
- ! 	  };
- !       };
-   
-   
-   
- --- 1135,1151 ----
-   
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
-   	    
- ! 	  }
- !       }
-   
-   
-   
- ***************
- *** 1092,1101 ****
-   
-   	    
-   	  default:
- ! 	    error();
-   	    
- ! 	  };
- !       };
-   
-   
-   
- --- 1184,1200 ----
-   
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
-   	    
- ! 	  }
- !       }
-   
-   
-   
- ***************
- *** 1103,1110 ****
-         // Otherwise no DOFS per element
-       default:
-         return 0;
- !     };
- ! };
-   
-   
-   
- --- 1202,1209 ----
-         // Otherwise no DOFS per element
-       default:
-         return 0;
- !     }
- ! }
-   
-   
-   
- Index: src/fe/fe_hierarchic_shape_1D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_hierarchic_shape_1D.C,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** src/fe/fe_hierarchic_shape_1D.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/fe_hierarchic_shape_1D.C	13 Feb 2003 22:56:09 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 83,101 ****
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();	    
- ! 	  };
- !       };
-         
-       default:
-         {
-   	std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-   	error();
- !       };
- !     };
-   
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 83,101 ----
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();	    
- ! 	  }
- !       }
-         
-       default:
-         {
-   	std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-   	error();
- !       }
- !     }
-   
-     error();
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 108,114 ****
-     assert (elem != NULL);
-     
-     return FE<1,HIERARCHIC>::shape(elem->type(), order, i, p);
- ! };
-   
-   
-   
- --- 108,114 ----
-     assert (elem != NULL);
-     
-     return FE<1,HIERARCHIC>::shape(elem->type(), order, i, p);
- ! }
-   
-   
-   
- ***************
- *** 170,177 ****
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();	    
- ! 	  };
- !       };
-   
-   
-         
- --- 170,177 ----
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();	    
- ! 	  }
- !       }
-   
-   
-         
- ***************
- *** 179,190 ****
-         {
-   	std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-   	error();
- !       };
- !     };
-   
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 179,190 ----
-         {
-   	std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-   	error();
- !       }
- !     }
-   
-     error();
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 199,202 ****
-     
-     return FE<1,HIERARCHIC>::shape_deriv(elem->type(),
-   				       order, i, j, p);
- ! };
- --- 199,202 ----
-     
-     return FE<1,HIERARCHIC>::shape_deriv(elem->type(),
-   				       order, i, j, p);
- ! }
- Index: src/fe/fe_hierarchic_shape_2D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_hierarchic_shape_2D.C,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** src/fe/fe_hierarchic_shape_2D.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/fe_hierarchic_shape_2D.C	13 Feb 2003 22:56:09 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 41,47 ****
-     
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 41,47 ----
-     
-     error();
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 95,102 ****
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   	    
-   
-   	    // Hierarchic shape functions on the quadrilateral.
- --- 95,102 ----
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   	    
-   
-   	    // Hierarchic shape functions on the quadrilateral.
- ***************
- *** 116,128 ****
-   	      return (FE<1,HIERARCHIC>::shape(EDGE3, order, i0[i], xi)*
-   		      FE<1,HIERARCHIC>::shape(EDGE3, order, i1[i], eta));
-   	      
- ! 	    };
-   
-   	    
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   	   
-   
-         
- --- 116,128 ----
-   	      return (FE<1,HIERARCHIC>::shape(EDGE3, order, i0[i], xi)*
-   		      FE<1,HIERARCHIC>::shape(EDGE3, order, i1[i], eta));
-   	      
- ! 	    }
-   
-   	    
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   	   
-   
-         
- ***************
- *** 201,208 ****
-   		  
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   	    
-   
-   	    // Hierarchic shape functions on the quadrilateral.
- --- 201,208 ----
-   		  
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   	    
-   
-   	    // Hierarchic shape functions on the quadrilateral.
- ***************
- *** 259,270 ****
-   
-   	      return f*(FE<1,HIERARCHIC>::shape(EDGE3, order, i0[i], xi)*
-   			FE<1,HIERARCHIC>::shape(EDGE3, order, i1[i], eta));
- ! 	    };
-   
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   	   
-   
-         
- --- 259,270 ----
-   
-   	      return f*(FE<1,HIERARCHIC>::shape(EDGE3, order, i0[i], xi)*
-   			FE<1,HIERARCHIC>::shape(EDGE3, order, i1[i], eta));
- ! 	    }
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   	   
-   
-         
- ***************
- *** 361,368 ****
-   		  
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   	    
-   
-   	    // Hierarchic shape functions on the quadrilateral.
- --- 361,368 ----
-   		  
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   	    
-   
-   	    // Hierarchic shape functions on the quadrilateral.
- ***************
- *** 419,430 ****
-   
-   	      return f*(FE<1,HIERARCHIC>::shape(EDGE3, order, i0[i], xi)*
-   			FE<1,HIERARCHIC>::shape(EDGE3, order, i1[i], eta));
- ! 	    };
-   
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   	   
-   
-         
- --- 419,430 ----
-   
-   	      return f*(FE<1,HIERARCHIC>::shape(EDGE3, order, i0[i], xi)*
-   			FE<1,HIERARCHIC>::shape(EDGE3, order, i1[i], eta));
- ! 	    }
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   	   
-   
-         
- ***************
- *** 542,549 ****
-   		  
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   	    
-   
-   	    // Hierarchic shape functions on the quadrilateral.
- --- 542,549 ----
-   		  
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   	    
-   
-   	    // Hierarchic shape functions on the quadrilateral.
- ***************
- *** 600,611 ****
-   
-   	      return f*(FE<1,HIERARCHIC>::shape(EDGE3, order, i0[i], xi)*
-   			FE<1,HIERARCHIC>::shape(EDGE3, order, i1[i], eta));	      
- ! 	    };
-   
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-   
-   
- --- 600,611 ----
-   
-   	      return f*(FE<1,HIERARCHIC>::shape(EDGE3, order, i0[i], xi)*
-   			FE<1,HIERARCHIC>::shape(EDGE3, order, i1[i], eta));	      
- ! 	    }
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-   
-   
- ***************
- *** 614,625 ****
-       default:
-         std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-         error();
- !     };
-   
-     
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 614,625 ----
-       default:
-         std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-         error();
- !     }
-   
-     
-     error();
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 636,642 ****
-   
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 636,642 ----
-   
-     error();
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 681,687 ****
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  };
-   
-   		  // d()/deta
-   		case 1:
- --- 681,687 ----
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  }
-   
-   		  // d()/deta
-   		case 1:
- ***************
- *** 691,703 ****
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  };
-   		  
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    
-   
- --- 691,703 ----
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  }
-   		  
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    
-   
- ***************
- *** 729,741 ****
-   
-   		default:
-   		  error();
- ! 		};	      
- ! 	    };
-   
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-   
- --- 729,741 ----
-   
-   		default:
-   		  error();
- ! 		}	      
- ! 	    }
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-   
- ***************
- *** 764,770 ****
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  };
-   
-   		  // d()/deta
-   		case 1:
- --- 764,770 ----
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  }
-   
-   		  // d()/deta
-   		case 1:
- ***************
- *** 774,786 ****
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  };
-   		  
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    
-   
- --- 774,786 ----
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  }
-   		  
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    
-   
- ***************
- *** 850,862 ****
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   	   
-   
-         
- --- 850,862 ----
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   	   
-   
-         
- ***************
- *** 886,892 ****
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  };
-   
-   		  // d()/deta
-   		case 1:
- --- 886,892 ----
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  }
-   
-   		  // d()/deta
-   		case 1:
- ***************
- *** 896,908 ****
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  };
-   		  
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    
-   
- --- 896,908 ----
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  }
-   		  
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    
-   
- ***************
- *** 972,984 ****
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   	   
-   
-         
- --- 972,984 ----
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   	   
-   
-         
- ***************
- *** 1009,1015 ****
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  };
-   
-   		  // d()/deta
-   		case 1:
- --- 1009,1015 ----
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  }
-   
-   		  // d()/deta
-   		case 1:
- ***************
- *** 1019,1031 ****
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  };
-   		  
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    
-   
- --- 1019,1031 ----
-   
-   		    return (FE<2,HIERARCHIC>::shape(elem, order, i, pp) -
-   			    FE<2,HIERARCHIC>::shape(elem, order, i, pm))/2./eps;
- ! 		  }
-   		  
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    
-   
- ***************
- *** 1094,1106 ****
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-   
-   
- --- 1094,1106 ----
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-   
-   
- ***************
- *** 1109,1118 ****
-       default:
-         std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-         error();
- !     };
-   
-     
-     error();
-     return 0.;
- ! };
-   
- --- 1109,1118 ----
-       default:
-         std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-         error();
- !     }
-   
-     
-     error();
-     return 0.;
- ! }
-   
- Index: src/fe/fe_hierarchic_shape_3D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_hierarchic_shape_3D.C,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** src/fe/fe_hierarchic_shape_3D.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/fe_hierarchic_shape_3D.C	13 Feb 2003 22:56:09 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 41,47 ****
-     
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 41,47 ----
-     
-     error();
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 88,101 ****
-   	      return (FE<1,HIERARCHIC>::shape(EDGE3, order, i0[i], xi)*
-   		      FE<1,HIERARCHIC>::shape(EDGE3, order, i1[i], eta)*
-   		      FE<1,HIERARCHIC>::shape(EDGE3, order, i2[i], zeta));
- ! 	    };
-   
-   	    
-   	  default:
-   	    error();
- ! 	  };
-   	
- !       };
-   
-         
-   
- --- 88,101 ----
-   	      return (FE<1,HIERARCHIC>::shape(EDGE3, order, i0[i], xi)*
-   		      FE<1,HIERARCHIC>::shape(EDGE3, order, i1[i], eta)*
-   		      FE<1,HIERARCHIC>::shape(EDGE3, order, i2[i], zeta));
- ! 	    }
-   
-   	    
-   	  default:
-   	    error();
- ! 	  }
-   	
- !       }
-   
-         
-   
- ***************
- *** 201,208 ****
-   		  {
-   		    if (elem->node(4) != std::min(elem->node(4), elem->node(7)))
-   		      eta_mapped = -eta;
- ! 		  };
- ! 	      };
-   
-   
-   	      // handle the face orientation
- --- 201,208 ----
-   		  {
-   		    if (elem->node(4) != std::min(elem->node(4), elem->node(7)))
-   		      eta_mapped = -eta;
- ! 		  }
- ! 	      }
-   
-   
-   	      // handle the face orientation
- ***************
- *** 597,625 ****
-   		  }
-   
-   		
- ! 	      };
-   		  
-   	      
-   	      return (FE<1,HIERARCHIC>::shape(EDGE3, order, i0[i], xi_mapped)*
-   		      FE<1,HIERARCHIC>::shape(EDGE3, order, i1[i], eta_mapped)*
-   		      FE<1,HIERARCHIC>::shape(EDGE3, order, i2[i], zeta_mapped));
- ! 	    };
-   
-   	    
-   	  default:
-   	    error();
- ! 	  };	
- !       };
-   
-       default:
-         error();
- !     };
-     
-   #endif
-         
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 597,625 ----
-   		  }
-   
-   		
- ! 	      }
-   		  
-   	      
-   	      return (FE<1,HIERARCHIC>::shape(EDGE3, order, i0[i], xi_mapped)*
-   		      FE<1,HIERARCHIC>::shape(EDGE3, order, i1[i], eta_mapped)*
-   		      FE<1,HIERARCHIC>::shape(EDGE3, order, i2[i], zeta_mapped));
- ! 	    }
-   
-   	    
-   	  default:
-   	    error();
- ! 	  }	
- !       }
-   
-       default:
-         error();
- !     }
-     
-   #endif
-         
-     error();
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 637,643 ****
-     error();
-     
-     return 0.;
- ! };
-   
-   
-   
- --- 637,643 ----
-     error();
-     
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 705,718 ****
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-   
- --- 705,718 ----
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-   
- ***************
- *** 818,825 ****
-   		  {
-   		    if (elem->node(4) != std::min(elem->node(4), elem->node(7)))
-   		      eta_mapped = -eta;
- ! 		  };
- ! 	      };
-   
-   
-   	      // handle the face orientation
- --- 818,825 ----
-   		  {
-   		    if (elem->node(4) != std::min(elem->node(4), elem->node(7)))
-   		      eta_mapped = -eta;
- ! 		  }
- ! 	      }
-   
-   
-   	      // handle the face orientation
- ***************
- *** 1214,1220 ****
-   		  }
-   
-   		
- ! 	      };
-   		  
-   	      
-   
- --- 1214,1220 ----
-   		  }
-   
-   		
- ! 	      }
-   		  
-   	      
-   
- ***************
- *** 1242,1262 ****
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-       default:
-         error();
- !     };
-   
-   #endif
-     
-     error();
-     return 0.;
- ! };
- --- 1242,1262 ----
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-       default:
-         error();
- !     }
-   
-   #endif
-     
-     error();
-     return 0.;
- ! }
- Index: src/fe/fe_interface.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_interface.C,v
- retrieving revision 1.6
- retrieving revision 1.12
- diff -c -r1.6 -r1.12
- *** src/fe/fe_interface.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/fe_interface.C	20 Feb 2003 04:59:58 -0000	1.12
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 23,32 ****
-   #include "fe_interface.h"
-   #include "elem.h"
-   #include "fe.h"
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - # include "inf_fe.h"
- - #endif
- - 
-   
-   
-   //------------------------------------------------------------
- --- 23,28 ----
- ***************
- *** 36,42 ****
-     std::cerr << "ERROR: Do not define an object of this type." 
-   	    << std::endl;
-     error();
- ! };
-   
-   
-   
- --- 32,38 ----
-     std::cerr << "ERROR: Do not define an object of this type." 
-   	    << std::endl;
-     error();
- ! }
-   
-   
-   
- ***************
- *** 45,50 ****
- --- 41,59 ----
-   					    const FEType& fe_t,
-   					    const ElemType t)
-   {
- + 
- + #ifdef ENABLE_INFINITE_ELEMENTS
- +   /*
- +    * Since the FEType, stored in DofMap/(some SystemBase child), has to
- +    * be the _same_ for InfFE and FE, we have to catch calls
- +    * to infinite elements through the element type.
- +    */
- + 
- +   if ( is_InfFE_elem(t) )
- +     return ifem_n_shape_functions(dim, fe_t, t);
- + 
- + #endif
- + 
-     const Order o = fe_t.order;
-     
-     switch (dim)
- ***************
- *** 63,86 ****
-   	  case MONOMIAL:
-   	    return FE<1,MONOMIAL>::n_shape_functions(t, o);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	  case JACOBI_20_00:
- - 	  case JACOBI_30_00:
- - 	  case LEGENDRE:   
- - 	  case INF_LAGRANGE:
- - 	    /* Since InfFE<Dim,T_radial,T_map>::n_shape_functions(...)
- - 	     * is actually independent of T_radial, we can use
- - 	     * just any T_radial */
- - 	    return InfFE<1,JACOBI_20_00,CARTESIAN>::n_shape_functions(fe_t, t);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 2D
- --- 72,81 ----
-   	  case MONOMIAL:
-   	    return FE<1,MONOMIAL>::n_shape_functions(t, o);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 2D
- ***************
- *** 97,117 ****
-   	  case MONOMIAL:
-   	    return FE<2,MONOMIAL>::n_shape_functions(t, o);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	  case JACOBI_20_00:
- - 	  case JACOBI_30_00:
- - 	  case LEGENDRE:   
- - 	  case INF_LAGRANGE:
- - 	    return InfFE<2,JACOBI_20_00,CARTESIAN>::n_shape_functions(fe_t, t);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 3D
- --- 92,101 ----
-   	  case MONOMIAL:
-   	    return FE<2,MONOMIAL>::n_shape_functions(t, o);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 3D
- ***************
- *** 128,158 ****
-   	  case MONOMIAL:
-   	    return FE<3,MONOMIAL>::n_shape_functions(t, o);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	  case JACOBI_20_00:
- - 	  case JACOBI_30_00:
- - 	  case LEGENDRE:   
- - 	  case INF_LAGRANGE:
- - 	    return InfFE<3,JACOBI_20_00,CARTESIAN>::n_shape_functions(fe_t, t);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-   
-       default:
-         error();
- !     };
-   
-     
-     error();
-     return 0;
- ! };
-   
-   
-   
- --- 112,131 ----
-   	  case MONOMIAL:
-   	    return FE<3,MONOMIAL>::n_shape_functions(t, o);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-   
-       default:
-         error();
- !     }
-   
-     
-     error();
-     return 0;
- ! }
-   
-   
-   
- ***************
- *** 162,167 ****
- --- 135,147 ----
-   				 const FEType& fe_t,
-   				 const ElemType t)
-   {
- + #ifdef ENABLE_INFINITE_ELEMENTS
- + 
- +   if ( is_InfFE_elem(t) )
- +     return ifem_n_dofs(dim, fe_t, t);
- + 
- + #endif
- + 
-     const Order o = fe_t.order;
-   
-     switch (dim)
- ***************
- *** 180,203 ****
-   	  case MONOMIAL:
-   	    return FE<1,MONOMIAL>::n_dofs(t, o);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	  case JACOBI_20_00:
- - 	  case JACOBI_30_00:
- - 	  case LEGENDRE:   
- - 	  case INF_LAGRANGE:
- - 	    /* Since InfFE<Dim,T_radial,T_map>::n_dofs(...)
- - 	     * is actually independent of T_radial, we can use
- - 	     * just any T_radial */
- - 	    return InfFE<1,JACOBI_20_00,CARTESIAN>::n_dofs(fe_t, t);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 2D
- --- 160,169 ----
-   	  case MONOMIAL:
-   	    return FE<1,MONOMIAL>::n_dofs(t, o);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 2D
- ***************
- *** 214,234 ****
-   	  case MONOMIAL:
-   	    return FE<2,MONOMIAL>::n_dofs(t, o);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	  case JACOBI_20_00:
- - 	  case JACOBI_30_00:
- - 	  case LEGENDRE:   
- - 	  case INF_LAGRANGE:
- - 	    return InfFE<2,JACOBI_20_00,CARTESIAN>::n_dofs(fe_t, t);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 3D
- --- 180,189 ----
-   	  case MONOMIAL:
-   	    return FE<2,MONOMIAL>::n_dofs(t, o);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 3D
- ***************
- *** 245,275 ****
-   	  case MONOMIAL:
-   	    return FE<3,MONOMIAL>::n_dofs(t, o);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	  case JACOBI_20_00:
- - 	  case JACOBI_30_00:
- - 	  case LEGENDRE:   
- - 	  case INF_LAGRANGE:
- - 	    return InfFE<3,JACOBI_20_00,CARTESIAN>::n_dofs(fe_t, t);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-   
-       default:
-         error();
- !     };
-   
-     
-     error();
-     return 0;
- ! };
-   
-   		
-   
- --- 200,219 ----
-   	  case MONOMIAL:
-   	    return FE<3,MONOMIAL>::n_dofs(t, o);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-   
-       default:
-         error();
- !     }
-   
-     
-     error();
-     return 0;
- ! }
-   
-   		
-   
- ***************
- *** 279,284 ****
- --- 223,235 ----
-   					 const ElemType t,
-   					 const unsigned int n)
-   {
- + #ifdef ENABLE_INFINITE_ELEMENTS
- + 
- +   if ( is_InfFE_elem(t) )
- +     return ifem_n_dofs_at_node(dim, fe_t, t, n);
- + 
- + #endif
- + 
-     const Order o = fe_t.order;
-     
-     switch (dim)
- ***************
- *** 297,320 ****
-   	  case MONOMIAL:
-   	    return FE<1,MONOMIAL>::n_dofs_at_node(t, o, n);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	  case JACOBI_20_00:
- - 	  case JACOBI_30_00:
- - 	  case LEGENDRE:   
- - 	  case INF_LAGRANGE:
- - 	    /* Since InfFE<Dim,T_radial,T_map>::n_dofs_at_node(...)
- - 	     * is actually independent of T_radial, we can use
- - 	     * just any T_radial */
- - 	    return InfFE<1,JACOBI_20_00,CARTESIAN>::n_dofs_at_node(fe_t, t, n);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 2D
- --- 248,257 ----
-   	  case MONOMIAL:
-   	    return FE<1,MONOMIAL>::n_dofs_at_node(t, o, n);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 2D
- ***************
- *** 331,351 ****
-   	  case MONOMIAL:
-   	    return FE<2,MONOMIAL>::n_dofs_at_node(t, o, n);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	  case JACOBI_20_00:
- - 	  case JACOBI_30_00:
- - 	  case LEGENDRE:   
- - 	  case INF_LAGRANGE:
- - 	    return InfFE<2,JACOBI_20_00,CARTESIAN>::n_dofs_at_node(fe_t, t, n);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 3D
- --- 268,277 ----
-   	  case MONOMIAL:
-   	    return FE<2,MONOMIAL>::n_dofs_at_node(t, o, n);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 3D
- ***************
- *** 362,392 ****
-   	  case MONOMIAL:
-   	    return FE<3,MONOMIAL>::n_dofs_at_node(t, o, n);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	  case JACOBI_20_00:
- - 	  case JACOBI_30_00:
- - 	  case LEGENDRE:   
- - 	  case INF_LAGRANGE:
- - 	    return InfFE<3,JACOBI_20_00,CARTESIAN>::n_dofs_at_node(fe_t, t, n);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-   
-       default:
-         error();
- !     };
-   
-     
-     error();
-     return 0;
- ! };
-   
-   
-   
- --- 288,307 ----
-   	  case MONOMIAL:
-   	    return FE<3,MONOMIAL>::n_dofs_at_node(t, o, n);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-   
-       default:
-         error();
- !     }
-   
-     
-     error();
-     return 0;
- ! }
-   
-   
-   
- ***************
- *** 396,401 ****
- --- 311,323 ----
-   					  const FEType& fe_t,
-   					  const ElemType t)
-   {
- + #ifdef ENABLE_INFINITE_ELEMENTS
- + 
- +   if ( is_InfFE_elem(t) )
- +     return ifem_n_dofs_per_elem(dim, fe_t, t);
- + 
- + #endif
- + 
-     const Order o = fe_t.order;
-   
-     switch (dim)
- ***************
- *** 414,437 ****
-   	  case MONOMIAL:
-   	    return FE<1,MONOMIAL>::n_dofs_per_elem(t, o);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	  case JACOBI_20_00:
- - 	  case JACOBI_30_00:
- - 	  case LEGENDRE:   
- - 	  case INF_LAGRANGE:
- - 	    /* Since InfFE<Dim,T_radial,T_map>::n_dofs_per_elem(...)
- - 	     * is actually independent of T_radial, we can use
- - 	     * just any T_radial */
- - 	    return InfFE<1,JACOBI_20_00,CARTESIAN>::n_dofs_per_elem(fe_t, t);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 2D
- --- 336,345 ----
-   	  case MONOMIAL:
-   	    return FE<1,MONOMIAL>::n_dofs_per_elem(t, o);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 2D
- ***************
- *** 448,468 ****
-   	  case MONOMIAL:
-   	    return FE<2,MONOMIAL>::n_dofs_per_elem(t, o);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	  case JACOBI_20_00:
- - 	  case JACOBI_30_00:
- - 	  case LEGENDRE:   
- - 	  case INF_LAGRANGE:
- - 	    return InfFE<2,JACOBI_20_00,CARTESIAN>::n_dofs_per_elem(fe_t, t);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 3D
- --- 356,365 ----
-   	  case MONOMIAL:
-   	    return FE<2,MONOMIAL>::n_dofs_per_elem(t, o);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 3D
- ***************
- *** 479,509 ****
-   	  case MONOMIAL:
-   	    return FE<3,MONOMIAL>::n_dofs_per_elem(t, o);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	  case JACOBI_20_00:
- - 	  case JACOBI_30_00:
- - 	  case LEGENDRE:   
- - 	  case INF_LAGRANGE:
- - 	    return InfFE<3,JACOBI_20_00,CARTESIAN>::n_dofs_per_elem(fe_t, t);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-   
-       default:
-         error();
- !     };
-   
-     
-     error();
-     return 0;
- ! };
-   
-   
-   
- --- 376,395 ----
-   	  case MONOMIAL:
-   	    return FE<3,MONOMIAL>::n_dofs_per_elem(t, o);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-   
-       default:
-         error();
- !     }
-   
-     
-     error();
-     return 0;
- ! }
-   
-   
-   
- ***************
- *** 513,521 ****
-   void FEInterface::nodal_soln(const unsigned int dim,
-   			     const FEType& fe_t,
-   			     const Elem* elem,
- ! 			     const std::vector<Complex>& elem_soln,
- ! 			     std::vector<Complex>&       nodal_soln)
-   {
-     const Order order = fe_t.order;
-     
-     switch (dim)
- --- 399,417 ----
-   void FEInterface::nodal_soln(const unsigned int dim,
-   			     const FEType& fe_t,
-   			     const Elem* elem,
- ! 			     const std::vector<Number>& elem_soln,
- ! 			     std::vector<Number>&       nodal_soln)
-   {
- + #ifdef ENABLE_INFINITE_ELEMENTS
- + 
- +   if ( is_InfFE_elem(elem->type()) )
- +   {
- +     ifem_nodal_soln(dim, fe_t, elem, elem_soln, nodal_soln);
- +     return;
- +   }
- + 
- + #endif
- + 
-     const Order order = fe_t.order;
-     
-     switch (dim)
- ***************
- *** 540,565 ****
-   				       elem_soln, nodal_soln);
-   	    return;
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	  case JACOBI_20_00:
- - 	  case JACOBI_30_00:
- - 	  case LEGENDRE:   
- - 	  case INF_LAGRANGE:
- - 	    /* Since InfFE<Dim,T_radial,T_map>::nodal_soln(...)
- - 	     * is actually independent of T_radial, we can use
- - 	     * just any T_radial */
- - 	    InfFE<1,JACOBI_20_00,CARTESIAN>::nodal_soln(fe_t, elem, 
- - 							elem_soln, nodal_soln);
- - 	    return;
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 2D
- --- 436,445 ----
-   				       elem_soln, nodal_soln);
-   	    return;
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 2D
- ***************
- *** 582,604 ****
-   				       elem_soln, nodal_soln);
-   	    return;
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	  case JACOBI_20_00:
- - 	  case JACOBI_30_00:
- - 	  case LEGENDRE:   
- - 	  case INF_LAGRANGE:
- - 	    InfFE<2,JACOBI_20_00,CARTESIAN>::nodal_soln(fe_t, elem, 
- - 							elem_soln, nodal_soln);
- - 	    return;
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 3D
- --- 462,471 ----
-   				       elem_soln, nodal_soln);
-   	    return;
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 3D
- ***************
- *** 621,653 ****
-   				       elem_soln, nodal_soln);
-   	    return;
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	  case JACOBI_20_00:
- - 	  case JACOBI_30_00:
- - 	  case LEGENDRE:   
- - 	  case INF_LAGRANGE:
- - 	    InfFE<3,JACOBI_20_00,CARTESIAN>::nodal_soln(fe_t, elem, 
- - 							elem_soln, nodal_soln);
- - 	    return;
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-   
-       default:
-         error();
- !     };
- ! 
- !   
- !   error();
- !   return;
- ! };
-   
-   
-   
- --- 488,503 ----
-   				       elem_soln, nodal_soln);
-   	    return;
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 655,662 ****
-   Point FEInterface::inverse_map (const unsigned int dim,
-   				const FEType& fe_t,
-   				const Elem* elem,
- ! 				const Point& p)
-   {
-     switch (dim)
-       {
-         // 1D
- --- 505,520 ----
-   Point FEInterface::inverse_map (const unsigned int dim,
-   				const FEType& fe_t,
-   				const Elem* elem,
- ! 				const Point& p,
- ! 				const Real tolerance)
-   {
- + #ifdef ENABLE_INFINITE_ELEMENTS
- + 
- +   if ( is_InfFE_elem(elem->type()) )
- +     return ifem_inverse_map(dim, fe_t, elem, p, tolerance);
- + 
- + #endif
- + 
-     switch (dim)
-       {
-         // 1D
- ***************
- *** 665,696 ****
-   	switch (fe_t.family)
-   	  {
-   	  case HIERARCHIC:
- ! 	    return FE<1,HIERARCHIC>::inverse_map(elem, p);
-   	    
-   	  case LAGRANGE:
- ! 	    return FE<1,LAGRANGE>::inverse_map(elem, p);
-   	    
-   	  case MONOMIAL:
- ! 	    return FE<1,MONOMIAL>::inverse_map(elem, p);
- ! 
- ! #ifdef ENABLE_INFINITE_ELEMENTS
- ! 
- ! 	  case INFINITE_MAP:
- ! 	  case JACOBI_20_00:
- ! 	  case JACOBI_30_00:
- ! 	  case LEGENDRE:   
- ! 	  case INF_LAGRANGE:
- ! 	    /* Since InfFE<Dim,T_radial,T_map>::nodal_soln(...)
- ! 	     * is actually independent of T_radial, we can use
- ! 	     * just any T_radial */
- ! 	    return InfFE<1,JACOBI_20_00,CARTESIAN>::inverse_map(elem, p);
- ! 
- ! #endif
-   
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 2D
- --- 523,540 ----
-   	switch (fe_t.family)
-   	  {
-   	  case HIERARCHIC:
- ! 	    return FE<1,HIERARCHIC>::inverse_map(elem, p, tolerance);
-   	    
-   	  case LAGRANGE:
- ! 	    return FE<1,LAGRANGE>::inverse_map(elem, p, tolerance);
-   	    
-   	  case MONOMIAL:
- ! 	    return FE<1,MONOMIAL>::inverse_map(elem, p, tolerance);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 2D
- ***************
- *** 699,727 ****
-   	switch (fe_t.family)
-   	  {
-   	  case HIERARCHIC:
- ! 	    return FE<2,HIERARCHIC>::inverse_map(elem, p);
-   	    
-   	  case LAGRANGE:
- ! 	    return FE<2,LAGRANGE>::inverse_map(elem, p);
-   	    
-   	  case MONOMIAL:
- ! 	    return FE<2,MONOMIAL>::inverse_map(elem, p);
- ! 
- ! #ifdef ENABLE_INFINITE_ELEMENTS
- ! 
- ! 	  case INFINITE_MAP:
- ! 	  case JACOBI_20_00:
- ! 	  case JACOBI_30_00:
- ! 	  case LEGENDRE:   
- ! 	  case INF_LAGRANGE:
- ! 	    return InfFE<2,JACOBI_20_00,CARTESIAN>::inverse_map(elem, p);
- ! 
- ! #endif
-   
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 3D
- --- 543,560 ----
-   	switch (fe_t.family)
-   	  {
-   	  case HIERARCHIC:
- ! 	    return FE<2,HIERARCHIC>::inverse_map(elem, p, tolerance);
-   	    
-   	  case LAGRANGE:
- ! 	    return FE<2,LAGRANGE>::inverse_map(elem, p, tolerance);
-   	    
-   	  case MONOMIAL:
- ! 	    return FE<2,MONOMIAL>::inverse_map(elem, p, tolerance);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 3D
- ***************
- *** 730,769 ****
-   	switch (fe_t.family)
-   	  {
-   	  case HIERARCHIC:
- ! 	    return FE<3,HIERARCHIC>::inverse_map(elem, p);
-   	    
-   	  case LAGRANGE:
- ! 	    return FE<3,LAGRANGE>::inverse_map(elem, p);
-   	    
-   	  case MONOMIAL:
- ! 	    return FE<3,MONOMIAL>::inverse_map(elem, p);
- ! 
- ! #ifdef ENABLE_INFINITE_ELEMENTS
- ! 
- ! 	  case INFINITE_MAP:
- ! 	  case JACOBI_20_00:
- ! 	  case JACOBI_30_00:
- ! 	  case LEGENDRE:   
- ! 	  case INF_LAGRANGE:
- ! 	    return InfFE<3,JACOBI_20_00,CARTESIAN>::inverse_map(elem, p);
- ! 
- ! #endif
-   
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-   
-       default:
-         error();
- !     };
-   
-     
-     error();
-     Point pt;
-     return pt;
- ! };
-   
-   
-   
- --- 563,591 ----
-   	switch (fe_t.family)
-   	  {
-   	  case HIERARCHIC:
- ! 	    return FE<3,HIERARCHIC>::inverse_map(elem, p, tolerance);
-   	    
-   	  case LAGRANGE:
- ! 	    return FE<3,LAGRANGE>::inverse_map(elem, p, tolerance);
-   	    
-   	  case MONOMIAL:
- ! 	    return FE<3,MONOMIAL>::inverse_map(elem, p, tolerance);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-   
-       default:
-         error();
- !     }
-   
-     
-     error();
-     Point pt;
-     return pt;
- ! }
-   
-   
-   
- ***************
- *** 772,778 ****
-   				       const Real eps)
-   {
-     return FEBase::on_reference_element(p,t,eps);
- ! };
-   
-   
-   
- --- 594,600 ----
-   				       const Real eps)
-   {
-     return FEBase::on_reference_element(p,t,eps);
- ! }
-   
-   
-   
- ***************
- *** 783,788 ****
- --- 605,617 ----
-   			const unsigned int i,
-   			const Point& p)
-   {
- + #ifdef ENABLE_INFINITE_ELEMENTS
- + 
- +   if ( is_InfFE_elem(t) )
- +     return ifem_shape(dim, fe_t, t, i, p);
- + 
- + #endif
- + 
-     const Order o = fe_t.order;
-     
-     switch (dim)
- ***************
- *** 801,829 ****
-   	  case MONOMIAL:
-   	    return FE<1,MONOMIAL>::shape(t,o,i,p);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	    return InfFE<1,INFINITE_MAP,CARTESIAN>::shape(fe_t, t, i, p);
- - 
- - 	  case JACOBI_20_00:
- - 	    return InfFE<1,JACOBI_20_00,CARTESIAN>::shape(fe_t, t, i, p);
- - 
- - 	  case JACOBI_30_00:
- - 	    return InfFE<1,JACOBI_30_00,CARTESIAN>::shape(fe_t, t, i, p);
- - 
- - 	  case LEGENDRE:   
- - 	    return InfFE<1,LEGENDRE,CARTESIAN>::shape(fe_t, t, i, p);
- - 
- - 	  case INF_LAGRANGE:
- - 	    return InfFE<1,INF_LAGRANGE,CARTESIAN>::shape(fe_t, t, i, p);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 2D
- --- 630,639 ----
-   	  case MONOMIAL:
-   	    return FE<1,MONOMIAL>::shape(t,o,i,p);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 2D
- ***************
- *** 840,868 ****
-   	  case MONOMIAL:
-   	    return FE<2,MONOMIAL>::shape(t,o,i,p);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	    return InfFE<2,INFINITE_MAP,CARTESIAN>::shape(fe_t, t, i, p);
- - 
- - 	  case JACOBI_20_00:
- - 	    return InfFE<2,JACOBI_20_00,CARTESIAN>::shape(fe_t, t, i, p);
- - 
- - 	  case JACOBI_30_00:
- - 	    return InfFE<2,JACOBI_30_00,CARTESIAN>::shape(fe_t, t, i, p);
- - 
- - 	  case LEGENDRE:   
- - 	    return InfFE<2,LEGENDRE,CARTESIAN>::shape(fe_t, t, i, p);
- - 
- - 	  case INF_LAGRANGE:
- - 	    return InfFE<2,INF_LAGRANGE,CARTESIAN>::shape(fe_t, t, i, p);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 3D
- --- 650,659 ----
-   	  case MONOMIAL:
-   	    return FE<2,MONOMIAL>::shape(t,o,i,p);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 3D
- ***************
- *** 879,917 ****
-   	  case MONOMIAL:
-   	    return FE<3,MONOMIAL>::shape(t,o,i,p);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	    return InfFE<3,INFINITE_MAP,CARTESIAN>::shape(fe_t, t, i, p);
- - 
- - 	  case JACOBI_20_00:
- - 	    return InfFE<3,JACOBI_20_00,CARTESIAN>::shape(fe_t, t, i, p);
- - 
- - 	  case JACOBI_30_00:
- - 	    return InfFE<3,JACOBI_30_00,CARTESIAN>::shape(fe_t, t, i, p);
- - 
- - 	  case LEGENDRE:   
- - 	    return InfFE<3,LEGENDRE,CARTESIAN>::shape(fe_t, t, i, p);
- - 
- - 	  case INF_LAGRANGE:
- - 	    return InfFE<3,INF_LAGRANGE,CARTESIAN>::shape(fe_t, t, i, p);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-   
-       default:
-         error();
- !     };
-   
-     
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 670,689 ----
-   	  case MONOMIAL:
-   	    return FE<3,MONOMIAL>::shape(t,o,i,p);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-   
-       default:
-         error();
- !     }
-   
-     
-     error();
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 922,927 ****
- --- 694,706 ----
-   			const unsigned int i,
-   			const Point& p)
-   {
- + #ifdef ENABLE_INFINITE_ELEMENTS
- + 
- +   if ( is_InfFE_elem(elem->type()) )
- +     return ifem_shape(dim, fe_t, elem, i, p);
- + 
- + #endif
- + 
-     const Order o = fe_t.order;
-   
-     switch (dim)
- ***************
- *** 940,968 ****
-   	  case MONOMIAL:
-   	    return FE<1,MONOMIAL>::shape(elem,o,i,p);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	    return InfFE<1,INFINITE_MAP,CARTESIAN>::shape(fe_t, elem, i, p);
- - 
- - 	  case JACOBI_20_00:
- - 	    return InfFE<1,JACOBI_20_00,CARTESIAN>::shape(fe_t, elem, i, p);
- - 
- - 	  case JACOBI_30_00:
- - 	    return InfFE<1,JACOBI_30_00,CARTESIAN>::shape(fe_t, elem, i, p);
- - 
- - 	  case LEGENDRE:   
- - 	    return InfFE<1,LEGENDRE,CARTESIAN>::shape(fe_t, elem, i, p);
- - 
- - 	  case INF_LAGRANGE:
- - 	    return InfFE<1,INF_LAGRANGE,CARTESIAN>::shape(fe_t, elem, i, p);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 2D
- --- 719,728 ----
-   	  case MONOMIAL:
-   	    return FE<1,MONOMIAL>::shape(elem,o,i,p);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 2D
- ***************
- *** 979,1007 ****
-   	  case MONOMIAL:
-   	    return FE<2,MONOMIAL>::shape(elem,o,i,p);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	    return InfFE<2,INFINITE_MAP,CARTESIAN>::shape(fe_t, elem, i, p);
- - 
- - 	  case JACOBI_20_00:
- - 	    return InfFE<2,JACOBI_20_00,CARTESIAN>::shape(fe_t, elem, i, p);
- - 
- - 	  case JACOBI_30_00:
- - 	    return InfFE<2,JACOBI_30_00,CARTESIAN>::shape(fe_t, elem, i, p);
- - 
- - 	  case LEGENDRE:   
- - 	    return InfFE<2,LEGENDRE,CARTESIAN>::shape(fe_t, elem, i, p);
- - 
- - 	  case INF_LAGRANGE:
- - 	    return InfFE<2,INF_LAGRANGE,CARTESIAN>::shape(fe_t, elem, i, p);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // 3D
- --- 739,748 ----
-   	  case MONOMIAL:
-   	    return FE<2,MONOMIAL>::shape(elem,o,i,p);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // 3D
- ***************
- *** 1018,1058 ****
-   	  case MONOMIAL:
-   	    return FE<3,MONOMIAL>::shape(elem,o,i,p);
-   
- - #ifdef ENABLE_INFINITE_ELEMENTS
- - 
- - 	  case INFINITE_MAP:
- - 	    return InfFE<3,INFINITE_MAP,CARTESIAN>::shape(fe_t, elem, i, p);
- - 
- - 	  case JACOBI_20_00:
- - 	    return InfFE<3,JACOBI_20_00,CARTESIAN>::shape(fe_t, elem, i, p);
- - 
- - 	  case JACOBI_30_00:
- - 	    return InfFE<3,JACOBI_30_00,CARTESIAN>::shape(fe_t, elem, i, p);
- - 
- - 	  case LEGENDRE:   
- - 	    return InfFE<3,LEGENDRE,CARTESIAN>::shape(fe_t, elem, i, p);
- - 
- - 	  case INF_LAGRANGE:
- - 	    return InfFE<3,INF_LAGRANGE,CARTESIAN>::shape(fe_t, elem, i, p);
- - 
- - #endif
- - 
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-   
-       default:
-         error();
- !     };
-   
-     
-     error();
-     return 0.;
- ! };
- ! 
- ! 
- ! 
-   
-   
- --- 759,777 ----
-   	  case MONOMIAL:
-   	    return FE<3,MONOMIAL>::shape(elem,o,i,p);
-   
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-   
-       default:
-         error();
- !     }
-   
-     
-     error();
-     return 0.;
- ! }
-   
-   
- Index: src/fe/fe_lagrange.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_lagrange.C,v
- retrieving revision 1.6
- retrieving revision 1.10
- diff -c -r1.6 -r1.10
- *** src/fe/fe_lagrange.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/fe_lagrange.C	20 Feb 2003 04:59:58 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 31,38 ****
-   template <unsigned int Dim, FEFamily T>
-   void FE<Dim,T>::nodal_soln(const Elem* elem,
-   			   const Order order,
- ! 			   const std::vector<Complex>& elem_soln,
- ! 			   std::vector<Complex>&       nodal_soln)
-   {
-   
-     const unsigned int n_nodes = elem->n_nodes();
- --- 31,38 ----
-   template <unsigned int Dim, FEFamily T>
-   void FE<Dim,T>::nodal_soln(const Elem* elem,
-   			   const Order order,
- ! 			   const std::vector<Number>& elem_soln,
- ! 			   std::vector<Number>&       nodal_soln)
-   {
-   
-     const unsigned int n_nodes = elem->n_nodes();
- ***************
- *** 59,65 ****
-   	      nodal_soln[2] = .5*(elem_soln[0] + elem_soln[1]);
-   
-   	      return;
- ! 	    };
-   
-   	    
-   	  case TRI6:
- --- 59,65 ----
-   	      nodal_soln[2] = .5*(elem_soln[0] + elem_soln[1]);
-   
-   	      return;
- ! 	    }
-   
-   	    
-   	  case TRI6:
- ***************
- *** 75,81 ****
-   	      nodal_soln[5] = .5*(elem_soln[2] + elem_soln[0]);
-   
-   	      return;
- ! 	    };
-   	    
-   
-   	  case QUAD8:
- --- 75,81 ----
-   	      nodal_soln[5] = .5*(elem_soln[2] + elem_soln[0]);
-   
-   	      return;
- ! 	    }
-   	    
-   
-   	  case QUAD8:
- ***************
- *** 102,108 ****
-   		nodal_soln[8] = .25*(elem_soln[0] + elem_soln[1] + elem_soln[2] + elem_soln[3]);
-   
-   	      return;
- ! 	    };
-   
-   	    
-   	  case TET10:
- --- 102,108 ----
-   		nodal_soln[8] = .25*(elem_soln[0] + elem_soln[1] + elem_soln[2] + elem_soln[3]);
-   
-   	      return;
- ! 	    }
-   
-   	    
-   	  case TET10:
- ***************
- *** 122,128 ****
-   	      nodal_soln[9] = .5*(elem_soln[3] + elem_soln[2]);
-   	      
-   	      return;
- ! 	    };
-   
-   	    
-   	  case HEX20:
- --- 122,128 ----
-   	      nodal_soln[9] = .5*(elem_soln[3] + elem_soln[2]);
-   	      
-   	      return;
- ! 	    }
-   
-   	    
-   	  case HEX20:
- ***************
- *** 167,176 ****
-   
-   		  nodal_soln[26] = .125*(elem_soln[0] + elem_soln[1] + elem_soln[2] + elem_soln[3] +
-   					 elem_soln[4] + elem_soln[5] + elem_soln[6] + elem_soln[7]);
- ! 		};
-   	      
-   	      return;
- ! 	    };
-   	    
-   	    
-   	  case PRISM18:
- --- 167,176 ----
-   
-   		  nodal_soln[26] = .125*(elem_soln[0] + elem_soln[1] + elem_soln[2] + elem_soln[3] +
-   					 elem_soln[4] + elem_soln[5] + elem_soln[6] + elem_soln[7]);
- ! 		}
-   	      
-   	      return;
- ! 	    }
-   	    
-   	    
-   	  case PRISM18:
- ***************
- *** 178,184 ****
-   	      error();
-   	      
-   	      return;
- ! 	    };
-   
-   
-   	    
- --- 178,184 ----
-   	      error();
-   	      
-   	      return;
- ! 	    }
-   
-   
-   	    
- ***************
- *** 189,197 ****
-   	      nodal_soln = elem_soln;
-   	      
-   	      return;
- ! 	    };
- ! 	  };
- !       };
-   
-   
-         
- --- 189,197 ----
-   	      nodal_soln = elem_soln;
-   	      
-   	      return;
- ! 	    }
- ! 	  }
- !       }
-   
-   
-         
- ***************
- *** 202,214 ****
-   	nodal_soln = elem_soln;
-   	
-   	return;
- !       };      
- !     };
- ! 
- !   // How did we get here?
- !   error();  
- !   return;
- ! };
-   
-   
-   
- --- 202,210 ----
-   	nodal_soln = elem_soln;
-   	
-   	return;
- !       }      
- !     }
- ! }
-   
-   
-   
- ***************
- *** 254,262 ****
-   	    return 5;
-   
-   	  default:
- ! 	    error();	    
- ! 	  };
- !       };
-   
-         
-         // quadratic Lagrange shape functions
- --- 250,265 ----
-   	    return 5;
-   
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for FIRST order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-         
-         // quadratic Lagrange shape functions
- ***************
- *** 289,306 ****
-   	    return 18;
-   
-   	  default:
- ! 	    error();	    
- ! 	  };
- !       };
-   
-         
-       default:
-         error();
- !     };
-     
-     error();  
-     return 0;
- ! };
-   
-   
-   
- --- 292,316 ----
-   	    return 18;
-   
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for SECOND order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-         
-       default:
-         error();
- !     }
-     
-     error();  
-     return 0;
- ! }
-   
-   
-   
- ***************
- *** 328,335 ****
-   		  
-   		default:
-   		  return 0;
- ! 		};
- ! 	    };
-   
-   	  case TRI3:
-   	  case TRI6:
- --- 338,345 ----
-   		  
-   		default:
-   		  return 0;
- ! 		}
- ! 	    }
-   
-   	  case TRI3:
-   	  case TRI6:
- ***************
- *** 343,350 ****
-   		  
-   		default:
-   		  return 0;
- ! 		};
- ! 	    };
-   
-   	  case QUAD4:
-   	  case QUAD8:
- --- 353,360 ----
-   		  
-   		default:
-   		  return 0;
- ! 		}
- ! 	    }
-   
-   	  case QUAD4:
-   	  case QUAD8:
- ***************
- *** 360,367 ****
-   		  
-   		default:
-   		  return 0;
- ! 		};
- ! 	    };
-   
-   
-   	  case TET4:
- --- 370,377 ----
-   		  
-   		default:
-   		  return 0;
- ! 		}
- ! 	    }
-   
-   
-   	  case TET4:
- ***************
- *** 377,384 ****
-   		  
-   		default:
-   		  return 0;
- ! 		};
- ! 	    };
-   		    
-   	  case HEX8:
-   	  case HEX20:
- --- 387,394 ----
-   		  
-   		default:
-   		  return 0;
- ! 		}
- ! 	    }
-   		    
-   	  case HEX8:
-   	  case HEX20:
- ***************
- *** 398,405 ****
-   		  
-   		default:
-   		  return 0;
- ! 		};
- ! 	    };
-   
-   	  case PRISM6:
-   	  case PRISM18:
- --- 408,415 ----
-   		  
-   		default:
-   		  return 0;
- ! 		}
- ! 	    }
-   
-   	  case PRISM6:
-   	  case PRISM18:
- ***************
- *** 416,423 ****
-   		  
-   		default:
-   		  return 0;
- ! 		};
- ! 	    };
-   
-   	  case PYRAMID5:
-   	    {
- --- 426,433 ----
-   		  
-   		default:
-   		  return 0;
- ! 		}
- ! 	    }
-   
-   	  case PYRAMID5:
-   	    {
- ***************
- *** 432,444 ****
-   		  
-   		default:
-   		  return 0;
- ! 		};
- ! 	    };
-   
-   	  default:
- ! 	    error();	    
- ! 	  };
- !       };
-   
-         // quadratic Lagrange shape functions
-       case SECOND:
- --- 442,461 ----
-   		  
-   		default:
-   		  return 0;
- ! 		}
- ! 	    }
-   
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for FIRST order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-         // quadratic Lagrange shape functions
-       case SECOND:
- ***************
- *** 457,474 ****
-   	    return 1;
-   
-   	  default:
- ! 	    error();	    
- ! 	  };
- !       };
-   
-         
-       default:
-         error();
- !     };
-     
-     error();  
-     return 0;
- ! };
-   
-   
-   
- --- 474,498 ----
-   	    return 1;
-   
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for SECOND order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-         
-       default:
-         error();
- !     }
-     
-     error();  
-     return 0;
- ! }
-   
-   
-   
- ***************
- *** 480,486 ****
-     // (just at the nodes)
-     
-     return 0;
- ! };
-   
-   
-   
- --- 504,510 ----
-     // (just at the nodes)
-     
-     return 0;
- ! }
-   
-   
-   
- Index: src/fe/fe_lagrange_shape_1D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_lagrange_shape_1D.C,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** src/fe/fe_lagrange_shape_1D.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/fe_lagrange_shape_1D.C	13 Feb 2003 22:56:10 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 56,63 ****
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  };
- !       };
-   
-         
-   	      
- --- 56,63 ----
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  }
- !       }
-   
-         
-   	      
- ***************
- *** 80,87 ****
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  };
- !       };
-   
-         
-   
- --- 80,87 ----
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  }
- !       }
-   
-         
-   
- ***************
- *** 108,127 ****
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  };
- !       };
-         
-       default:
-         {
-   	std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-   	error();
- !       };
- !     };
-   
-     
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 108,127 ----
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  }
- !       }
-         
-       default:
-         {
-   	std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-   	error();
- !       }
- !     }
-   
-     
-     error();
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 134,140 ****
-     assert (elem != NULL);
-     
-     return FE<1,LAGRANGE>::shape(elem->type(), order, i, p);
- ! };
-   
-   
-   
- --- 134,140 ----
-     assert (elem != NULL);
-     
-     return FE<1,LAGRANGE>::shape(elem->type(), order, i, p);
- ! }
-   
-   
-   
- ***************
- *** 170,177 ****
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  };
- !       };
-   	
-   	      
-         // Lagrange quadratic shape function derivatives
- --- 170,177 ----
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  }
- !       }
-   	
-   	      
-         // Lagrange quadratic shape function derivatives
- ***************
- *** 193,200 ****
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  };
- !       };
-   
-   
-         // Lagrange cubic shape function derivatives
- --- 193,200 ----
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  }
- !       }
-   
-   
-         // Lagrange cubic shape function derivatives
- ***************
- *** 220,239 ****
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  };
- !       };
-   
-         
-       default:
-         {
-   	std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-   	error();
- !       };
- !     };
-   
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 220,239 ----
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  }
- !       }
-   
-         
-       default:
-         {
-   	std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-   	error();
- !       }
- !     }
-   
-     error();
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 248,251 ****
-     
-     return FE<1,LAGRANGE>::shape_deriv(elem->type(),
-   				     order, i, j, p);
- ! };
- --- 248,251 ----
-     
-     return FE<1,LAGRANGE>::shape_deriv(elem->type(),
-   				     order, i, j, p);
- ! }
- Index: src/fe/fe_lagrange_shape_2D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_lagrange_shape_2D.C,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** src/fe/fe_lagrange_shape_2D.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/fe_lagrange_shape_2D.C	13 Feb 2003 22:56:10 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 60,66 ****
-   	      
-   	      return (FE<1,LAGRANGE>::shape(EDGE2, FIRST, i0[i], xi)*
-   		      FE<1,LAGRANGE>::shape(EDGE2, FIRST, i1[i], eta));
- ! 	    };
-   
-   	  case TRI3:
-   	  case TRI6:
- --- 60,66 ----
-   	      
-   	      return (FE<1,LAGRANGE>::shape(EDGE2, FIRST, i0[i], xi)*
-   		      FE<1,LAGRANGE>::shape(EDGE2, FIRST, i1[i], eta));
- ! 	    }
-   
-   	  case TRI3:
-   	  case TRI6:
- ***************
- *** 85,101 ****
-   		default:
-   		  error();
-   		  
- ! 		};
- ! 	    };
-   	    
-   	  default:
-   	    {
-   	      std::cerr << "ERROR: Unsupported 2D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    };
- ! 	  };
- !       };
-         
-   
-         // quadratic Lagrange shape functions
- --- 85,101 ----
-   		default:
-   		  error();
-   		  
- ! 		}
- ! 	    }
-   	    
-   	  default:
-   	    {
-   	      std::cerr << "ERROR: Unsupported 2D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    }
- ! 	  }
- !       }
-         
-   
-         // quadratic Lagrange shape functions
- ***************
- *** 138,145 ****
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   	    
-   	  case QUAD9:
-   	    {
- --- 138,145 ----
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   	    
-   	  case QUAD9:
-   	    {
- ***************
- *** 155,161 ****
-   		  
-   	      return (FE<1,LAGRANGE>::shape(EDGE3, SECOND, i0[i], xi)*
-   		      FE<1,LAGRANGE>::shape(EDGE3, SECOND, i1[i], eta));
- ! 	    };
-   	    
-   	  case TRI6:
-   	    {
- --- 155,161 ----
-   		  
-   	      return (FE<1,LAGRANGE>::shape(EDGE3, SECOND, i0[i], xi)*
-   		      FE<1,LAGRANGE>::shape(EDGE3, SECOND, i1[i], eta));
- ! 	    }
-   	    
-   	  case TRI6:
-   	    {
- ***************
- *** 188,204 ****
-   		default:
-   		  error();
-   	    
- ! 		};
- ! 	    };
-   	    
-   	  default:
-   	    {
-   	      std::cerr << "ERROR: Unsupported 2D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    };
- ! 	  };
- !       };
-   
-   
-         
- --- 188,204 ----
-   		default:
-   		  error();
-   	    
- ! 		}
- ! 	    }
-   	    
-   	  default:
-   	    {
-   	      std::cerr << "ERROR: Unsupported 2D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    }
- ! 	  }
- !       }
-   
-   
-         
- ***************
- *** 208,221 ****
-   	std::cerr << "ERROR: Unsupported 2D FE order!: " << order
-   		  << std::endl;
-   	error();
- !       };
- !     };
-   
-     error();
-     return 0.;
-   
-   #endif
- ! };
-   
-   
-   
- --- 208,221 ----
-   	std::cerr << "ERROR: Unsupported 2D FE order!: " << order
-   		  << std::endl;
-   	error();
- !       }
- !     }
-   
-     error();
-     return 0.;
-   
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 229,235 ****
-   
-     // call the orientation-independent shape functions
-     return FE<2,LAGRANGE>::shape(elem->type(), order, i, p);
- ! };
-   
-   
-   
- --- 229,235 ----
-   
-     // call the orientation-independent shape functions
-     return FE<2,LAGRANGE>::shape(elem->type(), order, i, p);
- ! }
-   
-   
-   
- ***************
- *** 280,287 ****
-   		  
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	  case TRI3:
-   	  case TRI6:
- --- 280,287 ----
-   		  
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	  case TRI3:
-   	  case TRI6:
- ***************
- *** 314,320 ****
-   			
-   		      default:
-   			error();
- ! 		      };
-   		  }
-   		  // d()/deta
-   		case 1:
- --- 314,320 ----
-   			
-   		      default:
-   			error();
- ! 		      }
-   		  }
-   		  // d()/deta
-   		case 1:
- ***************
- *** 333,353 ****
-   		      default:
-   			error();
-   			
- ! 		      };
-   		  }
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   	    
-   	  default:
-   	    {
-   	      std::cerr << "ERROR: Unsupported 2D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    };
- ! 	  };
- !       };
-         
-   
-         // quadratic Lagrange shape functions
- --- 333,353 ----
-   		      default:
-   			error();
-   			
- ! 		      }
-   		  }
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   	    
-   	  default:
-   	    {
-   	      std::cerr << "ERROR: Unsupported 2D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    }
- ! 	  }
- !       }
-         
-   
-         // quadratic Lagrange shape functions
- ***************
- *** 398,404 ****
-   		
-   		    default:
-   		      error();
- ! 		    };
-   	    
-   		  // d/deta
-   		case 1:
- --- 398,404 ----
-   		
-   		    default:
-   		      error();
- ! 		    }
-   	    
-   		  // d/deta
-   		case 1:
- ***************
- *** 434,444 ****
-   		
-   		    default:
-   		      error();
- ! 		    };
-   
-   		default:
-   		  error();
- ! 		};
-   	    }
-   	    
-   	  case QUAD9:
- --- 434,444 ----
-   		
-   		    default:
-   		      error();
- ! 		    }
-   
-   		default:
-   		  error();
- ! 		}
-   	    }
-   	    
-   	  case QUAD9:
- ***************
- *** 467,474 ****
-   		  
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   	    
-   	  case TRI6:
-   	    {
- --- 467,474 ----
-   		  
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   	    
-   	  case TRI6:
-   	    {
- ***************
- *** 512,518 ****
-   		 
-   		      default:
-   			error();
- ! 		      };
-   		  }
-   		      
-   		case 1:
- --- 512,518 ----
-   		 
-   		      default:
-   			error();
- ! 		      }
-   		  }
-   		      
-   		case 1:
- ***************
- *** 539,559 ****
-   		 
-   		      default:
-   			error();
- ! 		      };
-   		  }
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   	    
-   	  default:
-   	    {
-   	      std::cerr << "ERROR: Unsupported 2D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    };
- ! 	  };
- !       };
-   
-         
-         
- --- 539,559 ----
-   		 
-   		      default:
-   			error();
- ! 		      }
-   		  }
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   	    
-   	  default:
-   	    {
-   	      std::cerr << "ERROR: Unsupported 2D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    }
- ! 	  }
- !       }
-   
-         
-         
- ***************
- *** 564,577 ****
-   		  << std::endl;
-   	error();
-         }
- !     };
-   
-   
-     error();
-     return 0.;
-   
-   #endif
- ! };
-   
-   
-   
- --- 564,577 ----
-   		  << std::endl;
-   	error();
-         }
- !     }
-   
-   
-     error();
-     return 0.;
-   
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 587,591 ****
-   
-     // call the orientation-independent shape functions
-     return FE<2,LAGRANGE>::shape_deriv(elem->type(), order, i, j, p);
- ! };
-   
- --- 587,591 ----
-   
-     // call the orientation-independent shape functions
-     return FE<2,LAGRANGE>::shape_deriv(elem->type(), order, i, j, p);
- ! }
-   
- Index: src/fe/fe_lagrange_shape_3D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_lagrange_shape_3D.C,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** src/fe/fe_lagrange_shape_3D.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/fe_lagrange_shape_3D.C	13 Feb 2003 22:56:10 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 65,71 ****
-   	      return (FE<1,LAGRANGE>::shape(EDGE2, FIRST, i0[i], xi)*
-   		      FE<1,LAGRANGE>::shape(EDGE2, FIRST, i1[i], eta)*
-   		      FE<1,LAGRANGE>::shape(EDGE2, FIRST, i2[i], zeta));
- ! 	    };
-   	    
-   	    // linear tetrahedral shape functions	    
-   	  case TET4:
- --- 65,71 ----
-   	      return (FE<1,LAGRANGE>::shape(EDGE2, FIRST, i0[i], xi)*
-   		      FE<1,LAGRANGE>::shape(EDGE2, FIRST, i1[i], eta)*
-   		      FE<1,LAGRANGE>::shape(EDGE2, FIRST, i2[i], zeta));
- ! 	    }
-   	    
-   	    // linear tetrahedral shape functions	    
-   	  case TET4:
- ***************
- *** 95,102 ****
-   	   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   	    
-   	    // linear prism shape functions	    
-   	  case PRISM6:
- --- 95,102 ----
-   	   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   	    
-   	    // linear prism shape functions	    
-   	  case PRISM6:
- ***************
- *** 138,145 ****
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    // linear pyramid shape functions
-   	  case PYRAMID5:
- --- 138,145 ----
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    // linear pyramid shape functions
-   	  case PYRAMID5:
- ***************
- *** 170,177 ****
-   	    
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   	    
-   	    
-   	  default:
- --- 170,177 ----
-   	    
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   	    
-   	    
-   	  default:
- ***************
- *** 179,187 ****
-   	      std::cerr << "ERROR: Unsupported 3D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    };
- ! 	  };
- !       };
-   
-         
-         // quadratic Lagrange shape functions
- --- 179,187 ----
-   	      std::cerr << "ERROR: Unsupported 3D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    }
- ! 	  }
- !       }
-   
-         
-         // quadratic Lagrange shape functions
- ***************
- *** 269,276 ****
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    // triquadraic hexahedral shape funcions	    
-   	  case HEX27:
- --- 269,276 ----
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    // triquadraic hexahedral shape funcions	    
-   	  case HEX27:
- ***************
- *** 293,299 ****
-   	      return (FE<1,LAGRANGE>::shape(EDGE3, SECOND, i0[i], xi)*
-   		      FE<1,LAGRANGE>::shape(EDGE3, SECOND, i1[i], eta)*
-   		      FE<1,LAGRANGE>::shape(EDGE3, SECOND, i2[i], zeta));
- ! 	    };
-   	    
-   	    // quadratic tetrahedral shape functions	    
-   	  case TET10:
- --- 293,299 ----
-   	      return (FE<1,LAGRANGE>::shape(EDGE3, SECOND, i0[i], xi)*
-   		      FE<1,LAGRANGE>::shape(EDGE3, SECOND, i1[i], eta)*
-   		      FE<1,LAGRANGE>::shape(EDGE3, SECOND, i2[i], zeta));
- ! 	    }
-   	    
-   	    // quadratic tetrahedral shape functions	    
-   	  case TET10:
- ***************
- *** 340,347 ****
-   	   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   	    
-   	    // quadradic prism shape functions	    
-   	  case PRISM18:
- --- 340,347 ----
-   	   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   	    
-   	    // quadradic prism shape functions	    
-   	  case PRISM18:
- ***************
- *** 355,361 ****
-   	      Point p1d(p(2));
-   	
-   	      error();
- ! 	    };
-   	    
-   	    
-   	  default:
- --- 355,361 ----
-   	      Point p1d(p(2));
-   	
-   	      error();
- ! 	    }
-   	    
-   	    
-   	  default:
- ***************
- *** 363,371 ****
-   	      std::cerr << "ERROR: Unsupported 3D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    };
- ! 	  };
- !       };
-               
-         
-         // unsupported order
- --- 363,371 ----
-   	      std::cerr << "ERROR: Unsupported 3D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    }
- ! 	  }
- !       }
-               
-         
-         // unsupported order
- ***************
- *** 375,387 ****
-   		  << std::endl;
-   	error();
-         }
- !     };
-   
-   #endif
-     
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 375,387 ----
-   		  << std::endl;
-   	error();
-         }
- !     }
-   
-   #endif
-     
-     error();
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 395,401 ****
-         
-     // call the orientation-independent shape functions
-     return FE<3,LAGRANGE>::shape(elem->type(), order, i, p);
- ! };
-   
-   
-   
- --- 395,401 ----
-         
-     // call the orientation-independent shape functions
-     return FE<3,LAGRANGE>::shape(elem->type(), order, i, p);
- ! }
-   
-   
-   
- ***************
- *** 455,462 ****
-   		  {
-   		    error();
-   		  }
- ! 		};
- ! 	    };
-   	    
-   	    // linear tetrahedral shape functions	    
-   	  case TET4:
- --- 455,462 ----
-   		  {
-   		    error();
-   		  }
- ! 		}
- ! 	    }
-   	    
-   	    // linear tetrahedral shape functions	    
-   	  case TET4:
- ***************
- *** 501,508 ****
-   		 
-   		      default:
-   			error();
- ! 		      };
- ! 		  };
-   	    
-   		  // d()/deta
-   		case 1:
- --- 501,508 ----
-   		 
-   		      default:
-   			error();
- ! 		      }
- ! 		  }
-   	    
-   		  // d()/deta
-   		case 1:
- ***************
- *** 523,530 ****
-   		 
-   		      default:
-   			error();
- ! 		      };
- ! 		  };
-   	    
-   		  // d()/dzeta
-   		case 2:
- --- 523,530 ----
-   		 
-   		      default:
-   			error();
- ! 		      }
- ! 		  }
-   	    
-   		  // d()/dzeta
-   		case 2:
- ***************
- *** 545,554 ****
-   		 
-   		      default:
-   			error();
- ! 		      };
- ! 		  };
- ! 		};
- ! 	    };
-   	    
-   	    // linear prism shape functions	    
-   	  case PRISM6:
- --- 545,554 ----
-   		 
-   		      default:
-   			error();
- ! 		      }
- ! 		  }
- ! 		}
- ! 	    }
-   	    
-   	    // linear prism shape functions	    
-   	  case PRISM6:
- ***************
- *** 594,600 ****
-   			return (FE<2,LAGRANGE>::shape_deriv(TRI3,  FIRST, 2, 0, p2d)*
-   				FE<1,LAGRANGE>::shape      (EDGE2, FIRST, 1, p1d));
-   		 	 		      			  
- ! 		      };	 	         		  
-   		  }		 	         		  
-   		      	 		      			  
-   		  // d()/deta	 	         		  
- --- 594,600 ----
-   			return (FE<2,LAGRANGE>::shape_deriv(TRI3,  FIRST, 2, 0, p2d)*
-   				FE<1,LAGRANGE>::shape      (EDGE2, FIRST, 1, p1d));
-   		 	 		      			  
- ! 		      }	 	         		  
-   		  }		 	         		  
-   		      	 		      			  
-   		  // d()/deta	 	         		  
- ***************
- *** 626,632 ****
-   			return (FE<2,LAGRANGE>::shape_deriv(TRI3,  FIRST, 2, 1, p2d)*
-   				FE<1,LAGRANGE>::shape      (EDGE2, FIRST, 1, p1d));
-   		 	 
- ! 		      };	 
-   		  }		 
-   	    		 
-   		  // d()/dzeta 
- --- 626,632 ----
-   			return (FE<2,LAGRANGE>::shape_deriv(TRI3,  FIRST, 2, 1, p2d)*
-   				FE<1,LAGRANGE>::shape      (EDGE2, FIRST, 1, p1d));
-   		 	 
- ! 		      }	 
-   		  }		 
-   	    		 
-   		  // d()/dzeta 
- ***************
- *** 657,669 ****
-   		      case 5:	          			        
-   			return (FE<2,LAGRANGE>::shape      (TRI3,  FIRST, 2, p2d)*
-   				FE<1,LAGRANGE>::shape_deriv(EDGE2, FIRST, 1, 0, p1d));
- ! 		      };
-   		  }
-   	    
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    // linear pyramid shape functions
-   	  case PYRAMID5:
- --- 657,669 ----
-   		      case 5:	          			        
-   			return (FE<2,LAGRANGE>::shape      (TRI3,  FIRST, 2, p2d)*
-   				FE<1,LAGRANGE>::shape_deriv(EDGE2, FIRST, 1, 0, p1d));
- ! 		      }
-   		  }
-   	    
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    // linear pyramid shape functions
-   	  case PYRAMID5:
- ***************
- *** 698,704 ****
-   		
-   		    default:
-   		      error();
- ! 		    };
-   
-   
-   		  // d/deta
- --- 698,704 ----
-   		
-   		    default:
-   		      error();
- ! 		    }
-   
-   
-   		  // d/deta
- ***************
- *** 722,728 ****
-   	    
-   		    default:
-   		      error();
- ! 		    };
-   
-   
-   		  // d/dzeta
- --- 722,728 ----
-   	    
-   		    default:
-   		      error();
- ! 		    }
-   
-   
-   		  // d/dzeta
- ***************
- *** 777,789 ****
-   		
-   		    default:
-   		      error();
- ! 		    };
-   	    
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   	    
-   	    
-   	  default:
- --- 777,789 ----
-   		
-   		    default:
-   		      error();
- ! 		    }
-   	    
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   	    
-   	    
-   	  default:
- ***************
- *** 791,799 ****
-   	      std::cerr << "ERROR: Unsupported 3D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    };
- ! 	  };
- !       };
-   
-         
-         // quadratic Lagrange shape functions
- --- 791,799 ----
-   	      std::cerr << "ERROR: Unsupported 3D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    }
- ! 	  }
- !       }
-   
-         
-         // quadratic Lagrange shape functions
- ***************
- *** 897,903 ****
-   		
-   		    default:
-   		      error();
- ! 		    };
-   
-   
-   		  // d/dy*dy/deta
- --- 897,903 ----
-   		
-   		    default:
-   		      error();
- ! 		    }
-   
-   
-   		  // d/dy*dy/deta
- ***************
- *** 974,980 ****
-   		
-   		    default:
-   		      error();
- ! 		    };
-   
-   
-   		  // d/dz*dz/dzeta
- --- 974,980 ----
-   		
-   		    default:
-   		      error();
- ! 		    }
-   
-   
-   		  // d/dz*dz/dzeta
- ***************
- *** 1051,1059 ****
-   		
-   		    default:
-   		      error();
- ! 		    };
- ! 		};
- ! 	    };
-   
-   	    // triquadraic hexahedral shape funcions	    
-   	  case HEX27:
- --- 1051,1059 ----
-   		
-   		    default:
-   		      error();
- ! 		    }
- ! 		}
- ! 	    }
-   
-   	    // triquadraic hexahedral shape funcions	    
-   	  case HEX27:
- ***************
- *** 1094,1101 ****
-   		  {
-   		    error();
-   		  }
- ! 		};
- ! 	    };
-   	    
-   	    // quadratic tetrahedral shape functions	    
-   	  case TET10:
- --- 1094,1101 ----
-   		  {
-   		    error();
-   		  }
- ! 		}
- ! 	    }
-   	    
-   	    // quadratic tetrahedral shape functions	    
-   	  case TET10:
- ***************
- *** 1162,1169 ****
-   		 
-   		      default:
-   			error();
- ! 		      };
- ! 		  };
-   		      
-   		  // d()/deta
-   		case 1:
- --- 1162,1169 ----
-   		 
-   		      default:
-   			error();
- ! 		      }
- ! 		  }
-   		      
-   		  // d()/deta
-   		case 1:
- ***************
- *** 1202,1209 ****
-   		 
-   		      default:
-   			error();
- ! 		      };
- ! 		  };
-   		      
-   		  // d()/dzeta
-   		case 2:
- --- 1202,1209 ----
-   		 
-   		      default:
-   			error();
- ! 		      }
- ! 		  }
-   		      
-   		  // d()/dzeta
-   		case 2:
- ***************
- *** 1242,1254 ****
-   		 
-   		      default:
-   			error();
- ! 		      };
- ! 		  };
-   
-   		default:
-   		  error();
- ! 		};
- ! 	    };
-   	    
-   	    // quadradic prism shape functions	    
-   	  case PRISM18:
- --- 1242,1254 ----
-   		 
-   		      default:
-   			error();
- ! 		      }
- ! 		  }
-   
-   		default:
-   		  error();
- ! 		}
- ! 	    }
-   	    
-   	    // quadradic prism shape functions	    
-   	  case PRISM18:
- ***************
- *** 1263,1269 ****
-   	
-   	
-   	      error();
- ! 	    };
-   	    
-   	    
-   	  default:
- --- 1263,1269 ----
-   	
-   	
-   	      error();
- ! 	    }
-   	    
-   	    
-   	  default:
- ***************
- *** 1271,1279 ****
-   	      std::cerr << "ERROR: Unsupported 3D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    };
- ! 	  };
- !       };
-         
-         
-         // unsupported order
- --- 1271,1279 ----
-   	      std::cerr << "ERROR: Unsupported 3D element type!: " << type
-   			<< std::endl;
-   	      error();
- ! 	    }
- ! 	  }
- !       }
-         
-         
-         // unsupported order
- ***************
- *** 1283,1295 ****
-   		  << std::endl;
-   	error();
-         }
- !     };
-   
-   #endif
-     
-     error();
-     return 0.;  
- ! };
-   
-   
-   
- --- 1283,1295 ----
-   		  << std::endl;
-   	error();
-         }
- !     }
-   
-   #endif
-     
-     error();
-     return 0.;  
- ! }
-   
-   
-   
- ***************
- *** 1304,1307 ****
-         
-     // call the orientation-independent shape function derivatives
-     return FE<3,LAGRANGE>::shape_deriv(elem->type(), order, i, j, p);
- ! };
- --- 1304,1307 ----
-         
-     // call the orientation-independent shape function derivatives
-     return FE<3,LAGRANGE>::shape_deriv(elem->type(), order, i, j, p);
- ! }
- Index: src/fe/fe_map.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_map.C,v
- retrieving revision 1.6
- retrieving revision 1.12
- diff -c -r1.6 -r1.12
- *** src/fe/fe_map.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/fe_map.C	13 Feb 2003 22:56:10 -0000	1.12
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 35,41 ****
-   			 const Elem* elem)
-   {
-     assert (qrule != NULL);
- !   assert (elem != NULL);
-     
-     const unsigned int        n_qp = qrule->n_points();
-     const std::vector<Real> &   qw = qrule->get_weights();
- --- 35,41 ----
-   			 const Elem* elem)
-   {
-     assert (qrule != NULL);
- !   assert (elem  != NULL);
-     
-     const unsigned int        n_qp = qrule->n_points();
-     const std::vector<Real> &   qw = qrule->get_weights();
- ***************
- *** 51,57 ****
-         {
-   	//------------------------------------------------------------------
-   	// Compute the values at the quadrature points,
- ! 	// the Jacobian at the quadrature points, etc...
-   	
-   	// Resize the vectors to hold data at the quadrature points
-   	{  
- --- 51,57 ----
-         {
-   	//------------------------------------------------------------------
-   	// Compute the values at the quadrature points,
- ! 	// the Jacobian at the quadrature points
-   	
-   	// Resize the vectors to hold data at the quadrature points
-   	{  
- ***************
- *** 59,84 ****
-   	  dxyzdxi_map.resize(n_qp);
-   	  dxidx_map.resize(n_qp);
-   	  
- - 	  jac.resize(n_qp);
-   	  JxW.resize(n_qp);
- ! 	};
-   	
-   	// Clear the entities that will be summed
-   	for (unsigned int p=0; p<n_qp; p++)
-   	  {
- ! 	    xyz[p].clear();
- ! 	    dxyzdxi_map[p].clear();
- ! 	  };
-   	
-   	
-   	// compute x, dxdxi at the quadrature points    
-   	for (unsigned int i=0; i<phi_map.size(); i++) // sum over the nodes
- ! 	  for (unsigned int p=0; p<n_qp; p++) // for each quadrature point...
- ! 	    {	  
- ! 	      xyz[p]         += elem->point(i)*phi_map[i][p];
- ! 	      
- ! 	      dxyzdxi_map[p] += elem->point(i)*dphidxi_map[i][p];
- ! 	    };
-   
-   	/*
-           // Test the inverse map
- --- 59,88 ----
-   	  dxyzdxi_map.resize(n_qp);
-   	  dxidx_map.resize(n_qp);
-   	  
-   	  JxW.resize(n_qp);
- ! 	}
-   	
-   	// Clear the entities that will be summed
-   	for (unsigned int p=0; p<n_qp; p++)
-   	  {
- ! 	    xyz[p].zero();
- ! 	    dxyzdxi_map[p].zero();
- ! 	  }
-   	
-   	
-   	// compute x, dxdxi at the quadrature points    
-   	for (unsigned int i=0; i<phi_map.size(); i++) // sum over the nodes
- ! 	  {
- ! 	    // Reference to the point, helps eliminate
- ! 	    // exessive temporaries in the inner loop
- ! 	    const Point& elem_point = elem->point(i);
- ! 	    
- ! 	    for (unsigned int p=0; p<n_qp; p++) // for each quadrature point
- ! 	      {	  
- ! 		xyz[p].add_scaled        (elem_point, phi_map[i][p]    );
- ! 		dxyzdxi_map[p].add_scaled(elem_point, dphidxi_map[i][p]);
- ! 	      }
- ! 	  }
-   
-   	/*
-           // Test the inverse map
- ***************
- *** 90,122 ****
-   	qrule->qp(p).print();
-   	std::cout << "inv_map = ";
-   	p_inv.print();
- ! 	};
-   	*/
-   
-   	// compute the jacobian at the quadrature points
-   	for (unsigned int p=0; p<n_qp; p++)
-   	  {
- ! 	    jac[p] = dxdxi_map(p);
-   	    
- ! 	    if (jac[p] <= 0.)
-   	      {
-   		std::cerr << "ERROR: negative Jacobian: "
- ! 			  << jac[p]
-   			  << std::endl;
-   		error();
- ! 	      };
-   	    
-   	    assert (dxdxi_map(p) != 0.);
-   	    
-   	    dxidx_map[p] = 1./dxdxi_map(p);
-   	    
- ! 	    JxW[p] = jac[p]*qw[p];
- ! 	  };
-   
-   	// done computing the map
-   	return;
- !       };
- ! 
-   
-         
-         //--------------------------------------------------------------------
- --- 94,132 ----
-   	qrule->qp(p).print();
-   	std::cout << "inv_map = ";
-   	p_inv.print();
- ! 	}
-   	*/
-   
-   	// compute the jacobian at the quadrature points
-   	for (unsigned int p=0; p<n_qp; p++)
-   	  {
- ! 	    // Symbolically, the matrix determinant is
- ! 	    //
- ! 	    // jac = | dx/dxi | = dx/dxi
- ! 	    //         
- ! 	    
- ! 	    // Compute the Jacobian.  This assumes the
- ! 	    // 1D edge lives in 1D space.
- ! 	    const Real jac = dxdxi_map(p);
-   	    
- ! 	    if (jac <= 0.)
-   	      {
-   		std::cerr << "ERROR: negative Jacobian: "
- ! 			  << jac
-   			  << std::endl;
-   		error();
- ! 	      }
-   	    
-   	    assert (dxdxi_map(p) != 0.);
-   	    
-   	    dxidx_map[p] = 1./dxdxi_map(p);
-   	    
- ! 	    JxW[p] = jac*qw[p];
- ! 	  }
-   
-   	// done computing the map
-   	return;
- !       }
-   
-         
-         //--------------------------------------------------------------------
- ***************
- *** 125,131 ****
-         {
-   	//------------------------------------------------------------------
-   	// Compute the (x,y) values at the quadrature points,
- ! 	// the Jacobian at the quadrature points, etc..
-   
-   	// Resize the vectors to hold data at the quadrature points
-   	{  
- --- 135,141 ----
-         {
-   	//------------------------------------------------------------------
-   	// Compute the (x,y) values at the quadrature points,
- ! 	// the Jacobian at the quadrature points
-   
-   	// Resize the vectors to hold data at the quadrature points
-   	{  
- ***************
- *** 137,209 ****
-   	  detadx_map.resize(n_qp);
-   	  detady_map.resize(n_qp);
-   	  
- - 	  jac.resize(n_qp);
-   	  JxW.resize(n_qp);
- ! 	};
-   	
-   	// Clear the entities that will be summed
-   	for (unsigned int p=0; p<n_qp; p++)
-   	  {
- ! 	    xyz[p].clear();
- ! 	    dxyzdxi_map[p].clear();
- ! 	    dxyzdeta_map[p].clear();
- ! 	  };
-   	
-   	
- ! 	// compute (x,y), dxdxi, dydxi, dxdeta, dydeta at the quadrature points    
-   	for (unsigned int i=0; i<phi_map.size(); i++) // sum over the nodes
- ! 	  for (unsigned int p=0; p<n_qp; p++) // for each quadrature point...
- ! 	    {	  
- ! 	      xyz[p]          += elem->point(i)*phi_map[i][p];
- ! 	      
- ! 	      dxyzdxi_map[p]  += elem->point(i)*dphidxi_map[i][p];
- ! 	      
- ! 	      dxyzdeta_map[p] += elem->point(i)*dphideta_map[i][p];
- ! 	    };
-   	
-   	/*
-           // Test the inverse map
-   	for (unsigned int p=0; p<n_qp; p++)
-   	{
-   	const Point p_inv = inverse_map (elem, xyz[p]);
- ! 	    
-   	std::cout << "qp[p]   = ";
-   	qrule->qp(p).print();
-   	std::cout << "inv_map = ";
-   	p_inv.print();
- ! 	};
-   	*/
-   	
-   	// compute the jacobian at the quadrature points
-   	for (unsigned int p=0; p<n_qp; p++)
-   	  {
- ! 	    jac[p] = (dxdxi_map(p)*dydeta_map(p) - dxdeta_map(p)*dydxi_map(p));
-   	    
- ! 	    if (jac[p] <= 0.)
-   	      {
-   		std::cerr << "ERROR: negative Jacobian: "
- ! 			  << jac[p]
-   			  << std::endl;
-   		error();
- ! 	      };
-   	    
- ! 	    JxW[p] = jac[p]*qw[p];
- ! 	  };
- ! 	
- ! 	
- ! 	// Compute the shape function derivatives wrt x,y at the
- ! 	// quadrature points
- ! 	for (unsigned int p=0; p<n_qp; p++)
- ! 	  {
- ! 	    dxidx_map[p]  =  (dydeta_map(p))/jac[p];  // dxi/dx  =  (1/J)*dy/deta
- ! 	    dxidy_map[p]  = -(dxdeta_map(p))/jac[p];  // dxi/dy  = -(1/J)*dx/deta
- ! 	    detadx_map[p] = -(dydxi_map(p))/jac[p];   // deta/dx = -(1/J)*dy/dxi;
- ! 	    detady_map[p] =  (dxdxi_map(p))/jac[p];   // deta/dy =  (1/J)*dx/dxi;
- ! 	  };        
- ! 
-   	// done computing the map
-   	return;
- !       };
-   
-   
-         
- --- 147,234 ----
-   	  detadx_map.resize(n_qp);
-   	  detady_map.resize(n_qp);
-   	  
-   	  JxW.resize(n_qp);
- ! 	}
-   	
-   	// Clear the entities that will be summed
-   	for (unsigned int p=0; p<n_qp; p++)
-   	  {
- ! 	    xyz[p].zero();
- ! 	    dxyzdxi_map[p].zero();
- ! 	    dxyzdeta_map[p].zero();
- ! 	  }
-   	
-   	
- ! 	// compute (x,y), dxdxi, dydxi, dxdeta, dydeta at the quadrature points
-   	for (unsigned int i=0; i<phi_map.size(); i++) // sum over the nodes
- ! 	  {
- ! 	    // Reference to the point, helps eliminate
- ! 	    // exessive temporaries in the inner loop
- ! 	    const Point& elem_point = elem->point(i);
- ! 	    
- ! 	    for (unsigned int p=0; p<n_qp; p++) // for each quadrature point
- ! 	      {	  
- ! 		xyz[p].add_scaled          (elem_point, phi_map[i][p]     );
- ! 		dxyzdxi_map[p].add_scaled  (elem_point, dphidxi_map[i][p] );
- ! 		dxyzdeta_map[p].add_scaled (elem_point, dphideta_map[i][p]);
- ! 	      }
- ! 	  }
-   	
-   	/*
-           // Test the inverse map
-   	for (unsigned int p=0; p<n_qp; p++)
-   	{
-   	const Point p_inv = inverse_map (elem, xyz[p]);
- ! 	
-   	std::cout << "qp[p]   = ";
-   	qrule->qp(p).print();
-   	std::cout << "inv_map = ";
-   	p_inv.print();
- ! 	}
-   	*/
-   	
-   	// compute the jacobian at the quadrature points
-   	for (unsigned int p=0; p<n_qp; p++)
-   	  {
- ! 	    const Real
- ! 	      dx_dxi  = dxdxi_map(p),  dy_dxi  = dydxi_map(p),
- ! 	      dx_deta = dxdeta_map(p), dy_deta = dydeta_map(p);
- ! 	    
- ! 	    // Symbolically, the matrix determinant is
- ! 	    //
- ! 	    //         | dx/dxi   dy/dxi  |
- ! 	    // jac =   | dx/deta  dy/deta |
- ! 	    //         
- ! 	    // jac = dx/dxi*dy/deta - dx/deta*dy/dxi 
- ! 	    
- ! 	    // Compute the Jacobian.  This assumes the 2D face
- ! 	    // lives in 2D space
- ! 	    const Real jac = (dx_dxi*dy_deta - dx_deta*dy_dxi);	    
-   	    
- ! 	    if (jac <= 0.)
-   	      {
-   		std::cerr << "ERROR: negative Jacobian: "
- ! 			  << jac
-   			  << std::endl;
-   		error();
- ! 	      }
-   	    
- ! 	    JxW[p] = jac*qw[p];
- ! 	    
- ! 	    // Compute the shape function derivatives wrt x,y at the
- ! 	    // quadrature points
- ! 	    const Real
- ! 	      inv_jac = 1./jac;
- ! 	    
- ! 	    dxidx_map[p]  =  dy_deta*inv_jac; //dxi/dx  =  (1/J)*dy/deta
- ! 	    dxidy_map[p]  = -dx_deta*inv_jac; //dxi/dy  = -(1/J)*dx/deta
- ! 	    detadx_map[p] = -dy_dxi* inv_jac; //deta/dx = -(1/J)*dy/dxi
- ! 	    detady_map[p] =  dx_dxi* inv_jac; //deta/dy =  (1/J)*dx/dxi
- ! 	  }
- !        
-   	// done computing the map
-   	return;
- !       }
-   
-   
-         
- ***************
- *** 213,219 ****
-         {
-   	//------------------------------------------------------------------
-   	// Compute the (x,y,z) values at the quadrature points,
- ! 	// the Jacobian at the quadrature points, etc..
-   
-   	// Resize the vectors to hold data at the quadrature points
-   	{  
- --- 238,244 ----
-         {
-   	//------------------------------------------------------------------
-   	// Compute the (x,y,z) values at the quadrature points,
- ! 	// the Jacobian at the quadrature points
-   
-   	// Resize the vectors to hold data at the quadrature points
-   	{  
- ***************
- *** 231,262 ****
-   	  dzetady_map.resize   (n_qp);
-   	  dzetadz_map.resize   (n_qp);
-   	  
- - 	  jac.resize (n_qp);
-   	  JxW.resize (n_qp);
- ! 	};
-       
-   	// Clear the entities that will be summed
-   	for (unsigned int p=0; p<n_qp; p++)
-   	  {
- ! 	    xyz[p].clear           ();
- ! 	    dxyzdxi_map[p].clear   ();
- ! 	    dxyzdeta_map[p].clear  ();
- ! 	    dxyzdzeta_map[p].clear ();
- ! 	  };
-   	
-   	
- ! 	// compute (x,y,z), dxdxi, dydxi, dxdeta, dydeta at the quadrature points    
-   	for (unsigned int i=0; i<phi_map.size(); i++) // sum over the nodes
- ! 	  for (unsigned int p=0; p<n_qp; p++) // for each quadrature point...
- ! 	    {	  
- ! 	      xyz[p]           += elem->point(i)*phi_map[i][p];
- ! 	      
- ! 	      dxyzdxi_map[p]   += elem->point(i)*dphidxi_map[i][p];
- ! 	      
- ! 	      dxyzdeta_map[p]  += elem->point(i)*dphideta_map[i][p];
- ! 	      
- ! 	      dxyzdzeta_map[p] += elem->point(i)*dphidzeta_map[i][p];
- ! 	    };
-   	
-   	/*
-           // Test the inverse map
- --- 256,292 ----
-   	  dzetady_map.resize   (n_qp);
-   	  dzetadz_map.resize   (n_qp);
-   	  
-   	  JxW.resize (n_qp);
- ! 	}
-       
-   	// Clear the entities that will be summed
-   	for (unsigned int p=0; p<n_qp; p++)
-   	  {
- ! 	    xyz[p].zero           ();
- ! 	    dxyzdxi_map[p].zero   ();
- ! 	    dxyzdeta_map[p].zero  ();
- ! 	    dxyzdzeta_map[p].zero ();
- ! 	  }
-   	
-   	
- ! 	// compute (x,y,z), dxdxi,   dydxi,   dzdxi,
- ! 	//                  dxdeta,  dydeta,  dzdeta,
- ! 	//                  dxdzeta, dydzeta, dzdzeta
- ! 	// at the quadrature points    
-   	for (unsigned int i=0; i<phi_map.size(); i++) // sum over the nodes
- ! 	  {
- ! 	    // Reference to the point, helps eliminate
- ! 	    // exessive temporaries in the inner loop
- ! 	    const Point& elem_point = elem->point(i);
- ! 	    
- ! 	    for (unsigned int p=0; p<n_qp; p++) // for each quadrature point
- ! 	      {	  
- ! 		xyz[p].add_scaled           (elem_point, phi_map[i][p]      );
- ! 		dxyzdxi_map[p].add_scaled   (elem_point, dphidxi_map[i][p]  );
- ! 		dxyzdeta_map[p].add_scaled  (elem_point, dphideta_map[i][p] );
- ! 		dxyzdzeta_map[p].add_scaled (elem_point, dphidzeta_map[i][p]);
- ! 	      }
- ! 	  }
-   	
-   	/*
-           // Test the inverse map
- ***************
- *** 268,330 ****
-   	qrule->qp(p).print();
-   	std::cout << "inv_map = ";
-   	p_inv.print();
- ! 	};
-   	*/
-   	  
-   	// compute the jacobian at the quadrature points
-   	for (unsigned int p=0; p<n_qp; p++)
-   	  {
-   	    // jac = dx/dxi*(dy/deta*dz/dzeta - dz/deta*dy/dzeta) +
-   	    //       dy/dxi*(dz/deta*dx/dzeta - dx/deta*dz/dzeta) +
-   	    //       dz/dxi*(dx/deta*dy/dzeta - dy/deta*dx/dzeta)
-   	    
- ! 	    jac[p] = (dxdxi_map(p)*(dydeta_map(p)*dzdzeta_map(p) - dzdeta_map(p)*dydzeta_map(p))  +
- ! 		      dydxi_map(p)*(dzdeta_map(p)*dxdzeta_map(p) - dxdeta_map(p)*dzdzeta_map(p))  +
- ! 		      dzdxi_map(p)*(dxdeta_map(p)*dydzeta_map(p) - dydeta_map(p)*dxdzeta_map(p)));
-   	    
- ! 	    if (jac[p] <= 0.)
-   	      {
-   		std::cerr << "ERROR: negative Jacobian: "
- ! 			  << jac[p]
-   			  << std::endl;
-   		error();
- ! 	      };
- ! 
- ! 	    JxW[p] = jac[p]*qw[p];
- ! 	  };
- ! 
- ! 
- ! 	// Compute the shape function derivatives wrt x,y at the
- ! 	// quadrature points
- ! 	for (unsigned int p=0; p<n_qp; p++)
- ! 	  {
- ! 	    dxidx_map[p] = (dydeta_map(p)*dzdzeta_map(p) - dzdeta_map(p)*dydzeta_map(p))/jac[p];
- ! 	    dxidy_map[p] = (dzdeta_map(p)*dxdzeta_map(p) - dxdeta_map(p)*dzdzeta_map(p))/jac[p];
- ! 	    dxidz_map[p] = (dxdeta_map(p)*dydzeta_map(p) - dydeta_map(p)*dxdzeta_map(p))/jac[p];
- ! 	    
- ! 	    detadx_map[p] = (dzdxi_map(p)*dydzeta_map(p) - dydxi_map(p)*dzdzeta_map(p))/jac[p];
- ! 	    detady_map[p] = (dxdxi_map(p)*dzdzeta_map(p) - dzdxi_map(p)*dxdzeta_map(p))/jac[p];
- ! 	    detadz_map[p] = (dydxi_map(p)*dxdzeta_map(p) - dxdxi_map(p)*dydzeta_map(p))/jac[p];
- ! 	    
- ! 	    dzetadx_map[p] = (dydxi_map(p)*dzdeta_map(p) - dzdxi_map(p)*dydeta_map(p))/jac[p];
- ! 	    dzetady_map[p] = (dzdxi_map(p)*dxdeta_map(p) - dxdxi_map(p)*dzdeta_map(p))/jac[p];
- ! 	    dzetadz_map[p] = (dxdxi_map(p)*dydeta_map(p) - dydxi_map(p)*dxdeta_map(p))/jac[p];
- ! 	  };        
-   
-   	// done computing the map
-   	return;
- !       };
-   
-   
-   
-       default:
-         error();
- !     };
- ! 
- !   error();
- ! 
- !   return;      
- ! };
-   
-   
-   
- --- 298,366 ----
-   	qrule->qp(p).print();
-   	std::cout << "inv_map = ";
-   	p_inv.print();
- ! 	}
-   	*/
-   	  
-   	// compute the jacobian at the quadrature points
-   	for (unsigned int p=0; p<n_qp; p++)
-   	  {
- + 	    const Real
- + 	      dx_dxi   = dxdxi_map(p),   dy_dxi   = dydxi_map(p),   dz_dxi   = dzdxi_map(p),
- + 	      dx_deta  = dxdeta_map(p),  dy_deta  = dydeta_map(p),  dz_deta  = dzdeta_map(p),
- + 	      dx_dzeta = dxdzeta_map(p), dy_dzeta = dydzeta_map(p), dz_dzeta = dzdzeta_map(p);
- + 	    
- + 	    // Symbolically, the matrix determinant is
- + 	    //
- + 	    //         | dx/dxi   dy/dxi   dz/dxi   |
- + 	    // jac =   | dx/deta  dy/deta  dz/deta  |
- + 	    //         | dx/dzeta dy/dzeta dz/dzeta |
- + 	    // 
-   	    // jac = dx/dxi*(dy/deta*dz/dzeta - dz/deta*dy/dzeta) +
-   	    //       dy/dxi*(dz/deta*dx/dzeta - dx/deta*dz/dzeta) +
-   	    //       dz/dxi*(dx/deta*dy/dzeta - dy/deta*dx/dzeta)
-   	    
- ! 	    const Real jac = (dx_dxi*(dy_deta*dz_dzeta - dz_deta*dy_dzeta)  +
- ! 			      dy_dxi*(dz_deta*dx_dzeta - dx_deta*dz_dzeta)  +
- ! 			      dz_dxi*(dx_deta*dy_dzeta - dy_deta*dx_dzeta));
-   	    
- ! 	    if (jac <= 0.)
-   	      {
-   		std::cerr << "ERROR: negative Jacobian: "
- ! 			  << jac
-   			  << std::endl;
-   		error();
- ! 	      }
-   
- + 	    JxW[p] = jac*qw[p];
- + 	    
- + 	    // Compute the shape function derivatives wrt x,y at the
- + 	    // quadrature points
- + 	    const Real
- + 	      inv_jac  = 1./jac;	    
- + 	    
- + 	    dxidx_map[p]   = (dy_deta*dz_dzeta - dz_deta*dy_dzeta)*inv_jac;
- + 	    dxidy_map[p]   = (dz_deta*dx_dzeta - dx_deta*dz_dzeta)*inv_jac;
- + 	    dxidz_map[p]   = (dx_deta*dy_dzeta - dy_deta*dx_dzeta)*inv_jac;
- + 	    
- + 	    detadx_map[p]  = (dz_dxi*dy_dzeta  - dy_dxi*dz_dzeta )*inv_jac;
- + 	    detady_map[p]  = (dx_dxi*dz_dzeta  - dz_dxi*dx_dzeta )*inv_jac;
- + 	    detadz_map[p]  = (dy_dxi*dx_dzeta  - dx_dxi*dy_dzeta )*inv_jac;
- + 	    
- + 	    dzetadx_map[p] = (dy_dxi*dz_deta   - dz_dxi*dy_deta  )*inv_jac;
- + 	    dzetady_map[p] = (dz_dxi*dx_deta   - dx_dxi*dz_deta  )*inv_jac;
- + 	    dzetadz_map[p] = (dx_dxi*dy_deta   - dy_dxi*dx_deta  )*inv_jac;
- + 	  }
- + 	
-   	// done computing the map
-   	return;
- !       }
-   
-   
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 336,343 ****
-     assert (elem != NULL);
-       
-     Point p;
- -     
- -   p.clear();
-   
-     const ElemType type     = elem->type();
-     const Order order       = elem->default_order();
- --- 372,377 ----
- ***************
- *** 345,357 ****
-   
-     // Lagrange basis functions are used for mapping
-     for (unsigned int i=0; i<n_sf; i++)
- !     p += elem->point(i)*FE<Dim,LAGRANGE>::shape(type,
- ! 						order,
- ! 						i,
- ! 						reference_point);
-   
-     return p;
- ! };
-   
-   
-   
- --- 379,393 ----
-   
-     // Lagrange basis functions are used for mapping
-     for (unsigned int i=0; i<n_sf; i++)
- !     p.add_scaled (elem->point(i),
- ! 		  FE<Dim,LAGRANGE>::shape(type,
- ! 					  order,
- ! 					  i,
- ! 					  reference_point)
- ! 		  );
-   
-     return p;
- ! }
-   
-   
-   
- ***************
- *** 362,369 ****
-     assert (elem != NULL);
-       
-     Point p;
- -     
- -   p.clear();
-   
-     const ElemType type     = elem->type();
-     const Order order       = elem->default_order();
- --- 398,403 ----
- ***************
- *** 371,384 ****
-   
-     // Lagrange basis functions are used for mapping    
-     for (unsigned int i=0; i<n_sf; i++)
- !     p += elem->point(i)*FE<Dim,LAGRANGE>::shape_deriv(type,
- ! 						      order,
- ! 						      i,
- ! 						      0,
- ! 						      reference_point);
-       
-     return p;
- ! };
-   
-   
-   
- --- 405,420 ----
-   
-     // Lagrange basis functions are used for mapping    
-     for (unsigned int i=0; i<n_sf; i++)
- !     p.add_scaled (elem->point(i),
- ! 		  FE<Dim,LAGRANGE>::shape_deriv(type,
- ! 						order,
- ! 						i,
- ! 						0,
- ! 						reference_point)
- ! 		  );
-       
-     return p;
- ! }
-   
-   
-   
- ***************
- *** 389,396 ****
-     assert (elem != NULL);
-       
-     Point p;
- -     
- -   p.clear();
-   
-     const ElemType type     = elem->type();
-     const Order order       = elem->default_order();
- --- 425,430 ----
- ***************
- *** 398,411 ****
-     
-     // Lagrange basis functions are used for mapping
-     for (unsigned int i=0; i<n_sf; i++)
- !     p += elem->point(i)*FE<Dim,LAGRANGE>::shape_deriv(type,
- ! 						  order,
- ! 						  i,
- ! 						  1,
- ! 						  reference_point);
-       
-     return p;
- ! };
-   
-   
-   
- --- 432,447 ----
-     
-     // Lagrange basis functions are used for mapping
-     for (unsigned int i=0; i<n_sf; i++)
- !     p.add_scaled (elem->point(i),
- ! 		  FE<Dim,LAGRANGE>::shape_deriv(type,
- ! 						order,
- ! 						i,
- ! 						1,
- ! 						reference_point)
- ! 		  );
-       
-     return p;
- ! }
-   
-   
-   
- ***************
- *** 416,423 ****
-     assert (elem != NULL);
-       
-     Point p;
- -     
- -   p.clear();
-   
-     const ElemType type     = elem->type();
-     const Order order       = elem->default_order();
- --- 452,457 ----
- ***************
- *** 425,760 ****
-   
-     // Lagrange basis functions are used for mapping
-     for (unsigned int i=0; i<n_sf; i++)
- !     p += elem->point(i)*FE<Dim,LAGRANGE>::shape_deriv(type,
- ! 						      order,
- ! 						      i,
- ! 						      2,
- ! 						      reference_point);
-       
-     return p;
- ! };
-   
-   
-   
-   template <unsigned int Dim, FEFamily T>
-   Point FE<Dim,T>::inverse_map (const Elem* elem,
- ! 			      const Point& physical_point)
-   {
-     assert (elem != NULL);
-   
- !   switch (Dim)
- !     {
- !       
- !       //------------------------------------------------------------------
- !       // 1D map inversion
- !     case 1:
- !       {
- ! 	Real error = 0.;
-   
- - 	Point p;
- - 	
- - 	const Real
- - 	  X = physical_point(0);
-   
- - 	unsigned int cnt = 0;
- - 	
- - 	do
- - 	  {
- - 	    // The actual update step
- - 	    {
- - 	      const Point physical_guess = FE<Dim,T>::map    (elem, p);
- - 	      
- - 	      const Point dxi            = FE<Dim,T>::map_xi (elem, p);
- - 	      
- - 	      const Real
- - 		J = dxi(0);
- - 	      
- - 	      assert (J != 0.);
- - 	      
- - 	      const Real
- - 		Jinv =  1./J;
-   
- - 	      
- - 	      Point dp;
- - 	      
- - 	      dp(0) = Jinv*(-physical_guess(0) + X);
- - 	      
- - 	      error = dp.size();
-   
- ! 	      p += dp;
- ! 	    };
-   	    
- ! 	    cnt++;
-   	    
- ! 	    if (cnt > 10)
- ! 	      {
- ! 		here();
- ! 		std::cerr << "WARNING: Newton scheme has not converged in "
- ! 			  << cnt << " iterations!"
- ! 			  << std::endl;
- ! 		
- ! 		if (cnt > 20)
- ! 		  {
- ! 		    std::cerr << "WARNING: Newton scheme FAILED to converge in "
- ! 			      << cnt << " iterations!"
- ! 			      << std::endl;
- ! 		    error();
- ! 		  };
- ! 	      };
- ! 	  }
- ! 	while (error > 1.e-6);
- ! 
- ! #ifdef DEBUG
- ! 	
- ! 	const Point check = FE<Dim,T>::map (elem, p);
- ! 	const Point diff  = physical_point - check;
- ! 
- ! 	if (diff.size() > 1.e-6)
- ! 	  {
- ! 	    here();
- ! 	    std::cerr << "WARNING:  diff is "
- ! 		      << diff.size()
- ! 		      << std::endl;
- ! 	  };
- !        
- ! #endif
- ! 
- ! 	return p;
- !       };
- ! 
- ! 
- ! 
- ! 
- ! 
- ! 
- ! 
- ! 
- ! 
- ! 
- !       //------------------------------------------------------------------
- !       // 2D map inversion
- !     case 2:
- !       {
- ! 	Real error = 0.;
- ! 
- ! 	Point p;
- ! 	
- ! 	const Real
- ! 	  X = physical_point(0), 
- ! 	  Y = physical_point(1);
- ! 
- ! 	unsigned int cnt = 0;
- ! 	
- ! 	do
- ! 	  {
- ! 	    // The actual update step
- ! 	    {
- ! 	      const Point physical_guess = FE<Dim,T>::map (elem, p);
- ! 	      
- ! 	      const Point dxi   = FE<Dim,T>::map_xi   (elem, p);
- ! 	      const Point deta  = FE<Dim,T>::map_eta  (elem, p);
- ! 	      
- ! 	      const Real
- ! 		J11 = dxi(0), J12 = deta(0),
- ! 		J21 = dxi(1), J22 = deta(1);
- ! 	      
- ! 	      const Real det = (J11*J22 - J12*J21);
- ! 	      
- ! 	      assert (det > 0.);
- ! 	      assert (fabs(det) > 1.e-10);
- ! 	      
- ! 	      const Real inv_det = 1./det;
- ! 	      
- ! 	      const Real
- ! 		Jinv11 =  J22*inv_det,
- ! 		Jinv12 = -J12*inv_det,
- ! 		
- ! 		Jinv21 = -J21*inv_det,
- ! 		Jinv22 =  J11*inv_det;
- ! 
- ! 	      
- ! 	      Point dp;
- ! 	      
- ! 	      dp(0) = (Jinv11*(-physical_guess(0) + X) +
- ! 		       Jinv12*(-physical_guess(1) + Y));
- ! 	      
- ! 	      dp(1) = (Jinv21*(-physical_guess(0) + X) +
- ! 		       Jinv22*(-physical_guess(1) + Y));
- ! 	      
- ! 	      error = dp.size();
- ! 
- ! 	      p += dp;
- ! 	    };
-   	    
- ! 	    cnt++;
-   
- ! 	    if (cnt > 10)
- ! 	      {
- ! 		here();
- ! 		std::cerr << "WARNING: Newton scheme has not converged in "
- ! 			  << cnt << " iterations!"
- ! 			  << std::endl;
- ! 		
- ! 		if (cnt > 20)
- ! 		  {
- ! 		    std::cerr << "WARNING: Newton scheme FAILED to converge in "
- ! 			      << cnt << " iterations!"
- ! 			      << std::endl;
- ! 		    error();
- ! 		  };
- ! 	      };
-   	  }
- - 	while (error > 1.e-6);
- - 	
- - #ifdef DEBUG
- - 	
- - 	const Point check = FE<Dim,T>::map (elem, p);
- - 	const Point diff  = physical_point - check;
- - 
- - 	if (diff.size() > 1.e-6)
- - 	  {
- - 	    here();
- - 	    std::cerr << "WARNING:  diff is "
- - 		      << diff.size()
- - 		      << std::endl;
- - 	  };
- -        
- - #endif
- - 
- - 	return p;
- -       };
- - 
-   
-   
-   
-   
-   
-   
-   
-   
-   
- -       //------------------------------------------------------------------
- -       // 3D map inversion
- -     case 3:
- -       {
- - 	Real error = 0.;
-   
- - 	Point p;
- - 	
- - 	const Real
- - 	  X = physical_point(0), 
- - 	  Y = physical_point(1), 
- - 	  Z = physical_point(2);
-   
- ! 	unsigned int cnt = 0;
- ! 	
- ! 	do
- ! 	  {
- ! 	    // The actual update step
-   	    {
- ! 	      const Point physical_guess = FE<Dim,T>::map (elem, p);
- ! 	      
- ! 	      const Point dxi   = FE<Dim,T>::map_xi   (elem, p);
- ! 	      const Point deta  = FE<Dim,T>::map_eta  (elem, p);
- ! 	      const Point dzeta = FE<Dim,T>::map_zeta (elem, p);
- ! 	      
- ! 	      const Real
- ! 		J11 = dxi(0), J12 = deta(0), J13 = dzeta(0),
- ! 		J21 = dxi(1), J22 = deta(1), J23 = dzeta(1),
- ! 		J31 = dxi(2), J32 = deta(2), J33 = dzeta(2);
- ! 	      
- ! 	      const Real det = (J11*(J22*J33 - J23*J32) +
- ! 				J12*(J23*J31 - J21*J33) +
- ! 				J13*(J21*J32 - J22*J31));
- ! 	      
- ! 	      assert (det > 0.);
- ! 	      assert (fabs(det) > 1.e-10);
- ! 	      
- ! 	      const Real inv_det = 1./det;
- ! 	      
- ! 	      const Real
- ! 		Jinv11 =  (J22*J33 - J23*J32)*inv_det,
- ! 		Jinv12 = -(J12*J33 - J13*J32)*inv_det,
- ! 		Jinv13 =  (J12*J23 - J13*J22)*inv_det,
- ! 		
- ! 		Jinv21 = -(J21*J33 - J23*J31)*inv_det,
- ! 		Jinv22 =  (J11*J33 - J13*J31)*inv_det,
- ! 		Jinv23 = -(J11*J23 - J13*J21)*inv_det,
- ! 		
- ! 		Jinv31 =  (J21*J32 - J22*J31)*inv_det,
- ! 		Jinv32 = -(J11*J32 - J12*J31)*inv_det,
- ! 		Jinv33 =  (J11*J22 - J12*J21)*inv_det;
- ! 	      
- ! 	      
- ! 	      Point dp;
- ! 	      
- ! 	      dp(0) = (Jinv11*(-physical_guess(0) + X) +
- ! 		       Jinv12*(-physical_guess(1) + Y) +
- ! 		       Jinv13*(-physical_guess(2) + Z));
- ! 	      
- ! 	      dp(1) = (Jinv21*(-physical_guess(0) + X) +
- ! 		       Jinv22*(-physical_guess(1) + Y) +
- ! 		       Jinv23*(-physical_guess(2) + Z));
- ! 	      
- ! 	      dp(2) = (Jinv31*(-physical_guess(0) + X) +
- ! 		       Jinv32*(-physical_guess(1) + Y) +
- ! 		       Jinv33*(-physical_guess(2) + Z));
- ! 	      
- ! 	      error = dp.size();
-   
- - 	      p += dp;
- - 	    };
- - 	    
- - 	    cnt++;
- - 	    
- - 	    if (cnt > 10)
- - 	      {
- - 		here();
- - 		std::cerr << "WARNING: Newton scheme has not converged in "
- - 			  << cnt << " iterations!"
- - 			  << std::endl;
- - 		
- - 		if (cnt > 20)
- - 		  {
- - 		    std::cerr << "ERROR: Newton scheme FAILED to converge in "
- - 			      << cnt << " iterations!"
- - 			      << std::endl;
- - 		    return p;
- - 		  };
- - 	      };
- - 	  }
- - 	while (error > 1.e-6);
-   
-   #ifdef DEBUG
-   	
- ! 	const Point check = FE<Dim,T>::map (elem, p);
- ! 	const Point diff  = physical_point - check;
- ! 
- ! 	if (diff.size() > 1.e-6)
- ! 	  {
- ! 	    here();
- ! 	    std::cerr << "WARNING:  diff is "
- ! 		      << diff.size()
- ! 		      << std::endl;
- ! 	  };
- !        
-   #endif
-   
- - 	return p;
- -       };
- - 
- -       
- -     default:
- -       error();
- -       
- -     };
- - 
- -   error();
-   
- -   Point p;
-     
-     return p;
- ! };
-   
-   
-   
- --- 459,792 ----
-   
-     // Lagrange basis functions are used for mapping
-     for (unsigned int i=0; i<n_sf; i++)
- !     p.add_scaled (elem->point(i),
- ! 		  FE<Dim,LAGRANGE>::shape_deriv(type,
- ! 						order,
- ! 						i,
- ! 						2,
- ! 						reference_point)
- ! 		  );
-       
-     return p;
- ! }
-   
-   
-   
-   template <unsigned int Dim, FEFamily T>
-   Point FE<Dim,T>::inverse_map (const Elem* elem,
- ! 			      const Point& physical_point,
- ! 			      const Real tolerance)
-   {
-     assert (elem != NULL);
- +   assert (tolerance >= 0.);
-   
- !   /**
- !    * How much did the point on the reference
- !    * element change by in this Newton step?
- !    */
- !   Real error = 0.;
- ! 
- !   /**
- !    * The point on the reference element.  This is
- !    * the "initial guess" for Newton's method.  The
- !    * centroid seems like a good idea, but computing
- !    * it is a little more intensive than, say taking
- !    * the zero point.  
- !    *
- !    * Convergence should be insensitive of this choice
- !    * for "good" elements.
- !    */
- !   //Point p = elem->centroid(); // A reasonable guess.  Requires computation
- !   Point p; // the zero point.  No computation required
- ! 
- !   /**
- !    * The number of iterations in the map inversion process.
- !    */
- !   unsigned int cnt = 0;
-   
-   
-   
-   
- !   /**
- !    * Newton iteration loop.
- !    */
- !   do
- !     {
- !       /**
- !        * Where our current iterate \p p maps to.
- !        */
- !       const Point physical_guess = FE<Dim,T>::map (elem, p);
- ! 
- !       /**
- !        * How far our current iterate is from the actual point.
- !        */
- !       const Point delta = physical_point - physical_guess;
- ! 
- !       /**
- !        * Increment in current iterate \p p, will be computed.
- !        */
- !       Point dp;
- ! 
- ! 
- !       /**
- !        * The form of the map and how we invert it depends
- !        * on the dimension that we are in.
- !        */      
- !       switch (Dim)
- ! 	{
- ! 	  
- ! 	  /**	 
- ! 	   *------------------------------------------------------------------
- ! 	   * 1D map inversion
- ! 	   *
- ! 	   * Here we find the point on a 1D reference element that maps to
- ! 	   * the point \p physical_point in the domain.  This is a bit tricky
- ! 	   * since we do not want to assume that the point \p physical_point
- ! 	   * is also in a 1D domain.  In particular, this method might get
- ! 	   * called on the edge of a 3D element, in which case \p physical_point
- ! 	   * actually lives in 3D.
- ! 	   */
- ! 	case 1:
- ! 	  {
- ! 	    const Point dxi            = FE<Dim,T>::map_xi (elem, p);
- ! 	    
- ! 	    /**
- ! 	     * Newton's method in this case looks like
- ! 	     *
- ! 	     * {X} - {X_n} = [J]*dp
- ! 	     *
- ! 	     * Where {X}, {X_n} are 3x1 vectors, [J] is a 3x1 matrix
- ! 	     * d(x,y,z)/dxi, and we seek dp, a scalar.  Since the above
- ! 	     * system is either overdermined or rank-deficient, we will
- ! 	     * solve the normal equations for this system
- ! 	     *
- ! 	     * [J]^T ({X} - {X_n}) = [J]^T [J] {dp}
- ! 	     *
- ! 	     * which involves the trivial inversion of the scalar
- ! 	     * G = [J]^T [J]
- ! 	     */	    
- ! 	    const Real G = dxi*dxi;
- ! 	    
- ! 	    assert (G > 0.);
-   	    
- ! 	    const Real Ginv = 1./G;
-   	    
- ! 	    const Real  dxidelta = dxi*delta;
-   	    
- ! 	    dp(0) = Ginv*dxidelta;
-   
- ! 	    break;
-   	  }
-   
-   
-   
- + 	  /**	 
- + 	   *------------------------------------------------------------------
- + 	   * 2D map inversion
- + 	   *
- + 	   * Here we find the point on a 2D reference element that maps to
- + 	   * the point \p physical_point in the domain.  This is a bit tricky
- + 	   * since we do not want to assume that the point \p physical_point
- + 	   * is also in a 2D domain.  In particular, this method might get
- + 	   * called on the face of a 3D element, in which case \p physical_point
- + 	   * actually lives in 3D.
- + 	   */
- + 	case 2:
- + 	  {
- + 	    const Point dxi            = FE<Dim,T>::map_xi  (elem, p);
- + 	    const Point deta           = FE<Dim,T>::map_eta (elem, p);
- + 	    
- + 	    /**
- + 	     * Newton's method in this case looks like
- + 	     *
- + 	     * {X} - {X_n} = [J]*{dp}
- + 	     *
- + 	     * Where {X}, {X_n} are 3x1 vectors, [J] is a 3x2 matrix
- + 	     * d(x,y,z)/d(xi,eta), and we seek {dp}, a 2x1 vector.  Since
- + 	     * the above system is either overdermined or rank-deficient,
- + 	     * we will solve the normal equations for this system
- + 	     *
- + 	     * [J]^T ({X} - {X_n}) = [J]^T [J] {dp}
- + 	     *
- + 	     * which involves the inversion of the 2x2 matrix
- + 	     * [G] = [J]^T [J]
- + 	     */
- + 	    const Real
- + 	      G11 = dxi*dxi,  G12 = dxi*deta,
- + 	      G21 = dxi*deta, G22 = deta*deta;
- + 	    
- + 	    
- + 	    const Real det = (G11*G22 - G12*G21);
- + 	    
- + 	    assert (det > 0.);
- + 	    assert (fabs(det) > 1.e-10);
- + 	    
- + 	    const Real inv_det = 1./det;
- + 	    
- + 	    const Real
- + 	      Ginv11 =  G22*inv_det,
- + 	      Ginv12 = -G12*inv_det,
- + 	      
- + 	      Ginv21 = -G21*inv_det,
- + 	      Ginv22 =  G11*inv_det;
- + 	    
- + 	    
- + 	    const Real  dxidelta  = dxi*delta;
- + 	    const Real  detadelta = deta*delta;
- + 	    
- + 	    dp(0) = (Ginv11*dxidelta + Ginv12*detadelta);
- + 	    dp(1) = (Ginv21*dxidelta + Ginv22*detadelta);
-   
- + 	    break;
- + 	  }
- + 	  
-   
- + 	  
- + 	  /**	 
- + 	   *------------------------------------------------------------------
- + 	   * 3D map inversion
- + 	   *
- + 	   * Here we find the point in a 3D reference element that maps to
- + 	   * the point \p physical_point in a 3D domain. Nothing special
- + 	   * has to happen here, since (unless the map is singular because
- + 	   * you have a BAD element) the map will be invertable and we can
- + 	   * apply Newton's method directly.
- + 	   */
- + 	case 3:
- + 	  {
- +        	    const Point dxi   = FE<Dim,T>::map_xi   (elem, p);
- + 	    const Point deta  = FE<Dim,T>::map_eta  (elem, p);
- + 	    const Point dzeta = FE<Dim,T>::map_zeta (elem, p);
- + 	    
- + 	    /**
- + 	     * Newton's method in this case looks like
- + 	     *
- + 	     * {X} - {X_n} = [J]*{dp}
- + 	     *
- + 	     * Where {X}, {X_n} are 3x1 vectors, [J] is a 3x3 matrix
- + 	     * d(x,y,z)/dxi, and we seek {dp}, a 3x1 vector. Since the above
- + 	     * system is nonsingular for invertable maps we will solve 
- + 	     *
- + 	     * ({X} - {X_n}) = [J] {dp}
- + 	     *
- + 	     * which involves the inversion of the 3x3 matrix [J]
- + 	     */	    
- + 	    const Real
- + 	      J11 = dxi(0), J12 = deta(0), J13 = dzeta(0),
- + 	      J21 = dxi(1), J22 = deta(1), J23 = dzeta(1),
- + 	      J31 = dxi(2), J32 = deta(2), J33 = dzeta(2);
- + 	    
- + 	    const Real det = (J11*(J22*J33 - J23*J32) +
- + 			      J12*(J23*J31 - J21*J33) +
- + 			      J13*(J21*J32 - J22*J31));
- + 	    
- + 	    assert (det > 0.);
- + 	    assert (fabs(det) > 1.e-10);
- + 	    
- + 	    const Real inv_det = 1./det;
- + 	    
- + 	    const Real
- + 	      Jinv11 =  (J22*J33 - J23*J32)*inv_det,
- + 	      Jinv12 = -(J12*J33 - J13*J32)*inv_det,
- + 	      Jinv13 =  (J12*J23 - J13*J22)*inv_det,
- + 	      
- + 	      Jinv21 = -(J21*J33 - J23*J31)*inv_det,
- + 	      Jinv22 =  (J11*J33 - J13*J31)*inv_det,
- + 	      Jinv23 = -(J11*J23 - J13*J21)*inv_det,
- + 	      
- + 	      Jinv31 =  (J21*J32 - J22*J31)*inv_det,
- + 	      Jinv32 = -(J11*J32 - J12*J31)*inv_det,
- + 	      Jinv33 =  (J11*J22 - J12*J21)*inv_det;
- + 	    
- + 	    
- + 	    dp(0) = (Jinv11*delta(0) +
- + 		     Jinv12*delta(1) +
- + 		     Jinv13*delta(2));
- + 	    
- + 	    dp(1) = (Jinv21*delta(0) +
- + 		     Jinv22*delta(1) +
- + 		     Jinv23*delta(2));
- + 	    
- + 	    dp(2) = (Jinv31*delta(0) +
- + 		     Jinv32*delta(1) +
- + 		     Jinv33*delta(2));
-   
- + 	    break;
- + 	  }
-   
-   
- + 	  /**
- + 	   * Some other dimension?
- + 	   */
- + 	default:
- + 	  error();
- + 	} // end switch(Dim), dp now computed
-   
-   
-   
- !       /**
- !        * ||P_n+1 - P_n||
- !        */
- !       error = dp.size();
- ! 
- !       /**
- !        * P_n+1 = P_n + dp
- !        */
- !       p.add (dp);
- ! 
- !       /**
- !        * Increment the iteration count.
- !        */
- !       cnt++;
- ! 
- !       /**
- !        * Watch for divergence of Newton's
- !        * method.
- !        */
- !       if (cnt > 10)
- ! 	{
- ! 	  here();
- ! 	  std::cerr << "WARNING: Newton scheme has not converged in "
- ! 		    << cnt << " iterations!"
- ! 		    << std::endl;
- ! 	  
- ! 	  if (cnt > 20)
-   	    {
- ! 	      std::cerr << "ERROR: Newton scheme FAILED to converge in "
- ! 			<< cnt << " iterations!" << std::endl
- ! 			<< "p="; 
- ! 	      error();
- ! 	    }
- ! 	}
- !     }
- !   while (error > tolerance);
- ! 
-   
-   
- +   /**
- +    * If we are in debug mode do a sanity check.  Make sure
- +    * the point \p p on the reference element actually does
- +    * map to the point \p physical_point within a tolerance.
- +    */ 
-   #ifdef DEBUG
-   	
- !   const Point check = FE<Dim,T>::map (elem, p);
- !   const Point diff  = physical_point - check;
- !   
- !   if (diff.size() > tolerance)
- !     {
- !       here();
- !       std::cerr << "WARNING:  diff is "
- ! 		<< diff.size()
- ! 		<< std::endl;
- !     }
- !   
-   #endif
-   
-   
-     
-     return p;
- ! }
-   
-   
-   
- Index: src/fe/fe_monomial.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_monomial.C,v
- retrieving revision 1.6
- retrieving revision 1.10
- diff -c -r1.6 -r1.10
- *** src/fe/fe_monomial.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/fe_monomial.C	20 Feb 2003 04:59:58 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 31,38 ****
-   template <unsigned int Dim, FEFamily T>
-   void FE<Dim,T>::nodal_soln(const Elem* elem,
-   			   const Order order,
- ! 			   const std::vector<Complex>& elem_soln,
- ! 			   std::vector<Complex>&       nodal_soln)
-   {
-     const unsigned int n_nodes = elem->n_nodes();
-     
- --- 31,38 ----
-   template <unsigned int Dim, FEFamily T>
-   void FE<Dim,T>::nodal_soln(const Elem* elem,
-   			   const Order order,
- ! 			   const std::vector<Number>& elem_soln,
- ! 			   std::vector<Number>&       nodal_soln)
-   {
-     const unsigned int n_nodes = elem->n_nodes();
-     
- ***************
- *** 49,61 ****
-         {
-   	assert (elem_soln.size() == 1);
-   	
- ! 	const Complex val = elem_soln[0];
-   	
-   	for (unsigned int n=0; n<n_nodes; n++)
-   	  nodal_soln[n] = val;
-   	
-   	return;
- !       };
-   
-   
-         // For other bases do interpolation at the nodes
- --- 49,61 ----
-         {
-   	assert (elem_soln.size() == 1);
-   	
- ! 	const Number val = elem_soln[0];
-   	
-   	for (unsigned int n=0; n<n_nodes; n++)
-   	  nodal_soln[n] = val;
-   	
-   	return;
- !       }
-   
-   
-         // For other bases do interpolation at the nodes
- ***************
- *** 85,107 ****
-   							     order,
-   							     i,
-   							     mapped_point);	    
- ! 	  };
-   
-   	return;
- !       };
-         
-       default:
-         {
-   	error();
- ! 	return;
- !       };
- !     };
- ! 
- !   
- !   // How did we get here?
- !   error();  
- !   return;
- ! };
-   
-   
-   
- --- 85,101 ----
-   							     order,
-   							     i,
-   							     mapped_point);	    
- ! 	  }
-   
-   	return;
- !       }
-         
-       default:
-         {
-   	error();
- !       }
- !     }
- ! }
-   
-   
-   
- ***************
- *** 146,154 ****
-   	    return 4;
-   	    
-   	  default:
- ! 	    error();
- ! 	  };
- !       };
-   
-   
-         // Discontinuous quadratic shape functions
- --- 140,155 ----
-   	    return 4;
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-   
-         // Discontinuous quadratic shape functions
- ***************
- *** 180,188 ****
-   	    return 10;
-   	    
-   	  default:
- ! 	    error();
- ! 	  };
- !       };
-   
-   
-         // Discontinuous cubic shape functions
- --- 181,196 ----
-   	    return 10;
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-   
-         // Discontinuous cubic shape functions
- ***************
- *** 214,222 ****
-   	    return 20;
-   	    
-   	  default:
- ! 	    error();
- ! 	  };
- !       };
-   
-   
-         // Discontinuous quartic shape functions
- --- 222,237 ----
-   	    return 20;
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-   
-         // Discontinuous quartic shape functions
- ***************
- *** 247,267 ****
-   	    return 35;
-   	    
-   	  default:
- ! 	    error();
- ! 	  };
- !       };
-   
-         
-       default:
-         {
-   	error();
- !       };
- !     };
-     
-     error();
-     
-     return 0;
- ! };
-   
-   
-   
- --- 262,289 ----
-   	    return 35;
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-         
-       default:
-         {
-   	error();
- !       }
- !     }
-     
-     error();
-     
-     return 0;
- ! }
-   
-   
-   
- ***************
- *** 273,279 ****
-     // Monomials elements have no dofs at nodes
-     // (just on the element)
-     return 0;
- ! };
-   
-   
-   
- --- 295,301 ----
-     // Monomials elements have no dofs at nodes
-     // (just on the element)
-     return 0;
- ! }
-   
-   
-   
- ***************
- *** 320,328 ****
-   	    return 4;
-   	    
-   	  default:
- ! 	    error();
- ! 	  };
- !       };
-   
-   
-         // Discontinuous quadratic shape functions
- --- 342,357 ----
-   	    return 4;
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-   
-         // Discontinuous quadratic shape functions
- ***************
- *** 357,365 ****
-   	    return 10;
-   	    
-   	  default:
- ! 	    error();
- ! 	  };
- !       };
-   
-   
-         // Discontinuous cubic shape functions
- --- 386,401 ----
-   	    return 10;
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-   
-         // Discontinuous cubic shape functions
- ***************
- *** 391,399 ****
-   	    return 20;
-   	    
-   	  default:
- ! 	    error();
- ! 	  };
- !       };
-   
-   
-         // Discontinuous quartic shape functions
- --- 427,442 ----
-   	    return 20;
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-   
-         // Discontinuous quartic shape functions
- ***************
- *** 425,441 ****
-   	    return 35;
-   	    
-   	  default:
- ! 	    error();
- ! 	  };
- !       };
-   
-   
-         
-         // Otherwise no DOFS per element
-       default:
-         return 0;
- !     };
- ! };
-   
-   
-   
- --- 468,491 ----
-   	    return 35;
-   	    
-   	  default:
- ! 	    {
- ! #ifdef DEBUG
- ! 	      std::cerr << "ERROR: Bad ElemType = " << t
- ! 			<< " for " << o << "th order approximation!" 
- ! 			<< std::endl;
- ! #endif
- ! 	      error();	    
- ! 	    }
- ! 	  }
- !       }
-   
-   
-         
-         // Otherwise no DOFS per element
-       default:
-         return 0;
- !     }
- ! }
-   
-   
-   
- Index: src/fe/fe_monomial_shape_1D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_monomial_shape_1D.C,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** src/fe/fe_monomial_shape_1D.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/fe_monomial_shape_1D.C	13 Feb 2003 22:56:10 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 68,86 ****
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  };
- !       };
-         
-       default:
-         {
-   	std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-   	error();
- !       };
- !     };
-   
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 68,86 ----
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  }
- !       }
-         
-       default:
-         {
-   	std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-   	error();
- !       }
- !     }
-   
-     error();
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 93,99 ****
-     assert (elem != NULL);
-     
-     return FE<1,MONOMIAL>::shape(elem->type(), order, i, p);
- ! };
-   
-   
-   
- --- 93,99 ----
-     assert (elem != NULL);
-     
-     return FE<1,MONOMIAL>::shape(elem->type(), order, i, p);
- ! }
-   
-   
-   
- ***************
- *** 142,161 ****
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  };
- !       };
-   
-         
-       default:
-         {
-   	std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-   	error();
- !       };
- !     };
-   
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 142,161 ----
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  }
- !       }
-   
-         
-       default:
-         {
-   	std::cerr << "ERROR: Unsupported polynomial order!" << std::endl;
-   	error();
- !       }
- !     }
-   
-     error();
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 170,173 ****
-     
-     return FE<1,MONOMIAL>::shape_deriv(elem->type(),
-   				     order, i, j, p);
- ! };
- --- 170,173 ----
-     
-     return FE<1,MONOMIAL>::shape_deriv(elem->type(),
-   				     order, i, j, p);
- ! }
- Index: src/fe/fe_monomial_shape_2D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_monomial_shape_2D.C,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** src/fe/fe_monomial_shape_2D.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/fe_monomial_shape_2D.C	13 Feb 2003 22:56:10 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 106,113 ****
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  };
- !       };
-   
-         
-         // unsupported order
- --- 106,113 ----
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  }
- !       }
-   
-         
-         // unsupported order
- ***************
- *** 116,129 ****
-   	std::cerr << "ERROR: Unsupported 2D FE order!: " << order
-   		  << std::endl;
-   	error();
- !       };
- !     };
-   
-     error();
-     return 0.;
-   
-   #endif
- ! };
-   
-   
-   
- --- 116,129 ----
-   	std::cerr << "ERROR: Unsupported 2D FE order!: " << order
-   		  << std::endl;
-   	error();
- !       }
- !     }
-   
-     error();
-     return 0.;
-   
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 137,143 ****
-     
-     // by default call the orientation-independent shape functions
-     return FE<2,MONOMIAL>::shape(elem->type(), order, i, p);
- ! };
-   
-   
-   
- --- 137,143 ----
-     
-     // by default call the orientation-independent shape functions
-     return FE<2,MONOMIAL>::shape(elem->type(), order, i, p);
- ! }
-   
-   
-   
- ***************
- *** 227,234 ****
-   		default:
-   		  std::cerr << "Invalid shape function index!" << std::endl;
-   		  error();
- ! 		};
- ! 	    };
-   
-   	      
-   	    // d()/deta
- --- 227,234 ----
-   		default:
-   		  std::cerr << "Invalid shape function index!" << std::endl;
-   		  error();
- ! 		}
- ! 	    }
-   
-   	      
-   	    // d()/deta
- ***************
- *** 289,302 ****
-   		default:
-   		  std::cerr << "Invalid shape function index!" << std::endl;
-   		  error();
- ! 		};
- ! 	    };
-   	      
-   	      
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-         
-         
- --- 289,302 ----
-   		default:
-   		  std::cerr << "Invalid shape function index!" << std::endl;
-   		  error();
- ! 		}
- ! 	    }
-   	      
-   	      
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-         
-         
- ***************
- *** 307,319 ****
-   		  << std::endl;
-   	error();
-         }
- !     };
-   
-     error();
-     return 0.;
-   
-   #endif
- ! };
-   
-   
-   
- --- 307,319 ----
-   		  << std::endl;
-   	error();
-         }
- !     }
-   
-     error();
-     return 0.;
-   
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 328,332 ****
-   
-     // by default call the orientation-independent shape functions
-     return FE<2,MONOMIAL>::shape_deriv(elem->type(), order, i, j, p); 
- ! };
-   
- --- 328,332 ----
-   
-     // by default call the orientation-independent shape functions
-     return FE<2,MONOMIAL>::shape_deriv(elem->type(), order, i, j, p); 
- ! }
-   
- Index: src/fe/fe_monomial_shape_3D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_monomial_shape_3D.C,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** src/fe/fe_monomial_shape_3D.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/fe_monomial_shape_3D.C	13 Feb 2003 22:56:10 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 166,173 ****
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  };
- !       };
-   
-   
-               
- --- 166,173 ----
-   	  default:
-   	    std::cerr << "Invalid shape function index!" << std::endl;
-   	    error();
- ! 	  }
- !       }
-   
-   
-               
- ***************
- *** 178,190 ****
-   		  << std::endl;
-   	error();
-         }
- !     };
-   
-   #endif
-     
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 178,190 ----
-   		  << std::endl;
-   	error();
-         }
- !     }
-   
-   #endif
-     
-     error();
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 198,204 ****
-         
-     // call the orientation-independent shape functions
-     return FE<3,MONOMIAL>::shape(elem->type(), order, i, p);
- ! };
-   
-   
-   
- --- 198,204 ----
-         
-     // call the orientation-independent shape functions
-     return FE<3,MONOMIAL>::shape(elem->type(), order, i, p);
- ! }
-   
-   
-   
- ***************
- *** 348,355 ****
-   		default:
-   		  std::cerr << "Invalid shape function index!" << std::endl;
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    
-   	    // d()/deta
- --- 348,355 ----
-   		default:
-   		  std::cerr << "Invalid shape function index!" << std::endl;
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    
-   	    // d()/deta
- ***************
- *** 470,477 ****
-   		default:
-   		  std::cerr << "Invalid shape function index!" << std::endl;
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    
-   	    // d()/dzeta
- --- 470,477 ----
-   		default:
-   		  std::cerr << "Invalid shape function index!" << std::endl;
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    
-   	    // d()/dzeta
- ***************
- *** 592,605 ****
-   		default:
-   		  std::cerr << "Invalid shape function index!" << std::endl;
-   		  error();
- ! 		};
- ! 	    };
-   
-   	    
-   	  default:
-   	    error();
- ! 	  };
- !       };
-   
-   
-               
- --- 592,605 ----
-   		default:
-   		  std::cerr << "Invalid shape function index!" << std::endl;
-   		  error();
- ! 		}
- ! 	    }
-   
-   	    
-   	  default:
-   	    error();
- ! 	  }
- !       }
-   
-   
-               
- ***************
- *** 610,622 ****
-   		  << std::endl;
-   	error();
-         }
- !     };
-   
-   #endif
-     
-     error();
-     return 0.;  
- ! };
-   
-   
-   
- --- 610,622 ----
-   		  << std::endl;
-   	error();
-         }
- !     }
-   
-   #endif
-     
-     error();
-     return 0.;  
- ! }
-   
-   
-   
- ***************
- *** 631,634 ****
-         
-     // call the orientation-independent shape function derivatives
-     return FE<3,MONOMIAL>::shape_deriv(elem->type(), order, i, j, p);
- ! };
- --- 631,634 ----
-         
-     // call the orientation-independent shape function derivatives
-     return FE<3,MONOMIAL>::shape_deriv(elem->type(), order, i, j, p);
- ! }
- Index: src/fe/inf_fe.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/inf_fe.C,v
- retrieving revision 1.6
- retrieving revision 1.13
- diff -c -r1.6 -r1.13
- *** src/fe/inf_fe.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/fe/inf_fe.C	20 Feb 2003 17:09:30 -0000	1.13
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 23,35 ****
-   #include "mesh_config.h"
-   #ifdef ENABLE_INFINITE_ELEMENTS
-   #include "inf_fe.h"
- ! #include "quadrature_gauss.h"
-   #include "elem.h"
-   #include "fe.h"
-   
-   
-   
- - 
-   // ------------------------------------------------------------
-   // InfFE class members
-   
- --- 23,34 ----
-   #include "mesh_config.h"
-   #ifdef ENABLE_INFINITE_ELEMENTS
-   #include "inf_fe.h"
- ! #include "quadrature_gauss.h" /* this also includes "quadrature.h" */
-   #include "elem.h"
-   #include "fe.h"
-   
-   
-   
-   // ------------------------------------------------------------
-   // InfFE class members
-   
- ***************
- *** 56,91 ****
-      * the data structures like \p phi etc are not initialized 
-      * through the constructor, but throught reinit()
-      */
- !   current_fe_type ( FEType(fet.base_order, 
- ! 			   fet.base_family, 
-   			   INVALID_ORDER, 
- ! 			   fet.family,      
-   			   fet.inf_map) )
-   
-   {
-     // Sanity check.  Make sure the family and
-     // map specified in the template instantiation
-     // matches the one in the FEType object
- !   assert (T_radial == fe_type.family);
-     assert (T_map    == fe_type.inf_map);
-   
- -   // set the base_fe_type.order
- -   // and base_fe_type.family appropriately
- -   FEType base_fe_type = Base::build_fe_type(fet);
- - 
-     // build the base_fe object, handle the AutoPtr
- !   AutoPtr<FEBase> ap_fb = FEBase::build(Dim-1, base_fe_type);
-     base_fe = ap_fb.release();
- ! };
-   
-   
-   
-   
- ! // Desctrutor
-   template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
-   InfFE<Dim,T_radial,T_map>::~InfFE ()
-   {
- !   // delete pointers, if necessary (quite likely!)
-     if (base_qrule != NULL)
-       delete base_qrule;
-   
- --- 55,86 ----
-      * the data structures like \p phi etc are not initialized 
-      * through the constructor, but throught reinit()
-      */
- !   current_fe_type ( FEType(fet.order, 
- ! 			   fet.family, 
-   			   INVALID_ORDER, 
- ! 			   fet.radial_family,      
-   			   fet.inf_map) )
-   
-   {
-     // Sanity check.  Make sure the family and
-     // map specified in the template instantiation
-     // matches the one in the FEType object
- !   assert (T_radial == fe_type.radial_family);
-     assert (T_map    == fe_type.inf_map);
-   
-     // build the base_fe object, handle the AutoPtr
- !   AutoPtr<FEBase> ap_fb(FEBase::build(Dim-1, fet));
-     base_fe = ap_fb.release();
- ! }
-   
-   
-   
-   
- ! // Desctructor
-   template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
-   InfFE<Dim,T_radial,T_map>::~InfFE ()
-   {
- !   // delete pointers, if necessary
-     if (base_qrule != NULL)
-       delete base_qrule;
-   
- ***************
- *** 97,103 ****
-   
-     if (base_fe != NULL)
-       delete base_fe;
- ! };
-   
-   
-   
- --- 92,98 ----
-   
-     if (base_fe != NULL)
-       delete base_fe;
- ! }
-   
-   
-   
- ***************
- *** 109,132 ****
-     assert (q != NULL);
-   
-     Order base_int_order   = q->get_order();
-     Order radial_int_order = static_cast<Order>(
- !       static_cast<unsigned int>(fe_type.order) + 2 );
- !   // radial order rather conservative, may also work with m+1...?
-   
-     if (Dim != 1)
-     {
- !     base_qrule = new QGauss(Dim-1, base_int_order);
-       base_fe->attach_quadrature_rule(base_qrule);
- !   };
-   
-     radial_qrule = new QGauss(1, radial_int_order);
-   
- !   _n_total_qp  = base_qrule->n_points() * radial_qrule->n_points();
- ! };
-   
-   
-   
-   
-   
-   
-   
- --- 104,145 ----
-     assert (q != NULL);
-   
-     Order base_int_order   = q->get_order();
- + //  Order radial_int_order = static_cast<Order>(
- + //      static_cast<unsigned int>(fe_type.radial_order) + 2 );
-     Order radial_int_order = static_cast<Order>(
- !       2*(static_cast<unsigned int>(fe_type.radial_order) + 1) );
- !   // radial order rather conservative, may also work with other values...?
- !   // check this radial order again!!!!
-   
-     if (Dim != 1)
-     {
- !     // build a Dim-1 quadrature rule of the type that we received
- !     AutoPtr<QBase> apq( QBase::build(q->type(), Dim-1, base_int_order) );
- !     base_qrule = apq.release();
-       base_fe->attach_quadrature_rule(base_qrule);
- !   }
-   
- +   // in radial direction, always use Gauss quadrature
-     radial_qrule = new QGauss(1, radial_int_order);
-   
- !   /* currently not used. But maybe helpful to store the QBase*
- !    * with which we initialized our own quadrature rules */
- !   qrule = q;
- ! }
- ! 
-   
-   
-   
-   
- + template <unsigned int Dim, FEFamily T_radial, InfMapType T_base>
- + void InfFE<Dim,T_radial,T_base>::update_base_elem (const Elem* inf_elem)
- + {
- +   if (base_elem != NULL)
- +     delete base_elem;
- +   base_elem = Base::build_elem(inf_elem);
- + }
- + 
- + 
-   
-   
-   
- ***************
- *** 137,147 ****
-     // check InfFE quadrature rule and the new Elem* pointer
-     assert (base_fe        != NULL);
-     assert (base_fe->qrule != NULL);
-     assert (radial_qrule   != NULL);
-     assert (inf_elem       != NULL);
-   
- !   
- !     
-     // -----------------------------------------------------------------
-     // update the type in accordance to the current cell
-     // and reinit if the cell type has changed or (as in
- --- 150,160 ----
-     // check InfFE quadrature rule and the new Elem* pointer
-     assert (base_fe        != NULL);
-     assert (base_fe->qrule != NULL);
- +   assert (base_fe->qrule == base_qrule);
-     assert (radial_qrule   != NULL);
-     assert (inf_elem       != NULL);
-   
- ! 
-     // -----------------------------------------------------------------
-     // update the type in accordance to the current cell
-     // and reinit if the cell type has changed or (as in
- ***************
- *** 156,196 ****
-     //  so the following if statement is safe)
-     if (  ( Dim != 1) &&
-   	(  (get_type() != inf_elem->type())  ||  
- ! 	   (fe_type.base_family == HIERARCHIC)  )  )
-       {
-         // store the new element type
-         elem_type = inf_elem->type();
-   
-         // initialize the AutoPtr<Elem> for the base_fe
-         update_base_elem(inf_elem);
-   
-         // initialize the base quadrature rule for the new element
- !       base_fe->qrule->init( base_elem->type() );
-   
-         // initialize the shape functions in the base
-         base_fe->init_base_shape_functions( base_fe->qrule, base_elem );
-   
- !     };
-   
-   
-     // -----------------------------------------------------------------
- !   // the radial part only needs to be re-initialized with
-     // init_shape_functions() when the radial order changed
- !   if (current_fe_type.order != fe_type.order)
-       {
-         // update to the new radial order
- !       current_fe_type.order = fe_type.order;
-   
-         // the new element type has already been stored.
-         // proceed with quadrature rule
-   
- !       // initialize the radial quadrature rule
- !       radial_qrule->init(inf_elem->type());  
-   
-         // initialize the radial shape functions
-         init_shape_functions (inf_elem);
- !     };
-   
-   
-     // -----------------------------------------------------------------
-     // Now that both the base and radial parts are properly initialized,
- --- 169,221 ----
-     //  so the following if statement is safe)
-     if (  ( Dim != 1) &&
-   	(  (get_type() != inf_elem->type())  ||  
- ! 	   (fe_type.family == HIERARCHIC)  )  )
-       {
-         // store the new element type
-         elem_type = inf_elem->type();
-   
- + 
-         // initialize the AutoPtr<Elem> for the base_fe
-         update_base_elem(inf_elem);
-   
- + 
-         // initialize the base quadrature rule for the new element
- !       base_qrule->init( base_elem->type() );
-   
-         // initialize the shape functions in the base
-         base_fe->init_base_shape_functions( base_fe->qrule, base_elem );
-   
- !     }
-   
-   
-     // -----------------------------------------------------------------
- !   // most of the radial part only needs to be re-initialized with
-     // init_shape_functions() when the radial order changed
- !   if (current_fe_type.radial_order != fe_type.radial_order)
-       {
-         // update to the new radial order
- !       current_fe_type.radial_order = fe_type.radial_order;
-   
-         // the new element type has already been stored.
-         // proceed with quadrature rule
-   
- !       /*
- !        * initialize the radial quadrature rule with EDGE2
- !        * (the only ElemType that you should _not_ use is
- !        * INVALID_ELEM, since then, QBase::init() would think
- !        * it has already done the work!
- !        * But when the quadrature rule is initialized _once_,
- !        * even when the inf_elem->type() may change from
- !        * INFPRISM6 to INFHEX8, the radial data remains unchanged!
- !        */
- !       radial_qrule->init(EDGE2);
-   
-         // initialize the radial shape functions
-         init_shape_functions (inf_elem);
- !     }
-   
- +   // Update the radial distances
- +   compute_dist(inf_elem);
-   
-     // -----------------------------------------------------------------
-     // Now that both the base and radial parts are properly initialized,
- ***************
- *** 198,212 ****
-     // may directly be applied
-     combine_base_radial();
-   
-     // Compute the map for this element.  In the future we can specify
-     // different types of maps
-     compute_map (qrule, inf_elem);
-   
-     // Compute the shape functions and the derivatives at all of the
-     // quadrature points.  This part is dimension-independent
-     compute_shape_functions ();
-   
- ! };
-   
-   
-   
- --- 223,240 ----
-     // may directly be applied
-     combine_base_radial();
-   
- + 
-     // Compute the map for this element.  In the future we can specify
-     // different types of maps
-     compute_map (qrule, inf_elem);
-   
- + 
-     // Compute the shape functions and the derivatives at all of the
-     // quadrature points.  This part is dimension-independent
-     compute_shape_functions ();
-   
- ! 
- ! }
-   
-   
-   
- ***************
- *** 238,250 ****
-   
-     // Number of base shape functions used to construct the map
-     // (Lagrange shape functions are used for mapping in the base)
- !   unsigned int n_base_mapping_shape_functions;
- !   if (Dim > 1)
- !     n_base_mapping_shape_functions = FE<Dim-1,LAGRANGE>::n_shape_functions (base_mapping_elem_type,
- ! 									    base_mapping_order);
- !   else
- !     n_base_mapping_shape_functions = 1;
-   
-   
-     // Note that Radial::n_mapping_shape_functions() is independent of the
-     // element type
- --- 266,295 ----
-   
-     // Number of base shape functions used to construct the map
-     // (Lagrange shape functions are used for mapping in the base)
- !   // unsigned int n_base_mapping_shape_functions;
-   
- +   // Note that the test used to be
- +   //if (Dim > 1)
- +   //  n_base_mapping_shape_functions = FE<1,LAGRANGE>::n_shape_functions (base_mapping_elem_type,
- +   //									base_mapping_order);
- +   //else
- +   //  n_base_mapping_shape_functions = 1;
- +   //
- +   // But that causes some compilers (icc 7.0, in particular) to complain.  Specifically,
- +   // it doesn't do the if-test at instantiation time, and there are undefined references
- +   // to FE<0,0> at link time.  Instead use the following (more redundant :-( ) test.  
- +   if (Dim == 1)
- +     n_base_mapping_shape_functions = 1;
- +   
- +   else if (Dim == 2)
- +     n_base_mapping_shape_functions = FE<1,LAGRANGE>::n_shape_functions (base_mapping_elem_type,
- + 									base_mapping_order);
- +   else if (Dim == 3)
- +     n_base_mapping_shape_functions = FE<2,LAGRANGE>::n_shape_functions (base_mapping_elem_type,
- + 									base_mapping_order);
- +   else
- +     error();
- +   
-   
-     // Note that Radial::n_mapping_shape_functions() is independent of the
-     // element type
- ***************
- *** 264,274 ****
-     // -----------------------------------------------------------------
-     // initialize most of the things related to physical approximation
-     
- -   // The order to use in base approximation
- - /* NOT USED  const Order    base_approx_order   ( fe_type.base_order );    */
- - 
-     // The order to use in radial approximation
- !   const Order    radial_approx_order ( fe_type.order      );
-   
-     unsigned int n_base_approx_shape_functions;
-     if (Dim > 1)
- --- 309,316 ----
-     // -----------------------------------------------------------------
-     // initialize most of the things related to physical approximation
-     
-     // The order to use in radial approximation
- !   const Order    radial_approx_order ( fe_type.radial_order );
-   
-     unsigned int n_base_approx_shape_functions;
-     if (Dim > 1)
- ***************
- *** 286,299 ****
-     _n_total_approx_sf = n_total_approx_shape_functions;
-   
-   
-     // The number and location of the radial quadrature points.
- !   const unsigned int        n_radial_qp = qrule->n_points();
- !   const std::vector<Point>&   radial_qp = qrule->get_points();
-   
-     const unsigned int        n_base_qp =  base_qrule->n_points();
-   
-     // The total number of quadrature points.
-     const unsigned int        n_total_qp =  n_radial_qp * n_base_qp;
-     
-     // update class member field
-     _n_total_qp = n_total_qp;
- --- 328,346 ----
-     _n_total_approx_sf = n_total_approx_shape_functions;
-   
-   
- + 
-     // The number and location of the radial quadrature points.
- !   // const unsigned int        n_radial_qp = qrule->n_points();
- !   // const std::vector<Point>&   radial_qp = qrule->get_points();
- ! 
- !   const unsigned int        n_radial_qp = radial_qrule->n_points();
- !   const std::vector<Point>&   radial_qp = radial_qrule->get_points();
-   
-     const unsigned int        n_base_qp =  base_qrule->n_points();
-   
-     // The total number of quadrature points.
-     const unsigned int        n_total_qp =  n_radial_qp * n_base_qp;
- + 
-     
-     // update class member field
-     _n_total_qp = n_total_qp;
- ***************
- *** 305,311 ****
-     // most of this has already been done in base_fe->init_shape_functions().
-     // but e.g. we need the radial distance from the origin for _each_
-     // base mapping node
- !   dist.resize(n_base_mapping_shape_functions);
-   
-    
-   
- --- 352,358 ----
-     // most of this has already been done in base_fe->init_shape_functions().
-     // but e.g. we need the radial distance from the origin for _each_
-     // base mapping node
- !   // dist.resize(n_base_mapping_shape_functions);
-   
-    
-   
- ***************
- *** 401,407 ****
-   	if (Dim == 3)	     
-   	  dphidzeta[i].resize (n_total_qp);
-   	     
- !       };
-          
-       for (unsigned int i=0; i<n_total_mapping_shape_functions; i++)
-         {
- --- 448,454 ----
-   	if (Dim == 3)	     
-   	  dphidzeta[i].resize (n_total_qp);
-   	     
- !       }
-          
-       for (unsigned int i=0; i<n_total_mapping_shape_functions; i++)
-         {
- ***************
- *** 413,419 ****
-   	   
-   	if (Dim == 3)
-   	  dphidzeta_map[i].resize (n_total_qp);
- !       };
-     }
-   
-   
- --- 460,466 ----
-   	   
-   	if (Dim == 3)
-   	  dphidzeta_map[i].resize (n_total_qp);
- !       }
-     }
-   
-   
- ***************
- *** 422,428 ****
-       {
-         radial_map[i].resize    (n_radial_qp);
-         dradialdv_map[i].resize (n_radial_qp);
- !     };
-   
-   
-     // these approximation shapes are required at the radial quadrature points
- --- 469,475 ----
-       {
-         radial_map[i].resize    (n_radial_qp);
-         dradialdv_map[i].resize (n_radial_qp);
- !     }
-   
-   
-     // these approximation shapes are required at the radial quadrature points
- ***************
- *** 430,436 ****
-       {
-         mode[i].resize    (n_radial_qp);
-         dmodedv[i].resize (n_radial_qp);
- !     };
-   
-   
-     // zero  the phase, since it is to be summed up
- --- 477,483 ----
-       {
-         mode[i].resize    (n_radial_qp);
-         dmodedv[i].resize (n_radial_qp);
- !     }
-   
-   
-     // zero  the phase, since it is to be summed up
- ***************
- *** 439,445 ****
-         dphasedxi[p]   = 0.;
-         dphasedeta[p]  = 0.;
-         dphasedzeta[p] = 0.;
- !     };
-   
-   
-   
- --- 486,492 ----
-         dphasedxi[p]   = 0.;
-         dphasedeta[p]  = 0.;
-         dphasedzeta[p] = 0.;
- !     }
-   
-   
-   
- ***************
- *** 454,466 ****
-   
-     // -----------------------------------------------------------------
-     // compute the radial distances
- !   for (unsigned int i=0; i<n_base_mapping_shape_functions; i++)
- !     {
-         // this works, since the _base_ nodes are numbered in the 
-         // same manner for the base element as for the infinite element
- !       dist[i] = Point( inf_elem->node(i) 
- ! 		       - inf_elem->node(i+n_base_mapping_shape_functions) ).size();
- !     };
-     
-   
-   
- --- 501,515 ----
-   
-     // -----------------------------------------------------------------
-     // compute the radial distances
- !   // for (unsigned int i=0; i<n_base_mapping_shape_functions; i++)
- !   //  {
-         // this works, since the _base_ nodes are numbered in the 
-         // same manner for the base element as for the infinite element
- ! 
- !   //   dist[i] = Point( inf_elem->point(i) 
- !   //		       - inf_elem->point(i+n_base_mapping_shape_functions) ).size();
- ! 
- !   // }
-     
-   
-   
- ***************
- *** 470,476 ****
-       {
-         som[p]       = Radial::decay       (radial_qp[p](0)); 
-         dsomdv[p]    = Radial::decay_deriv (radial_qp[p](0)); 
- !     };
-   
-   
-   
- --- 519,525 ----
-       {
-         som[p]       = Radial::decay       (radial_qp[p](0)); 
-         dsomdv[p]    = Radial::decay_deriv (radial_qp[p](0)); 
- !     }
-   
-   
-   
- ***************
- *** 482,488 ****
-         {
-           weight   [ bp+rp*n_base_qp ] = Radial::D       (radial_qp[rp](0)); 
-           dweightdv[ bp+rp*n_base_qp ] = Radial::D_deriv (radial_qp[rp](0));
- !       };
-     
-     
-   
- --- 531,537 ----
-         {
-           weight   [ bp+rp*n_base_qp ] = Radial::D       (radial_qp[rp](0)); 
-           dweightdv[ bp+rp*n_base_qp ] = Radial::D_deriv (radial_qp[rp](0));
- !       }
-     
-     
-   
- ***************
- *** 493,499 ****
-         {
-           mode[i][p]    = InfFE<Dim,T_radial,T_map>::eval       (radial_qp[p](0), radial_approx_order, i);
-           dmodedv[i][p] = InfFE<Dim,T_radial,T_map>::eval_deriv (radial_qp[p](0), radial_approx_order, i);
- !       };
-   
-   
-   
- --- 542,548 ----
-         {
-           mode[i][p]    = InfFE<Dim,T_radial,T_map>::eval       (radial_qp[p](0), radial_approx_order, i);
-           dmodedv[i][p] = InfFE<Dim,T_radial,T_map>::eval_deriv (radial_qp[p](0), radial_approx_order, i);
- !       }
-   
-   
-   
- ***************
- *** 504,518 ****
-         {
-   	radial_map[i][p]    = InfFE<Dim,INFINITE_MAP,T_map>::eval       (radial_qp[p](0), radial_mapping_order, i);
-   	dradialdv_map[i][p] = InfFE<Dim,INFINITE_MAP,T_map>::eval_deriv (radial_qp[p](0), radial_mapping_order, i);
- !       };
-   
-    
- ! };
-   
-   
-   
-   
-   
-   
-   
-   
- --- 553,581 ----
-         {
-   	radial_map[i][p]    = InfFE<Dim,INFINITE_MAP,T_map>::eval       (radial_qp[p](0), radial_mapping_order, i);
-   	dradialdv_map[i][p] = InfFE<Dim,INFINITE_MAP,T_map>::eval_deriv (radial_qp[p](0), radial_mapping_order, i);
- !       }
-   
-    
- ! }
-   
-   
- + template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
- + void InfFE<Dim,T_radial,T_map>::compute_dist(const Elem* inf_elem)
- + {
- +   dist.resize(n_base_mapping_shape_functions);
- + 
- +   // compute the radial distances
- +   for (unsigned int i=0; i<n_base_mapping_shape_functions; i++)
- +     {
- +       // this works, since the _base_ nodes are numbered in the 
- +       // same manner for the base element as for the infinite element
-   
-   
- +       dist[i] = Point( inf_elem->point(i) 
- + 		       - inf_elem->point(i+n_base_mapping_shape_functions) ).size();
-   
- +     }
- + }
-   
-   
-   
- ***************
- *** 531,537 ****
-   	std::cout << "ERROR: Not implemented." << std::endl;
-   	error();
-   	return;
- !       };
-   
-   
-         
- --- 594,600 ----
-   	std::cout << "ERROR: Not implemented." << std::endl;
-   	error();
-   	return;
- !       }
-   
-   
-         
- ***************
- *** 542,548 ****
-   	std::cout << "ERROR: Not implemented." << std::endl;
-   	error();
-        	return;
- !       };
-   
-   
-         
- --- 605,611 ----
-   	std::cout << "ERROR: Not implemented." << std::endl;
-   	error();
-        	return;
- !       }
-   
-   
-         
- ***************
- *** 560,569 ****
-   
-   	const unsigned int n_radial_qp = radial_qrule->n_points();
-   	const unsigned int n_base_qp   = base_qrule->  n_points();
-   	const unsigned int n_base_mapping_sf   = dist.size();
- ! /* NOT USED	const unsigned int n_radial_mapping_sf = Radial::n_mapping_shape_functions(INVALID_ELEM);  */
-   	const unsigned int n_base_approx_sf   = base_fe->n_shape_functions();
- ! 	const unsigned int n_radial_approx_sf = Radial::n_dofs(elem_type, fe_type.order);
-   
-   
-   	// compute the phase term derivatives
- --- 623,634 ----
-   
-   	const unsigned int n_radial_qp = radial_qrule->n_points();
-   	const unsigned int n_base_qp   = base_qrule->  n_points();
- + 
-   	const unsigned int n_base_mapping_sf   = dist.size();
- ! 	const unsigned int n_radial_mapping_sf = radial_map.size();
- ! 
-   	const unsigned int n_base_approx_sf   = base_fe->n_shape_functions();
- ! 	const unsigned int n_radial_approx_sf = Radial::n_dofs(elem_type, fe_type.radial_order);
-   
-   
-   	// compute the phase term derivatives
- ***************
- *** 578,593 ****
-   	            dphasedxi[tp]   += Ss_map[i][bp] * dist[i] * radial_map   [1][rp];
-   		    dphasedeta[tp]  += St_map[i][bp] * dist[i] * radial_map   [1][rp];
-   		    dphasedzeta[tp] += S_map [i][bp] * dist[i] * dradialdv_map[1][rp];
- ! 		  };
-   
-   		tp++;
- ! 	      };
- ! 	
- ! 	  if (tp != (_n_total_qp) )
- ! 	    {
- ! 	      std::cout << "ERROR: cannot count..." << std::endl;
- ! 	      error();
- ! 	    };
-   	}
-   
-   
- --- 643,667 ----
-   	            dphasedxi[tp]   += Ss_map[i][bp] * dist[i] * radial_map   [1][rp];
-   		    dphasedeta[tp]  += St_map[i][bp] * dist[i] * radial_map   [1][rp];
-   		    dphasedzeta[tp] += S_map [i][bp] * dist[i] * dradialdv_map[1][rp];
- ! 
- ! #ifdef DEBUG
- ! 		    if (tp != (bp+rp*n_base_qp) )
- ! 		    {
- ! 		      std::cout << "ERROR: cannot count..." << std::endl
- ! 				<< " tp = " << tp 
- ! 				<< " bp = " << bp
- ! 				<< " rp = " << rp
- ! 				<< std::endl;	      
- ! 		      error();
- ! 		    }
- ! #endif		    
- ! 
- ! 		  }
-   
-   		tp++;
- ! 
- ! 	      } // loop radial and base qp's
- ! 
-   	}
-   
-   
- ***************
- *** 603,642 ****
-   		  dphideta [ bi+ri*n_base_approx_sf ][ bp+rp*n_base_qp ] = St[bi][bp] * mode[ri][rp] * som[ri];
-   		  dphidzeta[ bi+ri*n_base_approx_sf ][ bp+rp*n_base_qp ] = S [bi][bp] 
-   		      * (dmodedv[ri][rp] * som[ri] + mode[ri][rp] * dsomdv[ri]);
- ! 		};
-   
-   	
-   	// compute the overall mapping functions
-   	for (unsigned int rp=0; rp<n_radial_qp; rp++)  // over radial qp's
-   	  for (unsigned int bp=0; bp<n_base_qp; bp++)  // over base qp's
- ! 	    for (unsigned int ri=0; ri<n_radial_approx_sf; ri++)  // over radial mapping shapes
- ! 	      for (unsigned int bi=0; bi<n_base_approx_sf; bi++)  // over base   mapping shapes
-   	        {
-   		  // form the total shape function data fields
-   		  phi_map      [ bi+ri*n_base_approx_sf ][ bp+rp*n_base_qp ] = S_map [bi][bp] * radial_map   [ri][rp];
-   		  dphidxi_map  [ bi+ri*n_base_approx_sf ][ bp+rp*n_base_qp ] = Ss_map[bi][bp] * radial_map   [ri][rp];
-   		  dphideta_map [ bi+ri*n_base_approx_sf ][ bp+rp*n_base_qp ] = St_map[bi][bp] * radial_map   [ri][rp];
-   		  dphidzeta_map[ bi+ri*n_base_approx_sf ][ bp+rp*n_base_qp ] = S_map [bi][bp] * dradialdv_map[ri][rp];
- ! 		};
-   			
-   	return;
- !       };
-   
-   
-       default:
-         error();
- !     };
-   
-     error();
-     return;
-   
- ! };
- ! 
- ! 
- ! 
- ! 
- ! 
- ! 
-   
-   
-   
- --- 677,711 ----
-   		  dphideta [ bi+ri*n_base_approx_sf ][ bp+rp*n_base_qp ] = St[bi][bp] * mode[ri][rp] * som[ri];
-   		  dphidzeta[ bi+ri*n_base_approx_sf ][ bp+rp*n_base_qp ] = S [bi][bp] 
-   		      * (dmodedv[ri][rp] * som[ri] + mode[ri][rp] * dsomdv[ri]);
- ! 		}
-   
-   	
-   	// compute the overall mapping functions
-   	for (unsigned int rp=0; rp<n_radial_qp; rp++)  // over radial qp's
-   	  for (unsigned int bp=0; bp<n_base_qp; bp++)  // over base qp's
- ! 	    for (unsigned int ri=0; ri<n_radial_mapping_sf; ri++)  // over radial mapping shapes
- ! 	      for (unsigned int bi=0; bi<n_base_mapping_sf; bi++)  // over base   mapping shapes
-   	        {
-   		  // form the total shape function data fields
-   		  phi_map      [ bi+ri*n_base_approx_sf ][ bp+rp*n_base_qp ] = S_map [bi][bp] * radial_map   [ri][rp];
-   		  dphidxi_map  [ bi+ri*n_base_approx_sf ][ bp+rp*n_base_qp ] = Ss_map[bi][bp] * radial_map   [ri][rp];
-   		  dphideta_map [ bi+ri*n_base_approx_sf ][ bp+rp*n_base_qp ] = St_map[bi][bp] * radial_map   [ri][rp];
-   		  dphidzeta_map[ bi+ri*n_base_approx_sf ][ bp+rp*n_base_qp ] = S_map [bi][bp] * dradialdv_map[ri][rp];
- ! 		}
-   			
- + 
-   	return;
- !       }
-   
-   
-       default:
-         error();
- !     }
-   
-     error();
-     return;
-   
- ! }
-   
-   
-   
- ***************
- *** 665,678 ****
-   	std::cout << "ERROR: Not implemented." << std::endl;
-   	error();
-   	break;
- !       };
-   
-       case 2:
-         {
-   	std::cout << "ERROR: Not implemented." << std::endl;
-   	error();
-   	break;
- !       };
-       
-       case 3:
-         {
- --- 734,747 ----
-   	std::cout << "ERROR: Not implemented." << std::endl;
-   	error();
-   	break;
- !       }
-   
-       case 2:
-         {
-   	std::cout << "ERROR: Not implemented." << std::endl;
-   	error();
-   	break;
- !       }
-       
-       case 3:
-         {
- ***************
- *** 697,703 ****
-   		dphidz[i][p] = (dphidxi[i][p]*dxidz_map[p] +
-   				dphideta[i][p]*detadz_map[p] +
-   				dphidzeta[i][p]*dzetadz_map[p]);	      
- ! 	    };
-   
-   
-   	// This is the derivative of the phase term of this infinite element
- --- 766,772 ----
-   		dphidz[i][p] = (dphidxi[i][p]*dxidz_map[p] +
-   				dphideta[i][p]*detadz_map[p] +
-   				dphidzeta[i][p]*dzetadz_map[p]);	      
- ! 	    }
-   
-   
-   	// This is the derivative of the phase term of this infinite element
- ***************
- *** 724,742 ****
-   		
-   	    dweight[p](2) = dweightdv[p] * dzetadz_map[p];
-   
- ! 	  };
-   
-   	break;
- !       };
-   
-   
-   
-       default:
-         {
-   	error();
- !       };
- !     };
- ! };
-   
-   
-   
- --- 793,811 ----
-   		
-   	    dweight[p](2) = dweightdv[p] * dzetadz_map[p];
-   
- ! 	  }
-   
-   	break;
- !       }
-   
-   
-   
-       default:
-         {
-   	error();
- !       }
- !     }
- ! }
-   
-   
-   
- Index: src/fe/inf_fe_boundary.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/inf_fe_boundary.C,v
- retrieving revision 1.2
- retrieving revision 1.3
- diff -c -r1.2 -r1.3
- *** src/fe/inf_fe_boundary.C	29 Jan 2003 20:58:30 -0000	1.2
- --- src/fe/inf_fe_boundary.C	13 Feb 2003 22:56:10 -0000	1.3
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 43,49 ****
-     std::cerr << "ERROR: Boundary conditions for infinite elements "
-   	    << "not implemented!" << std::endl;
-     error();
- ! };
-   
-   
-   
- --- 43,49 ----
-     std::cerr << "ERROR: Boundary conditions for infinite elements "
-   	    << "not implemented!" << std::endl;
-     error();
- ! }
-   
-   
-   
- ***************
- *** 59,65 ****
-     std::cerr << "ERROR: Boundary conditions for infinite elements "
-   	    << "not implemented!" << std::endl;
-     error();
- ! };
-   
-   
-   
- --- 59,65 ----
-     std::cerr << "ERROR: Boundary conditions for infinite elements "
-   	    << "not implemented!" << std::endl;
-     error();
- ! }
-   
-   
-   
- Index: src/fe/inf_fe_jacobi_20_00_eval.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/inf_fe_jacobi_20_00_eval.C,v
- retrieving revision 1.2
- retrieving revision 1.3
- diff -c -r1.2 -r1.3
- *** src/fe/inf_fe_jacobi_20_00_eval.C	3 Feb 2003 03:51:49 -0000	1.2
- --- src/fe/inf_fe_jacobi_20_00_eval.C	13 Feb 2003 22:56:10 -0000	1.3
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 96,106 ****
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     };
-   
-     // we never end up here.
-     return 0.;
- ! };
-   
-   
-   
- --- 96,106 ----
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     }
-   
-     // we never end up here.
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 175,185 ****
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     };
-   
-     // we never end up here.
-     return 0.;
- ! };
-   
-   
-   
- --- 175,185 ----
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     }
-   
-     // we never end up here.
-     return 0.;
- ! }
-   
-   
-   
- Index: src/fe/inf_fe_jacobi_30_00_eval.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/inf_fe_jacobi_30_00_eval.C,v
- retrieving revision 1.2
- retrieving revision 1.3
- diff -c -r1.2 -r1.3
- *** src/fe/inf_fe_jacobi_30_00_eval.C	3 Feb 2003 03:51:49 -0000	1.2
- --- src/fe/inf_fe_jacobi_30_00_eval.C	13 Feb 2003 22:56:10 -0000	1.3
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 96,106 ****
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     };
-   
-     // we never end up here.
-     return 0.;
- ! };
-   
-   
-   
- --- 96,106 ----
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     }
-   
-     // we never end up here.
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 175,185 ****
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     };
-   
-     // we never end up here.
-     return 0.;
- ! };
-   
-   
-   
- --- 175,185 ----
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     }
-   
-     // we never end up here.
-     return 0.;
- ! }
-   
-   
-   
- Index: src/fe/inf_fe_lagrange_eval.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/inf_fe_lagrange_eval.C,v
- retrieving revision 1.2
- retrieving revision 1.4
- diff -c -r1.2 -r1.4
- *** src/fe/inf_fe_lagrange_eval.C	3 Feb 2003 03:51:49 -0000	1.2
- --- src/fe/inf_fe_lagrange_eval.C	13 Feb 2003 22:56:10 -0000	1.4
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 43,49 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case FIRST:
- --- 43,49 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case FIRST:
- ***************
- *** 58,64 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case SECOND:
- --- 58,64 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case SECOND:
- ***************
- *** 76,82 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case THIRD:
- --- 76,82 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case THIRD:
- ***************
- *** 97,103 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case FOURTH:
- --- 97,103 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case FOURTH:
- ***************
- *** 121,127 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case FIFTH:
- --- 121,127 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case FIFTH:
- ***************
- *** 148,154 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case SIXTH:
- --- 148,154 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case SIXTH:
- ***************
- *** 178,184 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case SEVENTH:
- --- 178,184 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case SEVENTH:
- ***************
- *** 211,217 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case EIGHTH:
- --- 211,217 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case EIGHTH:
- ***************
- *** 247,253 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case NINTH:
- --- 247,253 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case NINTH:
- ***************
- *** 286,292 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case TENTH:
- --- 286,292 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case TENTH:
- ***************
- *** 328,334 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case ELEVENTH:
- --- 328,334 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case ELEVENTH:
- ***************
- *** 373,379 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case TWELFTH:
- --- 373,379 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case TWELFTH:
- ***************
- *** 421,427 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case THIRTEENTH:
- --- 421,427 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case THIRTEENTH:
- ***************
- *** 472,478 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case FOURTEENTH:
- --- 472,478 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case FOURTEENTH:
- ***************
- *** 526,532 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       // provided the constructor worked fine, we should never end up here.
- --- 526,532 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       // provided the constructor worked fine, we should never end up here.
- ***************
- *** 534,544 ****
-         std::cerr << "Lagrange polynomials only defined up to 15. "
-   		<< std::endl;
-         error();
- !     };
-   
-     // we never end up here.
-     return 0.;
- ! };
-   
-   
-   
- --- 534,544 ----
-         std::cerr << "Lagrange polynomials only defined up to 15. "
-   		<< std::endl;
-         error();
- !     }
-   
-     // we never end up here.
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 560,566 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case FIRST:
- --- 560,566 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case FIRST:
- ***************
- *** 575,581 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case SECOND:
- --- 575,581 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case SECOND:
- ***************
- *** 593,599 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case THIRD:
- --- 593,599 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case THIRD:
- ***************
- *** 614,620 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case FOURTH:
- --- 614,620 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case FOURTH:
- ***************
- *** 638,644 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case FIFTH:
- --- 638,644 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case FIFTH:
- ***************
- *** 665,671 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case SIXTH:
- --- 665,671 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case SIXTH:
- ***************
- *** 695,701 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case SEVENTH:
- --- 695,701 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case SEVENTH:
- ***************
- *** 728,734 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case EIGHTH:
- --- 728,734 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case EIGHTH:
- ***************
- *** 764,770 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case NINTH:
- --- 764,770 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case NINTH:
- ***************
- *** 803,809 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case TENTH:
- --- 803,809 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case TENTH:
- ***************
- *** 845,851 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case ELEVENTH:
- --- 845,851 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case ELEVENTH:
- ***************
- *** 890,896 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case TWELFTH:
- --- 890,896 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case TWELFTH:
- ***************
- *** 938,944 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case THIRTEENTH:
- --- 938,944 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case THIRTEENTH:
- ***************
- *** 989,995 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       case FOURTEENTH:
- --- 989,995 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       case FOURTEENTH:
- ***************
- *** 1043,1049 ****
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         };
-   
-   
-       // provided the constructor worked fine, we should never end up here.
- --- 1043,1049 ----
-           default:
-             std::cerr << "bad index i = " << i << std::endl;
-             error();
- !         }
-   
-   
-       // provided the constructor worked fine, we should never end up here.
- ***************
- *** 1051,1077 ****
-         std::cerr << "Lagrange polynomials only defined up to 15. "
-   		<< std::endl;
-         error();
- !     };
-   
-     // we never end up here.
-     return 0.;
- ! };
-   
-   
-   
-   //-----------------------------------------------------------------
-   // Explicit instantiations
- ! template class InfFE<1,INF_LAGRANGE,CARTESIAN>;
- ! template class InfFE<2,INF_LAGRANGE,CARTESIAN>;
- ! template class InfFE<3,INF_LAGRANGE,CARTESIAN>;
- ! 
- ! // template class InfFE<1,INF_LAGRANGE,SPHERICAL>;
- ! // template class InfFE<2,INF_LAGRANGE,SPHERICAL>;
- ! // template class InfFE<3,INF_LAGRANGE,SPHERICAL>;
- ! 
- ! // template class InfFE<1,INF_LAGRANGE,ELLIPSOIDAL>;
- ! // template class InfFE<2,INF_LAGRANGE,ELLIPSOIDAL>;
- ! // template class InfFE<3,INF_LAGRANGE,ELLIPSOIDAL>;
-   
-   
-   
- --- 1051,1077 ----
-         std::cerr << "Lagrange polynomials only defined up to 15. "
-   		<< std::endl;
-         error();
- !     }
-   
-     // we never end up here.
-     return 0.;
- ! }
-   
-   
-   
-   //-----------------------------------------------------------------
-   // Explicit instantiations
- ! template class InfFE<1,LAGRANGE,CARTESIAN>;
- ! template class InfFE<2,LAGRANGE,CARTESIAN>;
- ! template class InfFE<3,LAGRANGE,CARTESIAN>;
- ! 
- ! // template class InfFE<1,LAGRANGE,SPHERICAL>;
- ! // template class InfFE<2,LAGRANGE,SPHERICAL>;
- ! // template class InfFE<3,LAGRANGE,SPHERICAL>;
- ! 
- ! // template class InfFE<1,LAGRANGE,ELLIPSOIDAL>;
- ! // template class InfFE<2,LAGRANGE,ELLIPSOIDAL>;
- ! // template class InfFE<3,LAGRANGE,ELLIPSOIDAL>;
-   
-   
-   
- Index: src/fe/inf_fe_legendre_eval.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/inf_fe_legendre_eval.C,v
- retrieving revision 1.2
- retrieving revision 1.3
- diff -c -r1.2 -r1.3
- *** src/fe/inf_fe_legendre_eval.C	3 Feb 2003 03:51:49 -0000	1.2
- --- src/fe/inf_fe_legendre_eval.C	13 Feb 2003 22:56:10 -0000	1.3
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 90,100 ****
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     };
-   
-     // we never end up here.
-     return 0.;
- ! };
-   
-   
-   
- --- 90,100 ----
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     }
-   
-     // we never end up here.
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 163,173 ****
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     };
-   
-     // we never end up here.
-     return 0.;
- ! };
-   
-   
-   
- --- 163,173 ----
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     }
-   
-     // we never end up here.
-     return 0.;
- ! }
-   
-   
-   
- Index: src/fe/inf_fe_map_eval.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/inf_fe_map_eval.C,v
- retrieving revision 1.2
- retrieving revision 1.3
- diff -c -r1.2 -r1.3
- *** src/fe/inf_fe_map_eval.C	3 Feb 2003 03:51:49 -0000	1.2
- --- src/fe/inf_fe_map_eval.C	13 Feb 2003 22:56:10 -0000	1.3
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 43,54 ****
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     };
-   
-     // we never end up here.
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 43,54 ----
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     }
-   
-     // we never end up here.
-     error();
-     return 0.;
- ! }
-   
-   
-   
- ***************
- *** 70,81 ****
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     };
-   
-     // we never end up here.
-     error();
-     return 0.;
- ! };
-   
-   
-   
- --- 70,81 ----
-         std::cerr << "bad index i = " << i << std::endl;
-         error();
-   
- !     }
-   
-     // we never end up here.
-     error();
-     return 0.;
- ! }
-   
-   
-   
- Index: src/fe/inf_fe_static.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/fe/inf_fe_static.C,v
- retrieving revision 1.3
- retrieving revision 1.10
- diff -c -r1.3 -r1.10
- *** src/fe/inf_fe_static.C	3 Feb 2003 03:51:49 -0000	1.3
- --- src/fe/inf_fe_static.C	20 Feb 2003 04:59:58 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 24,30 ****
-   #ifdef ENABLE_INFINITE_ELEMENTS
-   #include "inf_fe.h"
-   #include "fe_interface.h"
- ! 
-   
-   
-   
- --- 24,30 ----
-   #ifdef ENABLE_INFINITE_ELEMENTS
-   #include "inf_fe.h"
-   #include "fe_interface.h"
- ! #include "elem.h"
-   
-   
-   
- ***************
- *** 37,68 ****
-     std::cerr << "Do not define an object of this type." 
-   	    << std::endl;  
-     error(); 
- ! };
-   
-   
-   
-   template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
- ! unsigned int InfFE<Dim,T_radial,T_map>::Radial::index(const FEType& base_fe_type,
-   						      const ElemType base_elem_type,
-   						      const unsigned int i)
-   {
-     if (Dim > 1)
- !     return Radial::index( FEInterface::n_dofs(Dim-1, base_fe_type, base_elem_type), i);
-     else
-       return Radial::index(1, i);
- ! };
-   
-   
-   
-   
-   template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
-   Point InfFE<Dim,T_radial,T_map>::Radial::inverse_map(const Elem*,
-   						     const Real)
-   
-   {
-     std::cerr << "ERROR: Radial::inverse_map() not yet implemented." << std::endl;
-     error();
- ! };
-   
-   
-   
- --- 37,72 ----
-     std::cerr << "Do not define an object of this type." 
-   	    << std::endl;  
-     error(); 
- ! }
-   
-   
-   
-   template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
- ! unsigned int InfFE<Dim,T_radial,T_map>::Radial::index(const FEType& fe_type,
-   						      const ElemType base_elem_type,
-   						      const unsigned int i)
-   {
-     if (Dim > 1)
- !     return Radial::index( FEInterface::n_dofs(Dim-1, fe_type, base_elem_type), i);
-     else
-       return Radial::index(1, i);
- ! }
-   
-   
-   
-   
-   template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
-   Point InfFE<Dim,T_radial,T_map>::Radial::inverse_map(const Elem*,
- + 						     const Real,
-   						     const Real)
-   
-   {
-     std::cerr << "ERROR: Radial::inverse_map() not yet implemented." << std::endl;
-     error();
- ! 
- !   Point p;
- !   return p;
- ! }
-   
-   
-   
- ***************
- *** 79,98 ****
-     std::cerr << "Do not define an object of this type." 
-   	    << std::endl;  
-     error(); 
- ! };
-   
-   
-   
-   template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
- ! unsigned int InfFE<Dim,T_radial,T_map>::Base::index(const FEType& base_fe_type,
-   						    const ElemType base_elem_type,
-   						    const unsigned int i)
-   {
-     if (Dim > 1)
- !     return Base::index(FEInterface::n_dofs(Dim-1, base_fe_type, base_elem_type), i);
-     else
-       return Base::index(1, i);
- ! };
-   
-   
-   
- --- 83,113 ----
-     std::cerr << "Do not define an object of this type." 
-   	    << std::endl;  
-     error(); 
- ! }
- ! 
- ! 
- ! 
- ! 
- ! template <unsigned int Dim, FEFamily T_radial, InfMapType T_base>
- ! Elem* InfFE<Dim,T_radial,T_base>::Base::build_elem (const Elem* inf_elem)
- ! { 
- !   AutoPtr<Elem> ape(inf_elem->build_side(0)); 
- !   return ape.release(); 
- ! }
- ! 
-   
-   
-   
-   template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
- ! unsigned int InfFE<Dim,T_radial,T_map>::Base::index(const FEType& fe_type,
-   						    const ElemType base_elem_type,
-   						    const unsigned int i)
-   {
-     if (Dim > 1)
- !     return Base::index(FEInterface::n_dofs(Dim-1, fe_type, base_elem_type), i);
-     else
-       return Base::index(1, i);
- ! }
-   
-   
-   
- ***************
- *** 101,107 ****
-   ElemType InfFE<Dim,T_radial,T_base>::Base::get_elem_type(const ElemType type)
-   {
-     switch (type)
- !   {
-         // 3D infinite elements:
-         // with Dim=3 -> infinite elements on their own
-         case INFHEX8:
- --- 116,122 ----
-   ElemType InfFE<Dim,T_radial,T_base>::Base::get_elem_type(const ElemType type)
-   {
-     switch (type)
- !     {
-         // 3D infinite elements:
-         // with Dim=3 -> infinite elements on their own
-         case INFHEX8:
- ***************
- *** 136,150 ****
-   	  return INVALID_ELEM;
-   
-         default:
- !       {
-   	  std::cerr << "ERROR: Unsupported element type!: " << type
-   		    << std::endl;
-   	  error();
- !       }
-   
- -   }
-   
- ! };
-   
-   
-   
- --- 151,167 ----
-   	  return INVALID_ELEM;
-   
-         default:
- ! 	{
-   	  std::cerr << "ERROR: Unsupported element type!: " << type
-   		    << std::endl;
-   	  error();
- ! 	}
- !     }
-   
-   
- !   error();
- !   return INVALID_ELEM;
- ! }
-   
-   
-   
- ***************
- *** 163,169 ****
-   							   const ElemType t)
-   {
-     return InfFE<Dim,T_radial,T_map>::n_dofs(fet, t);
- ! };
-   
-   
-   
- --- 180,186 ----
-   							   const ElemType t)
-   {
-     return InfFE<Dim,T_radial,T_map>::n_dofs(fet, t);
- ! }
-   
-   
-   
- ***************
- *** 173,186 ****
-   unsigned int InfFE<Dim,T_radial,T_map>::n_dofs(const FEType& fet,
-   					       const ElemType inf_elem_type)
-   {
- !   const ElemType     base_et  ( Base::get_elem_type(inf_elem_type) );
- !   const FEType       base_fet ( Base::build_fe_type(fet) );
-       
-     if (Dim > 1)
- !     return FEInterface::n_dofs(Dim-1, base_fet, base_et) * Radial::n_dofs(inf_elem_type, fet.order);
-     else
- !     return Radial::n_dofs(inf_elem_type, fet.order);
- ! };
-   		
-   
-   
- --- 190,204 ----
-   unsigned int InfFE<Dim,T_radial,T_map>::n_dofs(const FEType& fet,
-   					       const ElemType inf_elem_type)
-   {
- !   assert ( FEInterface::is_InfFE_elem(inf_elem_type) );
- ! 
- !   const ElemType base_et(Base::get_elem_type(inf_elem_type));
-       
-     if (Dim > 1)
- !     return FEInterface::n_dofs(Dim-1, fet, base_et) * Radial::n_dofs(inf_elem_type, fet.radial_order);
-     else
- !     return Radial::n_dofs(inf_elem_type, fet.radial_order);
- ! }
-   		
-   
-   
- ***************
- *** 191,207 ****
-   						       const ElemType inf_elem_type,
-   						       const unsigned int n)
-   {
-     const ElemType     base_et  ( Base::get_elem_type(inf_elem_type) );
- -   const FEType       base_fet ( Base::build_fe_type(fet) );
-   
- !   const unsigned int n_base   ( Base::index  (base_fet, base_et, n) );
- !   const unsigned int n_radial ( Radial::index(base_fet, base_et, n) );
-   
-     if (Dim > 1)
- !     return FEInterface::n_dofs_at_node(Dim-1, base_fet, base_et, n_base) 
- !         * Radial::n_dofs_at_node(inf_elem_type, fet.order, n_radial);
-     else
- !     return Radial::n_dofs_at_node(inf_elem_type, fet.order, n_radial);
-   }
-   
-   
- --- 209,228 ----
-   						       const ElemType inf_elem_type,
-   						       const unsigned int n)
-   {
- +   assert ( FEInterface::is_InfFE_elem(inf_elem_type) );
- + 
-     const ElemType     base_et  ( Base::get_elem_type(inf_elem_type) );
-   
- !   const unsigned int n_base   ( Base::index  (fet, base_et, n) );
- !   const unsigned int n_radial ( Radial::index(fet, base_et, n) );
- ! 
- ! //  std::cout << "n_base=" << n_base << ", n_radial=" << n_radial << ", n=" << n << std::endl;
-   
-     if (Dim > 1)
- !     return FEInterface::n_dofs_at_node(Dim-1, fet, base_et, n_base) 
- !         * Radial::n_dofs_at_node(inf_elem_type, fet.radial_order, n_radial);
-     else
- !     return Radial::n_dofs_at_node(inf_elem_type, fet.radial_order, n_radial);
-   }
-   
-   
- ***************
- *** 211,225 ****
-   unsigned int InfFE<Dim,T_radial,T_map>::n_dofs_per_elem(const FEType& fet,
-   							const ElemType inf_elem_type)
-   {
-     const ElemType     base_et  ( Base::get_elem_type(inf_elem_type) );
- -   const FEType       base_fet ( Base::build_fe_type(fet) );
-   
-     if (Dim > 1)
- !     return FEInterface::n_dofs_per_elem(Dim-1, base_fet, base_et) 
- !         * Radial::n_dofs_per_elem(inf_elem_type, fet.order);
-     else
- !     return Radial::n_dofs_per_elem(inf_elem_type, fet.order);
- ! };
-   
-   
-   
- --- 232,247 ----
-   unsigned int InfFE<Dim,T_radial,T_map>::n_dofs_per_elem(const FEType& fet,
-   							const ElemType inf_elem_type)
-   {
- +   assert ( FEInterface::is_InfFE_elem(inf_elem_type) );
- + 
-     const ElemType     base_et  ( Base::get_elem_type(inf_elem_type) );
-   
-     if (Dim > 1)
- !     return FEInterface::n_dofs_per_elem(Dim-1, fet, base_et) 
- !         * Radial::n_dofs_per_elem(inf_elem_type, fet.radial_order);
-     else
- !     return Radial::n_dofs_per_elem(inf_elem_type, fet.radial_order);
- ! }
-   
-   
-   
- ***************
- *** 230,251 ****
-   template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
-   void InfFE<Dim,T_radial,T_map>::nodal_soln(const FEType&,
-   					   const Elem*,
- ! 					   const std::vector<Complex>&,
- ! 					   std::vector<Complex>&)
-   {
-     std::cerr << "ERROR: The concept of a nodal solution is not "
-   	    << "applicable to infinite elements!" << std::endl;
-     error();  
- ! };
-   
-   
-   
-   
-   template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
-   Point InfFE<Dim,T_radial,T_map>::inverse_map (const Elem*,
- ! 					      const Point& physical_point)
-   {
- ! //TODO:[DD] fix inverse_map() for all three dimensions, specialize for each Dim, so that this gets more effective (for field point processing...)
-   
-   /*
-   determine origin by simply back-computing...
- --- 252,274 ----
-   template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
-   void InfFE<Dim,T_radial,T_map>::nodal_soln(const FEType&,
-   					   const Elem*,
- ! 					   const std::vector<Number>&,
- ! 					   std::vector<Number>&)
-   {
-     std::cerr << "ERROR: The concept of a nodal solution is not "
-   	    << "applicable to infinite elements!" << std::endl;
-     error();  
- ! }
-   
-   
-   
-   
-   template <unsigned int Dim, FEFamily T_radial, InfMapType T_map>
-   Point InfFE<Dim,T_radial,T_map>::inverse_map (const Elem*,
- ! 					      const Point& physical_point,
- ! 					      const Real)
-   {
- ! //To do: fix inverse_map() for all three dimensions, specialize for each Dim, so that this gets more effective (for field point processing...)
-   
-   /*
-   determine origin by simply back-computing...
- ***************
- *** 261,271 ****
-   */
-   
-     return physical_point;
- ! };
-   
-   
-   
- ! //TODO:[DD] Probably have to fix on_reference_element() also for InfFE
-   /*
-   bool FEBase::on_reference_element(const Point& p, const ElemType t, const Real eps)
-   */
- --- 284,294 ----
-   */
-   
-     return physical_point;
- ! }
-   
-   
-   
- ! //To do: Probably have to fix on_reference_element() also for InfFE
-   /*
-   bool FEBase::on_reference_element(const Point& p, const ElemType t, const Real eps)
-   */
- ***************
- *** 284,305 ****
-     assert (Dim != 0);
-   
-     const ElemType     base_et  ( Base::get_elem_type(type) );
- !   const FEType       base_fet ( Base::build_fe_type(fet) );
- !   const unsigned int i_base   ( Base::index  (base_fet, base_et, i) );
-   
- !   const Order        o_radial ( fet.order );
- !   const unsigned int i_radial ( Radial::index(base_fet, base_et, i) );
-     const Real         v        ( p(Dim-1) );  // holds for all Dim, except for 0, but we don't inst Dim=0 ;-)
-   
-   
-     if (Dim > 1)
- !     return FEInterface::shape (Dim-1, base_fet, base_et, i_base, p)
-           * InfFE<Dim,T_radial,T_map>::eval (v, o_radial, i_radial)
-           * InfFE<Dim,T_radial,T_map>::Radial::decay(v);
-     else
-       return InfFE<Dim,T_radial,T_map>::eval (v, o_radial, i_radial)
-           * InfFE<Dim,T_radial,T_map>::Radial::decay(v);
- ! };
-   
-   
-   
- --- 307,327 ----
-     assert (Dim != 0);
-   
-     const ElemType     base_et  ( Base::get_elem_type(type) );
- !   const unsigned int i_base   ( Base::index  (fet, base_et, i) );
-   
- !   const Order        o_radial ( fet.radial_order );
- !   const unsigned int i_radial ( Radial::index(fet, base_et, i) );
-     const Real         v        ( p(Dim-1) );  // holds for all Dim, except for 0, but we don't inst Dim=0 ;-)
-   
-   
-     if (Dim > 1)
- !     return FEInterface::shape (Dim-1, fet, base_et, i_base, p)
-           * InfFE<Dim,T_radial,T_map>::eval (v, o_radial, i_radial)
-           * InfFE<Dim,T_radial,T_map>::Radial::decay(v);
-     else
-       return InfFE<Dim,T_radial,T_map>::eval (v, o_radial, i_radial)
-           * InfFE<Dim,T_radial,T_map>::Radial::decay(v);
- ! }
-   
-   
-   
- ***************
- *** 315,338 ****
-     assert (elem != NULL);
-     assert (Dim != 0);
-   
- !   const ElemType     base_et  ( Base::get_elem_type(elem->type()) );
- !   const FEType       base_fet ( Base::build_fe_type(fet) );
- !   const unsigned int i_base   ( Base::index  (base_fet, base_et, i) );
-   
- !   const Order        o_radial ( fet.order );
- !   const unsigned int i_radial ( Radial::index(base_fet, base_et, i) );
- !   const Real         v        ( p(Dim-1) );  // holds for all Dim, except for 0, but we don't inst Dim=0 ;-)
-   
- !   AutoPtr<Elem>      base_el  = elem->build_side(0);
-   
-     if (Dim > 1)
- !     return FEInterface::shape (Dim-1, base_fet, base_el.get(), i_base, p)
-           * InfFE<Dim,T_radial,T_map>::eval (v, o_radial, i_radial)
-           * InfFE<Dim,T_radial,T_map>::Radial::decay(v);
-     else
-       return InfFE<Dim,T_radial,T_map>::eval (v, o_radial, i_radial)
-           * InfFE<Dim,T_radial,T_map>::Radial::decay(v);
- ! };
-   
-   
-   
- --- 337,359 ----
-     assert (elem != NULL);
-     assert (Dim != 0);
-   
- !   const ElemType     base_et (Base::get_elem_type(elem->type()));
- !   const unsigned int i_base  (Base::index  (fet, base_et, i));
-   
- !   const Order        o_radial(fet.radial_order);
- !   const unsigned int i_radial(Radial::index(fet, base_et, i));
- !   const Real         v       (p(Dim-1));  // holds for all Dim, except for 0, but we don't inst Dim=0 ;-)
-   
- !   AutoPtr<Elem>      base_el(elem->build_side(0));
-   
-     if (Dim > 1)
- !     return FEInterface::shape (Dim-1, fet, base_el.get(), i_base, p)
-           * InfFE<Dim,T_radial,T_map>::eval (v, o_radial, i_radial)
-           * InfFE<Dim,T_radial,T_map>::Radial::decay(v);
-     else
-       return InfFE<Dim,T_radial,T_map>::eval (v, o_radial, i_radial)
-           * InfFE<Dim,T_radial,T_map>::Radial::decay(v);
- ! }
-   
-   
-   
- Index: src/geom/cell_hex.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_hex.C,v
- retrieving revision 1.7
- retrieving revision 1.8
- diff -c -r1.7 -r1.8
- *** src/geom/cell_hex.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/geom/cell_hex.C	13 Feb 2003 22:56:10 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 100,111 ****
-   	error();
-   	return face;
-         }
- !     };
-   
-     // We'll never get here.
-     error();
-     return face;
- ! };
-   
-   
-   
- --- 100,111 ----
-   	error();
-   	return face;
-         }
- !     }
-   
-     // We'll never get here.
-     error();
-     return face;
- ! }
-   
-   
-   
- ***************
- *** 253,259 ****
-       // Will never get here...
-       error();
-       return 0.;
- ! };
-   
-   
-   
- --- 253,259 ----
-       // Will never get here...
-       error();
-       return 0.;
- ! }
-   
-   
-   
- ***************
- *** 322,325 ****
-       }
-   
-     return bounds;
- ! };
- --- 322,325 ----
-       }
-   
-     return bounds;
- ! }
- Index: src/geom/cell_hex20.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_hex20.C,v
- retrieving revision 1.8
- retrieving revision 1.11
- diff -c -r1.8 -r1.11
- *** src/geom/cell_hex20.C	3 Feb 2003 03:51:49 -0000	1.8
- --- src/geom/cell_hex20.C	20 Feb 2003 23:18:09 -0000	1.11
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 52,58 ****
-   	face->set_node(7) = get_node(8);
-   
-   	return face;
- !       };
-       case 1:  // the face at y = 0
-         {
-   	face->set_node(0) = get_node(0);
- --- 52,58 ----
-   	face->set_node(7) = get_node(8);
-   
-   	return face;
- !       }
-       case 1:  // the face at y = 0
-         {
-   	face->set_node(0) = get_node(0);
- ***************
- *** 65,71 ****
-   	face->set_node(7) = get_node(12);
-   
-   	return face;
- !       };
-       case 2:  // the face at x=1
-         {
-   	face->set_node(0) = get_node(1);
- --- 65,71 ----
-   	face->set_node(7) = get_node(12);
-   
-   	return face;
- !       }
-       case 2:  // the face at x=1
-         {
-   	face->set_node(0) = get_node(1);
- ***************
- *** 78,84 ****
-   	face->set_node(7) = get_node(13);
-   
-   	return face;
- !       };
-       case 3: // the face at y=1
-         {
-   	face->set_node(0) = get_node(2);
- --- 78,84 ----
-   	face->set_node(7) = get_node(13);
-   
-   	return face;
- !       }
-       case 3: // the face at y=1
-         {
-   	face->set_node(0) = get_node(2);
- ***************
- *** 91,97 ****
-   	face->set_node(7) = get_node(14);
-   
-   	return face;
- !       };
-       case 4: // the face at x=0
-         {
-   	face->set_node(0) = get_node(3);
- --- 91,97 ----
-   	face->set_node(7) = get_node(14);
-   
-   	return face;
- !       }
-       case 4: // the face at x=0
-         {
-   	face->set_node(0) = get_node(3);
- ***************
- *** 104,110 ****
-   	face->set_node(7) = get_node(15);
-   
-   	return face;
- !       };
-       case 5: // the face at z=1
-         {
-   	face->set_node(0) = get_node(4);
- --- 104,110 ----
-   	face->set_node(7) = get_node(15);
-   
-   	return face;
- !       }
-       case 5: // the face at z=1
-         {
-   	face->set_node(0) = get_node(4);
- ***************
- *** 117,134 ****
-   	face->set_node(7) = get_node(19);
-   
-   	return face;
- !       };
-       default:
-         {
-   	error();
-   	return face;
-         }
- !     };
-   
-     // We'll never get here.
-     error();
-     return face;
- ! };
-   
-   
-   
- --- 117,134 ----
-   	face->set_node(7) = get_node(19);
-   
-   	return face;
- !       }
-       default:
-         {
-   	error();
-   	return face;
-         }
- !     }
-   
-     // We'll never get here.
-     error();
-     return face;
- ! }
-   
-   
-   
- ***************
- *** 159,168 ****
-       default:
-         error();
-         
- !     };
-     
-     return conn;
- ! };
-   
-   
-   
- --- 159,168 ----
-       default:
-         error();
-         
- !     }
-     
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 190,202 ****
-     (*conn)[7] = node(7);
-   
-     return;
- ! };
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const Real Hex20::embedding_matrix[8][20][20] =
-   {
-     // embedding matrix for child 0
-     {
- --- 190,202 ----
-     (*conn)[7] = node(7);
-   
-     return;
- ! }
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const float  Hex20::embedding_matrix[8][20][20] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 427,434 ****
-         {
-   	_children[c] = new Hex20(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-   
-     // Compute new nodal locations
- --- 427,434 ----
-         {
-   	_children[c] = new Hex20(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-   
-     // Compute new nodal locations
- ***************
- *** 445,451 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 445,451 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 455,462 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 455,462 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 470,482 ****
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<4; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	};
- !   };
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   #endif
- --- 470,482 ----
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<4; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	}
- !   }
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   #endif
- Index: src/geom/cell_hex27.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_hex27.C,v
- retrieving revision 1.8
- retrieving revision 1.11
- diff -c -r1.8 -r1.11
- *** src/geom/cell_hex27.C	3 Feb 2003 03:51:49 -0000	1.8
- --- src/geom/cell_hex27.C	20 Feb 2003 23:18:09 -0000	1.11
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 53,59 ****
-   	face->set_node(8) = get_node(20);
-   
-   	return face;
- !       };
-       case 1:  // the face at y = 0
-         {
-   	face->set_node(0) = get_node(0);
- --- 53,59 ----
-   	face->set_node(8) = get_node(20);
-   
-   	return face;
- !       }
-       case 1:  // the face at y = 0
-         {
-   	face->set_node(0) = get_node(0);
- ***************
- *** 67,73 ****
-   	face->set_node(8) = get_node(21);
-   
-   	return face;
- !       };
-       case 2:  // the face at x=1
-         {
-   	face->set_node(0) = get_node(1);
- --- 67,73 ----
-   	face->set_node(8) = get_node(21);
-   
-   	return face;
- !       }
-       case 2:  // the face at x=1
-         {
-   	face->set_node(0) = get_node(1);
- ***************
- *** 81,87 ****
-   	face->set_node(8) = get_node(22);
-   
-   	return face;
- !       };
-       case 3: // the face at y=1
-         {
-   	face->set_node(0) = get_node(2);
- --- 81,87 ----
-   	face->set_node(8) = get_node(22);
-   
-   	return face;
- !       }
-       case 3: // the face at y=1
-         {
-   	face->set_node(0) = get_node(2);
- ***************
- *** 95,101 ****
-   	face->set_node(8) = get_node(23);
-   
-   	return face;
- !       };
-       case 4: // the face at x=0
-         {
-   	face->set_node(0) = get_node(3);
- --- 95,101 ----
-   	face->set_node(8) = get_node(23);
-   
-   	return face;
- !       }
-       case 4: // the face at x=0
-         {
-   	face->set_node(0) = get_node(3);
- ***************
- *** 109,115 ****
-   	face->set_node(8) = get_node(24);
-   
-   	return face;
- !       };
-       case 5: // the face at z=1
-         {
-   	face->set_node(0) = get_node(4);
- --- 109,115 ----
-   	face->set_node(8) = get_node(24);
-   
-   	return face;
- !       }
-       case 5: // the face at z=1
-         {
-   	face->set_node(0) = get_node(4);
- ***************
- *** 123,140 ****
-   	face->set_node(8) = get_node(25);
-   
-   	return face;
- !       };
-       default:
-         {
-   	error();
-   	return face;
-         }
- !     };
-   
-     // We'll never get here.
-     error();
-     return face;
- ! };
-   
-   
-   
- --- 123,140 ----
-   	face->set_node(8) = get_node(25);
-   
-   	return face;
- !       }
-       default:
-         {
-   	error();
-   	return face;
-         }
- !     }
-   
-     // We'll never get here.
-     error();
-     return face;
- ! }
-   
-   
-   
- ***************
- *** 255,264 ****
-       default:
-         error();
-         
- !     };
-     
-     return conn;
- ! };
-   
-   
-   
- --- 255,264 ----
-       default:
-         error();
-         
- !     }
-     
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 384,399 ****
-   
-       default:
-         error();      
- !     };
-     
-     return;
- ! };
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const Real Hex27::embedding_matrix[8][27][27] =
-     {
-       // embedding matrix for child 0
-       {
- --- 384,399 ----
-   
-       default:
-         error();      
- !     }
-     
-     return;
- ! }
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const float  Hex27::embedding_matrix[8][27][27] =
-     {
-       // embedding matrix for child 0
-       {
- ***************
- *** 680,687 ****
-         {
-   	_children[c] = new Hex27(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-   
-     // Compute new nodal locations
- --- 680,687 ----
-         {
-   	_children[c] = new Hex27(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-   
-     // Compute new nodal locations
- ***************
- *** 698,704 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 698,704 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 708,715 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 708,715 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 723,735 ****
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<4; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	};
- !   };
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   #endif
- --- 723,735 ----
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<4; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	}
- !   }
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   #endif
- Index: src/geom/cell_hex8.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_hex8.C,v
- retrieving revision 1.8
- retrieving revision 1.11
- diff -c -r1.8 -r1.11
- *** src/geom/cell_hex8.C	3 Feb 2003 03:51:49 -0000	1.8
- --- src/geom/cell_hex8.C	20 Feb 2003 23:18:10 -0000	1.11
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 100,111 ****
-   	error();
-   	return face;
-         }
- !     };
-   
-     // We'll never get here.
-     error();
-     return face;
- ! };
-   
-   
-   
- --- 100,111 ----
-   	error();
-   	return face;
-         }
- !     }
-   
-     // We'll never get here.
-     error();
-     return face;
- ! }
-   
-   
-   
- ***************
- *** 126,132 ****
-     conn[7] = node(7)+1;
-   
-     return conn;
- ! };
-   
-   
-   
- --- 126,132 ----
-     conn[7] = node(7)+1;
-   
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 154,166 ****
-     (*conn)[7] = node(7);
-   
-     return;
- ! };
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const Real Hex8::embedding_matrix[8][8][8] =
-   {
-     // embedding matrix for child 0
-     {
- --- 154,166 ----
-     (*conn)[7] = node(7);
-   
-     return;
- ! }
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const float  Hex8::embedding_matrix[8][8][8] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 295,302 ****
-         {
-   	_children[c] = new Hex8(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-   
-     // Compute new nodal locations
- --- 295,302 ----
-         {
-   	_children[c] = new Hex8(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-   
-     // Compute new nodal locations
- ***************
- *** 313,319 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 313,319 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 323,330 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 323,330 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 338,350 ****
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<4; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	};
- !   };
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   #endif
- --- 338,350 ----
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<4; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	}
- !   }
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   #endif
- Index: src/geom/cell_inf_hex16.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_inf_hex16.C,v
- retrieving revision 1.8
- retrieving revision 1.11
- diff -c -r1.8 -r1.11
- *** src/geom/cell_inf_hex16.C	3 Feb 2003 03:51:49 -0000	1.8
- --- src/geom/cell_inf_hex16.C	20 Feb 2003 23:18:10 -0000	1.11
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 66,72 ****
-   */
-   
-   	return face;
- !       };
-   
-       case 1:  // the face at y = 0
-         {
- --- 66,72 ----
-   */
-   
-   	return face;
- !       }
-   
-       case 1:  // the face at y = 0
-         {
- ***************
- *** 80,86 ****
-   	face->set_node(5) = get_node(12);
-   
-   	return face;
- !       };
-   
-       case 2:  // the face at x=1
-         {
- --- 80,86 ----
-   	face->set_node(5) = get_node(12);
-   
-   	return face;
- !       }
-   
-       case 2:  // the face at x=1
-         {
- ***************
- *** 94,100 ****
-   	face->set_node(5) = get_node(13);
-   
-   	return face;
- !       };
-       case 3: // the face at y=1
-         {
-   	AutoPtr<Elem> face(new InfQuad6);
- --- 94,100 ----
-   	face->set_node(5) = get_node(13);
-   
-   	return face;
- !       }
-       case 3: // the face at y=1
-         {
-   	AutoPtr<Elem> face(new InfQuad6);
- ***************
- *** 107,113 ****
-   	face->set_node(5) = get_node(14);
-   
-   	return face;
- !       };
-       case 4: // the face at x=0
-         {
-   	AutoPtr<Elem> face(new InfQuad6);
- --- 107,113 ----
-   	face->set_node(5) = get_node(14);
-   
-   	return face;
- !       }
-       case 4: // the face at x=0
-         {
-   	AutoPtr<Elem> face(new InfQuad6);
- ***************
- *** 120,126 ****
-   	face->set_node(5) = get_node(15);
-   
-   	return face;
- !       };
-       case 5: // the face at z=1
-         // disable this face, since this is supposed to lie at infinity
-         {
- --- 120,126 ----
-   	face->set_node(5) = get_node(15);
-   
-   	return face;
- !       }
-       case 5: // the face at z=1
-         // disable this face, since this is supposed to lie at infinity
-         {
- ***************
- *** 128,145 ****
-           error();
-   	AutoPtr<Elem> ap(NULL);  return ap;
-   
- !       };
-       default:
-         {
-   	error();
-   	AutoPtr<Elem> ap(NULL);  return ap;
- !       };
- !     };
-   
-     // We'll never get here.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! };
-   
-   
-   
- --- 128,145 ----
-           error();
-   	AutoPtr<Elem> ap(NULL);  return ap;
-   
- !       }
-       default:
-         {
-   	error();
-   	AutoPtr<Elem> ap(NULL);  return ap;
- !       }
- !     }
-   
-     // We'll never get here.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! }
-   
-   
-   
- ***************
- *** 170,179 ****
-       default:
-         error();
-         
- !     };
-     
-     return conn;
- ! };
-   
-   
-   
- --- 170,179 ----
-       default:
-         error();
-         
- !     }
-     
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 190,203 ****
-   	out << conn[i] << " ";
-   
-         out << std::endl;
- !     };
- ! };
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const Real InfHex16::embedding_matrix[4][16][16] =
-   {
-     // embedding matrix for child 0
-     {
- --- 190,203 ----
-   	out << conn[i] << " ";
-   
-         out << std::endl;
- !     }
- ! }
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const float  InfHex16::embedding_matrix[4][16][16] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 313,320 ****
-         {
-   	_children[c] = new InfHex16(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-   
-     // Compute new nodal locations
- --- 313,320 ----
-         {
-   	_children[c] = new InfHex16(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-   
-     // Compute new nodal locations
- ***************
- *** 331,337 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 331,337 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 341,348 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 341,348 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 357,369 ****
-   	    // the upper limit for sc is stored in the 0th column
-   	    for (unsigned int sc=1; sc<=side_children_matrix[s][0]; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	};
- !   };
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   #endif
- --- 357,369 ----
-   	    // the upper limit for sc is stored in the 0th column
-   	    for (unsigned int sc=1; sc<=side_children_matrix[s][0]; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	}
- !   }
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   #endif
- Index: src/geom/cell_inf_hex18.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_inf_hex18.C,v
- retrieving revision 1.8
- retrieving revision 1.11
- diff -c -r1.8 -r1.11
- *** src/geom/cell_inf_hex18.C	3 Feb 2003 03:51:49 -0000	1.8
- --- src/geom/cell_inf_hex18.C	20 Feb 2003 23:18:11 -0000	1.11
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 68,74 ****
-   */
-   
-   	return face;
- !       };
-   
-       case 1:  // the face at y = 0
-         {
- --- 68,74 ----
-   */
-   
-   	return face;
- !       }
-   
-       case 1:  // the face at y = 0
-         {
- ***************
- *** 82,88 ****
-   	face->set_node(5) = get_node(12);
-   
-   	return face;
- !       };
-   
-       case 2:  // the face at x=1
-         {
- --- 82,88 ----
-   	face->set_node(5) = get_node(12);
-   
-   	return face;
- !       }
-   
-       case 2:  // the face at x=1
-         {
- ***************
- *** 96,102 ****
-   	face->set_node(5) = get_node(13);
-   
-   	return face;
- !       };
-   
-       case 3: // the face at y=1
-         {
- --- 96,102 ----
-   	face->set_node(5) = get_node(13);
-   
-   	return face;
- !       }
-   
-       case 3: // the face at y=1
-         {
- ***************
- *** 110,116 ****
-   	face->set_node(5) = get_node(14);
-   
-   	return face;
- !       };
-   
-       case 4: // the face at x=0
-         {
- --- 110,116 ----
-   	face->set_node(5) = get_node(14);
-   
-   	return face;
- !       }
-   
-       case 4: // the face at x=0
-         {
- ***************
- *** 124,130 ****
-   	face->set_node(5) = get_node(15);
-   
-   	return face;
- !       };
-   
-       case 5: // the face at z=1
-         // disable this face, since this is supposed to lie at infinity
- --- 124,130 ----
-   	face->set_node(5) = get_node(15);
-   
-   	return face;
- !       }
-   
-       case 5: // the face at z=1
-         // disable this face, since this is supposed to lie at infinity
- ***************
- *** 133,151 ****
-           error();
-   	AutoPtr<Elem> ap(NULL);  return ap;
-   
- !       };
-   
-       default:
-         {
-   	error();
-   	AutoPtr<Elem> ap(NULL);  return ap;
-         }
- !     };
-   
-     // We'll never get here.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! };
-   
-   
-   
- --- 133,151 ----
-           error();
-   	AutoPtr<Elem> ap(NULL);  return ap;
-   
- !       }
-   
-       default:
-         {
-   	error();
-   	AutoPtr<Elem> ap(NULL);  return ap;
-         }
- !     }
-   
-     // We'll never get here.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! }
-   
-   
-   
- ***************
- *** 214,223 ****
-       default:
-         error();
-         
- !     };
-     
-     return conn;
- ! };
-   
-   
-   
- --- 214,223 ----
-       default:
-         error();
-         
- !     }
-     
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 234,247 ****
-   	out << conn[i] << " ";
-   
-         out << std::endl;
- !     };
- ! };
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const Real InfHex18::embedding_matrix[4][18][18] =
-   {
-     // embedding matrix for child 0
-     {
- --- 234,247 ----
-   	out << conn[i] << " ";
-   
-         out << std::endl;
- !     }
- ! }
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const float  InfHex18::embedding_matrix[4][18][18] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 365,372 ****
-         {
-   	_children[c] = new InfHex18(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-   
-     // Compute new nodal locations
- --- 365,372 ----
-         {
-   	_children[c] = new InfHex18(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-   
-     // Compute new nodal locations
- ***************
- *** 383,389 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 383,389 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 393,400 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 393,400 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 409,421 ****
-   	    // the upper limit for sc is stored in the 0th column
-   	    for (unsigned int sc=1; sc<=side_children_matrix[s][0]; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	};
- !   };
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   #endif
- --- 409,421 ----
-   	    // the upper limit for sc is stored in the 0th column
-   	    for (unsigned int sc=1; sc<=side_children_matrix[s][0]; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	}
- !   }
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   #endif
- Index: src/geom/cell_inf_hex8.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_inf_hex8.C,v
- retrieving revision 1.8
- retrieving revision 1.11
- diff -c -r1.8 -r1.11
- *** src/geom/cell_inf_hex8.C	3 Feb 2003 03:51:49 -0000	1.8
- --- src/geom/cell_inf_hex8.C	20 Feb 2003 23:18:11 -0000	1.11
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 123,134 ****
-   	error();
-   	AutoPtr<Elem> ap(NULL);  return ap;
-         }
- !     };
-   
-     // We'll never get here.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! };
-   
-   
-   
- --- 123,134 ----
-   	error();
-   	AutoPtr<Elem> ap(NULL);  return ap;
-         }
- !     }
-   
-     // We'll never get here.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! }
-   
-   
-   
- ***************
- *** 149,155 ****
-     conn[7] = node(7)+1;
-   
-     return conn;
- ! };
-   
-   
-   
- --- 149,155 ----
-     conn[7] = node(7)+1;
-   
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 166,179 ****
-   	out << conn[i] << " ";
-   
-         out << std::endl;
- !     };
- ! };
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const Real InfHex8::embedding_matrix[4][8][8] =
-   {
-     // embedding matrix for child 0
-     {
- --- 166,179 ----
-   	out << conn[i] << " ";
-   
-         out << std::endl;
- !     }
- ! }
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const float  InfHex8::embedding_matrix[4][8][8] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 257,264 ****
-         {
-   	_children[c] = new InfHex8(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-   
-     // Compute new nodal locations
- --- 257,264 ----
-         {
-   	_children[c] = new InfHex8(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-   
-     // Compute new nodal locations
- ***************
- *** 275,281 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 275,281 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 285,292 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 285,292 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 302,314 ****
-   	    for (unsigned int sc=1; sc<=side_children_matrix[s][0]; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
-   
- ! 	};
- !   };
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   #endif
- --- 302,314 ----
-   	    for (unsigned int sc=1; sc<=side_children_matrix[s][0]; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
-   
- ! 	}
- !   }
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   #endif
- Index: src/geom/cell_inf_prism12.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_inf_prism12.C,v
- retrieving revision 1.8
- retrieving revision 1.11
- diff -c -r1.8 -r1.11
- *** src/geom/cell_inf_prism12.C	3 Feb 2003 03:51:49 -0000	1.8
- --- src/geom/cell_inf_prism12.C	20 Feb 2003 23:18:11 -0000	1.11
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 117,128 ****
-   	error();
-   	AutoPtr<Elem> ap(NULL);  return ap;
-         }
- !     };
-   
-     // We'll never get here.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! };
-   
-   
-   
- --- 117,128 ----
-   	error();
-   	AutoPtr<Elem> ap(NULL);  return ap;
-         }
- !     }
-   
-     // We'll never get here.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! }
-   
-   
-   
- ***************
- *** 191,201 ****
-       default:
-         error();
-         
- !     };
-   
-     error();
-     return conn;
- ! };
-   
-   
-   
- --- 191,201 ----
-       default:
-         error();
-         
- !     }
-   
-     error();
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 212,225 ****
-   	out << conn[i] << " ";
-   
-         out << std::endl;
- !     };
- ! };
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const Real InfPrism12::embedding_matrix[4][12][12] =
-   {
-     // embedding matrix for child 0
-     {
- --- 212,225 ----
-   	out << conn[i] << " ";
-   
-         out << std::endl;
- !     }
- ! }
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const float  InfPrism12::embedding_matrix[4][12][12] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 319,326 ****
-         {
-   	_children[c] = new InfPrism12(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-   
-     // Compute new nodal locations
- --- 319,326 ----
-         {
-   	_children[c] = new InfPrism12(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-   
-     // Compute new nodal locations
- ***************
- *** 337,343 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 337,343 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 347,354 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 347,354 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 364,376 ****
-   	    for (unsigned int sc=1; sc<=side_children_matrix[s][0]; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
-   
- ! 	};
- !   };
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   #endif
- --- 364,376 ----
-   	    for (unsigned int sc=1; sc<=side_children_matrix[s][0]; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
-   
- ! 	}
- !   }
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   #endif
- Index: src/geom/cell_inf_prism6.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_inf_prism6.C,v
- retrieving revision 1.7
- retrieving revision 1.10
- diff -c -r1.7 -r1.10
- *** src/geom/cell_inf_prism6.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/geom/cell_inf_prism6.C	20 Feb 2003 23:18:12 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 103,114 ****
-   	error(); 
-   	AutoPtr<Elem> ap(NULL);  return ap;
-         }
- !     };
-   
-     // We'll never get here.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! };
-   
-   
-   
- --- 103,114 ----
-   	error(); 
-   	AutoPtr<Elem> ap(NULL);  return ap;
-         }
- !     }
-   
-     // We'll never get here.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! }
-   
-   
-   
- ***************
- *** 130,136 ****
-     conn[7] = node(5)+1;
-   
-     return conn;
- ! };
-   
-   
-   
- --- 130,136 ----
-     conn[7] = node(5)+1;
-   
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 147,160 ****
-   	out << conn[i] << " ";
-   
-         out << std::endl;
- !     };
- ! };
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const Real InfPrism6::embedding_matrix[4][6][6] =
-   {
-     // embedding matrix for child 0
-     {
- --- 147,160 ----
-   	out << conn[i] << " ";
-   
-         out << std::endl;
- !     }
- ! }
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const float  InfPrism6::embedding_matrix[4][6][6] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 228,235 ****
-         {
-   	_children[c] = new InfPrism6(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-   
-     // Compute new nodal locations
- --- 228,235 ----
-         {
-   	_children[c] = new InfPrism6(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-   
-     // Compute new nodal locations
- ***************
- *** 246,252 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 246,252 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 256,263 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 256,263 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 273,285 ****
-   	    for (unsigned int sc=1; sc<=side_children_matrix[s][0]; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
-   	
- ! 	};
- !   };
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   #endif
- --- 273,285 ----
-   	    for (unsigned int sc=1; sc<=side_children_matrix[s][0]; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
-   	
- ! 	}
- !   }
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   #endif
- Index: src/geom/cell_prism.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_prism.C,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** src/geom/cell_prism.C	25 Jan 2003 01:42:46 -0000	1.6
- --- src/geom/cell_prism.C	13 Feb 2003 22:56:11 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 87,95 ****
-   	error();
-   	return facet;
-         }
- !     };
-   
-     // We'll never get here.
-     error();
-     return facet;
- ! };
- --- 87,95 ----
-   	error();
-   	return facet;
-         }
- !     }
-   
-     // We'll never get here.
-     error();
-     return facet;
- ! }
- Index: src/geom/cell_prism6.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_prism6.C,v
- retrieving revision 1.8
- retrieving revision 1.11
- diff -c -r1.8 -r1.11
- *** src/geom/cell_prism6.C	3 Feb 2003 03:51:49 -0000	1.8
- --- src/geom/cell_prism6.C	20 Feb 2003 23:18:12 -0000	1.11
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 94,106 ****
-         {
-   	error();
-         }
- !     };
-   
-     // We'll never get here.
-     error();
-   
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! };
-   
-   
-   
- --- 94,106 ----
-         {
-   	error();
-         }
- !     }
-   
-     // We'll never get here.
-     error();
-   
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! }
-   
-   
-   
- ***************
- *** 121,127 ****
-     conn[7] = node(5)+1;
-   
-     return conn;
- ! };
-   
-   
-   
- --- 121,127 ----
-     conn[7] = node(5)+1;
-   
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 147,159 ****
-     (*conn)[5] = node(4);
-   
-     return;
- ! };
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const Real Prism6::embedding_matrix[8][6][6] =
-   {
-     // embedding matrix for child 0
-     {
- --- 147,159 ----
-     (*conn)[5] = node(4);
-   
-     return;
- ! }
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const float  Prism6::embedding_matrix[8][6][6] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 271,278 ****
-         {
-   	_children[c] = new Prism6(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-   
-     // Compute new nodal locations
- --- 271,278 ----
-         {
-   	_children[c] = new Prism6(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-   
-     // Compute new nodal locations
- ***************
- *** 289,295 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 289,295 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 299,306 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 299,306 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 314,326 ****
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<4; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	};
- !   };
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   #endif
- --- 314,326 ----
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<4; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	}
- !   }
-   
-   
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   #endif
- Index: src/geom/cell_pyramid.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_pyramid.C,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** src/geom/cell_pyramid.C	25 Jan 2003 01:42:46 -0000	1.6
- --- src/geom/cell_pyramid.C	13 Feb 2003 22:56:11 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 94,104 ****
-   	AutoPtr<Elem> face(NULL);
-   	return face;
-         }
- !     };
-   
-     // We'll never get here.
-     error();
-     AutoPtr<Elem> face(NULL);
-   
-     return face;
- ! };
- --- 94,104 ----
-   	AutoPtr<Elem> face(NULL);
-   	return face;
-         }
- !     }
-   
-     // We'll never get here.
-     error();
-     AutoPtr<Elem> face(NULL);
-   
-     return face;
- ! }
- Index: src/geom/cell_pyramid5.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_pyramid5.C,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** src/geom/cell_pyramid5.C	24 Jan 2003 21:19:54 -0000	1.6
- --- src/geom/cell_pyramid5.C	13 Feb 2003 22:56:11 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 96,108 ****
-         {
-   	error();
-         }
- !     };
-   
-     // We'll never get here.
-     error();
-   
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! };
-   
-   
-   
- --- 96,108 ----
-         {
-   	error();
-         }
- !     }
-   
-     // We'll never get here.
-     error();
-   
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! }
-   
-   
-   
- ***************
- *** 123,129 ****
-     conn[7] = node(4)+1;
-   
-     return conn;
- ! };
-   
-   
-   
- --- 123,129 ----
-     conn[7] = node(4)+1;
-   
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 148,154 ****
-     (*conn)[4] = node(4);
-   
-     return;
- ! };
-   
-   
-   
- --- 148,154 ----
-     (*conn)[4] = node(4);
-   
-     return;
- ! }
-   
-   
-   
- ***************
- *** 175,183 ****
-     //       {
-     // 	_children[c] = new Tet4(this);
-     //       	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !   //       };
-   
- !   //   };
-   
-     //   /**
-     //    * Build the nodes so we can look for them.	 
- --- 175,183 ----
-     //       {
-     // 	_children[c] = new Tet4(this);
-     //       	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !   //       }
-   
- !   //   }
-   
-     //   /**
-     //    * Build the nodes so we can look for them.	 
- ***************
- *** 286,292 ****
-     //       _children[0]->node(4) = n0_4;
-         
-     //       mesh.add_elem(_children[0], mesh.mesh_refinement.new_element_number());
- !   //     };
-       
-     //     // Child 1 (Pyramid)
-     //     {
- --- 286,292 ----
-     //       _children[0]->node(4) = n0_4;
-         
-     //       mesh.add_elem(_children[0], mesh.mesh_refinement.new_element_number());
- !   //     }
-       
-     //     // Child 1 (Pyramid)
-     //     {
- ***************
- *** 297,303 ****
-     //       _children[1]->node(4) = n1_4;
-   
-     //       mesh.add_elem(_children[1], mesh.mesh_refinement.new_element_number());
- !   //     };
-       
-     //     // Child 2 (Pyramid)
-     //     {
- --- 297,303 ----
-     //       _children[1]->node(4) = n1_4;
-   
-     //       mesh.add_elem(_children[1], mesh.mesh_refinement.new_element_number());
- !   //     }
-       
-     //     // Child 2 (Pyramid)
-     //     {
- ***************
- *** 308,314 ****
-     //       _children[2]->node(4) = n3_4;
-   
-     //       mesh.add_elem(_children[2], mesh.mesh_refinement.new_element_number());
- !   //     };
-       
-     //     // Child 3 (Pyramid)
-     //     {
- --- 308,314 ----
-     //       _children[2]->node(4) = n3_4;
-   
-     //       mesh.add_elem(_children[2], mesh.mesh_refinement.new_element_number());
- !   //     }
-       
-     //     // Child 3 (Pyramid)
-     //     {
- ***************
- *** 319,325 ****
-     //       _children[3]->node(4) = n2_4;
-    
-     //       mesh.add_elem(_children[3], mesh.mesh_refinement.new_element_number());
- !   //     };
-       
-     //     // Child 4 (Pyramid)
-     //     {
- --- 319,325 ----
-     //       _children[3]->node(4) = n2_4;
-    
-     //       mesh.add_elem(_children[3], mesh.mesh_refinement.new_element_number());
- !   //     }
-       
-     //     // Child 4 (Pyramid)
-     //     {
- ***************
- *** 330,336 ****
-     //       _children[4]->node(4) = node(4);
-   
-     //       mesh.add_elem(_children[4], mesh.mesh_refinement.new_element_number());
- !   //     };
-       
-     //     // Child 5 (Pyramid)
-     //     {
- --- 330,336 ----
-     //       _children[4]->node(4) = node(4);
-   
-     //       mesh.add_elem(_children[4], mesh.mesh_refinement.new_element_number());
- !   //     }
-       
-     //     // Child 5 (Pyramid)
-     //     {
- ***************
- *** 341,347 ****
-     //       _children[5]->node(4) = n0;
-   
-     //       mesh.add_elem(_children[5], mesh.mesh_refinement.new_element_number());
- !   //     };
-       
-     //     // Child 6 (Tet)
-     //     {
- --- 341,347 ----
-     //       _children[5]->node(4) = n0;
-   
-     //       mesh.add_elem(_children[5], mesh.mesh_refinement.new_element_number());
- !   //     }
-       
-     //     // Child 6 (Tet)
-     //     {
- ***************
- *** 351,357 ****
-     //       _children[6]->node(3) = n0;
-   
-     //       mesh.add_elem(_children[6], mesh.mesh_refinement.new_element_number());
- !   //     };
-       
-     //     // Child 7 (Tet)
-     //     {
- --- 351,357 ----
-     //       _children[6]->node(3) = n0;
-   
-     //       mesh.add_elem(_children[6], mesh.mesh_refinement.new_element_number());
- !   //     }
-       
-     //     // Child 7 (Tet)
-     //     {
- ***************
- *** 361,367 ****
-     //       _children[7]->node(3) = n2_4;
-   
-     //       mesh.add_elem(_children[7], mesh.mesh_refinement.new_element_number());
- !   //     };
-       
-     //     // Child 8 (Tet)
-     //     {
- --- 361,367 ----
-     //       _children[7]->node(3) = n2_4;
-   
-     //       mesh.add_elem(_children[7], mesh.mesh_refinement.new_element_number());
- !   //     }
-       
-     //     // Child 8 (Tet)
-     //     {
- ***************
- *** 371,377 ****
-     //       _children[8]->node(3) = n3_4;
-   
-     //       mesh.add_elem(_children[8], mesh.mesh_refinement.new_element_number());
- !   //     };
-       
-     //     // Child 9 (Tet)
-     //     {
- --- 371,377 ----
-     //       _children[8]->node(3) = n3_4;
-   
-     //       mesh.add_elem(_children[8], mesh.mesh_refinement.new_element_number());
- !   //     }
-       
-     //     // Child 9 (Tet)
-     //     {
- ***************
- *** 381,388 ****
-     //       _children[9]->node(3) = n0_4;
-   
-     //       mesh.add_elem(_children[9], mesh.mesh_refinement.new_element_number());
- !   //     };    
- !   //   };
-   
-   
-     
- --- 381,388 ----
-     //       _children[9]->node(3) = n0_4;
-   
-     //       mesh.add_elem(_children[9], mesh.mesh_refinement.new_element_number());
- !   //     }    
- !   //   }
-   
-   
-     
- ***************
- *** 460,472 ****
-     // 	    mesh.boundary_info.add_side(_children[3], 4, id);
-     // 	  }
-     //       }
- !   //   };
-   
-   
-     
-     //   // Un-set my refinement flag now
-     //   set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   #endif
- --- 460,472 ----
-     // 	    mesh.boundary_info.add_side(_children[3], 4, id);
-     // 	  }
-     //       }
- !   //   }
-   
-   
-     
-     //   // Un-set my refinement flag now
-     //   set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   #endif
- Index: src/geom/cell_tet.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_tet.C,v
- retrieving revision 1.7
- retrieving revision 1.8
- diff -c -r1.7 -r1.8
- *** src/geom/cell_tet.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/geom/cell_tet.C	13 Feb 2003 22:56:11 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 75,86 ****
-         {
-   	error();
-         }
- !     };
-   
-     // We'll never get here.
-     error();
-     return face;
- ! };
-   
-   
-   
- --- 75,86 ----
-         {
-   	error();
-         }
- !     }
-   
-     // We'll never get here.
-     error();
-     return face;
- ! }
-   
-   
-   
- ***************
- *** 133,136 ****
-       }
-   
-     return bounds;
- ! };
- --- 133,136 ----
-       }
-   
-     return bounds;
- ! }
- Index: src/geom/cell_tet10.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_tet10.C,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** src/geom/cell_tet10.C	25 Jan 2003 01:42:46 -0000	1.6
- --- src/geom/cell_tet10.C	20 Feb 2003 23:18:12 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 87,98 ****
-         {
-   	error();
-         }
- !     };
-   
-     // We'll never get here.
-     error();
-     return face;
- ! };
-   
-   
-   
- --- 87,98 ----
-         {
-   	error();
-         }
- !     }
-   
-     // We'll never get here.
-     error();
-     return face;
- ! }
-   
-   
-   
- ***************
- *** 223,232 ****
-       default:
-   
-         error();
- !     };
-     
-     return conn;
- ! };
-   
-   
-   
- --- 223,232 ----
-       default:
-   
-         error();
- !     }
-     
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 328,342 ****
-       default:
-   
-         error();
- !     };
-     
-     return;
- ! };
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
-   
-   
-   #endif
- --- 328,539 ----
-       default:
-   
-         error();
- !     }
-     
-     return;
- ! }
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- + const float Tet10::embedding_matrix[8][10][10] =
- + {
- +   // embedding matrix for child 0
- +   {
- +     //    0      1      2      3      4      5      6      7      8      9
- +     {    1.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.}, // 0
- +     {    0.,    0.,    0.,    0.,    1.,    0.,    0.,    0.,    0.,    0.}, // 1
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.,    0.,    0.}, // 2
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.,    0.}, // 3
- +     { 0.375,-0.125,    0.,    0.,  0.75,    0.,    0.,    0.,    0.,    0.}, // 4
- +     {    0.,-0.125,-0.125,    0.,   0.5,  0.25,   0.5,    0.,    0.,    0.}, // 5
- +     { 0.375,    0.,-0.125,    0.,    0.,    0.,  0.75,    0.,    0.,    0.}, // 6
- +     { 0.375,    0.,    0.,-0.125,    0.,    0.,    0.,  0.75,    0.,    0.}, // 7
- +     {    0.,-0.125,    0.,-0.125,   0.5,    0.,    0.,   0.5,  0.25,    0.}, // 8
- +     {    0.,    0.,-0.125,-0.125,    0.,    0.,   0.5,   0.5,    0.,  0.25}  // 9
- +   },
- + 
- +   // embedding matrix for child 1
- +   {
- +     //    0      1      2      3      4      5      6      7      8      9
- +     {    0.,    0.,    0.,    0.,    1.,    0.,    0.,    0.,    0.,    0.}, // 0
- +     {    0.,    1.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.}, // 1
- +     {    0.,    0.,    0.,    0.,    0.,    1.,    0.,    0.,    0.,    0.}, // 2
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.}, // 3
- +     {-0.125, 0.375,    0.,    0.,  0.75,    0.,    0.,    0.,    0.,    0.}, // 4
- +     {    0., 0.375,-0.125,    0.,    0.,  0.75,    0.,    0.,    0.,    0.}, // 5
- +     {-0.125,    0.,-0.125,    0.,   0.5,   0.5,  0.25,    0.,    0.,    0.}, // 6
- +     {-0.125,    0.,    0.,-0.125,   0.5,    0.,    0.,  0.25,   0.5,    0.}, // 7
- +     {    0., 0.375,    0.,-0.125,    0.,    0.,    0.,    0.,  0.75,    0.}, // 8
- +     {    0.,    0.,-0.125,-0.125,    0.,   0.5,    0.,    0.,   0.5,  0.25}  // 9
- +   },
- + 
- +   // embedding matrix for child 2
- +   {
- +     //    0      1      2      3      4      5      6      7      8      9
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.,    0.,    0.}, // 0
- +     {    0.,    0.,    0.,    0.,    0.,    1.,    0.,    0.,    0.,    0.}, // 1
- +     {    0.,    0.,    1.,    0.,    0.,    0.,    0.,    0.,    0.,    0.}, // 2
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    1.}, // 3
- +     {-0.125,-0.125,    0.,    0.,  0.25,   0.5,   0.5,    0.,    0.,    0.}, // 4
- +     {    0.,-0.125, 0.375,    0.,    0.,  0.75,    0.,    0.,    0.,    0.}, // 5
- +     {-0.125,    0., 0.375,    0.,    0.,    0.,  0.75,    0.,    0.,    0.}, // 6
- +     {-0.125,    0.,    0.,-0.125,    0.,    0.,   0.5,  0.25,    0.,   0.5}, // 7
- +     {    0.,-0.125,    0.,-0.125,    0.,   0.5,    0.,    0.,  0.25,   0.5}, // 8
- +     {    0.,    0., 0.375,-0.125,    0.,    0.,    0.,    0.,    0.,  0.75}  // 9
- +   },
- + 
- +   // embedding matrix for child 3
- +   {
- +     //    0      1      2      3      4      5      6      7      8      9
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.,    0.}, // 0
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.}, // 1
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    1.}, // 2
- +     {    0.,    0.,    0.,    1.,    0.,    0.,    0.,    0.,    0.,    0.}, // 3
- +     {-0.125,-0.125,    0.,    0.,  0.25,    0.,    0.,   0.5,   0.5,    0.}, // 4
- +     {    0.,-0.125,-0.125,    0.,    0.,  0.25,    0.,    0.,   0.5,   0.5}, // 5
- +     {-0.125,    0.,-0.125,    0.,    0.,    0.,  0.25,   0.5,    0.,   0.5}, // 6
- +     {-0.125,    0.,    0., 0.375,    0.,    0.,    0.,  0.75,    0.,    0.}, // 7
- +     {    0.,-0.125,    0., 0.375,    0.,    0.,    0.,    0.,  0.75,    0.}, // 8
- +     {    0.,    0.,-0.125, 0.375,    0.,    0.,    0.,    0.,    0.,  0.75}  // 9
- +   },
- + 
- +   // embedding matrix for child 4
- +   {
- +     //    0      1      2      3      4      5      6      7      8      9
- +     {    0.,    0.,    0.,    0.,    1.,    0.,    0.,    0.,    0.,    0.}, // 0
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.}, // 1
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.,    0.,    0.}, // 2
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.,    0.}, // 3
- +     {-0.125,    0.,    0.,-0.125,   0.5,    0.,    0.,  0.25,   0.5,    0.}, // 4
- +     {-0.125,-0.125,-0.125,-0.125,  0.25,  0.25,  0.25,  0.25,  0.25,  0.25}, // 5
- +     {    0.,-0.125,-0.125,    0.,   0.5,  0.25,   0.5,    0.,    0.,    0.}, // 6
- +     {    0.,-0.125,    0.,-0.125,   0.5,    0.,    0.,   0.5,  0.25,    0.}, // 7
- +     {-0.125,-0.125,    0.,    0.,  0.25,    0.,    0.,   0.5,   0.5,    0.}, // 8
- +     {    0.,    0.,-0.125,-0.125,    0.,    0.,   0.5,   0.5,    0.,  0.25}  // 9
- +   },
- + 
- +   // embedding matrix for child 5
- +   {
- +     //    0      1      2      3      4      5      6      7      8      9
- +     {    0.,    0.,    0.,    0.,    1.,    0.,    0.,    0.,    0.,    0.}, // 0
- +     {    0.,    0.,    0.,    0.,    0.,    1.,    0.,    0.,    0.,    0.}, // 1
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.,    0.,    0.}, // 2
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.}, // 3
- +     {-0.125,    0.,-0.125,    0.,   0.5,   0.5,  0.25,    0.,    0.,    0.}, // 4
- +     {-0.125,-0.125,    0.,    0.,  0.25,   0.5,   0.5,    0.,    0.,    0.}, // 5
- +     {    0.,-0.125,-0.125,    0.,   0.5,  0.25,   0.5,    0.,    0.,    0.}, // 6
- +     {-0.125,    0.,    0.,-0.125,   0.5,    0.,    0.,  0.25,   0.5,    0.}, // 7
- +     {    0.,    0.,-0.125,-0.125,    0.,   0.5,    0.,    0.,   0.5,  0.25}, // 8
- +     {-0.125,-0.125,-0.125,-0.125,  0.25,  0.25,  0.25,  0.25,  0.25,  0.25}  // 9
- +   },
- + 
- +   // embedding matrix for child 6
- +   {
- +     //    0      1      2      3      4      5      6      7      8      9
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.,    0.,    0.}, // 0
- +     {    0.,    0.,    0.,    0.,    0.,    1.,    0.,    0.,    0.,    0.}, // 1
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    1.}, // 2
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.}, // 3
- +     {-0.125,-0.125,    0.,    0.,  0.25,   0.5,   0.5,    0.,    0.,    0.}, // 4
- +     {    0.,-0.125,    0.,-0.125,    0.,   0.5,    0.,    0.,  0.25,   0.5}, // 5
- +     {-0.125,    0.,    0.,-0.125,    0.,    0.,   0.5,  0.25,    0.,   0.5}, // 6
- +     {-0.125,-0.125,-0.125,-0.125,  0.25,  0.25,  0.25,  0.25,  0.25,  0.25}, // 7
- +     {    0.,    0.,-0.125,-0.125,    0.,   0.5,    0.,    0.,   0.5,  0.25}, // 8
- +     {    0.,-0.125,-0.125,    0.,    0.,  0.25,    0.,    0.,   0.5,   0.5}  // 9
- +   },
- + 
- +   // embedding matrix for child 7
- +   {
- +     //    0      1      2      3      4      5      6      7      8      9
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.,    0.,    0.}, // 0
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.}, // 1
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    1.}, // 2
- +     {    0.,    0.,    0.,    0.,    0.,    0.,    0.,    1.,    0.,    0.}, // 3
- +     {-0.125,-0.125,-0.125,-0.125,  0.25,  0.25,  0.25,  0.25,  0.25,  0.25}, // 4
- +     {    0.,-0.125,-0.125,    0.,    0.,  0.25,    0.,    0.,   0.5,   0.5}, // 5
- +     {-0.125,    0.,    0.,-0.125,    0.,    0.,   0.5,  0.25,    0.,   0.5}, // 6
- +     {    0.,    0.,-0.125,-0.125,    0.,    0.,   0.5,   0.5,    0.,  0.25}, // 7
- +     {-0.125,-0.125,    0.,    0.,  0.25,    0.,    0.,   0.5,   0.5,    0.}, // 8
- +     {-0.125,    0.,-0.125,    0.,    0.,    0.,  0.25,   0.5,    0.,   0.5}  // 9
- +   }
- + };
- + 
- + 
- + 
- + const unsigned int Tet10::side_children_matrix[4][4] =
- + {
- +   {0, 1, 2, 5}, // side-0 children
- +   {0, 1, 3, 4}, // side-1 children
- +   {1, 2, 3, 6}, // side-2 children
- +   {0, 2, 3, 7}  // side-3 children
- + };
- + 
- + 
- + void Tet10::refine(Mesh& mesh)
- + {
- +   assert (refinement_flag() == Elem::REFINE);
- +   assert (active());
- +   assert (_children == NULL);
- + 
- +   // Create my children
- +   {
- +     _children = new Elem*[n_children()];
- + 
- +     for (unsigned int c=0; c<n_children(); c++)
- +       {
- + 	_children[c] = new Tet10(this);
- + 	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- +       }
- +   }
- + 
- +   // Compute new nodal locations
- +   // and asssign nodes to children
- +   {
- +     std::vector<std::vector<Point> >  p(n_children());
- +     
- +     for (unsigned int c=0; c<n_children(); c++)
- +       p[c].resize(child(c)->n_nodes());
- +     
- + 
- +     // compute new nodal locations
- +     for (unsigned int c=0; c<n_children(); c++)
- +       for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
- + 	for (unsigned int n=0; n<n_nodes(); n++)
- + 	  if (embedding_matrix[c][nc][n] != 0.)
- + 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
- +     
- +     
- +     // assign nodes to children & add them to the mesh
- +     for (unsigned int c=0; c<n_children(); c++)
- +       {
- + 	for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
- + 	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
- + 
- + 	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- +       }
- +   }
- + 
- + 
- +   
- +   // Possibly add boundary information
- +   {
- +     for (unsigned int s=0; s<n_sides(); s++)
- +       if (neighbor(s) == NULL)
- + 	{
- + 	  const short int id = mesh.boundary_info.boundary_id(this, s);
- + 	
- + 	  if (id != mesh.boundary_info.invalid_id)
- + 	    for (unsigned int sc=0; sc<4; sc++)
- + 	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- + 	}
- +   }
- + 
- +   
- +   // Un-set my refinement flag now
- +   set_refinement_flag() = Elem::DO_NOTHING;
- + }
-   
-   
-   #endif
- Index: src/geom/cell_tet4.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/cell_tet4.C,v
- retrieving revision 1.8
- retrieving revision 1.11
- diff -c -r1.8 -r1.11
- *** src/geom/cell_tet4.C	3 Feb 2003 03:51:49 -0000	1.8
- --- src/geom/cell_tet4.C	20 Feb 2003 23:18:13 -0000	1.11
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 75,86 ****
-         {
-   	error();
-         }
- !     };
-   
-     // We'll never get here.
-     error();  
-     return face;
- ! };
-   
-   
-   
- --- 75,86 ----
-         {
-   	error();
-         }
- !     }
-   
-     // We'll never get here.
-     error();  
-     return face;
- ! }
-   
-   
-   
- ***************
- *** 101,107 ****
-     conn[7] = node(3)+1;
-   
-     return conn;
- ! };
-   
-   
-   
- --- 101,107 ----
-     conn[7] = node(3)+1;
-   
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 122,134 ****
-     (*conn)[3] = node(3);
-   
-     return;
- ! };
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const Real Tet4::embedding_matrix[8][4][4] =
-   {
-     // embedding matrix for child 0
-     {
- --- 122,134 ----
-     (*conn)[3] = node(3);
-   
-     return;
- ! }
-   
-   
-   
-   #ifdef ENABLE_AMR
-   
- ! const float  Tet4::embedding_matrix[8][4][4] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 228,235 ****
-         {
-   	_children[c] = new Tet4(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-     // Compute new nodal locations
-     // and asssign nodes to children
- --- 228,235 ----
-         {
-   	_children[c] = new Tet4(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-     // Compute new nodal locations
-     // and asssign nodes to children
- ***************
- *** 245,251 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 245,251 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 255,262 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 255,262 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 270,282 ****
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<4; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	};
- !   };
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   #endif
- --- 270,282 ----
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<4; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	}
- !   }
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   #endif
- Index: src/geom/edge_edge2.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/edge_edge2.C,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** src/geom/edge_edge2.C	24 Jan 2003 17:24:43 -0000	1.5
- --- src/geom/edge_edge2.C	13 Feb 2003 22:56:11 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 34,40 ****
-     conn[1] = node(1)+1;
-   
-     return conn;
- ! };
-   
-   
-   
- --- 34,40 ----
-     conn[1] = node(1)+1;
-   
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 53,58 ****
-     (*conn)[1] = node(1);
-   
-     return;
- ! };
-   
-   
- --- 53,58 ----
-     (*conn)[1] = node(1);
-   
-     return;
- ! }
-   
-   
- Index: src/geom/edge_edge3.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/edge_edge3.C,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** src/geom/edge_edge3.C	24 Jan 2003 17:24:43 -0000	1.5
- --- src/geom/edge_edge3.C	13 Feb 2003 22:56:11 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 47,58 ****
-   
-       default:
-         error();
- !     };
-   
-     error();
-   
-     return conn;
- ! };
-   
-   
-   
- --- 47,58 ----
-   
-       default:
-         error();
- !     }
-   
-     error();
-   
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 83,94 ****
-   
-       default:
-         error();
- !     };
-   
-     error();
-   
-     return;
- ! };
-     
-   
-   
- --- 83,94 ----
-   
-       default:
-         error();
- !     }
-   
-     error();
-   
-     return;
- ! }
-     
-   
-   
- Index: src/geom/edge_inf_edge2.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/edge_inf_edge2.C,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** src/geom/edge_inf_edge2.C	24 Jan 2003 17:24:43 -0000	1.5
- --- src/geom/edge_inf_edge2.C	13 Feb 2003 22:56:11 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 36,42 ****
-     conn[1] = node(1)+1;
-   
-     return conn;
- ! };
-   
-   #endif
-   
- --- 36,42 ----
-     conn[1] = node(1)+1;
-   
-     return conn;
- ! }
-   
-   #endif
-   
- Index: src/geom/elem.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/elem.C,v
- retrieving revision 1.7
- retrieving revision 1.9
- diff -c -r1.7 -r1.9
- *** src/geom/elem.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/geom/elem.C	13 Feb 2003 22:56:11 -0000	1.9
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 181,190 ****
-              
-       default:
-         {
- ! 	std::cout << "Undefined element type!." << std::endl;
-   	error();
- !       };
- !     };
-       
-   
-     // This will never happen...  Look at the case-structure above.
- --- 181,190 ----
-              
-       default:
-         {
- ! 	std::cerr << "ERROR: Undefined element type!." << std::endl;
-   	error();
- !       }
- !     }
-       
-   
-     // This will never happen...  Look at the case-structure above.
- ***************
- *** 192,198 ****
-     error();
-     
-     return NULL;
- ! };
-   
-   
-   
- --- 192,198 ----
-     error();
-     
-     return NULL;
- ! }
-   
-   
-   
- ***************
- *** 210,216 ****
-     error();
-   
-     return static_cast<unsigned int>(-1);
- ! };
-   
-   
-   
- --- 210,216 ----
-     error();
-   
-     return static_cast<unsigned int>(-1);
- ! }
-   
-   
-   
- ***************
- *** 233,268 ****
-    		std::ostream_iterator<unsigned int>(out, " "));
-         
-         out << std::endl;
- !     };
- ! };
-   
-   
-   
-   unsigned int Elem::key() const
-   {
- !   assert (n_nodes());
-     
- !   return key (get_nodes());
- ! };
-   
-   
-   
- ! unsigned int Elem::key(std::vector<unsigned int> vec) const
- ! {
-     std::sort(vec.begin(), vec.end());
-     
- !   unsigned int n = vec[0];
- ! 
- !   unsigned int m = vec[0];
-     
- -   for (unsigned int i=1; i<vec.size(); i++)
- -     {
- -       n = n^vec[i];
- -     };
-   
- !   return n + m*m;
- ! };
- !  
-   
-   
-   
- --- 233,266 ----
-    		std::ostream_iterator<unsigned int>(out, " "));
-         
-         out << std::endl;
- !     }
- ! }
-   
-   
-   
-   unsigned int Elem::key() const
-   {
- !   const unsigned int nv = n_vertices();
-     
- !   assert (nv != 0);
-   
- +   std::vector<unsigned int> vec (nv, 0);
-   
- +   for (unsigned int v=0; v<nv; v++)
- +     vec[v] = node(v);
-   
- !   
-     std::sort(vec.begin(), vec.end());
-     
- !   unsigned int n       = vec[0];
- !   const unsigned int m = vec[0];
- !   
- !   for (unsigned int i=1; i<nv; i++)
- !     n = n^vec[i];
-     
-   
- !   return n + m*m;  
- ! } 
-   
-   
-   
- ***************
- *** 271,280 ****
-     Point cp;
-   
-     for (unsigned int n=0; n<n_vertices(); n++)
- !     cp += point(n);
-   
- !   return cp/((Real) n_vertices());    
- ! };
-   
-   
-   
- --- 269,278 ----
-     Point cp;
-   
-     for (unsigned int n=0; n<n_vertices(); n++)
- !     cp.add (point(n));
-   
- !   return (cp /= static_cast<Real>(n_vertices()));    
- ! }
-   
-   
-   
- ***************
- *** 289,298 ****
-   	  const Point diff = (point(n_outer) - point(n_inner));
-   	  
-   	  h_min = std::min(h_min,diff.size());
- ! 	};
-   
-     return h_min;
- ! };
-   
-   
-   
- --- 287,296 ----
-   	  const Point diff = (point(n_outer) - point(n_inner));
-   	  
-   	  h_min = std::min(h_min,diff.size());
- ! 	}
-   
-     return h_min;
- ! }
-   
-   
-   
- ***************
- *** 307,316 ****
-   	  const Point diff = (point(n_outer) - point(n_inner));
-   	  
-   	  h_max = std::max(h_max,diff.size());
- ! 	};
-   
-     return h_max;
- ! };
-   
-   
-   
- --- 305,314 ----
-   	  const Point diff = (point(n_outer) - point(n_inner));
-   	  
-   	  h_max = std::max(h_max,diff.size());
- ! 	}
-   
-     return h_max;
- ! }
-   
-   
-   
- ***************
- *** 345,396 ****
-   	{
-   	  nodes_set.insert(node(n));
-   	  nodes_set.insert(rhs.node(n));
- ! 	};
-   
-         // If this passes the elements are connected
-         // to the same global nodes
-         if (nodes_set.size() == n_nodes())
-   	return true;
- !     };
-   
-     // If we get here it is because the elements either
-     // do not have the same number of nodes or they are
-     // connected to different nodes.  Either way they
-     // are not the same element
-     return false;
- ! };
- ! 
- ! 
- ! 
- ! bool Elem::operator < (const Elem& rhs) const
- ! {
- !   //TODO: [BSK] Is this used anywhere?  If not then it should be deprecated... I am not sure it is right.
- !   error();
- !   
- !   assert (n_nodes());
- !   assert (rhs.n_nodes());
- ! 
- !   // lhs < rhs if lhs has fewer nodes than rhs
- !   if (n_nodes() < rhs.n_nodes())
- !     return true;
- ! 
- !   // lhs > rhs if lhs has more nodes than rhs
- !   else if (n_nodes() > rhs.n_nodes())
- !     return false;
- ! 
- !   // Make sure we return false for (a < a)
- !   else if (*this == rhs)
- !     return false;
- !   
- !   // n_nodes() == rhs.n_nodes()
- !   // lhs < rhs if lhs.node(0) < rhs.node(0),
- !   // otherwise lhs >= rhs.
- !   else 
- !     if (node(0) < rhs.node(0))
- !       return true;
- ! 
- !   return false;
- ! };    
-   
-   
-   
- --- 343,362 ----
-   	{
-   	  nodes_set.insert(node(n));
-   	  nodes_set.insert(rhs.node(n));
- ! 	}
-   
-         // If this passes the elements are connected
-         // to the same global nodes
-         if (nodes_set.size() == n_nodes())
-   	return true;
- !     }
-   
-     // If we get here it is because the elements either
-     // do not have the same number of nodes or they are
-     // connected to different nodes.  Either way they
-     // are not the same element
-     return false;
- ! }
-   
-   
-   
- ***************
- *** 403,416 ****
-     for (unsigned int i=0; i<n_nodes(); i++)
-       out << node(i)+1 << "\t";
-   
- -   // New code (incompatible with ptr to node data structure
- - //   std::transform(_nodes.begin(),
- - // 		 _nodes.end(),
- - // 		 std::ostream_iterator<unsigned int>(out, "\t"),
- - // 		 std::bind2nd(std::plus<unsigned int>(), 1));
- - 
-     out << std::endl;
- ! };
-   
-   
-   
- --- 369,376 ----
-     for (unsigned int i=0; i<n_nodes(); i++)
-       out << node(i)+1 << "\t";
-   
-     out << std::endl;
- ! }
-   
-   
-   
- ***************
- *** 432,445 ****
-   		  << std::endl;
-   
-   	return 1.;
- !       };
- !     };
-   
-       
-       // Will never get here...
-       error();
-       return 0.;
- ! };
-   
-   
-   
- --- 392,405 ----
-   		  << std::endl;
-   
-   	return 1.;
- !       }
- !     }
-   
-       
-       // Will never get here...
-       error();
-       return 0.;
- ! }
-   
-   
-   
- ***************
- *** 455,461 ****
-   						      p);
-   
-     return FEInterface::on_reference_element(mapped_point, type());
- ! };
-   
-   
-   
- --- 415,421 ----
-   						      p);
-   
-     return FEInterface::on_reference_element(mapped_point, type());
- ! }
-   
-   
-   
- ***************
- *** 480,486 ****
-     // otherwise we are at a level one
-     // higher than our parent
-     return (parent()->level() + 1);
- ! };
-   
-   
-   
- --- 440,446 ----
-     // otherwise we are at a level one
-     // higher than our parent
-     return (parent()->level() + 1);
- ! }
-   
-   
-   
- ***************
- *** 494,500 ****
-     _children = NULL;
-   
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   #endif
- --- 454,460 ----
-     _children = NULL;
-   
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   #endif
- Index: src/geom/face_inf_quad4.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/face_inf_quad4.C,v
- retrieving revision 1.7
- retrieving revision 1.10
- diff -c -r1.7 -r1.10
- *** src/geom/face_inf_quad4.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/geom/face_inf_quad4.C	20 Feb 2003 23:18:13 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 38,44 ****
-   // InfQuad4 class static member initialization
-   #ifdef ENABLE_AMR
-   
- ! const Real InfQuad4::embedding_matrix[2][4][4] =
-   {
-     // embedding matrix for child 0
-     {
- --- 38,44 ----
-   // InfQuad4 class static member initialization
-   #ifdef ENABLE_AMR
-   
- ! const float  InfQuad4::embedding_matrix[2][4][4] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 122,134 ****
-         {
-   	error();
-         }
- !     };
-   
-   
-     // We will never get here...  Look at the code above.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! };
-   
-   
-   
- --- 122,134 ----
-         {
-   	error();
-         }
- !     }
-   
-   
-     // We will never get here...  Look at the code above.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! }
-   
-   
-   
- ***************
- *** 148,154 ****
-     conn[3] = node(3)+1;
-   
-     return conn;
- ! };
-   
-   
-   
- --- 148,154 ----
-     conn[3] = node(3)+1;
-   
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 168,175 ****
-         {
-   	_children[c] = new InfQuad4(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-     // Compute new nodal locations
-     // and asssign nodes to children
- --- 168,175 ----
-         {
-   	_children[c] = new InfQuad4(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-     // Compute new nodal locations
-     // and asssign nodes to children
- ***************
- *** 185,191 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 185,191 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 195,202 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 195,202 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 213,225 ****
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
-   
-   
- ! 	};
- !   };
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   
- --- 213,225 ----
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
-   
-   
- ! 	}
- !   }
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   
- Index: src/geom/face_inf_quad6.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/face_inf_quad6.C,v
- retrieving revision 1.7
- retrieving revision 1.10
- diff -c -r1.7 -r1.10
- *** src/geom/face_inf_quad6.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/geom/face_inf_quad6.C	20 Feb 2003 23:18:13 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 38,44 ****
-   // InfQuad6 class static member initialization
-   #ifdef ENABLE_AMR
-   
- ! const Real InfQuad6::embedding_matrix[2][6][6] =
-   {
-     // embedding matrix for child 0
-     {
- --- 38,44 ----
-   // InfQuad6 class static member initialization
-   #ifdef ENABLE_AMR
-   
- ! const float  InfQuad6::embedding_matrix[2][6][6] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 128,140 ****
-         {
-   	error();
-         }
- !     };
-   
-   
-     // We will never get here...  Look at the code above.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! };
-   
-   
-   
- --- 128,140 ----
-         {
-   	error();
-         }
- !     }
-   
-   
-     // We will never get here...  Look at the code above.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! }
-   
-   
-   
- ***************
- *** 168,179 ****
-       default:
-         error();
-   
- !     };
-   
-     error();
-     
-     return conn;
- ! };
-   
-   
-   
- --- 168,179 ----
-       default:
-         error();
-   
- !     }
-   
-     error();
-     
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 193,200 ****
-         {
-   	_children[c] = new InfQuad6(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-     // Compute new nodal locations
-     // and asssign nodes to children
- --- 193,200 ----
-         {
-   	_children[c] = new InfQuad6(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-     // Compute new nodal locations
-     // and asssign nodes to children
- ***************
- *** 210,216 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 210,216 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 220,227 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 220,227 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 235,247 ****
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<2; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	};
- !   };
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   
- --- 235,247 ----
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<2; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	}
- !   }
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   
- Index: src/geom/face_quad.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/face_quad.C,v
- retrieving revision 1.7
- retrieving revision 1.8
- diff -c -r1.7 -r1.8
- *** src/geom/face_quad.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/geom/face_quad.C	13 Feb 2003 22:56:12 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 68,80 ****
-         {
-   	error();
-         }
- !     };
-   
-   
-     // We will never get here...  Look at the code above.
-     error();  
-     return edge;
- ! };
-   
-   
-   
- --- 68,80 ----
-         {
-   	error();
-         }
- !     }
-   
-   
-     // We will never get here...  Look at the code above.
-     error();  
-     return edge;
- ! }
-   
-   
-   
- Index: src/geom/face_quad4.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/face_quad4.C,v
- retrieving revision 1.7
- retrieving revision 1.10
- diff -c -r1.7 -r1.10
- *** src/geom/face_quad4.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/geom/face_quad4.C	20 Feb 2003 23:18:14 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 32,38 ****
-   // Quad class static member initialization
-   #ifdef ENABLE_AMR
-   
- ! const Real Quad4::embedding_matrix[4][4][4] =
-   {
-     // embedding matrix for child 0
-     {
- --- 32,38 ----
-   // Quad class static member initialization
-   #ifdef ENABLE_AMR
-   
- ! const float  Quad4::embedding_matrix[4][4][4] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 135,146 ****
-         {
-   	error();
-         }
- !     };
-   
-   
-     // We will never get here...  Look at the code above.
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! };
-   
-   
-   
- --- 135,146 ----
-         {
-   	error();
-         }
- !     }
-   
-   
-     // We will never get here...  Look at the code above.
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! }
-   
-   
-   
- ***************
- *** 156,162 ****
-     conn[3] = node(3)+1;
-   
-     return conn;
- ! };
-   
-   
-   
- --- 156,162 ----
-     conn[3] = node(3)+1;
-   
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 177,183 ****
-     (*conn)[3] = node(3);
-   
-     return;
- ! };
-   
-   
-   
- --- 177,183 ----
-     (*conn)[3] = node(3);
-   
-     return;
- ! }
-   
-   
-   
- ***************
- *** 197,204 ****
-         {
-   	_children[c] = new Quad4(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-     // Compute new nodal locations
-     // and asssign nodes to children
- --- 197,204 ----
-         {
-   	_children[c] = new Quad4(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-     // Compute new nodal locations
-     // and asssign nodes to children
- ***************
- *** 214,220 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 214,220 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 224,231 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 224,231 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 239,251 ****
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<2; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	};
- !   };
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   
- --- 239,251 ----
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<2; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	}
- !   }
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   
- Index: src/geom/face_quad8.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/face_quad8.C,v
- retrieving revision 1.7
- retrieving revision 1.10
- diff -c -r1.7 -r1.10
- *** src/geom/face_quad8.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/geom/face_quad8.C	20 Feb 2003 23:18:14 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 32,38 ****
-   // Quad8 class static member initializations
-   #ifdef ENABLE_AMR
-   
- ! const Real Quad8::embedding_matrix[4][8][8] =
-   {
-     // embedding matrix for child 0
-     {
- --- 32,38 ----
-   // Quad8 class static member initializations
-   #ifdef ENABLE_AMR
-   
- ! const float  Quad8::embedding_matrix[4][8][8] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 147,158 ****
-         {
-   	error();
-         }
- !     };
-   
-   
-     // We will never get here...  Look at the code above.
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! };
-   
-   
-   
- --- 147,158 ----
-         {
-   	error();
-         }
- !     }
-   
-   
-     // We will never get here...  Look at the code above.
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! }
-   
-   
-   
- ***************
- *** 212,223 ****
-   
-       default:
-         error();
- !     };
-   
-     error();
-     
-     return conn;
- ! };
-   
-   
-   
- --- 212,223 ----
-   
-       default:
-         error();
- !     }
-   
-     error();
-     
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 279,290 ****
-   
-       default:
-         error();
- !     };
-   
-     error();
-   
-     return;
- ! };
-   
-   
-   
- --- 279,290 ----
-   
-       default:
-         error();
- !     }
-   
-     error();
-   
-     return;
- ! }
-   
-   
-   
- ***************
- *** 294,300 ****
-       return 9;
-   
-     return 5;
- ! };
-   
-   
-   
- --- 294,300 ----
-       return 9;
-   
-     return 5;
- ! }
-   
-   
-   
- ***************
- *** 314,321 ****
-         {
-   	_children[c] = new Quad8(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-     // Compute new nodal locations
-     // and asssign nodes children
- --- 314,321 ----
-         {
-   	_children[c] = new Quad8(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-     // Compute new nodal locations
-     // and asssign nodes children
- ***************
- *** 331,337 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 331,337 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 341,348 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 341,348 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 356,368 ****
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<2; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	};
- !   };
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   
- --- 356,368 ----
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<2; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	}
- !   }
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   
- Index: src/geom/face_quad9.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/face_quad9.C,v
- retrieving revision 1.7
- retrieving revision 1.10
- diff -c -r1.7 -r1.10
- *** src/geom/face_quad9.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/geom/face_quad9.C	20 Feb 2003 23:18:14 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 32,38 ****
-   // Quad9 class static member initializations
-   #ifdef ENABLE_AMR
-   
- ! const Real Quad9::embedding_matrix[4][9][9] =
-   {
-     // embedding matrix for child 0
-     {
- --- 32,38 ----
-   // Quad9 class static member initializations
-   #ifdef ENABLE_AMR
-   
- ! const float  Quad9::embedding_matrix[4][9][9] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 152,164 ****
-         {
-   	error();
-         }
- !     };
-   
-   
-     // We will never get here...  Look at the code above.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! };
-   
-   
-   
- --- 152,164 ----
-         {
-   	error();
-         }
- !     }
-   
-   
-     // We will never get here...  Look at the code above.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! }
-   
-   
-   
- ***************
- *** 209,220 ****
-   
-       default:
-         error();
- !     };
-   
-     error();
-     
-     return conn;
- ! };
-   
-   
-   
- --- 209,220 ----
-   
-       default:
-         error();
- !     }
-   
-     error();
-     
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 272,283 ****
-   
-       default:
-         error();
- !     };
-   
-     error();
-     
-     return;
- ! };
-   
-   
-   
- --- 272,283 ----
-   
-       default:
-         error();
- !     }
-   
-     error();
-     
-     return;
- ! }
-   
-   
-   
- ***************
- *** 297,304 ****
-         {
-   	_children[c] = new Quad9(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-     // Compute new nodal locations
-     // and asssign nodes to children
- --- 297,304 ----
-         {
-   	_children[c] = new Quad9(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-     // Compute new nodal locations
-     // and asssign nodes to children
- ***************
- *** 314,320 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 314,320 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 324,331 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 324,331 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 339,351 ****
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<2; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	};
- !   };
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   
- --- 339,351 ----
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<2; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	}
- !   }
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   
- Index: src/geom/face_tri.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/face_tri.C,v
- retrieving revision 1.7
- retrieving revision 1.8
- diff -c -r1.7 -r1.8
- *** src/geom/face_tri.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/geom/face_tri.C	13 Feb 2003 22:56:12 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 64,76 ****
-         {
-   	error();
-         }
- !     };
-   
-     
-     // We will never get here...  Look at the code above.
-     error();
-     return edge;
- ! };
-   
-   
-   
- --- 64,76 ----
-         {
-   	error();
-         }
- !     }
-   
-     
-     // We will never get here...  Look at the code above.
-     error();
-     return edge;
- ! }
-   
-   
-   
- Index: src/geom/face_tri3.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/face_tri3.C,v
- retrieving revision 1.7
- retrieving revision 1.10
- diff -c -r1.7 -r1.10
- *** src/geom/face_tri3.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/geom/face_tri3.C	20 Feb 2003 23:18:15 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 32,38 ****
-   // Tri3 class static member initializations
-   #ifdef ENABLE_AMR
-   
- ! const Real Tri3::embedding_matrix[4][3][3] =
-   {
-     // embedding matrix for child 0
-     {
- --- 32,38 ----
-   // Tri3 class static member initializations
-   #ifdef ENABLE_AMR
-   
- ! const float  Tri3::embedding_matrix[4][3][3] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 116,128 ****
-         {
-   	error();
-         }
- !     };
-   
-     
-     // We will never get here...  Look at the code above.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! };
-   
-   
-   
- --- 116,128 ----
-         {
-   	error();
-         }
- !     }
-   
-     
-     // We will never get here...  Look at the code above.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! }
-   
-   
-   
- ***************
- *** 140,146 ****
-     conn[3] = node(2)+1;
-   
-     return conn;
- ! };
-   
-   
-   
- --- 140,146 ----
-     conn[3] = node(2)+1;
-   
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 160,166 ****
-     (*conn)[2] = node(2);
-   
-     return;
- ! };
-   
-   
-   
- --- 160,166 ----
-     (*conn)[2] = node(2);
-   
-     return;
- ! }
-   
-   
-   
- ***************
- *** 180,187 ****
-         {
-   	_children[c] = new Tri3(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-     // Compute new nodal locations
-     // and asssign nodes to children
- --- 180,187 ----
-         {
-   	_children[c] = new Tri3(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-     // Compute new nodal locations
-     // and asssign nodes to children
- ***************
- *** 197,203 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
-       // assign nodes to children & add them to the mesh
- --- 197,203 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
-       // assign nodes to children & add them to the mesh
- ***************
- *** 207,214 ****
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 207,214 ----
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 222,234 ****
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<2; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	};
- !   };
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   
- --- 222,234 ----
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<2; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	}
- !   }
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   
- Index: src/geom/face_tri6.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/face_tri6.C,v
- retrieving revision 1.7
- retrieving revision 1.10
- diff -c -r1.7 -r1.10
- *** src/geom/face_tri6.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/geom/face_tri6.C	20 Feb 2003 23:18:15 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 32,38 ****
-   // Tri6 class static member initializations
-   #ifdef ENABLE_AMR
-   
- ! const Real Tri6::embedding_matrix[4][6][6] =
-   {
-     // embedding matrix for child 0
-     {
- --- 32,38 ----
-   // Tri6 class static member initializations
-   #ifdef ENABLE_AMR
-   
- ! const float  Tri6::embedding_matrix[4][6][6] =
-   {
-     // embedding matrix for child 0
-     {
- ***************
- *** 131,143 ****
-         {
-   	error();
-         }
- !     };
-   
-     
-     // We will never get here...  Look at the code above.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! };
-   
-   
-   
- --- 131,143 ----
-         {
-   	error();
-         }
- !     }
-   
-     
-     // We will never get here...  Look at the code above.
-     error();
-     AutoPtr<Elem> ap(NULL);  return ap;
- ! }
-   
-   
-   
- ***************
- *** 188,199 ****
-   
-       default:
-         error();
- !     };
-   
-     error();
-     
-     return conn;
- ! };
-   
-   
-   
- --- 188,199 ----
-   
-       default:
-         error();
- !     }
-   
-     error();
-     
-     return conn;
- ! }
-   
-   
-   
- ***************
- *** 244,255 ****
-   
-       default:
-         error();
- !     };
-   
-     error();
-     
-     return;
- ! };
-   
-   
-   
- --- 244,255 ----
-   
-       default:
-         error();
- !     }
-   
-     error();
-     
-     return;
- ! }
-   
-   
-   
- ***************
- *** 267,276 ****
-   
-       for (unsigned int c=0; c<n_children(); c++)
-         {
- ! 	_children[c] = new Tri6(this);
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       };
- !   };
-   
-     // Compute new nodal locations
-     // and asssign nodes to children
- --- 267,276 ----
-   
-       for (unsigned int c=0; c<n_children(); c++)
-         {
- ! 	_children[c] = Elem::build (type());
-   	_children[c]->set_refinement_flag() = Elem::JUST_REFINED;
- !       }
- !   }
-   
-     // Compute new nodal locations
-     // and asssign nodes to children
- ***************
- *** 286,303 ****
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc] += point(n)*embedding_matrix[c][nc][n];
-       
-       
- !     // assign nodes to children & add them to the mesh
-       for (unsigned int c=0; c<n_children(); c++)
-         {
-   	for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       };
- !   };
-   
-   
-     
- --- 286,303 ----
-         for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	for (unsigned int n=0; n<n_nodes(); n++)
-   	  if (embedding_matrix[c][nc][n] != 0.)
- ! 	    p[c][nc].add_scaled (point(n), static_cast<Real>(embedding_matrix[c][nc][n]));
-       
-       
- !     // Assign nodes to children & add them to the mesh
-       for (unsigned int c=0; c<n_children(); c++)
-         {
-   	for (unsigned int nc=0; nc<child(c)->n_nodes(); nc++)
-   	  _children[c]->set_node(nc) = mesh.mesh_refinement.add_point(p[c][nc]);
-   
-   	mesh.add_elem(child(c), mesh.mesh_refinement.new_element_number());
- !       }
- !   }
-   
-   
-     
- ***************
- *** 311,323 ****
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<2; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	};
- !   };
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! };
-   
-   
-   
- --- 311,323 ----
-   	  if (id != mesh.boundary_info.invalid_id)
-   	    for (unsigned int sc=0; sc<2; sc++)
-   	      mesh.boundary_info.add_side(child(side_children_matrix[s][sc]), s, id);
- ! 	}
- !   }
-   
-     
-     // Un-set my refinement flag now
-     set_refinement_flag() = Elem::DO_NOTHING;
- ! }
-   
-   
-   
- Index: src/geom/plane.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/plane.C,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** src/geom/plane.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/geom/plane.C	13 Feb 2003 22:56:12 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 30,36 ****
-   // Plane class member functions
-   Plane::Plane ()
-   {
- ! };
-   
-   
-   
- --- 30,36 ----
-   // Plane class member functions
-   Plane::Plane ()
-   {
- ! }
-   
-   
-   
- ***************
- *** 38,44 ****
-   	      const Point& n)
-   {
-     create_from_point_normal (p, n);
- ! };
-   
-   
-   
- --- 38,44 ----
-   	      const Point& n)
-   {
-     create_from_point_normal (p, n);
- ! }
-   
-   
-   
- ***************
- *** 47,53 ****
-   	      const Point& p2)
-   {
-     create_from_three_points (p0, p1, p2);
- ! };
-   
-   
-   
- --- 47,53 ----
-   	      const Point& p2)
-   {
-     create_from_three_points (p0, p1, p2);
- ! }
-   
-   
-   
- ***************
- *** 56,68 ****
-   {
-     create_from_point_normal(other_plane.point,
-   			   other_plane.normal);
- ! };
-   
-   
-   
-   Plane::~Plane ()
-   {
- ! };
-   
-   
-   
- --- 56,68 ----
-   {
-     create_from_point_normal(other_plane.point,
-   			   other_plane.normal);
- ! }
-   
-   
-   
-   Plane::~Plane ()
-   {
- ! }
-   
-   
-   
- ***************
- *** 70,76 ****
-   {
-     normal = n.unit();
-     point  = p;
- ! };
-   
-   
-   
- --- 70,76 ----
-   {
-     normal = n.unit();
-     point  = p;
- ! }
-   
-   
-   
- ***************
- *** 86,92 ****
-     Point n  = e0.cross(e1);
-   
-     Point normal = n.unit(); 
- ! };
-   
-   
-   
- --- 86,92 ----
-     Point n  = e0.cross(e1);
-   
-     Point normal = n.unit(); 
- ! }
-   
-   
-   
- ***************
- *** 97,103 ****
-   
-     point  = p;
-     normal = n;
- ! };
-   
-   
-   
- --- 97,103 ----
-   
-     point  = p;
-     normal = n;
- ! }
-   
-   
-   
- ***************
- *** 108,114 ****
-   
-     point  = p;
-     normal = n;
- ! };
-   
-   
-   
- --- 108,114 ----
-   
-     point  = p;
-     normal = n;
- ! }
-   
-   
-   
- ***************
- *** 119,125 ****
-   
-     point  = p;
-     normal = n;
- ! };
-   
-   
-   
- --- 119,125 ----
-   
-     point  = p;
-     normal = n;
- ! }
-   
-   
-   
- ***************
- *** 136,149 ****
-       return true;
-   
-     return false;
- ! };
-   
-   
-   
-   bool Plane::below_surface (const Point& p) const 
-   {
-     return ( !above_surface (p) );
- ! };
-   
-   
-   
- --- 136,149 ----
-       return true;
-   
-     return false;
- ! }
-   
-   
-   
-   bool Plane::below_surface (const Point& p) const 
-   {
-     return ( !above_surface (p) );
- ! }
-   
-   
-   
- ***************
- *** 159,165 ****
-       return true;
-   
-     return false;
- ! };
-   
-   
-   
- --- 159,165 ----
-       return true;
-   
-     return false;
- ! }
-   
-   
-   
- ***************
- *** 174,184 ****
-     const Point cp = p - normal*(w*normal);
-     
-     return cp;
- ! };
-   
-   
-   
-   Point Plane::unit_normal (const Point&) const
-   {
-     return normal;
- ! };
- --- 174,184 ----
-     const Point cp = p - normal*(w*normal);
-     
-     return cp;
- ! }
-   
-   
-   
-   Point Plane::unit_normal (const Point&) const
-   {
-     return normal;
- ! }
- Index: src/geom/point.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/point.C,v
- retrieving revision 1.6
- retrieving revision 1.10
- diff -c -r1.6 -r1.10
- *** src/geom/point.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/geom/point.C	21 Feb 2003 18:31:30 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 20,28 ****
-   
-   
-   
-   // Local includes
-   #include "point.h"
- - #include <iomanip>
-   
-   
-   
- --- 20,30 ----
-   
-   
-   
- + // C++ includes
- + #include <iomanip>
- + 
-   // Local includes
-   #include "point.h"
-   
-   
-   
- ***************
- *** 37,53 ****
-     // |(*this)(0) (*this)(1) (*this)(2)|
-     // |   p(0)       p(1)       p(2)   |
-   
- !   
- !   // Point val;
- !   // val.coords[0] =  (coords[1]*p.coords[2] - coords[2]*p.coords[1]);
- !   // val.coords[1] = -(coords[0]*p.coords[2] - coords[2]*p.coords[0]);
- !   // val.coords[2] =  (coords[0]*p.coords[1] - coords[1]*p.coords[0]);
- !   // return val;
- ! 
- !   return Point(  coords[1]*p.coords[2] - coords[2]*p.coords[1],
- ! 	        -coords[0]*p.coords[2] + coords[2]*p.coords[0],
- ! 	         coords[0]*p.coords[1] - coords[1]*p.coords[0]);
- ! };
-   
-   
-   
- --- 39,48 ----
-     // |(*this)(0) (*this)(1) (*this)(2)|
-     // |   p(0)       p(1)       p(2)   |
-   
- !   return Point(  _coords[1]*p._coords[2] - _coords[2]*p._coords[1],
- ! 	        -_coords[0]*p._coords[2] + _coords[2]*p._coords[0],
- ! 	         _coords[0]*p._coords[1] - _coords[1]*p._coords[0]);
- ! }
-   
-   
-   
- ***************
- *** 59,87 ****
-     assert (length != static_cast<Real>(0.));
-     
-   #if DIM == 1
- !   return Point(coords[0]/length);
-   #endif
-     
-   #if DIM == 2 
- !   return Point(coords[0]/length,
- ! 	       coords[1]/length);
-   #endif
-     
-   #if DIM == 3
- !   return Point(coords[0]/length,
- ! 	       coords[1]/length, 
- ! 	       coords[2]/length);
-   #endif
-     
- ! };
- ! 
- ! 
- ! 
- ! void Point::clear()
- ! {
- !   for (unsigned int i=0; i<DIM; i++)
- !     coords[i] = 0;
- ! };
-   
-   
-   
- --- 54,74 ----
-     assert (length != static_cast<Real>(0.));
-     
-   #if DIM == 1
- !   return Point(_coords[0]/length);
-   #endif
-     
-   #if DIM == 2 
- !   return Point(_coords[0]/length,
- ! 	       _coords[1]/length);
-   #endif
-     
-   #if DIM == 3
- !   return Point(_coords[0]/length,
- ! 	       _coords[1]/length, 
- ! 	       _coords[2]/length);
-   #endif
-     
- ! }
-   
-   
-   
- ***************
- *** 108,127 ****
-   	    << std::setw(8) << (*this)(2) << ")"
-   	    << std::endl;
-   #endif
- ! };
-   
-   
-   
-   
- ! void Point::write_unformatted (std::ostream &out) const
-   {
-     assert (out);
-   
-     out << std::setiosflags(std::ios::showpoint)
-         << (*this)(0) << " "
-         << (*this)(1) << " "
- !       << (*this)(2) << std::endl;
- ! };
-   
-   
-   
- --- 95,118 ----
-   	    << std::setw(8) << (*this)(2) << ")"
-   	    << std::endl;
-   #endif
- ! }
-   
-   
-   
-   
- ! void Point::write_unformatted (std::ostream &out,
- ! 			       const bool newline) const
-   {
-     assert (out);
-   
-     out << std::setiosflags(std::ios::showpoint)
-         << (*this)(0) << " "
-         << (*this)(1) << " "
- !       << (*this)(2) << " ";
- ! 
- !   if (newline)
- !     out << std::endl;      
- ! }
-   
-   
-   
- ***************
- *** 134,140 ****
-       return true;
-     
-     return false;
- ! };
-   
-   
-   
- --- 125,131 ----
-       return true;
-     
-     return false;
- ! }
-   
-   
-   
- ***************
- *** 175,181 ****
-       }
-   
-     return false;
- ! };
-   
-   
-   
- --- 166,172 ----
-       }
-   
-     return false;
- ! }
-   
-   
-   
- ***************
- *** 229,236 ****
-   	}
-         else
-   	cnt++;
- !     };
-   
-     return index[2];
- ! };
-   
- --- 220,227 ----
-   	}
-         else
-   	cnt++;
- !     }
-   
-     return index[2];
- ! }
-   
- Index: src/geom/sphere.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/geom/sphere.C,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** src/geom/sphere.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/geom/sphere.C	13 Feb 2003 22:56:12 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 33,39 ****
-   Sphere::Sphere () : 
-     rad(-1.)
-   {
- ! };
-   
-   
-   
- --- 33,39 ----
-   Sphere::Sphere () : 
-     rad(-1.)
-   {
- ! }
-   
-   
-   
- ***************
- *** 43,49 ****
-     assert (r > 0.);
-   
-     create_from_center_radius (c, r);
- ! };
-   
-   
-   
- --- 43,49 ----
-     assert (r > 0.);
-   
-     create_from_center_radius (c, r);
- ! }
-   
-   
-   
- ***************
- *** 52,64 ****
-   {
-     create_from_center_radius (other_sphere.cent,
-   			     other_sphere.rad);
- ! };
-   
-   
-   
-   Sphere::~Sphere ()
-   {
- ! };
-   
-   
-   
- --- 52,64 ----
-   {
-     create_from_center_radius (other_sphere.cent,
-   			     other_sphere.rad);
- ! }
-   
-   
-   
-   Sphere::~Sphere ()
-   {
- ! }
-   
-   
-   
- ***************
- *** 68,74 ****
-     rad = r;
-   
-     assert (rad > 0.);
- ! };
-   
-   
-   
- --- 68,74 ----
-     rad = r;
-   
-     assert (rad > 0.);
- ! }
-   
-   
-   
- ***************
- *** 83,89 ****
-       return true;
-     
-     return false;
- ! };
-   
-   
-   
- --- 83,89 ----
-       return true;
-     
-     return false;
- ! }
-   
-   
-   
- ***************
- *** 98,104 ****
-       return true;
-   
-     return false;
- ! };
-   
-   
-   
- --- 98,104 ----
-       return true;
-   
-     return false;
- ! }
-   
-   
-   
- ***************
- *** 107,113 ****
-     assert (rad > 0.);
-   
-     return ( !above_surface (p) );
- ! };
-   
-   
-   
- --- 107,113 ----
-     assert (rad > 0.);
-   
-     return ( !above_surface (p) );
- ! }
-   
-   
-   
- ***************
- *** 124,130 ****
-       return true;
-   
-     return false;
- ! };
-   
-   
-   
- --- 124,130 ----
-       return true;
-   
-     return false;
- ! }
-   
-   
-   
- ***************
- *** 141,147 ****
-     const Point cp = cent + normal*rad;
-     
-     return cp;
- ! };
-   
-   
-   
- --- 141,147 ----
-     const Point cp = cent + normal*rad;
-     
-     return cp;
- ! }
-   
-   
-   
- ***************
- *** 153,156 ****
-     Point n = p - cent;
-   
-     return n.unit();
- ! };
- --- 153,156 ----
-     Point n = p - cent;
-   
-     return n.unit();
- ! }
- Index: src/mesh/boundary_info.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/mesh/boundary_info.C,v
- retrieving revision 1.10
- retrieving revision 1.12
- diff -c -r1.10 -r1.12
- *** src/mesh/boundary_info.C	4 Feb 2003 16:29:51 -0000	1.10
- --- src/mesh/boundary_info.C	13 Feb 2003 22:56:12 -0000	1.12
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 42,55 ****
-     dim(d),
-     mesh(m)
-   {
- ! };
-   
-   
-   
-   BoundaryInfo::~BoundaryInfo()
-   {
-     clear();
- ! };
-   
-   
-   
- --- 42,55 ----
-     dim(d),
-     mesh(m)
-   {
- ! }
-   
-   
-   
-   BoundaryInfo::~BoundaryInfo()
-   {
-     clear();
- ! }
-   
-   
-   
- ***************
- *** 67,73 ****
-     elem_id_list.clear();
-   
-     boundary_mesh.clear();
- ! };
-   
-   
-   
- --- 67,73 ----
-     elem_id_list.clear();
-   
-     boundary_mesh.clear();
- ! }
-   
-   
-   
- ***************
- *** 152,158 ****
-     // 		  elem->subdomain_id() = id_map[invalid_id];
-     // 		}
-     // 	    }
- !   //   };
-   
-   
-     
- --- 152,158 ----
-     // 		  elem->subdomain_id() = id_map[invalid_id];
-     // 		}
-     // 	    }
- !   //   }
-   
-   
-     
- ***************
- *** 171,178 ****
-     // 	      next_node_number++;
-   	    
-     // 	    boundary_mesh.add_point(mesh.point(node_number));
- !   // 	  };
- !   //       };
-   
-     
-   
- --- 171,178 ----
-     // 	      next_node_number++;
-   	    
-     // 	    boundary_mesh.add_point(mesh.point(node_number));
- !   // 	  }
- !   //       }
-   
-     
-   
- ***************
- *** 183,190 ****
-     // 	const unsigned int old_number = boundary_mesh.elem(e)->node(n); 
-   	    
-     // 	boundary_mesh.elem(e)->node(n) = new_node_numbers[old_number];
- !   //       };
- ! };
-   
-   
-   
- --- 183,190 ----
-     // 	const unsigned int old_number = boundary_mesh.elem(e)->node(n); 
-   	    
-     // 	boundary_mesh.elem(e)->node(n) = new_node_numbers[old_number];
- !   //       }
- ! }
-   
-   
-   
- ***************
- *** 207,213 ****
-   
-     node_list.push_back(node);
-     node_id_list.push_back(id);
- ! };
-   
-   
-   
- --- 207,213 ----
-   
-     node_list.push_back(node);
-     node_id_list.push_back(id);
- ! }
-   
-   
-   
- ***************
- *** 221,227 ****
-     elem_id_list.push_back(id);
-   
-     add_side (mesh.elem(e), side, id);
- ! };
-   
-   
-   
- --- 221,227 ----
-     elem_id_list.push_back(id);
-   
-     add_side (mesh.elem(e), side, id);
- ! }
-   
-   
-   
- ***************
- *** 260,269 ****
-       for (unsigned int n=0; n<side_elem->n_nodes(); n++)
-         if (boundary_id(side_elem->node(n)) == invalid_id)
-    	add_node(side_elem->node(n), id);
- !   };
-   #endif
-     
- ! };
-   
-   
-   
- --- 260,269 ----
-       for (unsigned int n=0; n<side_elem->n_nodes(); n++)
-         if (boundary_id(side_elem->node(n)) == invalid_id)
-    	add_node(side_elem->node(n), id);
- !   }
-   #endif
-     
- ! }
-   
-   
-   
- ***************
- *** 275,281 ****
-     read_shanee_boundary(in);
-   
-     return;
- ! };
-   
-   
-   
- --- 275,281 ----
-     read_shanee_boundary(in);
-   
-     return;
- ! }
-   
-   
-   
- ***************
- *** 290,296 ****
-       return invalid_id;
-   
-     return n->second;
- ! };
-   
-   
-   
- --- 290,296 ----
-       return invalid_id;
-   
-     return n->second;
- ! }
-   
-   
-   
- ***************
- *** 298,304 ****
-   				    const unsigned short int side) const
-   {
-     return boundary_id(mesh.elem(e), side);
- ! };
-   
-   
-   
- --- 298,304 ----
-   				    const unsigned short int side) const
-   {
-     return boundary_id(mesh.elem(e), side);
- ! }
-   
-   
-   
- ***************
- *** 324,335 ****
-   	return e.first->second.second;
-   
-         ++e.first;
- !     };
-   
-     // if we get here, we found elem in the data structure but not
-     // the requested side, so return the default value
-     return invalid_id;  
- ! };
-   
-   
-   
- --- 324,335 ----
-   	return e.first->second.second;
-   
-         ++e.first;
- !     }
-   
-     // if we get here, we found elem in the data structure but not
-     // the requested side, so return the default value
-     return invalid_id;  
- ! }
-   
-   
-   
- ***************
- *** 362,368 ****
-         
-         add_node(n0, static_cast<short int>(id));      
-       }    
- ! };
-   
-   
-   
- --- 362,368 ----
-         
-         add_node(n0, static_cast<short int>(id));      
-       }    
- ! }
-   
-   
-   
- ***************
- *** 372,378 ****
-   {
-     add_node(node, id);
-     boundary_values.push_back(std::make_pair(node, values));
- ! };
-   
-   
-   std::vector<Real> BoundaryInfo::get_boundary_values(const unsigned int node) const
- --- 372,378 ----
-   {
-     add_node(node, id);
-     boundary_values.push_back(std::make_pair(node, values));
- ! }
-   
-   
-   std::vector<Real> BoundaryInfo::get_boundary_values(const unsigned int node) const
- ***************
- *** 386,398 ****
-   	{
-   	  return pos->second;
-   	}
- !     };
-   
-     std::cerr << "ERROR: No boundary values are specified for Node: "
-   	    << node << std::endl;
- -   error();
-   
- ! };
-   
-   
-   void BoundaryInfo::print_info() const
- --- 386,400 ----
-   	{
-   	  return pos->second;
-   	}
- !     }
-   
-     std::cerr << "ERROR: No boundary values are specified for Node: "
-   	    << node << std::endl;
-   
- !   error();
- !   std::vector<Real> v;
- !   return v;
- ! }
-   
-   
-   void BoundaryInfo::print_info() const
- ***************
- *** 417,423 ****
-         std::for_each(boundary_node_id.begin(),
-   		    boundary_node_id.end(),
-   		    PrintNodeInfo());
- !     };
-   
-     // Print out the element BCs
-     if (!boundary_side_id.empty())
- --- 419,425 ----
-         std::for_each(boundary_node_id.begin(),
-   		    boundary_node_id.end(),
-   		    PrintNodeInfo());
- !     }
-   
-     // Print out the element BCs
-     if (!boundary_side_id.empty())
- ***************
- *** 448,456 ****
-     		    PrintSideInfo(elem_star_to_num));
-   
-         
- !     };
-     
- ! };
-   
-   
-   
- --- 450,458 ----
-     		    PrintSideInfo(elem_star_to_num));
-   
-         
- !     }
-     
- ! }
-   
-   
-   
- Index: src/mesh/boundary_mesh.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/mesh/boundary_mesh.C,v
- retrieving revision 1.4
- retrieving revision 1.5
- diff -c -r1.4 -r1.5
- *** src/mesh/boundary_mesh.C	24 Jan 2003 17:24:43 -0000	1.4
- --- src/mesh/boundary_mesh.C	13 Feb 2003 22:56:12 -0000	1.5
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 32,45 ****
-   			   unsigned int pid) :
-     MeshBase(d, pid)
-   {
- ! };
-   
-   
-   
-   BoundaryMesh::~BoundaryMesh()
-   {
-     MeshBase::clear();
- ! };
-   
-   
-   
- --- 32,45 ----
-   			   unsigned int pid) :
-     MeshBase(d, pid)
-   {
- ! }
-   
-   
-   
-   BoundaryMesh::~BoundaryMesh()
-   {
-     MeshBase::clear();
- ! }
-   
-   
-   
- Index: src/mesh/mesh.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/mesh/mesh.C,v
- retrieving revision 1.6
- retrieving revision 1.9
- diff -c -r1.6 -r1.9
- *** src/mesh/mesh.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/mesh/mesh.C	20 Feb 2003 04:59:58 -0000	1.9
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 23,28 ****
- --- 23,29 ----
-   
-   // Local includes
-   #include "mesh.h"
- + #include "libmesh.h"
-   
-   
-   #ifdef HAVE_SFCURVES
- ***************
- *** 48,62 ****
-     boundary_info(d,*this)
-   #endif
-   {
- ! };
-   
-   
-   
-   Mesh::~Mesh()
-   {
-     boundary_info.clear();
-     MeshBase::clear();
- ! };
-   
-   
-   
- --- 49,67 ----
-     boundary_info(d,*this)
-   #endif
-   {
- !   assert (libMesh::initialized());
- ! }
-   
-   
-   
-   Mesh::~Mesh()
-   {
-     boundary_info.clear();
- +   
-     MeshBase::clear();
- !   
- !   assert (!libMesh::closed());
- ! }
-   
-   
-   
- ***************
- *** 71,83 ****
-     boundary_info.clear();
-   
-     MeshBase::clear();
- ! };
-   
-   
-   
-   void Mesh::read(const std::string& name)
-   {
- !   _perf_log.start_event("read()");
-   
-     
-     // Read the file based on extension
- --- 76,88 ----
-     boundary_info.clear();
-   
-     MeshBase::clear();
- ! }
-   
-   
-   
-   void Mesh::read(const std::string& name)
-   {
- !   libMesh::log.start_event("read()");
-   
-     
-     // Read the file based on extension
- ***************
- *** 126,140 ****
-   	error();
-   
-         }    
- !   };
- !   _perf_log.stop_event("read()");
- ! };
-   
-   
-   
-   void Mesh::write(const std::string& name)
-   {
- !   _perf_log.start_event("write()");
-     
-     // Write the file based on extension
-     {
- --- 131,145 ----
-   	error();
-   
-         }    
- !   }
- !   libMesh::log.stop_event("read()");
- ! }
-   
-   
-   
-   void Mesh::write(const std::string& name)
-   {
- !   libMesh::log.start_event("write()");
-     
-     // Write the file based on extension
-     {
- ***************
- *** 180,197 ****
-   		  << std::endl
-   		  << "\n Exiting without writing output\n";
-         }    
- !   };
-     
- !   _perf_log.stop_event("write()");
- ! };
-   
-   
-   
-   void Mesh::write(const std::string& name,
- ! 		 std::vector<Complex>& v,
-   		 std::vector<std::string>& vn)
-   {
- !   _perf_log.start_event("write()");
-   
-     // Write the file based on extension
-     {
- --- 185,202 ----
-   		  << std::endl
-   		  << "\n Exiting without writing output\n";
-         }    
- !   }
-     
- !   libMesh::log.stop_event("write()");
- ! }
-   
-   
-   
-   void Mesh::write(const std::string& name,
- ! 		 std::vector<Number>& v,
-   		 std::vector<std::string>& vn)
-   {
- !   libMesh::log.start_event("write()");
-   
-     // Write the file based on extension
-     {
- ***************
- *** 217,226 ****
-   		  << "     *.gmv  -- LANL's GMV (General Mesh Viewer) format\n"
-   		  << "\n Exiting without writing output\n";
-         }
- !   };
-   
- !   _perf_log.stop_event("write()");
- ! };
-   
-   
-   
- --- 222,231 ----
-   		  << "     *.gmv  -- LANL's GMV (General Mesh Viewer) format\n"
-   		  << "\n Exiting without writing output\n";
-         }
- !   }
-   
- !   libMesh::log.stop_event("write()");
- ! }
-   
-   
-   
- ***************
- *** 272,279 ****
-       
-   #endif
-       
- !   };
- ! };
-   
-   
-   #endif
- --- 277,284 ----
-       
-   #endif
-       
- !   }
- ! }
-   
-   
-   #endif
- Index: src/mesh/mesh_base.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/mesh/mesh_base.C,v
- retrieving revision 1.9
- retrieving revision 1.16
- diff -c -r1.9 -r1.16
- *** src/mesh/mesh_base.C	3 Feb 2003 03:51:49 -0000	1.9
- --- src/mesh/mesh_base.C	21 Feb 2003 18:31:31 -0000	1.16
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 27,32 ****
- --- 27,33 ----
-   
-   // Local includes
-   #include "mesh_base.h"
- + #include "libmesh.h"
-   #include "face_tri3.h"
-   #include "face_tri6.h"
-   #include "cell_inf_prism6.h"
- ***************
- *** 57,108 ****
-     _n_sbd(1),
-     _n_proc(1),
-     _dim(d),
- !   _proc_id(pid),
- ! #ifdef ENABLE_PERFORMANCE_LOGGING
- !   _perf_log("MeshBase", true)
- ! #else
- !   _perf_log("MeshBase", false)
- ! #endif
- !   
-   {
-     assert (DIM <= 3);
-     assert (DIM >= _dim);
- ! };
-   
-   
-   
-   MeshBase::MeshBase (const MeshBase& other_mesh) :
- !   _n_sbd(other_mesh._n_sbd),
- !   _n_proc(other_mesh._n_proc),
- !   _dim(other_mesh._dim),
- !   _proc_id(other_mesh._proc_id)
-   
-   {
- - 
-     _nodes = other_mesh._nodes;
- !   _elements = other_mesh._elements;
- !   
- ! };
-   
-   
-   MeshBase::~MeshBase()
-   {
-     clear();
- ! };
-   
-   
-   
-   Node* MeshBase::add_point(const Point& p,
-   			  const unsigned int num)
-   {  
- !   _perf_log.start_event("add_point()");
-   
-     if ((num == static_cast<unsigned int>(-1)) ||
-         (num == n_nodes()))
-       {
-         _nodes.push_back(Node::build(p, n_nodes()));
-   
- !       _perf_log.stop_event("add_point()");
-     
-         return node_ptr(n_nodes()-1);
-       }
- --- 58,104 ----
-     _n_sbd(1),
-     _n_proc(1),
-     _dim(d),
- !   _proc_id(pid)
-   {
-     assert (DIM <= 3);
-     assert (DIM >= _dim);
- !   assert (libMesh::initialized());
- ! }
-   
-   
-   
-   MeshBase::MeshBase (const MeshBase& other_mesh) :
- !   _n_sbd   (other_mesh._n_sbd),
- !   _n_proc  (other_mesh._n_proc),
- !   _dim     (other_mesh._dim),
- !   _proc_id (other_mesh._proc_id)
-   
-   {
-     _nodes = other_mesh._nodes;
- !   _elements = other_mesh._elements; 
- ! }
-   
-   
-   MeshBase::~MeshBase()
-   {
-     clear();
- ! 
- !   assert (!libMesh::closed());
- ! }
-   
-   
-   
-   Node* MeshBase::add_point(const Point& p,
-   			  const unsigned int num)
-   {  
- !   libMesh::log.start_event("add_point()");
-   
-     if ((num == static_cast<unsigned int>(-1)) ||
-         (num == n_nodes()))
-       {
-         _nodes.push_back(Node::build(p, n_nodes()));
-   
- !       libMesh::log.stop_event("add_point()");
-     
-         return node_ptr(n_nodes()-1);
-       }
- ***************
- *** 115,121 ****
-         node(num)          = p;
-         node(num).set_id() = num;
-         
- !       _perf_log.stop_event("add_point()");
-     
-         return node_ptr(num);
-       }
- --- 111,117 ----
-         node(num)          = p;
-         node(num).set_id() = num;
-         
- !       libMesh::log.stop_event("add_point()");
-     
-         return node_ptr(num);
-       }
- ***************
- *** 124,136 ****
-     // We'll never get here...
-     error();
-     return NULL;
- ! };
-   
-   
-   
-   void MeshBase::add_elem(Elem* e, const unsigned int n)
-   {
- !   _perf_log.start_event("add_elem()");
-   
-     if ((n == static_cast<unsigned int>(-1)) ||
-         (n == n_elem()))
- --- 120,132 ----
-     // We'll never get here...
-     error();
-     return NULL;
- ! }
-   
-   
-   
-   void MeshBase::add_elem(Elem* e, const unsigned int n)
-   {
- !   libMesh::log.start_event("add_elem()");
-   
-     if ((n == static_cast<unsigned int>(-1)) ||
-         (n == n_elem()))
- ***************
- *** 142,149 ****
-         _elements[n] = e;
-       }
-   
- !   _perf_log.stop_event("add_elem()");
- ! };
-   
-   
-   
- --- 138,145 ----
-         _elements[n] = e;
-       }
-   
- !   libMesh::log.stop_event("add_elem()");
- ! }
-   
-   
-   
- ***************
- *** 151,162 ****
-   {
-     unsigned int num=0;
-   
- !   for (unsigned int e=0; e<n_elem(); e++)
- !     if (elem(e)->active())
- !       num++;
-   
-     return num;
- ! };
-   
-   
-   
- --- 147,160 ----
-   {
-     unsigned int num=0;
-   
- !   const_active_elem_iterator       it (elements_begin());
- !   const const_active_elem_iterator end(elements_end()); 
- ! 
- !   for (; it!=end; ++it)
- !     num++;
-   
-     return num;
- ! }
-   
-   
-   
- ***************
- *** 169,180 ****
-   
-     // Clear the elements data structure
-     {
- !     for (unsigned int i=0; i<n_elem(); i++)
- !       if (elem(i) != NULL)
- ! 	delete elem(i);
-       
-       _elements.clear();
- !   };
-   
-     // clear the nodes data structure
-     {
- --- 167,178 ----
-   
-     // Clear the elements data structure
-     {
- !     for (unsigned int e=0; e<n_elem(); e++)
- !       if (elem(e) != NULL)
- ! 	delete elem(e);
-       
-       _elements.clear();
- !   }
-   
-     // clear the nodes data structure
-     {
- ***************
- *** 183,190 ****
-   	delete node_ptr(n);
-       
-       _nodes.clear();
- !   };  
- ! };
-   
-   
-   
- --- 181,188 ----
-   	delete node_ptr(n);
-       
-       _nodes.clear();
- !   }  
- ! }
-   
-   
-   
- ***************
- *** 196,202 ****
-       ne += elem(i)->n_sub_elem();
-   
-     return ne;
- ! };
-   
-   
-   
- --- 194,200 ----
-       ne += elem(i)->n_sub_elem();
-   
-     return ne;
- ! }
-   
-   
-   
- ***************
- *** 204,215 ****
-   {
-     unsigned int ne=0;
-   
- !   for (unsigned int i=0; i<n_elem(); i++)
- !     if (elem(i)->active())
- !       ne += elem(i)->n_sub_elem();
-   
-     return ne;
- ! };
-   
-   
-   
- --- 202,215 ----
-   {
-     unsigned int ne=0;
-   
- !   const_active_elem_iterator       it (elements_begin());
- !   const const_active_elem_iterator end(elements_end());
- !   
- !   for (; it!=end; ++it)
- !     ne += (*it)->n_sub_elem(); 
-   
-     return ne;
- ! }
-   
-   
-   
- ***************
- *** 238,244 ****
-       }
-     
-     return et;
- ! };
-   
-   
-   
- --- 238,244 ----
-       }
-     
-     return et;
- ! }
-   
-   
-   
- ***************
- *** 246,257 ****
-   {
-     unsigned int cnt=0;
-   
- !   for (unsigned int e=0; e<n_elem(); e++)
- !     if (elem(e)->type() == type)
- !       cnt++;
-     
-     return cnt;
- ! };
-   
-   
-   
- --- 246,259 ----
-   {
-     unsigned int cnt=0;
-   
- !   const_type_elem_iterator       it (elements_begin(), type);
- !   const const_type_elem_iterator end(elements_end(),   type);
- ! 
- !   for (; it!=end; ++it)
- !     cnt++;
-     
-     return cnt;
- ! }
-   
-   
-   
- ***************
- *** 259,271 ****
-   {
-     unsigned int cnt=0;
-   
- !   for (unsigned int e=0; e<n_elem(); e++)
- !     if (elem(e)->active())
- !       if (elem(e)->type() == type)
- ! 	cnt++;
-     
-     return cnt;
- ! };
-   
-   
-   
- --- 261,274 ----
-   {
-     unsigned int cnt=0;
-   
- !   const_active_type_elem_iterator       it (elements_begin(), type);
- !   const const_active_type_elem_iterator end(elements_end(),   type);
-     
- +   for (; it!=end; ++it)
- +     cnt++;
- +     
-     return cnt;
- ! }
-   
-   
-   
- ***************
- *** 273,283 ****
-   {
-     unsigned int weight=0;
-   
- !   for (unsigned int e=0; e<n_elem(); e++)
- !     weight += elem(e)->n_nodes();
-     
-     return weight;
- ! };
-   
-   
-   
- --- 276,289 ----
-   {
-     unsigned int weight=0;
-   
- !   const_elem_iterator       it (elements_begin());
- !   const const_elem_iterator end(elements_end());
- ! 
- !   for ( ; it != end; ++it)
- !     weight += (*it)->n_nodes();
-     
-     return weight;
- ! }
-   
-   
-   
- ***************
- *** 298,311 ****
-         << "  processor_id()=" << processor_id() << std::endl;
-   
-     return out.str();
- ! };
-   
-   
-   void MeshBase::print_info() const
-   {
-     std::cout << get_info()
-   	    << std::endl;
- ! };
-   
-   
-   
- --- 304,317 ----
-         << "  processor_id()=" << processor_id() << std::endl;
-   
-     return out.str();
- ! }
-   
-   
-   void MeshBase::print_info() const
-   {
-     std::cout << get_info()
-   	    << std::endl;
- ! }
-   
-   
-   
- ***************
- *** 318,329 ****
-         char line[256];
-         in.get (line, 255, '\n'); // ignore rest of line, at most 256 chars
-         in.get (c);               // ignore '\n' at end of line.
- !     };
-     
-     // put back first character of
-     // first non-comment line
-     in.putback (c);
- ! };
-   
-   
-   
- --- 324,335 ----
-         char line[256];
-         in.get (line, 255, '\n'); // ignore rest of line, at most 256 chars
-         in.get (c);               // ignore '\n' at end of line.
- !     }
-     
-     // put back first character of
-     // first non-comment line
-     in.putback (c);
- ! }
-   
-   
-   
- ***************
- *** 337,343 ****
-       error();
-   
-   
- !   _perf_log.start_event("find_neighbors()");
-     
-     // data structures
-     typedef std::pair<unsigned int, Elem*> key_val_pair;
- --- 343,349 ----
-       error();
-   
-   
- !   libMesh::log.start_event("find_neighbors()");
-     
-     // data structures
-     typedef std::pair<unsigned int, Elem*> key_val_pair;
- ***************
- *** 411,427 ****
-   				
-   				// get out of this nested crap
-   				goto next_side; 
- ! 			      };
- ! 			  };
- ! 		      };
-   		  
-   		  // didn't find a match...
-   		  side_to_elem.insert (bounds.first,
-   				       key_val_pair(key, element));
- ! 		};
- ! 	    };
- ! 	};
- !     };
-     
-     side_to_elem.clear();
-   
- --- 417,433 ----
-   				
-   				// get out of this nested crap
-   				goto next_side; 
- ! 			      }
- ! 			  }
- ! 		      }
-   		  
-   		  // didn't find a match...
-   		  side_to_elem.insert (bounds.first,
-   				       key_val_pair(key, element));
- ! 		}
- ! 	    }
- ! 	}
- !     }
-     
-     side_to_elem.clear();
-   
- ***************
- *** 440,482 ****
-      * Furthermore, that neighbor better be active,
-      * otherwise we missed a child somewhere.
-      */
- !   
- !   for (unsigned int e=0; e<n_elem(); e++)
- !     if (elem(e)->level() != 0)
- !       for (unsigned int s=0; s<elem(e)->n_sides(); s++)
- ! 	if (elem(e)->neighbor(s) == NULL)
- ! 	  {
- ! 	    elem(e)->set_neighbor(s,elem(e)->parent()->neighbor(s));
-   
-   #ifdef DEBUG	    
- ! 	    if (elem(e)->neighbor(s) != NULL)
- ! 	      assert (elem(e)->neighbor(s)->active());
-   #endif
-   	  }
-     
-   #endif
-   
- ! //   std::cout << "Counter 0=" << c0
- ! // 	    << ", Counter 1=" << c1
- ! // 	    << std::endl;
- !     
- !     
- ! 
- !   _perf_log.stop_event("find_neighbors()");
- ! };
-   
-   
-   
-   #ifdef ENABLE_INFINITE_ELEMENTS
-   
-   
- ! void MeshBase::build_inf_elem()
-   {
-     // determine origin automatically,
-     // works only if the mesh has no symmetry planes.
-     std::pair<Point, Point> b_box = bounding_box();
-       
- !   build_inf_elem( (b_box.first+b_box.second)/2. );	 /* untested */
-   }
-   
-   
- --- 446,496 ----
-      * Furthermore, that neighbor better be active,
-      * otherwise we missed a child somewhere.
-      */
- !   not_level_elem_iterator it(elements_begin(), 0);
- !   not_level_elem_iterator end(elements_end(),   0);
-   
- +   for (; it!=end; ++it)
- +     {
- +       for (unsigned int s=0; s < (*it)->n_sides(); s++)
- + 	if ((*it)->neighbor(s) == NULL)
- + 	  {
- + 	    (*it)->set_neighbor(s, (*it)->parent()->neighbor(s));
- + 	    
-   #ifdef DEBUG	    
- ! 	    if ((*it)->neighbor(s) != NULL)
- ! 	      assert ((*it)->neighbor(s)->active());
-   #endif
-   	  }
- +     }
-     
-   #endif
-   
- !   libMesh::log.stop_event("find_neighbors()");
- ! }
-   
-   
-   
-   #ifdef ENABLE_INFINITE_ELEMENTS
-   
-   
- ! const Point MeshBase::build_inf_elem(bool be_verbose)
-   {
-     // determine origin automatically,
-     // works only if the mesh has no symmetry planes.
-     std::pair<Point, Point> b_box = bounding_box();
- +   Point origin = (b_box.first+b_box.second)/2.;
-       
- !   if (be_verbose)
- !     {
- !       std::cout << " Determined origin for Infinite Elements:" << std::endl
- ! 		<< "  ";
- !       origin.write_unformatted(std::cout);
- !       std::cout << std::endl;
- !     }
- ! 
- !   build_inf_elem(origin, false, false, false, be_verbose);
- ! 
- !   return origin;
-   }
-   
-   
- ***************
- *** 489,500 ****
-   {
-   		
-     if (be_verbose)
- !     std::cout << "Updating element neighbor tables..." << std::endl;
- ! 	
-     find_neighbors();	// update elem->neighbor() tables
-   
-   
- !   _perf_log.start_event("build_inf_elem()");
-   
-     std::set< std::pair<unsigned int,unsigned int> > faces,ofaces;
-     std::set< std::pair<unsigned int,unsigned int> > :: iterator face_it;
- --- 503,517 ----
-   {
-   		
-     if (be_verbose)
- !     {
- !       std::cout << " Building Infinite Elements:" << std::endl;
- !       std::cout << "  updating element neighbor tables..." << std::endl;
- !     }
- ! 
-     find_neighbors();	// update elem->neighbor() tables
-   
-   
- !   libMesh::log.start_event("build_inf_elem()");
-   
-     std::set< std::pair<unsigned int,unsigned int> > faces,ofaces;
-     std::set< std::pair<unsigned int,unsigned int> > :: iterator face_it;
- ***************
- *** 507,513 ****
-   
-     if (be_verbose)
-       {
- !       std::cout << "Collecting boundary sides";
-         if (x_sym || y_sym || z_sym)
-   	std::cout << ", skipping sides in symmetry planes..." << std::endl;
-         else
- --- 524,530 ----
-   
-     if (be_verbose)
-       {
- !       std::cout << "  collecting boundary sides";
-         if (x_sym || y_sym || z_sym)
-   	std::cout << ", skipping sides in symmetry planes..." << std::endl;
-         else
- ***************
- *** 518,535 ****
-      * Iterate through all elements and sides, collect indices of all active
-      * boundary sides in the faces set. Skip sides which lie in symmetry planes.
-      * Later, sides of the inner boundary will be sorted out.
-      */
- - 
-     for(unsigned int e=0;e<n_elem();e++)
-       {
-         if (!(elem(e)->active()))
- ! 	continue;
- ! 
-         for (unsigned int s=0; s<elem(e)->n_sides(); s++)
-   	{
-   	  if (elem(e)->neighbor(s) != NULL)
-   	    continue;	 // check if elem(e) is on the boundary
- ! 		
-   	  /* note that it is safe to use the Elem::side() method, 
-   	     which gives a non-full-ordered element */
-   	  AutoPtr<Elem> side(elem(e)->side(s));			
- --- 535,553 ----
-      * Iterate through all elements and sides, collect indices of all active
-      * boundary sides in the faces set. Skip sides which lie in symmetry planes.
-      * Later, sides of the inner boundary will be sorted out.
- +    * Can't use iterators here since the element
- +    * index (e) is explicitly used later...
-      */
-     for(unsigned int e=0;e<n_elem();e++)
-       {
-         if (!(elem(e)->active()))
- !    	continue;
- !       
-         for (unsigned int s=0; s<elem(e)->n_sides(); s++)
-   	{
-   	  if (elem(e)->neighbor(s) != NULL)
-   	    continue;	 // check if elem(e) is on the boundary
- ! 	  
-   	  /* note that it is safe to use the Elem::side() method, 
-   	     which gives a non-full-ordered element */
-   	  AutoPtr<Elem> side(elem(e)->side(s));			
- ***************
- *** 573,579 ****
-   	  sym_side=(x_sym&&on_x_sym)||(y_sym&&on_y_sym)||(z_sym&&on_z_sym);
-   				
-   	  std::pair<unsigned int,unsigned int> p(e,s);
- ! 												
-   	  if (!sym_side)
-   	    faces.insert(p);					
-   					    
- --- 591,597 ----
-   	  sym_side=(x_sym&&on_x_sym)||(y_sym&&on_y_sym)||(z_sym&&on_z_sym);
-   				
-   	  std::pair<unsigned int,unsigned int> p(e,s);
- ! 	  
-   	  if (!sym_side)
-   	    faces.insert(p);					
-   					    
- ***************
- *** 640,647 ****
-   	
-   	
-     if (be_verbose)
- !     std::cout << "Found " << faces.size() << " inner and " 
- ! 	      << ofaces.size() << " outer boundary faces." << std::endl;
-   	
-   	
-     faces.clear();		//free memory
- --- 658,665 ----
-   	
-   	
-     if (be_verbose)
- !     std::cout << "  found " << faces.size() << " inner and " 
- ! 	      << ofaces.size() << " outer boundary faces" << std::endl;
-   	
-   	
-     faces.clear();		//free memory
- ***************
- *** 727,739 ****
-   
-   
-     if (be_verbose)
- !     std::cout << "Added "
-   	      << n_elem()-n_conventional_elem
- ! 	      << " infinite elements to mesh."
-   	      << std::endl;
-   
-   
- !   _perf_log.stop_event("build_inf_elem()");
-   
-   }
-   
- --- 745,758 ----
-   
-   
-     if (be_verbose)
- !     std::cout << "  added "
-   	      << n_elem()-n_conventional_elem
- ! 	      << " infinite elements to mesh"
- ! 	      << std::endl
-   	      << std::endl;
-   
-   
- !   libMesh::log.stop_event("build_inf_elem()");
-   
-   }
-   
- ***************
- *** 751,757 ****
-     for (unsigned int e=0; e<n_elem(); e++)
-       for (unsigned int n=0; n<elem(e)->n_nodes(); n++)
-         nodes_to_elem_map[elem(e)->node(n)].push_back(e);
- ! };
-   
-   
-   
- --- 770,776 ----
-     for (unsigned int e=0; e<n_elem(); e++)
-       for (unsigned int n=0; n<elem(e)->n_nodes(); n++)
-         nodes_to_elem_map[elem(e)->node(n)].push_back(e);
- ! }
-   
-   
-   
- ***************
- *** 762,911 ****
-     std::vector<Elem*> new_elements;
-     new_elements.reserve (2*n_elem());
-   
- !   for (unsigned int e=0; e<n_elem(); e++)
- !     if (elem(e)->active())
- !       if (elem(e)->type() == QUAD4)
-   	{
-   	  Elem* tri0 = new Tri3;
-   	  Elem* tri1 = new Tri3;
-   	  
-   	  // Check for possible edge swap
- ! 	  if ((elem(e)->point(0) - elem(e)->point(2)).size() <
- ! 	      (elem(e)->point(1) - elem(e)->point(3)).size())
-   	    {	      
- ! 	      tri0->set_node(0) = elem(e)->get_node(0);
- ! 	      tri0->set_node(1) = elem(e)->get_node(1);
- ! 	      tri0->set_node(2) = elem(e)->get_node(2);
-   	      
- ! 	      tri1->set_node(0) = elem(e)->get_node(0);
- ! 	      tri1->set_node(1) = elem(e)->get_node(2);
- ! 	      tri1->set_node(2) = elem(e)->get_node(3);
-   	    }
-   
-   	  else
-   	    {
- ! 	      tri0->set_node(0) = elem(e)->get_node(0);
- ! 	      tri0->set_node(1) = elem(e)->get_node(1);
- ! 	      tri0->set_node(2) = elem(e)->get_node(3);
-   	      
- ! 	      tri1->set_node(0) = elem(e)->get_node(1);
- ! 	      tri1->set_node(1) = elem(e)->get_node(2);
- ! 	      tri1->set_node(2) = elem(e)->get_node(3);
-   	    }
-   	  
-   	  new_elements.push_back(tri0);
-   	  new_elements.push_back(tri1);
-   	  
- ! 	  delete _elements[e];
-   	}
-         
- !       else if (elem(e)->type() == QUAD8)
-   	{
-   	  Elem* tri0 = new Tri6;
-   	  Elem* tri1 = new Tri6;
-   	  
- ! 	  Node* new_node = add_point((node(elem(e)->node(0)) +
- ! 				      node(elem(e)->node(1)) +
- ! 				      node(elem(e)->node(2)) +
- ! 				      node(elem(e)->node(3)))*.25
-   				     );
-   	  
-   	  // Check for possible edge swap
- ! 	  if ((elem(e)->point(0) - elem(e)->point(2)).size() <
- ! 	      (elem(e)->point(1) - elem(e)->point(3)).size())
-   	    {	      
- ! 	      tri0->set_node(0) = elem(e)->get_node(0);
- ! 	      tri0->set_node(1) = elem(e)->get_node(1);
- ! 	      tri0->set_node(2) = elem(e)->get_node(2);
- ! 	      tri0->set_node(3) = elem(e)->get_node(4);
- ! 	      tri0->set_node(4) = elem(e)->get_node(5);
-   	      tri0->set_node(5) = new_node;
-   	      
- ! 	      tri1->set_node(0) = elem(e)->get_node(0);
- ! 	      tri1->set_node(1) = elem(e)->get_node(2);
- ! 	      tri1->set_node(2) = elem(e)->get_node(3);
-   	      tri1->set_node(3) = new_node;
- ! 	      tri1->set_node(4) = elem(e)->get_node(6);
- ! 	      tri1->set_node(5) = elem(e)->get_node(7);
-   
-   	    }
-   	  
-   	  else
-   	    {
- ! 	      tri0->set_node(0) = elem(e)->get_node(3);
- ! 	      tri0->set_node(1) = elem(e)->get_node(0);
- ! 	      tri0->set_node(2) = elem(e)->get_node(1);
- ! 	      tri0->set_node(3) = elem(e)->get_node(7);
- ! 	      tri0->set_node(4) = elem(e)->get_node(4);
-   	      tri0->set_node(5) = new_node;
-   	      
- ! 	      tri1->set_node(0) = elem(e)->get_node(1);
- ! 	      tri1->set_node(1) = elem(e)->get_node(2);
- ! 	      tri1->set_node(2) = elem(e)->get_node(3);
- ! 	      tri1->set_node(3) = elem(e)->get_node(5);
- ! 	      tri1->set_node(4) = elem(e)->get_node(6);
-   	      tri1->set_node(5) = new_node;
-   	    }
-   	  
-   	  new_elements.push_back(tri0);
-   	  new_elements.push_back(tri1);
-   	  
- ! 	  delete _elements[e];
-   	}
-         
- !       else if (elem(e)->type() == QUAD9)
-   	{
-   	  Elem* tri0 = new Tri6;
-   	  Elem* tri1 = new Tri6;
-   
-   	  // Check for possible edge swap
- ! 	  if ((elem(e)->point(0) - elem(e)->point(2)).size() <
- ! 	      (elem(e)->point(1) - elem(e)->point(3)).size())
-   	    {	      
- ! 	      tri0->set_node(0) = elem(e)->get_node(0);
- ! 	      tri0->set_node(1) = elem(e)->get_node(1);
- ! 	      tri0->set_node(2) = elem(e)->get_node(2);
- ! 	      tri0->set_node(3) = elem(e)->get_node(4);
- ! 	      tri0->set_node(4) = elem(e)->get_node(5);
- ! 	      tri0->set_node(5) = elem(e)->get_node(8);
-   	      
- ! 	      tri1->set_node(0) = elem(e)->get_node(0);
- ! 	      tri1->set_node(1) = elem(e)->get_node(2);
- ! 	      tri1->set_node(2) = elem(e)->get_node(3);
- ! 	      tri1->set_node(3) = elem(e)->get_node(8);
- ! 	      tri1->set_node(4) = elem(e)->get_node(6);
- ! 	      tri1->set_node(5) = elem(e)->get_node(7);
-   	    }
-   
-   	  else
-   	    {
- ! 	      tri0->set_node(0) = elem(e)->get_node(0);
- ! 	      tri0->set_node(1) = elem(e)->get_node(1);
- ! 	      tri0->set_node(2) = elem(e)->get_node(3);
- ! 	      tri0->set_node(3) = elem(e)->get_node(4);
- ! 	      tri0->set_node(4) = elem(e)->get_node(8);
- ! 	      tri0->set_node(5) = elem(e)->get_node(7);
-   	      
- ! 	      tri1->set_node(0) = elem(e)->get_node(1);
- ! 	      tri1->set_node(1) = elem(e)->get_node(2);
- ! 	      tri1->set_node(2) = elem(e)->get_node(3);
- ! 	      tri1->set_node(3) = elem(e)->get_node(5);
- ! 	      tri1->set_node(4) = elem(e)->get_node(6);
- ! 	      tri1->set_node(5) = elem(e)->get_node(8);
-   	    }
-   	  
-   	  new_elements.push_back(tri0);
-   	  new_elements.push_back(tri1);
- ! 	  
- ! 	  delete _elements[e];
-   	}
-         else
- ! 	new_elements.push_back(elem(e));
- ! 
-     _elements = new_elements;
-   
-     find_neighbors();
- ! };
-   
-   
-   
- --- 781,934 ----
-     std::vector<Elem*> new_elements;
-     new_elements.reserve (2*n_elem());
-   
- !   active_elem_iterator it(elements_begin());
- !   active_elem_iterator end(elements_end());
- ! 
- !   for (; it!=end; ++it)
- !     {
- !       if ((*it)->type() == QUAD4)
-   	{
-   	  Elem* tri0 = new Tri3;
-   	  Elem* tri1 = new Tri3;
-   	  
-   	  // Check for possible edge swap
- ! 	  if (((*it)->point(0) - (*it)->point(2)).size() <
- ! 	      ((*it)->point(1) - (*it)->point(3)).size())
-   	    {	      
- ! 	      tri0->set_node(0) = (*it)->get_node(0);
- ! 	      tri0->set_node(1) = (*it)->get_node(1);
- ! 	      tri0->set_node(2) = (*it)->get_node(2);
-   	      
- ! 	      tri1->set_node(0) = (*it)->get_node(0);
- ! 	      tri1->set_node(1) = (*it)->get_node(2);
- ! 	      tri1->set_node(2) = (*it)->get_node(3);
-   	    }
-   
-   	  else
-   	    {
- ! 	      tri0->set_node(0) = (*it)->get_node(0);
- ! 	      tri0->set_node(1) = (*it)->get_node(1);
- ! 	      tri0->set_node(2) = (*it)->get_node(3);
-   	      
- ! 	      tri1->set_node(0) = (*it)->get_node(1);
- ! 	      tri1->set_node(1) = (*it)->get_node(2);
- ! 	      tri1->set_node(2) = (*it)->get_node(3);
-   	    }
-   	  
-   	  new_elements.push_back(tri0);
-   	  new_elements.push_back(tri1);
-   	  
- ! 	  delete *it; //_elements[e];
-   	}
-         
- !       else if ((*it)->type() == QUAD8)
-   	{
-   	  Elem* tri0 = new Tri6;
-   	  Elem* tri1 = new Tri6;
-   	  
- ! 	  Node* new_node = add_point((node((*it)->node(0)) +
- ! 				      node((*it)->node(1)) +
- ! 				      node((*it)->node(2)) +
- ! 				      node((*it)->node(3)))*.25
-   				     );
-   	  
-   	  // Check for possible edge swap
- ! 	  if (((*it)->point(0) - (*it)->point(2)).size() <
- ! 	      ((*it)->point(1) - (*it)->point(3)).size())
-   	    {	      
- ! 	      tri0->set_node(0) = (*it)->get_node(0);
- ! 	      tri0->set_node(1) = (*it)->get_node(1);
- ! 	      tri0->set_node(2) = (*it)->get_node(2);
- ! 	      tri0->set_node(3) = (*it)->get_node(4);
- ! 	      tri0->set_node(4) = (*it)->get_node(5);
-   	      tri0->set_node(5) = new_node;
-   	      
- ! 	      tri1->set_node(0) = (*it)->get_node(0);
- ! 	      tri1->set_node(1) = (*it)->get_node(2);
- ! 	      tri1->set_node(2) = (*it)->get_node(3);
-   	      tri1->set_node(3) = new_node;
- ! 	      tri1->set_node(4) = (*it)->get_node(6);
- ! 	      tri1->set_node(5) = (*it)->get_node(7);
-   
-   	    }
-   	  
-   	  else
-   	    {
- ! 	      tri0->set_node(0) = (*it)->get_node(3);
- ! 	      tri0->set_node(1) = (*it)->get_node(0);
- ! 	      tri0->set_node(2) = (*it)->get_node(1);
- ! 	      tri0->set_node(3) = (*it)->get_node(7);
- ! 	      tri0->set_node(4) = (*it)->get_node(4);
-   	      tri0->set_node(5) = new_node;
-   	      
- ! 	      tri1->set_node(0) = (*it)->get_node(1);
- ! 	      tri1->set_node(1) = (*it)->get_node(2);
- ! 	      tri1->set_node(2) = (*it)->get_node(3);
- ! 	      tri1->set_node(3) = (*it)->get_node(5);
- ! 	      tri1->set_node(4) = (*it)->get_node(6);
-   	      tri1->set_node(5) = new_node;
-   	    }
-   	  
-   	  new_elements.push_back(tri0);
-   	  new_elements.push_back(tri1);
-   	  
- ! 	  delete *it; //_elements[e];
-   	}
-         
- !       else if ((*it)->type() == QUAD9)
-   	{
-   	  Elem* tri0 = new Tri6;
-   	  Elem* tri1 = new Tri6;
-   
-   	  // Check for possible edge swap
- ! 	  if (((*it)->point(0) - (*it)->point(2)).size() <
- ! 	      ((*it)->point(1) - (*it)->point(3)).size())
-   	    {	      
- ! 	      tri0->set_node(0) = (*it)->get_node(0);
- ! 	      tri0->set_node(1) = (*it)->get_node(1);
- ! 	      tri0->set_node(2) = (*it)->get_node(2);
- ! 	      tri0->set_node(3) = (*it)->get_node(4);
- ! 	      tri0->set_node(4) = (*it)->get_node(5);
- ! 	      tri0->set_node(5) = (*it)->get_node(8);
-   	      
- ! 	      tri1->set_node(0) = (*it)->get_node(0);
- ! 	      tri1->set_node(1) = (*it)->get_node(2);
- ! 	      tri1->set_node(2) = (*it)->get_node(3);
- ! 	      tri1->set_node(3) = (*it)->get_node(8);
- ! 	      tri1->set_node(4) = (*it)->get_node(6);
- ! 	      tri1->set_node(5) = (*it)->get_node(7);
-   	    }
-   
-   	  else
-   	    {
- ! 	      tri0->set_node(0) = (*it)->get_node(0);
- ! 	      tri0->set_node(1) = (*it)->get_node(1);
- ! 	      tri0->set_node(2) = (*it)->get_node(3);
- ! 	      tri0->set_node(3) = (*it)->get_node(4);
- ! 	      tri0->set_node(4) = (*it)->get_node(8);
- ! 	      tri0->set_node(5) = (*it)->get_node(7);
-   	      
- ! 	      tri1->set_node(0) = (*it)->get_node(1);
- ! 	      tri1->set_node(1) = (*it)->get_node(2);
- ! 	      tri1->set_node(2) = (*it)->get_node(3);
- ! 	      tri1->set_node(3) = (*it)->get_node(5);
- ! 	      tri1->set_node(4) = (*it)->get_node(6);
- ! 	      tri1->set_node(5) = (*it)->get_node(8);
-   	    }
-   	  
-   	  new_elements.push_back(tri0);
-   	  new_elements.push_back(tri1);
- ! 
- ! 	  delete *it; //_elements[e];
-   	}
-         else
- ! 	new_elements.push_back(*it);
- !     }
- !   
-     _elements = new_elements;
-   
-     find_neighbors();
- ! }
-   
-   
-   
- ***************
- *** 932,938 ****
-   	    elem(e)->processor_id() = 0;
-   	
-   	return;
- !       };
-   
-       
-       const unsigned int blksize = n_elem()/n_sbdmns; 
- --- 955,961 ----
-   	    elem(e)->processor_id() = 0;
-   	
-   	return;
- !       }
-   
-       
-       const unsigned int blksize = n_elem()/n_sbdmns; 
- ***************
- *** 963,971 ****
-   	  elem(e)->processor_id() = 0;
-         
-         return;
- !     };
-     
- !   _perf_log.start_event("sfc_partition()");
-       
-     std::vector<double> x;
-     std::vector<double> y;
- --- 986,994 ----
-   	  elem(e)->processor_id() = 0;
-         
-         return;
- !     }
-     
- !   libMesh::log.start_event("sfc_partition()");
-       
-     std::vector<double> x;
-     std::vector<double> y;
- ***************
- *** 985,991 ****
-   
-         if (_dim == 3)
-   	z[e] = p(2);
- !     };
-   
-     int size = static_cast<int>(n_elem());
-     table.resize(size);
- --- 1008,1014 ----
-   
-         if (_dim == 3)
-   	z[e] = p(2);
- !     }
-   
-     int size = static_cast<int>(n_elem());
-     table.resize(size);
- ***************
- *** 1007,1020 ****
-   	wgt/wgt_per_proc;
-   
-         wgt += elem(table[e]-1)->n_nodes();
- !     };
-     
- !   _perf_log.stop_event("sfc_partiton()");
-   
-     return;
-     
-   #endif
- ! };
-   
-   
-   
- --- 1030,1043 ----
-   	wgt/wgt_per_proc;
-   
-         wgt += elem(table[e]-1)->n_nodes();
- !     }
-     
- !   libMesh::log.stop_event("sfc_partiton()");
-   
-     return;
-     
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 1026,1032 ****
-     assert (n_elem());
-     assert ((factor >= 0.) && (factor <= 1.));
-   
- !   _perf_log.start_event("distort()");
-   
-     std::vector<Real>      hmin(n_nodes(), 1.e20);
-     std::vector<short int> on_boundary(n_nodes(), 0);
- --- 1049,1055 ----
-     assert (n_elem());
-     assert ((factor >= 0.) && (factor <= 1.));
-   
- !   libMesh::log.start_event("distort()");
-   
-     std::vector<Real>      hmin(n_nodes(), 1.e20);
-     std::vector<short int> on_boundary(n_nodes(), 0);
- ***************
- *** 1036,1061 ****
-     // so that we don't move them
-     if (!perturb_boundary)
-       {
- !       for (unsigned int e=0; e<n_elem(); e++)
- ! 	if (elem(e)->active())
- ! 	  for (unsigned int s=0; s<elem(e)->n_sides(); s++)
- ! 	    if (elem(e)->neighbor(s) == NULL) // on the boundary
- ! 	      {
- ! 		const AutoPtr<Elem> side(elem(e)->build_side(s));
- ! 		
- ! 		for (unsigned int n=0; n<side->n_nodes(); n++)
- ! 		  on_boundary[side->node(n)] = 1;
- ! 	      };
- !     };
-   
-   
-     // Now calculate the minimum distance to
-     // neighboring nodes for each node
- !   for (unsigned int e=0; e<n_elem(); e++)
- !     if (elem(e)->active())
- !       for (unsigned int n=0; n<elem(e)->n_nodes(); n++)
- ! 	hmin[elem(e)->node(n)] = std::min(hmin[elem(e)->node(n)],
- ! 					  elem(e)->hmin());		
-   
-     
-     // Now actually move the nodes
- --- 1059,1086 ----
-     // so that we don't move them
-     if (!perturb_boundary)
-       {
- !       active_elem_iterator       it (elements_begin());
- !       const active_elem_iterator end(elements_end());
- !       for (; it!=end; ++it)
- ! 	for (unsigned int s=0; s<(*it)->n_sides(); s++)
- ! 	  if ((*it)->neighbor(s) == NULL) // on the boundary
- ! 	    {
- ! 	      const AutoPtr<Elem> side((*it)->build_side(s));
- ! 	      
- ! 	      for (unsigned int n=0; n<side->n_nodes(); n++)
- ! 		on_boundary[side->node(n)] = 1;
- ! 	    }
- !     }
-   
-   
-     // Now calculate the minimum distance to
-     // neighboring nodes for each node
- !   active_elem_iterator       it (elements_begin());
- !   const active_elem_iterator end(elements_end());
- !   for (; it!=end; ++it)
- !     for (unsigned int n=0; n<(*it)->n_nodes(); n++)
- !       hmin[(*it)->node(n)] = std::min(hmin[(*it)->node(n)],
- ! 				      (*it)->hmin());		
-   
-     
-     // Now actually move the nodes
- ***************
- *** 1097,1110 ****
-   		node(n)(2) += dir(2)*factor*hmin[n];
-   	    }
-   	}
- !   };
-   
-   
-     // All done  
- !   _perf_log.stop_event("distort()");
-   
-     return;
- ! };
-   
-   
-   
- --- 1122,1135 ----
-   		node(n)(2) += dir(2)*factor*hmin[n];
-   	    }
-   	}
- !   }
-   
-   
-     // All done  
- !   libMesh::log.stop_event("distort()");
-   
-     return;
- ! }
-   
-   
-   
- ***************
- *** 1116,1122 ****
-   
-     for (unsigned int n=0; n<n_nodes(); n++)
-       node(n) += p;
- ! };
-   
-   
-   
- --- 1141,1147 ----
-   
-     for (unsigned int n=0; n<n_nodes(); n++)
-       node(n) += p;
- ! }
-   
-   
-   
- ***************
- *** 1125,1131 ****
-   		       const Real)
-   {
-     error();
- ! };
-   
-   
-   
- --- 1150,1156 ----
-   		       const Real)
-   {
-     error();
- ! }
-   
-   
-   
- ***************
- *** 1142,1148 ****
-         assert (zs == 0.);
-   
-         y_scale = z_scale = x_scale;
- !     };
-   
-     // Scale the x coordinate in all dimensions
-     for (unsigned int n=0; n<n_nodes(); n++)
- --- 1167,1173 ----
-         assert (zs == 0.);
-   
-         y_scale = z_scale = x_scale;
- !     }
-   
-     // Scale the x coordinate in all dimensions
-     for (unsigned int n=0; n<n_nodes(); n++)
- ***************
- *** 1161,1169 ****
-   	{
-   	  for (unsigned int n=0; n<n_nodes(); n++)
-   	    node(n)(2) = node(n)(2)*z_scale;
- ! 	};
- !     };
- ! };
-   
-   
-   
- --- 1186,1194 ----
-   	{
-   	  for (unsigned int n=0; n<n_nodes(); n++)
-   	    node(n)(2) = node(n)(2)*z_scale;
- ! 	}
- !     }
- ! }
-   
-   
-   
- ***************
- *** 1173,1179 ****
-     // processor bounding box with no arguments
-     // computes the global bounding box
-     return processor_bounding_box();
- ! };
-   
-   
-   
- --- 1198,1204 ----
-     // processor bounding box with no arguments
-     // computes the global bounding box
-     return processor_bounding_box();
- ! }
-   
-   
-   
- ***************
- *** 1188,1194 ****
-     Sphere sphere (cent, .5*diag);
-   
-     return sphere;
- ! };
-   
-   
-   
- --- 1213,1219 ----
-     Sphere sphere (cent, .5*diag);
-   
-     return sphere;
- ! }
-   
-   
-   
- ***************
- *** 1209,1215 ****
-   	  {
-   	    min(i) = std::min(min(i), point(n)(i));
-   	    max(i) = std::max(max(i), point(n)(i));
- ! 	  };      
-       }
-     // if a specific processor id is specified then we need
-     // to only consider those elements living on that processor
- --- 1234,1240 ----
-   	  {
-   	    min(i) = std::min(min(i), point(n)(i));
-   	    max(i) = std::max(max(i), point(n)(i));
- ! 	  }      
-       }
-     // if a specific processor id is specified then we need
-     // to only consider those elements living on that processor
- ***************
- *** 1222,1234 ****
-   	      {
-   		min(i) = std::min(min(i), point(elem(e)->node(n))(i));
-   		max(i) = std::max(max(i), point(elem(e)->node(n))(i));
- ! 	      };      
- !     };
-   
-     const std::pair<Point, Point> ret_val(min, max);
-   
-     return ret_val;  
- ! };
-   
-   
-   
- --- 1247,1259 ----
-   	      {
-   		min(i) = std::min(min(i), point(elem(e)->node(n))(i));
-   		max(i) = std::max(max(i), point(elem(e)->node(n))(i));
- ! 	      }      
- !     }
-   
-     const std::pair<Point, Point> ret_val(min, max);
-   
-     return ret_val;  
- ! }
-   
-   
-   
- ***************
- *** 1243,1249 ****
-     Sphere sphere (cent, .5*diag);
-   
-     return sphere;
- ! };
-   
-   
-   
- --- 1268,1274 ----
-     Sphere sphere (cent, .5*diag);
-   
-     return sphere;
- ! }
-   
-   
-   
- ***************
- *** 1264,1270 ****
-   	  {
-   	    min(i) = std::min(min(i), point(n)(i));
-   	    max(i) = std::max(max(i), point(n)(i));
- ! 	  };      
-       }
-   
-     // if a specific subdomain id is specified then we need
- --- 1289,1295 ----
-   	  {
-   	    min(i) = std::min(min(i), point(n)(i));
-   	    max(i) = std::max(max(i), point(n)(i));
- ! 	  }      
-       }
-   
-     // if a specific subdomain id is specified then we need
- ***************
- *** 1278,1290 ****
-   	      {
-   		min(i) = std::min(min(i), point(elem(e)->node(n))(i));
-   		max(i) = std::max(max(i), point(elem(e)->node(n))(i));
- ! 	      };      
- !     };
-   
-     const std::pair<Point, Point> ret_val(min, max);
-   
-     return ret_val;  
- ! };
-   
-   
-   
- --- 1303,1315 ----
-   	      {
-   		min(i) = std::min(min(i), point(elem(e)->node(n))(i));
-   		max(i) = std::max(max(i), point(elem(e)->node(n))(i));
- ! 	      }      
- !     }
-   
-     const std::pair<Point, Point> ret_val(min, max);
-   
-     return ret_val;  
- ! }
-   
-   
-   
- ***************
- *** 1298,1308 ****
-     Sphere sphere (cent, .5*diag);
-   
-     return sphere;
- ! };
-   
-   
-   
- ! void MeshBase::build_L_graph (PetscMatrix& conn) const
-   {
-   #ifndef HAVE_PETSC
-   
- --- 1323,1333 ----
-     Sphere sphere (cent, .5*diag);
-   
-     return sphere;
- ! }
-   
-   
-   
- ! void MeshBase::build_L_graph (PetscMatrix<Number>& conn) const
-   {
-   #ifndef HAVE_PETSC
-   
- ***************
- *** 1323,1329 ****
-       for (unsigned int n=0; n<n_nodes(); n++)
-         conn.set(n,n,0.);
-   
- !   };
-     
-     switch (mesh_dimension())
-       {
- --- 1348,1354 ----
-       for (unsigned int n=0; n<n_nodes(); n++)
-         conn.set(n,n,0.);
-   
- !   }
-     
-     switch (mesh_dimension())
-       {
- ***************
- *** 1334,1340 ****
-   		  << " in 1D!"
-   		  << std::endl;
-   	error();
- !       };
-   
-         
-         // Create the graph for a 2D mesh.  Do this by looking
- --- 1359,1365 ----
-   		  << " in 1D!"
-   		  << std::endl;
-   	error();
- !       }
-   
-         
-         // Create the graph for a 2D mesh.  Do this by looking
- ***************
- *** 1357,1367 ****
-   
-   		  conn.set(n1,n1, conn(n1,n1) + 1.);
-   		  conn.set(n1,n0, -1.);
- ! 		};
-   
-   	// All done.
-   	break;
- !       };
-   
-   
-   
- --- 1382,1392 ----
-   
-   		  conn.set(n1,n1, conn(n1,n1) + 1.);
-   		  conn.set(n1,n0, -1.);
- ! 		}
-   
-   	// All done.
-   	break;
- !       }
-   
-   
-   
- ***************
- *** 1394,1412 ****
-   			  
-   			  conn.set(n1,n1, conn(n1,n1) + 1.);
-   			  conn.set(n1,n0, -1.);
- ! 			};
- ! 		    };
- ! 		};
-   
-   	// All done
-   	break;
- !       };
-         
-   
-       default:
-         // what?
-         error();
- !     };
-   
-   
-     // OK, now the matrix is built.  Close it
- --- 1419,1437 ----
-   			  
-   			  conn.set(n1,n1, conn(n1,n1) + 1.);
-   			  conn.set(n1,n0, -1.);
- ! 			}
- ! 		    }
- ! 		}
-   
-   	// All done
-   	break;
- !       }
-         
-   
-       default:
-         // what?
-         error();
- !     }
-   
-   
-     // OK, now the matrix is built.  Close it
- ***************
- *** 1416,1426 ****
-     return;
-   
-   #endif
- ! };
-   
-   
-   
- ! void MeshBase::build_script_L_graph (PetscMatrix& conn) const
-   {
-   #ifndef HAVE_PETSC
-   
- --- 1441,1451 ----
-     return;
-   
-   #endif
- ! }
-   
-   
-   
- ! void MeshBase::build_script_L_graph (PetscMatrix<Number>& conn) const
-   {
-   #ifndef HAVE_PETSC
-   
- ***************
- *** 1432,1438 ****
-   
-     // Inefficient at the moment.  We build an L
-     // matrix and use it to create the script L matrix
- !   PetscMatrix l_conn;
-   
-     build_L_graph (l_conn);
-   
- --- 1457,1463 ----
-   
-     // Inefficient at the moment.  We build an L
-     // matrix and use it to create the script L matrix
- !   PetscMatrix<Number> l_conn;
-   
-     build_L_graph (l_conn);
-   
- ***************
- *** 1451,1457 ****
-   		  << " in 1D!"
-   		  << std::endl;
-   	error();
- !       };
-   
-         
-         // Create the graph for a 2D mesh.  Do this by looking
- --- 1476,1482 ----
-   		  << " in 1D!"
-   		  << std::endl;
-   	error();
- !       }
-   
-         
-         // Create the graph for a 2D mesh.  Do this by looking
- ***************
- *** 1480,1490 ****
-   		  
-   		  conn.set(n0,n1, prod_term);
-   		  conn.set(n1,n0, prod_term);
- ! 		};
-   
-   	// All done.
-   	break;
- !       };
-   
-   
-   
- --- 1505,1515 ----
-   		  
-   		  conn.set(n0,n1, prod_term);
-   		  conn.set(n1,n0, prod_term);
- ! 		}
-   
-   	// All done.
-   	break;
- !       }
-   
-   
-   
- ***************
- *** 1518,1535 ****
-   		      
-   		      conn.set(n0,n1, prod_term);
-   		      conn.set(n1,n0, prod_term);
- ! 		    };
- ! 		};
-   
-   	// All done
-   	break;
- !       };
-         
-   
-       default:
-         // what?
-         error();
- !     };
-   
-   
-     // OK, now the matrix is built.  Close it
- --- 1543,1560 ----
-   		      
-   		      conn.set(n0,n1, prod_term);
-   		      conn.set(n1,n0, prod_term);
- ! 		    }
- ! 		}
-   
-   	// All done
-   	break;
- !       }
-         
-   
-       default:
-         // what?
-         error();
- !     }
-   
-   
-     // OK, now the matrix is built.  Close it
- ***************
- *** 1539,1545 ****
-     return;  
-   
-   #endif
- ! };
-   
-   
-   
- --- 1564,1570 ----
-     return;  
-   
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 1548,1560 ****
-     std::cerr << "ERROR:  You shouldn't be calling this" << std::endl
-   	    << " Use Mesh::read() instead." << std::endl;
-     error();
- ! };
-   
-   
-   
-   void MeshBase::write(const std::string& name)
-   {
- !   _perf_log.start_event("write()");
-     
-     // Write the file based on extension
-     {
- --- 1573,1585 ----
-     std::cerr << "ERROR:  You shouldn't be calling this" << std::endl
-   	    << " Use Mesh::read() instead." << std::endl;
-     error();
- ! }
-   
-   
-   
-   void MeshBase::write(const std::string& name)
-   {
- !   libMesh::log.start_event("write()");
-     
-     // Write the file based on extension
-     {
- ***************
- *** 1574,1591 ****
-   	else
-   	  write_gmv_binary(name);
-         }
- !   };
-   
- !   _perf_log.stop_event("write()");
- ! };
-   
-   
-   
-   void MeshBase::write(const std::string& name,
- ! 		     std::vector<Complex>& v,
-   		     std::vector<std::string>& vn)
-   {
- !   _perf_log.start_event("write()");
-     
-     // Write the file based on extension
-     {
- --- 1599,1616 ----
-   	else
-   	  write_gmv_binary(name);
-         }
- !   }
-   
- !   libMesh::log.stop_event("write()");
- ! }
-   
-   
-   
-   void MeshBase::write(const std::string& name,
- ! 		     std::vector<Number>& v,
-   		     std::vector<std::string>& vn)
-   {
- !   libMesh::log.start_event("write()");
-     
-     // Write the file based on extension
-     {
- ***************
- *** 1602,1631 ****
-   	else
-   	  write_gmv_binary(name, &v, &vn);
-         }
- !   };
-   
- !   _perf_log.stop_event("write()");
- ! };
-   
-   
-   
-   #ifdef USE_COMPLEX_NUMBERS
-   
-   const char* MeshBase::complex_filename(const std::string& _n,
- ! 				       unsigned int r_o_c)
-   {
-     std::string loc=_n;
-     if (r_o_c == 0)
- !     loc.append(".Real");
-     else
-       loc.append(".imag");
-     return loc.c_str();
- ! };
-   
-   
- ! void MeshBase::prepare_complex_data(const std::vector<Complex>* source,
-   				    std::vector<Real>* real_part,
- ! 				    std::vector<Real>* imag_part)
-   {
-     real_part->resize(source->size());
-     imag_part->resize(source->size());
- --- 1627,1656 ----
-   	else
-   	  write_gmv_binary(name, &v, &vn);
-         }
- !   }
-   
- !   libMesh::log.stop_event("write()");
- ! }
-   
-   
-   
-   #ifdef USE_COMPLEX_NUMBERS
-   
-   const char* MeshBase::complex_filename(const std::string& _n,
- ! 				       unsigned int r_o_c) const
-   {
-     std::string loc=_n;
-     if (r_o_c == 0)
- !     loc.append(".real");
-     else
-       loc.append(".imag");
-     return loc.c_str();
- ! }
-   
-   
- ! void MeshBase::prepare_complex_data(const std::vector<Number>* source,
-   				    std::vector<Real>* real_part,
- ! 				    std::vector<Real>* imag_part) const
-   {
-     real_part->resize(source->size());
-     imag_part->resize(source->size());
- ***************
- *** 1635,1642 ****
-       {
-         (*real_part)[i] = (*source)[i].real();
-         (*imag_part)[i] = (*source)[i].imag();
- !     };
- ! };
-   
-   
-   #endif
- --- 1660,1667 ----
-       {
-         (*real_part)[i] = (*source)[i].real();
-         (*imag_part)[i] = (*source)[i].imag();
- !     }
- ! }
-   
-   
-   #endif
- Index: src/mesh/mesh_diva_support.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/mesh/mesh_diva_support.C,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** src/mesh/mesh_diva_support.C	24 Jan 2003 17:24:44 -0000	1.5
- --- src/mesh/mesh_diva_support.C	13 Feb 2003 22:56:12 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 34,40 ****
-     std::ofstream out(name.c_str());
-   
-     write_diva (out);
- ! };
-   
-   
-   
- --- 34,40 ----
-     std::ofstream out(name.c_str());
-   
-     write_diva (out);
- ! }
-   
-   
-   
- ***************
- *** 105,111 ****
-   	    n_active_elem_of_type(HEX27)*8) << " "
-         
-   	<< std::endl;
- !   };
-     
-   
-     boundary_info.boundary_mesh.clear();
- --- 105,111 ----
-   	    n_active_elem_of_type(HEX27)*8) << " "
-         
-   	<< std::endl;
- !   }
-     
-   
-     boundary_info.boundary_mesh.clear();
- ***************
- *** 198,206 ****
-   		      << side->node(5)+1 << " "
-   		      << side->node(2)+1 << " "
-   		      << side->node(6)+1 << std::endl;
- ! 		};
- ! 	    };
- !   };
-     
-   	  
-   
- --- 198,206 ----
-   		      << side->node(5)+1 << " "
-   		      << side->node(2)+1 << " "
-   		      << side->node(6)+1 << std::endl;
- ! 		}
- ! 	    }
- !   }
-     
-   	  
-   
- ***************
- *** 223,229 ****
-   
-   		out << boundary_info.boundary_id(elem(e), s)
-   		    << std::endl;
- ! 	    };
-   
-       
-       /**
- --- 223,229 ----
-   
-   		out << boundary_info.boundary_id(elem(e), s)
-   		    << std::endl;
- ! 	    }
-   
-       
-       /**
- ***************
- *** 241,248 ****
-   		  (side->type() == QUAD9)  )
-   		
-   		out << boundary_info.boundary_id(elem(e), s);
- ! 	    };
- !   };
-   
-   
-     
- --- 241,248 ----
-   		  (side->type() == QUAD9)  )
-   		
-   		out << boundary_info.boundary_id(elem(e), s);
- ! 	    }
- !   }
-   
-   
-     
- ***************
- *** 315,321 ****
-   	      << elem(e)->node(2)+1 << " "
-   	      << elem(e)->node(3)+1 << " "
-   	      << elem(e)->node(4)+1 << std::endl;
- ! 	};
-   
-   
-   
- --- 315,321 ----
-   	      << elem(e)->node(2)+1 << " "
-   	      << elem(e)->node(3)+1 << " "
-   	      << elem(e)->node(4)+1 << std::endl;
- ! 	}
-   
-   
-   
- ***************
- *** 362,367 ****
-   		  << conn[5] << " "
-   		  << conn[6] << " "
-   		  << conn[7] << std::endl;
- ! 	    };
-   	}
- ! };
- --- 362,367 ----
-   		  << conn[5] << " "
-   		  << conn[6] << " "
-   		  << conn[7] << std::endl;
- ! 	    }
-   	}
- ! }
- Index: src/mesh/mesh_exodus_support.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/mesh/mesh_exodus_support.C,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** src/mesh/mesh_exodus_support.C	24 Jan 2003 17:24:44 -0000	1.5
- --- src/mesh/mesh_exodus_support.C	13 Feb 2003 22:56:12 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 425,431 ****
-         
-       default:
-         error();
- !     };
-   
-     error();
-     
- --- 425,431 ----
-         
-       default:
-         error();
- !     }
-   
-     error();
-     
- ***************
- *** 524,533 ****
-   		elem(j)->set_node(k) = node_ptr((node_number-1)); // Set node number
-   		// Subtract 1 since
-   		// exodus is internally 1-based
- ! 	      };
- ! 	  };
-   	nelem_last_block += ex.get_num_elem_this_blk();
- !       };
-   
-       
-       // Read in sideset information -- this is useful for applying boundary conditions
- --- 524,533 ----
-   		elem(j)->set_node(k) = node_ptr((node_number-1)); // Set node number
-   		// Subtract 1 since
-   		// exodus is internally 1-based
- ! 	      }
- ! 	  }
-   	nelem_last_block += ex.get_num_elem_this_blk();
- !       }
-   
-       
-       // Read in sideset information -- this is useful for applying boundary conditions
- ***************
- *** 538,544 ****
-   	{
-   	  offset += (i > 0 ? ex.get_num_sides_per_set(i-1) : 0); // Compute new offset
-   	  ex.read_sideset(i, offset);
- ! 	};
-         
-         
-         //ex.print_sideset_info();
- --- 538,544 ----
-   	{
-   	  offset += (i > 0 ? ex.get_num_sides_per_set(i-1) : 0); // Compute new offset
-   	  ex.read_sideset(i, offset);
- ! 	}
-         
-         
-         //ex.print_sideset_info();
- ***************
- *** 555,566 ****
-   	  boundary_info.add_side(elem_list[e]-1,
-   				 conv.get_side_map(side_list[e]-1),
-   				 id_list[e]);
- ! 	};
- !     };
-   
-       
-       ex.close();            // Close the exodus file, if possible
- !   };
-   
-   #endif
- ! };
- --- 555,566 ----
-   	  boundary_info.add_side(elem_list[e]-1,
-   				 conv.get_side_map(side_list[e]-1),
-   				 id_list[e]);
- ! 	}
- !     }
-   
-       
-       ex.close();            // Close the exodus file, if possible
- !   }
-   
-   #endif
- ! }
- Index: src/mesh/mesh_generation.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/mesh/mesh_generation.C,v
- retrieving revision 1.8
- retrieving revision 1.12
- diff -c -r1.8 -r1.12
- *** src/mesh/mesh_generation.C	4 Feb 2003 16:29:51 -0000	1.8
- --- src/mesh/mesh_generation.C	14 Feb 2003 15:22:50 -0000	1.12
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 25,30 ****
- --- 25,31 ----
-   
-   // Local includes
-   #include "mesh.h"
- + #include "libmesh.h"
-   #include "edge_edge2.h"
-   #include "edge_edge3.h"
-   #include "face_tri3.h"
- ***************
- *** 48,53 ****
- --- 49,58 ----
-   		      const Real zmin, const Real zmax,
-   		      const ElemType type)
-   {
- +   libMesh::log.start_event("build_cube()");
- + 
- + 
- +   
-     switch (mesh_dimension())
-       {
-   
- ***************
- *** 63,77 ****
-   
-   	for (unsigned int i=0; i<=nx; i++)
-   	  {
- ! 	    node_ptr(i) = Node::build((Real) ((Real) i)/((Real) nx), 0, 0, i);
- ! 	  };
-   	
-   	for (unsigned int i=0; i<nx; i++)
-   	  {
-   	    _elements[i] = new Edge2;
-   	    elem(i)->set_node(0) = _nodes[i];
-   	    elem(i)->set_node(1) = _nodes[i+1];
- ! 	  };
-   
-   
-   	// Scale the nodal positions
- --- 68,82 ----
-   
-   	for (unsigned int i=0; i<=nx; i++)
-   	  {
- ! 	    node_ptr(i) = Node::build(static_cast<Real>(i)/static_cast<Real>(nx), 0, 0, i);
- ! 	  }
-   	
-   	for (unsigned int i=0; i<nx; i++)
-   	  {
-   	    _elements[i] = new Edge2;
-   	    elem(i)->set_node(0) = _nodes[i];
-   	    elem(i)->set_node(1) = _nodes[i+1];
- ! 	  }
-   
-   
-   	// Scale the nodal positions
- ***************
- *** 112,123 ****
-   	    for (unsigned int j=0; j<=ny; j++)
-   	      for (unsigned int i=0; i<=nx; i++)
-   		{
- ! 		  node_ptr(p) = Node::build((Real) ((Real) i)/((Real) nx),
- ! 					    (Real) ((Real) j)/((Real) ny),
-   					    0,
-   					    p);
-   		  p++;
- ! 		};
-   	    
-   	    unsigned int e=0;
-   	    
- --- 117,128 ----
-   	    for (unsigned int j=0; j<=ny; j++)
-   	      for (unsigned int i=0; i<=nx; i++)
-   		{
- ! 		  node_ptr(p) = Node::build(static_cast<Real>(i)/static_cast<Real>(nx),
- ! 					    static_cast<Real>(j)/static_cast<Real>(ny),
-   					    0,
-   					    p);
-   		  p++;
- ! 		}
-   	    
-   	    unsigned int e=0;
-   	    
- ***************
- *** 146,152 ****
-   		    boundary_info.add_side(elem(e), 1, 1);
-   		  
-   		  e++;
- ! 		};
-   	    
-   #undef G
-   	  }
- --- 151,157 ----
-   		    boundary_info.add_side(elem(e), 1, 1);
-   		  
-   		  e++;
- ! 		}
-   	    
-   #undef G
-   	  }
- ***************
- *** 165,176 ****
-   	    for (unsigned int j=0; j<=ny; j++)
-   	      for (unsigned int i=0; i<=nx; i++)
-   		{
- ! 		  node_ptr(p) = Node::build((Real) ((Real) i)/((Real) nx),
- ! 					    (Real) ((Real) j)/((Real) ny),
-   					    0,
-   					    p);
-   		  p++;
- ! 		};
-   	    
-   	    unsigned int e=0;
-   	    
- --- 170,181 ----
-   	    for (unsigned int j=0; j<=ny; j++)
-   	      for (unsigned int i=0; i<=nx; i++)
-   		{
- ! 		  node_ptr(p) = Node::build(static_cast<Real>(i)/static_cast<Real>(nx),
- ! 					    static_cast<Real>(j)/static_cast<Real>(ny),
-   					    0,
-   					    p);
-   		  p++;
- ! 		}
-   	    
-   	    unsigned int e=0;
-   	    
- ***************
- *** 194,200 ****
-   		  elem(e)->set_node(2) = _nodes[G(i,j+1)  ];
-   		  
-   		  e++;
- ! 		};
-   	    
-   #undef G
-   	  }
- --- 199,205 ----
-   		  elem(e)->set_node(2) = _nodes[G(i,j+1)  ];
-   		  
-   		  e++;
- ! 		}
-   	    
-   #undef G
-   	  }
- ***************
- *** 214,225 ****
-   	    for (unsigned int j=0; j<=(2*ny); j++)
-   	      for (unsigned int i=0; i<=(2*nx); i++)
-   		{
- ! 		  node_ptr(p) = Node::build((Real) ((Real) i)/((Real) (2*nx)),
- ! 					    (Real) ((Real) j)/((Real) (2*ny)),
-   					    0,
-   					    p);
-   		  p++;
- ! 		};
-   	    
-   	    unsigned int e=0;
-   	    
- --- 219,230 ----
-   	    for (unsigned int j=0; j<=(2*ny); j++)
-   	      for (unsigned int i=0; i<=(2*nx); i++)
-   		{
- ! 		  node_ptr(p) = Node::build(static_cast<Real>(i)/static_cast<Real>(2*nx),
- ! 					    static_cast<Real>(j)/static_cast<Real>(2*ny),
-   					    0,
-   					    p);
-   		  p++;
- ! 		}
-   	    
-   	    unsigned int e=0;
-   	    
- ***************
- *** 259,265 ****
-   		    boundary_info.add_side(elem(e), 1, 1);
-   		  
-   		  e++;
- ! 		};
-   	    
-   #undef G
-   	  }
- --- 264,270 ----
-   		    boundary_info.add_side(elem(e), 1, 1);
-   		  
-   		  e++;
- ! 		}
-   	    
-   #undef G
-   	  }
- ***************
- *** 276,287 ****
-   	    for (unsigned int j=0; j<=(2*ny); j++)
-   	      for (unsigned int i=0; i<=(2*nx); i++)
-   		{
- ! 		  node_ptr(p) = Node::build((Real) ((Real) i)/((Real) (2*nx)),
- ! 					    (Real) ((Real) j)/((Real) (2*ny)),
-   					    0,
-   					    p);
-   		  p++;
- ! 		};
-   	    
-   	    unsigned int e=0;
-   	    
- --- 281,292 ----
-   	    for (unsigned int j=0; j<=(2*ny); j++)
-   	      for (unsigned int i=0; i<=(2*nx); i++)
-   		{
- ! 		  node_ptr(p) = Node::build(static_cast<Real>(i)/static_cast<Real>(2*nx),
- ! 					    static_cast<Real>(j)/static_cast<Real>(2*ny),
-   					    0,
-   					    p);
-   		  p++;
- ! 		}
-   	    
-   	    unsigned int e=0;
-   	    
- ***************
- *** 312,318 ****
-   		  
-   		  e++;
-   		  
- ! 		};
-   	    
-   #undef G
-   	  }
- --- 317,323 ----
-   		  
-   		  e++;
-   		  
- ! 		}
-   	    
-   #undef G
-   	  }
- ***************
- *** 366,377 ****
-   	      for (unsigned int j=0; j<=ny; j++)
-   		for (unsigned int i=0; i<=nx; i++)
-   		  {
- ! 		    node_ptr(p) = Node::build((Real) ((Real) i)/((Real) nx),
- ! 					      (Real) ((Real) j)/((Real) ny),
- ! 					      (Real) ((Real) k)/((Real) nz),
-   					      p);
-   		    p++;
- ! 		  };
-   	    
-   	    unsigned int e=0;
-   	    
- --- 371,382 ----
-   	      for (unsigned int j=0; j<=ny; j++)
-   		for (unsigned int i=0; i<=nx; i++)
-   		  {
- ! 		    node_ptr(p) = Node::build(static_cast<Real>(i)/static_cast<Real>(nx),
- ! 					      static_cast<Real>(j)/static_cast<Real>(ny),
- ! 					      static_cast<Real>(k)/static_cast<Real>(nz),
-   					      p);
-   		    p++;
- ! 		  }
-   	    
-   	    unsigned int e=0;
-   	    
- ***************
- *** 393,403 ****
-   		    elem(e)->set_node(7) = _nodes[G(i,j+1,k+1)  ];
-   		    
-   		    e++;
- ! 		  };
-   #undef G
-   
-   	  }
-   	
-   	else if ((type == HEX20) ||
-   		 (type == HEX27))
-   	  {
- --- 398,410 ----
-   		    elem(e)->set_node(7) = _nodes[G(i,j+1,k+1)  ];
-   		    
-   		    e++;
- ! 		  }
-   #undef G
-   
-   	  }
-   	
- + 
- + //TODO: Hex20 and Hex27 cubes seem to give bad number of nodes....
-   	else if ((type == HEX20) ||
-   		 (type == HEX27))
-   	  {
- ***************
- *** 411,422 ****
-   	      for (unsigned int j=0; j<=(2*ny); j++)
-   		for (unsigned int i=0; i<=(2*nx); i++)
-   		  {
- ! 		    node_ptr(p) = Node::build((Real) ((Real) i)/((Real) (2*nx)),
- ! 					      (Real) ((Real) j)/((Real) (2*ny)),
- ! 					      (Real) ((Real) k)/((Real) (2*nz)),
-   					      p);
-   		    p++;
- ! 		  };
-   	    
-   	    unsigned int e=0;
-   	    
- --- 418,429 ----
-   	      for (unsigned int j=0; j<=(2*ny); j++)
-   		for (unsigned int i=0; i<=(2*nx); i++)
-   		  {
- ! 		    node_ptr(p) = Node::build(static_cast<Real>(i)/static_cast<Real>(2*nx),
- ! 					      static_cast<Real>(j)/static_cast<Real>(2*ny),
- ! 					      static_cast<Real>(k)/static_cast<Real>(2*nz),
-   					      p);
-   		    p++;
- ! 		  }
-   	    
-   	    unsigned int e=0;
-   	    
- ***************
- *** 460,469 ****
-   			elem(e)->set_node(24) = _nodes[G(i,  j+1,k+1)];
-   			elem(e)->set_node(25) = _nodes[G(i+1,j+1,k+2)];
-   			elem(e)->set_node(26) = _nodes[G(i+1,j+1,k+1)];
- ! 		      };
-   		    
-   		    e++;
- ! 		  };
-   #undef G
-   
-   	  }
- --- 467,476 ----
-   			elem(e)->set_node(24) = _nodes[G(i,  j+1,k+1)];
-   			elem(e)->set_node(25) = _nodes[G(i+1,j+1,k+2)];
-   			elem(e)->set_node(26) = _nodes[G(i+1,j+1,k+1)];
- ! 		      }
-   		    
-   		    e++;
- ! 		  }
-   #undef G
-   
-   	  }
- ***************
- *** 485,504 ****
-   	break;
-         }
-   
- - 
- - 
- - 
- - 
- - 
- - 
- - 
- -       
-       default:
-         {
-   	error();
-         }
- !     };  
- ! };
-   
-   
-   
- --- 492,505 ----
-   	break;
-         }
-   
-       default:
-         {
-   	error();
-         }
- !     }  
- ! 
- !   libMesh::log.stop_event("build_cube()");
- ! }
-   
-   
-   
- ***************
- *** 517,523 ****
-   	      ymin, ymax,
-   	      0., 0.,
-   	      type);
- ! };
-   
-   
-   
- --- 518,524 ----
-   	      ymin, ymax,
-   	      0., 0.,
-   	      type);
- ! }
-   
-   
-   
- ***************
- *** 529,534 ****
- --- 530,537 ----
-   
-     assert (rad > 0.);
-   
- +   libMesh::log.start_event("build_sphere()");
- +   
-     const Point cent;
-   
-     const Sphere sphere (cent, rad);
- ***************
- *** 793,800 ****
-   		      for (unsigned int n=0; n<side->n_nodes(); n++)
-   			side->point(n) =
-   			  sphere.closest_point(side->point(n));
- ! 		    };
- ! 	  };
-   
-   	// Copy only the active elements to the current mesh
-   	{
- --- 796,803 ----
-   		      for (unsigned int n=0; n<side->n_nodes(); n++)
-   			side->point(n) =
-   			  sphere.closest_point(side->point(n));
- ! 		    }
- ! 	  }
-   
-   	// Copy only the active elements to the current mesh
-   	{
- ***************
- *** 821,836 ****
-   		      elem(e)->get_node(n);
-   		  
-   		  ne++;
- ! 		};
-   
-   	      // Delete the element
-   	      delete elem(e);
-   	      _elements[e] = NULL;
- ! 	    };
-   	  
-   	  // Copy the new elements
-   	  _elements = new_elements;
- ! 	};
-   
-   	// Possibly convert all the elements to triangles
-   	if ((type == TRI6) ||
- --- 824,839 ----
-   		      elem(e)->get_node(n);
-   		  
-   		  ne++;
- ! 		}
-   
-   	      // Delete the element
-   	      delete elem(e);
-   	      _elements[e] = NULL;
- ! 	    }
-   	  
-   	  // Copy the new elements
-   	  _elements = new_elements;
- ! 	}
-   
-   	// Possibly convert all the elements to triangles
-   	if ((type == TRI6) ||
- ***************
- *** 848,855 ****
-   #endif
-   
-   	
- ! 	return;
- !       };
-   
-   
-         
- --- 851,858 ----
-   #endif
-   
-   	
- ! 	break;
- !       }
-   
-   
-         
- ***************
- *** 884,890 ****
-   		
-   		  node(G(i,j,k)) =
-   		    sphere.closest_point( point(G(i,j,k)) );
- ! 		};
-   	    
-   	    // Pop JK boundary to the sphere
-   	    for (unsigned int j=0; j<=ny; j++)
- --- 887,893 ----
-   		
-   		  node(G(i,j,k)) =
-   		    sphere.closest_point( point(G(i,j,k)) );
- ! 		}
-   	    
-   	    // Pop JK boundary to the sphere
-   	    for (unsigned int j=0; j<=ny; j++)
- ***************
- *** 899,905 ****
-   		
-   		  node(G(i,j,k)) =
-   		    sphere.closest_point( point(G(i,j,k)) );
- ! 		};
-   	    
-   	    // Pop IK boundary to the sphere
-   	    for (unsigned int i=0; i<=nx; i++)
- --- 902,908 ----
-   		
-   		  node(G(i,j,k)) =
-   		    sphere.closest_point( point(G(i,j,k)) );
- ! 		}
-   	    
-   	    // Pop IK boundary to the sphere
-   	    for (unsigned int i=0; i<=nx; i++)
- ***************
- *** 914,920 ****
-   		
-   		  node(G(i,j,k)) =
-   		    sphere.closest_point( point(G(i,j,k)) );
- ! 		};
-   	    
-   	    // Handle internal nodes
-   	    for (unsigned int k=1; k<nz; k++)
- --- 917,923 ----
-   		
-   		  node(G(i,j,k)) =
-   		    sphere.closest_point( point(G(i,j,k)) );
- ! 		}
-   	    
-   	    // Handle internal nodes
-   	    for (unsigned int k=1; k<nz; k++)
- ***************
- *** 929,942 ****
-   		    const Real zmax = point(G(i, j,nz))(2);
-   
-   		    node(G(i,j,k))(0) = xmin +
- ! 		      (xmax - xmin)*((Real) ((Real) i)/((Real) nx));
-   		  
-   		    node(G(i,j,k))(1) = ymin +
- ! 		      (ymax - ymin)*((Real) ((Real) j)/((Real) ny));
-   		  
-   		    node(G(i,j,k))(2) = zmin +
- ! 		      (zmax - zmin)*((Real) ((Real) k)/((Real) nz));
- ! 		  };
-   
-   	    // Do some smoothing steps.
-   	    for (unsigned int l=0; l<10; l++)
- --- 932,945 ----
-   		    const Real zmax = point(G(i, j,nz))(2);
-   
-   		    node(G(i,j,k))(0) = xmin +
- ! 		      (xmax - xmin)*static_cast<Real>(i)/static_cast<Real>(nx);
-   		  
-   		    node(G(i,j,k))(1) = ymin +
- ! 		      (ymax - ymin)*static_cast<Real>(j)/static_cast<Real>(ny);
-   		  
-   		    node(G(i,j,k))(2) = zmin +
- ! 		      (zmax - zmin)*static_cast<Real>(k)/static_cast<Real>(nz);
- ! 		  }
-   
-   	    // Do some smoothing steps.
-   	    for (unsigned int l=0; l<10; l++)
- ***************
- *** 972,978 ****
-   		
-   		  node(G(i,j,k)) =
-   		    sphere.closest_point( point(G(i,j,k)) );
- ! 		};
-   	    
-   	    // Pop JK boundary to the sphere
-   	    for (unsigned int j=0; j<=2*ny; j++)
- --- 975,981 ----
-   		
-   		  node(G(i,j,k)) =
-   		    sphere.closest_point( point(G(i,j,k)) );
- ! 		}
-   	    
-   	    // Pop JK boundary to the sphere
-   	    for (unsigned int j=0; j<=2*ny; j++)
- ***************
- *** 987,993 ****
-   		
-   		  node(G(i,j,k)) =
-   		    sphere.closest_point( point(G(i,j,k)) );
- ! 		};
-   	    
-   	    // Pop IK boundary to the sphere
-   	    for (unsigned int i=0; i<=2*nx; i++)
- --- 990,996 ----
-   		
-   		  node(G(i,j,k)) =
-   		    sphere.closest_point( point(G(i,j,k)) );
- ! 		}
-   	    
-   	    // Pop IK boundary to the sphere
-   	    for (unsigned int i=0; i<=2*nx; i++)
- ***************
- *** 1002,1008 ****
-   		
-   		  node(G(i,j,k)) =
-   		    sphere.closest_point( point(G(i,j,k)) );
- ! 		};
-   	    
-   	    // Handle internal nodes
-   	    for (unsigned int k=1; k<2*nz; k++)
- --- 1005,1011 ----
-   		
-   		  node(G(i,j,k)) =
-   		    sphere.closest_point( point(G(i,j,k)) );
- ! 		}
-   	    
-   	    // Handle internal nodes
-   	    for (unsigned int k=1; k<2*nz; k++)
- ***************
- *** 1017,1030 ****
-   		    const Real zmax = point(G(i, j,2*nz))(2);
-   
-   		    node(G(i,j,k))(0) = xmin +
- ! 		      (xmax - xmin)*((Real) ((Real) i)/((Real) 2*nx));
-   		  
-   		    node(G(i,j,k))(1) = ymin +
- ! 		      (ymax - ymin)*((Real) ((Real) j)/((Real) 2*ny));
-   		  
-   		    node(G(i,j,k))(2) = zmin +
- ! 		      (zmax - zmin)*((Real) ((Real) k)/((Real) 2*nz));
- ! 		  };
-   
-   	    // Do some smoothing steps.
-   	    for (unsigned int l=0; l<10; l++)
- --- 1020,1033 ----
-   		    const Real zmax = point(G(i, j,2*nz))(2);
-   
-   		    node(G(i,j,k))(0) = xmin +
- ! 		      (xmax - xmin)*static_cast<Real>(i)/static_cast<Real>(2*nx);
-   		  
-   		    node(G(i,j,k))(1) = ymin +
- ! 		      (ymax - ymin)*static_cast<Real>(j)/static_cast<Real>(2*ny);
-   		  
-   		    node(G(i,j,k))(2) = zmin +
- ! 		      (zmax - zmin)*static_cast<Real>(k)/static_cast<Real>(2*nz);
- ! 		  }
-   
-   	    // Do some smoothing steps.
-   	    for (unsigned int l=0; l<10; l++)
- ***************
- *** 1047,1057 ****
-   
-   
-   	break;
- !       };
-   
-   
-         
-       default:
-         error();
- !     };
- ! };
- --- 1050,1063 ----
-   
-   
-   	break;
- !       }
-   
-   
-         
-       default:
-         error();
- !     }
- ! 
- !   
- !   libMesh::log.stop_event("build_sphere()");
- ! }
- Index: src/mesh/mesh_gmv_support.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/mesh/mesh_gmv_support.C,v
- retrieving revision 1.6
- retrieving revision 1.10
- diff -c -r1.6 -r1.10
- *** src/mesh/mesh_gmv_support.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/mesh/mesh_gmv_support.C	21 Feb 2003 18:31:32 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 50,56 ****
-     std::ofstream out(name.c_str());
-   
-     write_gmv (out, es, write_partitioning);
- ! };
-   
-   
-   
- --- 50,56 ----
-     std::ofstream out(name.c_str());
-   
-     write_gmv (out, es, write_partitioning);
- ! }
-   
-   
-   
- ***************
- *** 58,64 ****
-   			  EquationSystems& es,
-   			  const bool write_partitioning)
-   {
- !   std::vector<Complex> soln;
-     std::vector<std::string> names;
-     
-     es.build_variable_names  (names);
- --- 58,64 ----
-   			  EquationSystems& es,
-   			  const bool write_partitioning)
-   {
- !   std::vector<Number> soln;
-     std::vector<std::string> names;
-     
-     es.build_variable_names  (names);
- ***************
- *** 66,90 ****
-   
-     if (processor_id() == 0)
-       write_gmv (out, &soln, &names, write_partitioning);
- ! };
-   
-   
-   
-   void MeshBase::write_gmv (const std::string& name,
- ! 			  const std::vector<Complex>* v,
-   			  const std::vector<std::string>* solution_names,
-   			  const bool write_partitioning)
-   {
-     std::ofstream out(name.c_str());
-   
-     write_gmv (out, v, solution_names, write_partitioning);
- ! };
-   
-   
-   
-   
-   void MeshBase::write_gmv(std::ostream& out,
- ! 			 const std::vector<Complex>*  v,
-   			 const std::vector<std::string>* solution_names,
-   			 const bool write_partitioning)
-   {
- --- 66,90 ----
-   
-     if (processor_id() == 0)
-       write_gmv (out, &soln, &names, write_partitioning);
- ! }
-   
-   
-   
-   void MeshBase::write_gmv (const std::string& name,
- ! 			  const std::vector<Number>* v,
-   			  const std::vector<std::string>* solution_names,
-   			  const bool write_partitioning)
-   {
-     std::ofstream out(name.c_str());
-   
-     write_gmv (out, v, solution_names, write_partitioning);
- ! }
-   
-   
-   
-   
-   void MeshBase::write_gmv(std::ostream& out,
- ! 			 const std::vector<Number>*  v,
-   			 const std::vector<std::string>* solution_names,
-   			 const bool write_partitioning)
-   {
- ***************
- *** 110,116 ****
-         out << point(v)(2) << " ";
-        
-       out << std::endl << std::endl;
- !   };
-   
-   
-     
- --- 110,116 ----
-         out << point(v)(2) << " ";
-        
-       out << std::endl << std::endl;
- !   }
-   
-   
-     
- ***************
- *** 118,277 ****
-       // write the connectivity
-       
-       out << "cells " << n_active_sub_elem() << std::endl;
-       
-       switch (_dim)
-         {
-         case 1:
-   	{
- ! 	  for (unsigned int e=0; e<n_elem(); e++)
- ! 	    if (elem(e)->active())
- ! 	      for (unsigned int se=0; se<elem(e)->n_sub_elem(); se++)
- ! 		{
- ! 		  out << "line 2" << std::endl;
- ! 		  std::vector<unsigned int> conn = elem(e)->tecplot_connectivity(se);
- ! 		  for (unsigned int i=0; i<conn.size(); i++)
- ! 		    out << conn[i] << " ";
-   		
- ! 		  out << std::endl;
- ! 		};
-   	  
-   	  break;
- ! 	};
-   	
-         case 2:
-   	{
- ! 	  for (unsigned int e=0; e<n_elem(); e++)
- ! 	    if (elem(e)->active())
- ! 	      for (unsigned int se=0; se<elem(e)->n_sub_elem(); se++)
- ! 		{
- ! 		  if ((elem(e)->type() == QUAD4) ||
- ! 		      (elem(e)->type() == QUAD8) ||
- ! 		      (elem(e)->type() == QUAD9)
-   #ifdef ENABLE_INFINITE_ELEMENTS
- ! 		      || (elem(e)->type() == INFQUAD4)
- ! 		      || (elem(e)->type() == INFQUAD6)
-   #endif
- ! 		      )
- ! 		    {
- ! 		      out << "quad 4" << std::endl;
- ! 		      std::vector<unsigned int> conn = elem(e)->tecplot_connectivity(se);
- ! 		      for (unsigned int i=0; i<conn.size(); i++)
- ! 			out << conn[i] << " ";
- ! 		    }
- ! 		  else if ((elem(e)->type() == TRI3) ||
- ! 			   (elem(e)->type() == TRI6))
-   		    {
-   		      out << "tri 3" << std::endl;
- ! 		      std::vector<unsigned int> conn = elem(e)->tecplot_connectivity(se);
-   		      for (unsigned int i=0; i<3; i++)
-   			out << conn[i] << " ";
-   		    }
- ! 		  else
- ! 		    {
- ! 		      error();
- ! 		    }
- ! 			 
- ! 		  out << std::endl;
- ! 		};
- ! 	
-   	  break;
- ! 	};
-   	
-   	
-         case 3:
-   	{
- ! 	  for (unsigned int e=0; e<n_elem(); e++)
- ! 	    if (elem(e)->active())
- ! 	      for (unsigned int se=0; se<elem(e)->n_sub_elem(); se++)
- ! 		{
- ! 		  if ((elem(e)->type() == HEX8)   ||
- ! 		      (elem(e)->type() == HEX27)
-   #ifdef ENABLE_INFINITE_ELEMENTS
- ! 		      || (elem(e)->type() == INFHEX8)
- ! 		      || (elem(e)->type() == INFHEX16)
- ! 		      || (elem(e)->type() == INFHEX18)
-   #endif
- ! 		      )
- ! 		    {
- ! 		      out << "phex8 8" << std::endl;
- ! 		      std::vector<unsigned int> conn = elem(e)->tecplot_connectivity(se);
- ! 		      for (unsigned int i=0; i<conn.size(); i++)
- ! 			out << conn[i] << " ";
- ! 		    }
- ! 		  
- ! 		  else if (elem(e)->type() == HEX20)
- ! 		    {
- ! 		      out << "phex20 20" << std::endl;
- ! 		      out << elem(e)->node(0)+1  << " "
- ! 			  << elem(e)->node(1)+1  << " "
- ! 			  << elem(e)->node(2)+1  << " "
- ! 			  << elem(e)->node(3)+1  << " "
- ! 			  << elem(e)->node(4)+1  << " "
- ! 			  << elem(e)->node(5)+1  << " "
- ! 			  << elem(e)->node(6)+1  << " "
- ! 			  << elem(e)->node(7)+1  << " "
- ! 			  << elem(e)->node(8)+1  << " "
- ! 			  << elem(e)->node(9)+1  << " "
- ! 			  << elem(e)->node(10)+1 << " "
- ! 			  << elem(e)->node(11)+1 << " "
- ! 			  << elem(e)->node(16)+1 << " "
- ! 			  << elem(e)->node(17)+1 << " "
- ! 			  << elem(e)->node(18)+1 << " "
- ! 			  << elem(e)->node(19)+1 << " "
- ! 			  << elem(e)->node(12)+1 << " "
- ! 			  << elem(e)->node(13)+1 << " "
- ! 			  << elem(e)->node(14)+1 << " "
- ! 			  << elem(e)->node(15)+1 << " ";
- ! 		    }
- ! 		  
- ! 		  else if ((elem(e)->type() == TET4)  ||
- ! 			   (elem(e)->type() == TET10))
- ! 		    {
- ! 		      out << "tet 4" << std::endl;
- ! 		      std::vector<unsigned int> conn = elem(e)->tecplot_connectivity(se);
- ! 		      out << conn[0] << " "
- ! 			  << conn[2] << " "
- ! 			  << conn[1] << " "
- ! 			  << conn[4] << " ";
- ! 		    }
- ! 		  
- ! 		  else
- ! 		    {
- ! 		      error();
-   		    }
- ! 		  
- ! 		  out << std::endl;
- ! 		};
- ! 
-   	  break;
- ! 	};
- !       
-         default:
-   	error();
- !       };
-       
-       out << std::endl;
- !   };
- ! 
-   
-     
-     // optionally write the partition information
-     if (write_partitioning)
-       {
-         out << "material "
- ! 	  << n_subdomains()
-   	  << " 0"<< std::endl;
-   
- !       for (unsigned int sbd=0; sbd<n_subdomains(); sbd++)
-   	out << "sbd_" << sbd << std::endl;
-         
- !       for (unsigned int e=0; e<n_elem(); e++)
- ! 	if (elem(e)->active())
- ! 	  for (unsigned int se=0; se<elem(e)->n_sub_elem(); se++)
- ! 	    out << elem(e)->subdomain_id()+1 << std::endl;
-   
-         out << std::endl;
- !     };
-   
-   
-     
- --- 118,279 ----
-       // write the connectivity
-       
-       out << "cells " << n_active_sub_elem() << std::endl;
- + 
- +     const_active_elem_iterator       it (elements_begin());
- +     const const_active_elem_iterator end(elements_end());
-       
-       switch (_dim)
-         {
-         case 1:
-   	{
- ! 	  for ( ; it != end; ++it)
- ! 	    for (unsigned int se=0; se<(*it)->n_sub_elem(); se++)
- ! 	      {
- ! 		out << "line 2" << std::endl;
- ! 		std::vector<unsigned int> conn = (*it)->tecplot_connectivity(se);
- ! 		for (unsigned int i=0; i<conn.size(); i++)
- ! 		  out << conn[i] << " ";
-   		
- ! 		out << std::endl;
- ! 	      }
-   	  
-   	  break;
- ! 	}
-   	
-         case 2:
-   	{
- ! 	  for ( ; it != end; ++it)
- ! 	    for (unsigned int se=0; se<(*it)->n_sub_elem(); se++)
- ! 	      {
- ! 		if (((*it)->type() == QUAD4) ||
- ! 		    ((*it)->type() == QUAD8) ||
- ! 		    ((*it)->type() == QUAD9)
-   #ifdef ENABLE_INFINITE_ELEMENTS
- ! 		    || ((*it)->type() == INFQUAD4)
- ! 		    || ((*it)->type() == INFQUAD6)
-   #endif
- ! 		    )
- ! 		  {
- ! 		    out << "quad 4" << std::endl;
- ! 		    std::vector<unsigned int> conn = (*it)->tecplot_connectivity(se);
- ! 		    for (unsigned int i=0; i<conn.size(); i++)
- ! 		      out << conn[i] << " ";
- ! 		  }
- ! 		  else if (((*it)->type() == TRI3) ||
- ! 			   ((*it)->type() == TRI6))
-   		    {
-   		      out << "tri 3" << std::endl;
- ! 		      std::vector<unsigned int> conn = (*it)->tecplot_connectivity(se);
-   		      for (unsigned int i=0; i<3; i++)
-   			out << conn[i] << " ";
-   		    }
- ! 		else
- ! 		  {
- ! 		    error();
- ! 		  }
- ! 		
- ! 		out << std::endl;
- ! 	      }
- ! 	  
-   	  break;
- ! 	}
-   	
-   	
-         case 3:
-   	{
- ! 	  for ( ; it != end; ++it)
- ! 	    for (unsigned int se=0; se<(*it)->n_sub_elem(); se++)
- ! 	      {
- ! 		if (((*it)->type() == HEX8)   ||
- ! 		    ((*it)->type() == HEX27)
-   #ifdef ENABLE_INFINITE_ELEMENTS
- ! 		    || ((*it)->type() == INFHEX8)
- ! 		    || ((*it)->type() == INFHEX16)
- ! 		    || ((*it)->type() == INFHEX18)
-   #endif
- ! 		    )
- ! 		  {
- ! 		    out << "phex8 8" << std::endl;
- ! 		    std::vector<unsigned int> conn = (*it)->tecplot_connectivity(se);
- ! 		    for (unsigned int i=0; i<conn.size(); i++)
- ! 		      out << conn[i] << " ";
- ! 		  }
- ! 		
- ! 		else if ((*it)->type() == HEX20)
- ! 		  {
- ! 		    out << "phex20 20" << std::endl;
- ! 		    out << (*it)->node(0)+1  << " "
- ! 			<< (*it)->node(1)+1  << " "
- ! 			<< (*it)->node(2)+1  << " "
- ! 			<< (*it)->node(3)+1  << " "
- ! 			<< (*it)->node(4)+1  << " "
- ! 			<< (*it)->node(5)+1  << " "
- ! 			<< (*it)->node(6)+1  << " "
- ! 			<< (*it)->node(7)+1  << " "
- ! 			<< (*it)->node(8)+1  << " "
- ! 			<< (*it)->node(9)+1  << " "
- ! 			<< (*it)->node(10)+1 << " "
- ! 			<< (*it)->node(11)+1 << " "
- ! 			<< (*it)->node(16)+1 << " "
- ! 			<< (*it)->node(17)+1 << " "
- ! 			<< (*it)->node(18)+1 << " "
- ! 			<< (*it)->node(19)+1 << " "
- ! 			<< (*it)->node(12)+1 << " "
- ! 			<< (*it)->node(13)+1 << " "
- ! 			<< (*it)->node(14)+1 << " "
- ! 			<< (*it)->node(15)+1 << " ";
- ! 		  }
- ! 		
- ! 		else if (((*it)->type() == TET4)  ||
- ! 			 ((*it)->type() == TET10))
- ! 		  {
- ! 		    out << "tet 4" << std::endl;
- ! 		    std::vector<unsigned int> conn = (*it)->tecplot_connectivity(se);
- ! 		    out << conn[0] << " "
- ! 			<< conn[2] << " "
- ! 			<< conn[1] << " "
- ! 			<< conn[4] << " ";
-   		    }
- ! 		
- ! 		else
- ! 		  {
- ! 		    error();
- ! 		  }
- ! 		
- ! 		out << std::endl;
- ! 	      }
- ! 	  
-   	  break;
- ! 	}
- ! 	
-         default:
-   	error();
- !       }
-       
-       out << std::endl;
- !   }
- !   
-   
-     
-     // optionally write the partition information
-     if (write_partitioning)
-       {
-         out << "material "
- ! 	  << n_processors()
-   	  << " 0"<< std::endl;
-   
- !       for (unsigned int sbd=0; sbd<n_processors(); sbd++)
-   	out << "sbd_" << sbd << std::endl;
-         
- !       const_active_elem_iterator       it (elements_begin());
- !       const const_active_elem_iterator end(elements_end());
-   
- +       for ( ; it != end; ++it)
- + 	for (unsigned int se=0; se<(*it)->n_sub_elem(); se++)
- + 	    out << (*it)->processor_id()+1 << std::endl;
- +       
-         out << std::endl;
- !     }
-   
-   
-     
- ***************
- *** 291,297 ****
-   
-   #ifdef USE_COMPLEX_NUMBERS
-   
- ! 	  // in case of complex data, write _two_ data sets
-   	  // for each component
-   
-   	  // this is the real part
- --- 293,299 ----
-   
-   #ifdef USE_COMPLEX_NUMBERS
-   
- ! 	  // in case of complex data, write _tree_ data sets
-   	  // for each component
-   
-   	  // this is the real part
- ***************
- *** 311,316 ****
- --- 313,326 ----
-   	  
-   	  out << std::endl << std::endl;
-   
- + 	  // this is the magnitude
- + 	  out << "abs_" << (*solution_names)[c] << " 1" << std::endl;
- + 	  for (unsigned int n=0; n<n_nodes(); n++)
- + 	    out << std::setprecision(10)
- + 		<< abs((*v)[n*n_vars + c]) << " ";
- + 
- + 	  out << std::endl << std::endl;
- + 
-   #else
-   
-   	  out << (*solution_names)[c] << " 1" << std::endl;
- ***************
- *** 322,336 ****
-   
-   #endif
-   
- ! 	};
-         
-         out << "endvars" << std::endl;
- !     };
-   
-     
-     // end of the file
-     out << std::endl << "endgmv" << std::endl;
- ! };
-   
-   
-   
- --- 332,346 ----
-   
-   #endif
-   
- ! 	}
-         
-         out << "endvars" << std::endl;
- !     }
-   
-     
-     // end of the file
-     out << std::endl << "endgmv" << std::endl;
- ! }
-   
-   
-   
- ***************
- *** 342,348 ****
-     std::ofstream out(name.c_str());
-   
-     write_gmv_binary (out, es, write_partitioning);
- ! };
-   
-   
-   
- --- 352,358 ----
-     std::ofstream out(name.c_str());
-   
-     write_gmv_binary (out, es, write_partitioning);
- ! }
-   
-   
-   
- ***************
- *** 350,356 ****
-   				 EquationSystems& es,
-   				 const bool write_partitioning)
-   {
- !   std::vector<Complex> soln;
-     std::vector<std::string> names;
-     
-     es.build_variable_names  (names);
- --- 360,366 ----
-   				 EquationSystems& es,
-   				 const bool write_partitioning)
-   {
- !   std::vector<Number> soln;
-     std::vector<std::string> names;
-     
-     es.build_variable_names  (names);
- ***************
- *** 358,382 ****
-     
-     if (processor_id() == 0)
-       write_gmv_binary (out, &soln, &names, write_partitioning);
- ! };
-   
-   
-   
-   void MeshBase::write_gmv_binary (const std::string& name,
- ! 				 const std::vector<Complex>* v,
-   				 const std::vector<std::string>* solution_names,
-   				 const bool write_partitioning)
-   {
-     std::ofstream out (name.c_str(), std::ios::out|std::ios::binary);
-     
-     write_gmv_binary (out, v, solution_names, write_partitioning);
- ! };
-   
-   
-   
-   
-   void MeshBase::write_gmv_binary(std::ostream& out,
- ! 				const std::vector<Complex>* v,
-   				const std::vector<std::string>* solution_names,
-   				const bool write_partitioning)
-   {
- --- 368,392 ----
-     
-     if (processor_id() == 0)
-       write_gmv_binary (out, &soln, &names, write_partitioning);
- ! }
-   
-   
-   
-   void MeshBase::write_gmv_binary (const std::string& name,
- ! 				 const std::vector<Number>* v,
-   				 const std::vector<std::string>* solution_names,
-   				 const bool write_partitioning)
-   {
-     std::ofstream out (name.c_str(), std::ios::out|std::ios::binary);
-     
-     write_gmv_binary (out, v, solution_names, write_partitioning);
- ! }
-   
-   
-   
-   
-   void MeshBase::write_gmv_binary(std::ostream& out,
- ! 				const std::vector<Number>* v,
-   				const std::vector<std::string>* solution_names,
-   				const bool write_partitioning)
-   {
- ***************
- *** 393,399 ****
-       strcpy(buf, "ieeei4r4");
-       out.write(buf, strlen(buf));
-   
- !   };
-   
-   
-     
- --- 403,409 ----
-       strcpy(buf, "ieeei4r4");
-       out.write(buf, strlen(buf));
-   
- !   }
-   
-   
-     
- ***************
- *** 423,429 ****
-       out.write(reinterpret_cast<char *>(temp), sizeof(float)*n_nodes());
-   
-       delete [] temp;
- !   };
-   
-   
-     
- --- 433,439 ----
-       out.write(reinterpret_cast<char *>(temp), sizeof(float)*n_nodes());
-   
-       delete [] temp;
- !   }
-   
-   
-     
- ***************
- *** 438,511 ****
-       
-       out.write(buf, sizeof(unsigned int));
-   
-       switch (_dim)
-         {
-   
-         case 1:
-          
- ! 	for (unsigned int e = 0; e < n_elem(); ++e)
- ! 	  if (elem(e)->active())
- ! 	    for(unsigned se = 0; se < elem(e)->n_sub_elem(); ++se)
- ! 	      {
- ! 		strcpy(buf, "line    ");
- ! 		out.write(buf, strlen(buf));
- ! 		
- ! 		tempint = 2;
- ! 		memcpy(buf, &tempint, sizeof(unsigned int));
- ! 		out.write(buf, sizeof(unsigned int));
- ! 		
- ! 		std::vector<unsigned int> conn = elem(e)->tecplot_connectivity(se);
- ! 		
- ! 		out.write(reinterpret_cast<char*>(&conn[0]), sizeof(unsigned int)*tempint);
- ! 	      };
-   	
-   	break;
-   	
-         case 2:
-          
- ! 	for (unsigned int e = 0; e < n_elem(); ++e)
- ! 	  if (elem(e)->active())
- ! 	    for(unsigned se = 0; se < elem(e)->n_sub_elem(); ++se)
- ! 	      {
- ! 		strcpy(buf, "quad    ");
- ! 		out.write(buf, strlen(buf));
-   		
- ! 		tempint = 4;
- ! 		memcpy(buf, &tempint, sizeof(unsigned int));
- ! 		out.write(buf, sizeof(unsigned int));
- ! 		
- ! 		std::vector<unsigned int> conn = elem(e)->tecplot_connectivity(se);
- ! 		
- ! 		out.write(reinterpret_cast<char*>(&conn[0]), sizeof(unsigned int)*tempint);
- ! 	      };
-   	
-   	break;
-   	
-         case 3:
-          
- ! 	for (unsigned int e = 0; e < n_elem(); ++e)
- ! 	  if (elem(e)->active())
- ! 	    for(unsigned se = 0; se < elem(e)->n_sub_elem(); ++se)
- ! 	      {
- ! 		strcpy(buf, "phex8   ");
- ! 		out.write(buf, strlen(buf));
- ! 		
- ! 		tempint = 8;
- ! 		memcpy(buf, &tempint, sizeof(unsigned int));
- ! 		out.write(buf, sizeof(unsigned int));
- ! 		
- ! 		std::vector<unsigned int> conn = elem(e)->tecplot_connectivity(se);
- ! 		
- ! 		out.write(reinterpret_cast<char*>(&conn[0]), sizeof(unsigned int)*tempint);
- ! 	      };
- ! 	
-   	break;
-   	
-         default:
-   	error();
-   	
- !       };
- !   };
-     
-     
-     
- --- 448,521 ----
-       
-       out.write(buf, sizeof(unsigned int));
-   
- +     const_active_elem_iterator       it (elements_begin());
- +     const const_active_elem_iterator end(elements_end());
- + 
-       switch (_dim)
-         {
-   
-         case 1:
-          
- ! 	for ( ; it != end; ++it)
- ! 	  for(unsigned se = 0; se < (*it)->n_sub_elem(); ++se)
- ! 	    {
- ! 	      strcpy(buf, "line    ");
- ! 	      out.write(buf, strlen(buf));
- ! 	      
- ! 	      tempint = 2;
- ! 	      memcpy(buf, &tempint, sizeof(unsigned int));
- ! 	      out.write(buf, sizeof(unsigned int));
- ! 	      
- ! 	      std::vector<unsigned int> conn = (*it)->tecplot_connectivity(se);
- ! 	      
- ! 	      out.write(reinterpret_cast<char*>(&conn[0]), sizeof(unsigned int)*tempint);
- ! 	    }
-   	
-   	break;
-   	
-         case 2:
-          
- !       for ( ; it != end; ++it)
- ! 	for(unsigned se = 0; se < (*it)->n_sub_elem(); ++se)
- ! 	  {
- ! 	    strcpy(buf, "quad    ");
- ! 	    out.write(buf, strlen(buf));
- ! 	    
- ! 	    tempint = 4;
- ! 	    memcpy(buf, &tempint, sizeof(unsigned int));
- ! 	    out.write(buf, sizeof(unsigned int));
-   		
- ! 	    std::vector<unsigned int> conn = (*it)->tecplot_connectivity(se);
- ! 	    
- ! 	    out.write(reinterpret_cast<char*>(&conn[0]), sizeof(unsigned int)*tempint);
- ! 	  }
-   	
-   	break;
-   	
-         case 3:
-          
- !       for ( ; it != end; ++it)
- ! 	for(unsigned se = 0; se < (*it)->n_sub_elem(); ++se)
- ! 	  {
- ! 	    strcpy(buf, "phex8   ");
- ! 	    out.write(buf, strlen(buf));
- ! 	    
- ! 	    tempint = 8;
- ! 	    memcpy(buf, &tempint, sizeof(unsigned int));
- ! 	    out.write(buf, sizeof(unsigned int));
- ! 	    
- ! 	    std::vector<unsigned int> conn = (*it)->tecplot_connectivity(se);
- ! 	    
- ! 	    out.write(reinterpret_cast<char*>(&conn[0]), sizeof(unsigned int)*tempint);
- ! 	  }
- !       
-   	break;
-   	
-         default:
-   	error();
-   	
- !       }
- !   }
-     
-     
-     
- ***************
- *** 515,521 ****
-         strcpy(buf, "material");
-         out.write(buf, strlen(buf));
-         
- !       unsigned int tmpint = n_subdomains();
-         memcpy(buf, &tmpint, sizeof(unsigned int));
-         out.write(buf, sizeof(unsigned int));
-   
- --- 525,531 ----
-         strcpy(buf, "material");
-         out.write(buf, strlen(buf));
-         
- !       unsigned int tmpint = n_processors();
-         memcpy(buf, &tmpint, sizeof(unsigned int));
-         out.write(buf, sizeof(unsigned int));
-   
- ***************
- *** 524,549 ****
-         out.write(buf, sizeof(unsigned int));
-   
-   
- !       for (unsigned int sbd=0; sbd<n_subdomains(); sbd++)
-   	{
-   	  sprintf(buf, "sbd_%d", sbd);
-   	  out.write(buf, 8);
- ! 	};
-   
-         unsigned int* sbd_id = new unsigned int[n_active_sub_elem()];
-         
-         unsigned int n=0;
-         
- !       for (unsigned int e=0; e<n_elem(); e++)
- ! 	if (elem(e)->active())
- ! 	  for (unsigned int se=0; se<elem(e)->n_sub_elem(); se++)
- ! 	    sbd_id[n++] = elem(e)->subdomain_id()+1;
-         
-         
-         out.write(reinterpret_cast<char *>(sbd_id), sizeof(unsigned int)*n_active_sub_elem());
-   
-         delete [] sbd_id;
- !     };
-   
-   
-     
- --- 534,561 ----
-         out.write(buf, sizeof(unsigned int));
-   
-   
- !       for (unsigned int sbd=0; sbd<n_processors(); sbd++)
-   	{
-   	  sprintf(buf, "sbd_%d", sbd);
-   	  out.write(buf, 8);
- ! 	}
-   
-         unsigned int* sbd_id = new unsigned int[n_active_sub_elem()];
-         
-         unsigned int n=0;
-         
- !       const_active_elem_iterator       it (elements_begin());
- !       const const_active_elem_iterator end(elements_end());
- ! 
- !       for ( ; it != end; ++it)
- ! 	for (unsigned int se=0; se<(*it)->n_sub_elem(); se++)
- ! 	  sbd_id[n++] = (*it)->processor_id()+1;
-         
-         
-         out.write(reinterpret_cast<char *>(sbd_id), sizeof(unsigned int)*n_active_sub_elem());
-   
-         delete [] sbd_id;
- !     }
-   
-   
-     
- ***************
- *** 615,633 ****
-   #endif
-   
-   	  
- ! 	};
-       
-         delete [] temp;
-         
-         strcpy(buf, "endvars ");
-         out.write(buf, strlen(buf));
-   
- !     };
-   
-     // end the file
-     strcpy(buf, "endgmv  ");
-     out.write(buf, strlen(buf));
- ! };
-   
-   
-   
- --- 627,645 ----
-   #endif
-   
-   	  
- ! 	}
-       
-         delete [] temp;
-         
-         strcpy(buf, "endvars ");
-         out.write(buf, strlen(buf));
-   
- !     }
-   
-     // end the file
-     strcpy(buf, "endgmv  ");
-     out.write(buf, strlen(buf));
- ! }
-   
-   
-   
- Index: src/mesh/mesh_metis_support.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/mesh/mesh_metis_support.C,v
- retrieving revision 1.5
- retrieving revision 1.7
- diff -c -r1.5 -r1.7
- *** src/mesh/mesh_metis_support.C	24 Jan 2003 17:24:44 -0000	1.5
- --- src/mesh/mesh_metis_support.C	14 Feb 2003 15:22:50 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 24,29 ****
- --- 24,30 ----
-   
-   // Local includes
-   #include "mesh_base.h"
- + #include "libmesh.h"
-   #include "elem.h"
-   
-   
- ***************
- *** 62,73 ****
-   	  elem(e)->processor_id() = 0;
-         
-         return;
- !     };
-     
-     
-     assert (_dim != 1);
-   
- !   _perf_log.start_event("metis_partition()");
-   
-     // new way, build the graph
-     std::vector<int> xadj;
- --- 63,74 ----
-   	  elem(e)->processor_id() = 0;
-         
-         return;
- !     }
-     
-     
-     assert (_dim != 1);
-   
- !   libMesh::log.start_event("metis_partition()");
-   
-     // new way, build the graph
-     std::vector<int> xadj;
- ***************
- *** 162,168 ****
-         elem(e)->processor_id() = 
-         static_cast<short int>(part[e]);
-   
- !   _perf_log.stop_event("metis_partition()");
-     
-   #endif
- ! };
- --- 163,169 ----
-         elem(e)->processor_id() = 
-         static_cast<short int>(part[e]);
-   
- !   libMesh::log.stop_event("metis_partition()");
-     
-   #endif
- ! }
- Index: src/mesh/mesh_misc_support.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/mesh/mesh_misc_support.C,v
- retrieving revision 1.7
- retrieving revision 1.8
- diff -c -r1.7 -r1.8
- *** src/mesh/mesh_misc_support.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/mesh/mesh_misc_support.C	13 Feb 2003 22:56:12 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 40,46 ****
-     read_shanee (in);
-   
-     return;
- ! };
-   
-   
-   
- --- 40,46 ----
-     read_shanee (in);
-   
-     return;
- ! }
-   
-   
-   
- ***************
- *** 84,91 ****
-                     // there is no z-coordinate
-   	
-   	node_ptr(i) = Node::build(x,y,z,i);
- !       };
- !   };
-   
-   
-     
- --- 84,91 ----
-                     // there is no z-coordinate
-   	
-   	node_ptr(i) = Node::build(x,y,z,i);
- !       }
- !   }
-   
-   
-     
- ***************
- *** 103,112 ****
-   	    in >> node; // read the current node
-   		  
-   	    elem(i)->set_node(n) = node_ptr(node); // assign the node		                     
- ! 	  };
- !       };   
- !   };
- ! };
-   
-   
-   
- --- 103,112 ----
-   	    in >> node; // read the current node
-   		  
-   	    elem(i)->set_node(n) = node_ptr(node); // assign the node		                     
- ! 	  }
- !       }   
- !   }
- ! }
-   
-   
-   
- ***************
- *** 118,124 ****
-     read_matlab(in);
-   
-     return;
- ! };
-   
-   
-   
- --- 118,124 ----
-     read_matlab(in);
-   
-     return;
- ! }
-   
-   
-   
- ***************
- *** 201,208 ****
-   	   >> y;  // y-coordinate value
-   
-   	node_ptr(i) = Node::build(x,y,z,i);
- !       };
- !   };
-   
-     // Read the elements (elements)
-     {
- --- 201,208 ----
-   	   >> y;  // y-coordinate value
-   
-   	node_ptr(i) = Node::build(x,y,z,i);
- !       }
- !   }
-   
-     // Read the elements (elements)
-     {
- ***************
- *** 218,232 ****
-   	  {
-   	    in >> node;
-   	    elem(i)->set_node(n) = node_ptr(node-1);  // Assign the node number
- ! 	  };
-   	
-   	// There is an additional subdomain number here,
-   	// so we read it and get rid of it!
-   	in >> dummy;
- !       };
- !   };
-     
- ! };
-   
-   
-   
- --- 218,232 ----
-   	  {
-   	    in >> node;
-   	    elem(i)->set_node(n) = node_ptr(node-1);  // Assign the node number
- ! 	  }
-   	
-   	// There is an additional subdomain number here,
-   	// so we read it and get rid of it!
-   	in >> dummy;
- !       }
- !   }
-     
- ! }
-   
-   
-   
- ***************
- *** 238,244 ****
-     read_off(in);
-   
-     return;
- ! };
-   
-   
-   
- --- 238,244 ----
-     read_off(in);
-   
-     return;
- ! }
-   
-   
-   
- ***************
- *** 285,291 ****
-   	 >> z;
-         
-         node_ptr(n) = Node::build(x,y,z,n);
- !     };
-   
-     unsigned int dummy, n0, n1, n2;
-     
- --- 285,291 ----
-   	 >> z;
-         
-         node_ptr(n) = Node::build(x,y,z,n);
- !     }
-   
-     unsigned int dummy, n0, n1, n2;
-     
- ***************
- *** 308,312 ****
-         _elements[e]->set_node(0) = node_ptr(n0);
-         _elements[e]->set_node(1) = node_ptr(n1);
-         _elements[e]->set_node(2) = node_ptr(n2);
- !     };  
- ! };
- --- 308,312 ----
-         _elements[e]->set_node(0) = node_ptr(n0);
-         _elements[e]->set_node(1) = node_ptr(n1);
-         _elements[e]->set_node(2) = node_ptr(n2);
- !     }  
- ! }
- Index: src/mesh/mesh_refinement.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/mesh/mesh_refinement.C,v
- retrieving revision 1.5
- retrieving revision 1.7
- diff -c -r1.5 -r1.7
- *** src/mesh/mesh_refinement.C	24 Jan 2003 17:24:44 -0000	1.5
- --- src/mesh/mesh_refinement.C	13 Feb 2003 22:56:12 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 35,48 ****
-   MeshRefinement::MeshRefinement (Mesh& m) :
-     mesh(m)
-   {
- ! };
-   
-   
-   
-   MeshRefinement::~MeshRefinement ()
-   {
-     clear();  
- ! };
-   
-   
-   
- --- 35,48 ----
-   MeshRefinement::MeshRefinement (Mesh& m) :
-     mesh(m)
-   {
- ! }
-   
-   
-   
-   MeshRefinement::~MeshRefinement ()
-   {
-     clear();  
- ! }
-   
-   
-   
- ***************
- *** 50,56 ****
-   {
-     new_nodes.clear();
-     unused_elements.clear();
- ! };
-   
-   
-   
- --- 50,56 ----
-   {
-     new_nodes.clear();
-     unused_elements.clear();
- ! }
-   
-   
-   
- ***************
- *** 79,87 ****
-   	  n = pos.first->second;
-   	  
-   	  break;
- ! 	};
-         ++pos.first;
- !     };
-     
-     if (pos.first == pos.second) // still not found
-       {                          // so we better add it
- --- 79,87 ----
-   	  n = pos.first->second;
-   	  
-   	  break;
- ! 	}
-         ++pos.first;
- !     }
-     
-     if (pos.first == pos.second) // still not found
-       {                          // so we better add it
- ***************
- *** 89,100 ****
-         
-         new_nodes.insert(pos.first,
-   		       std::pair<unsigned int, unsigned int>(p.key(),n));
- !     };
-       
-     
-     // Return the address of the new node
-     return mesh.add_point(p,n);
- ! };
-   
-   
-   
- --- 89,100 ----
-         
-         new_nodes.insert(pos.first,
-   		       std::pair<unsigned int, unsigned int>(p.key(),n));
- !     }
-       
-     
-     // Return the address of the new node
-     return mesh.add_point(p,n);
- ! }
-   
-   
-   
- ***************
- *** 108,117 ****
-       {
-         n = *unused_elements.begin();
-         unused_elements.erase(unused_elements.begin());
- !     };
-   
-     return n;
- ! };
-   
-   
-   
- --- 108,117 ----
-       {
-         n = *unused_elements.begin();
-         unused_elements.erase(unused_elements.begin());
- !     }
-   
-     return n;
- ! }
-   
-   
-   
- ***************
- *** 128,134 ****
-     for (unsigned int e=0; e<mesh.n_elem(); e++)
-       if (mesh.elem(e) == NULL)
-         unused_elements.insert(e);
- ! };
-   
-   
-   
- --- 128,134 ----
-     for (unsigned int e=0; e<mesh.n_elem(); e++)
-       if (mesh.elem(e) == NULL)
-         unused_elements.insert(e);
- ! }
-   
-   
-   
- ***************
- *** 146,159 ****
-     /**
-      * Repeat until coarsening & refinement flags jive
-      */
- !   while (!satisfied)
-       {
-         const bool coarsening_satisfied = make_coarsening_compatible();
-         const bool refinement_satisfied = make_refinement_compatible();
- ! 
-         if (coarsening_satisfied && refinement_satisfied)
-   	satisfied = true;
- !     };
-   
-     /**
-      * First coarsen the flagged elements.  This
- --- 146,160 ----
-     /**
-      * Repeat until coarsening & refinement flags jive
-      */
- !   do
-       {
-         const bool coarsening_satisfied = make_coarsening_compatible();
-         const bool refinement_satisfied = make_refinement_compatible();
- !       
-         if (coarsening_satisfied && refinement_satisfied)
-   	satisfied = true;
- !     }
- !   while (!satisfied);
-   
-     /**
-      * First coarsen the flagged elements.  This
- ***************
- *** 187,199 ****
-       {
-         assert (mesh.elem(e) != NULL);
-         mesh.elem(e)->set_refinement_flag() = Elem::DO_NOTHING;
- !     };
-     
-     /**
-      * Finally, the new elements need to find their neighbors
-      */
-     mesh.find_neighbors();  
- ! };
-   
-   
-   
- --- 188,200 ----
-       {
-         assert (mesh.elem(e) != NULL);
-         mesh.elem(e)->set_refinement_flag() = Elem::DO_NOTHING;
- !     }
-     
-     /**
-      * Finally, the new elements need to find their neighbors
-      */
-     mesh.find_neighbors();  
- ! }
-   
-   
-   
- ***************
- *** 225,231 ****
-   	  (mesh.elem(e)->level() == 0) &&
-   	  (mesh.elem(e)->refinement_flag() == Elem::COARSEN))
-   	mesh.elem(e)->set_refinement_flag() = Elem::DO_NOTHING;
- !     };
-     
-     // if there are no refined elements then
-     // there is no work for us to do
- --- 226,232 ----
-   	  (mesh.elem(e)->level() == 0) &&
-   	  (mesh.elem(e)->refinement_flag() == Elem::COARSEN))
-   	mesh.elem(e)->set_refinement_flag() = Elem::DO_NOTHING;
- !     }
-     
-     // if there are no refined elements then
-     // there is no work for us to do
- ***************
- *** 332,341 ****
-   	
-   	if (all_children_flagged_for_coarsening)
-   	  mesh.elem(e)->set_refinement_flag() = Elem::COARSEN;
- !       };
-   	
-     return compatible_with_refinement;
- ! };
-   
-   
-   
- --- 333,342 ----
-   	
-   	if (all_children_flagged_for_coarsening)
-   	  mesh.elem(e)->set_refinement_flag() = Elem::COARSEN;
- !       }
-   	
-     return compatible_with_refinement;
- ! }
-   
-   
-   
- ***************
- *** 437,443 ****
-   
-     
-     return compatible_with_coarsening;
- ! };
-   
-   
-   
- --- 438,444 ----
-   
-     
-     return compatible_with_coarsening;
- ! }
-   
-   
-   
- ***************
- *** 472,478 ****
-   	    assert (mesh.elem(e)->active());
-   	  }
-         }
- ! };
-   
-   
-   
- --- 473,479 ----
-   	    assert (mesh.elem(e)->active());
-   	  }
-         }
- ! }
-   
-   
-   
- ***************
- *** 484,490 ****
-       if (mesh.elem(e) != NULL) // could be if deleted
-         if (mesh.elem(e)->refinement_flag() == Elem::REFINE)
-   	mesh.elem(e)->refine(mesh);
- ! };
-   
-   
-   
- --- 485,491 ----
-       if (mesh.elem(e) != NULL) // could be if deleted
-         if (mesh.elem(e)->refinement_flag() == Elem::REFINE)
-   	mesh.elem(e)->refine(mesh);
- ! }
-   
-   
-   
- ***************
- *** 499,506 ****
-         refine_elements();
-         
-         mesh.find_neighbors();
- !     };
- ! };
-   
-   
-   #endif
- --- 500,507 ----
-         refine_elements();
-         
-         mesh.find_neighbors();
- !     }
- ! }
-   
-   
-   #endif
- Index: src/mesh/mesh_tecplot_support.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/mesh/mesh_tecplot_support.C,v
- retrieving revision 1.6
- diff -c -r1.6 mesh_tecplot_support.C
- *** src/mesh/mesh_tecplot_support.C	3 Feb 2003 03:51:49 -0000	1.6
- --- src/mesh/mesh_tecplot_support.C	21 Feb 2003 20:53:40 -0000
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 49,189 ****
-   void MeshBase::write_tecplot (const std::string& name,
-   			      EquationSystems& es)
-   {
- ! #ifdef USE_COMPLEX_NUMBERS
-   
- !   // open _two_ files
- !   std::ofstream out_Real(complex_filename(name, 0));
- !   std::ofstream out_imag(complex_filename(name, 1));;
-   
- !   // get data
- !   std::vector<Complex> soln;
- !   std::vector<std::string> names;
- !   es.build_variable_names  (names);
- !   es.build_solution_vector (soln);
- ! 
- !   // buffer for writing separately
- !   std::vector<Real> Real_soln;
- !   std::vector<Real> imag_soln;
- ! 
- !   prepare_complex_data(&soln, &Real_soln, &imag_soln);
- ! 
- !   if (processor_id() == 0)
- !     {
- !       write_tecplot (out_Real, &Real_soln, &names);
- !       write_tecplot (out_imag, &imag_soln, &names);
- !     };
- ! 
- ! #else
-   
-     std::ofstream out(name.c_str());
-   
-     write_tecplot (out, es);
-   
- ! #endif
- ! };
-   
-   
-   
-   void MeshBase::write_tecplot (std::ostream& out,
-   			      EquationSystems& es)
-   {
- !   std::vector<Complex> soln;
-     std::vector<std::string> names;
-     
-     es.build_variable_names  (names);
-     es.build_solution_vector (soln);
-   
- ! #ifdef USE_COMPLEX_NUMBERS
-   
- !   // buffer for writing separately
- !   std::vector<Real> Real_soln;
- !   std::vector<Real> imag_soln;
-   
- !   prepare_complex_data(&soln, &Real_soln, &imag_soln);
-   
- !   if (processor_id() == 0)
- !     {
- !       std::cout << "Warning: save only Real part." << std::endl;
- !       write_tecplot (out, &Real_soln, &names);
- !     };
-   
- ! #else
-   
-     if (processor_id() == 0)
-       write_tecplot (out, &soln, &names);
-   
- ! #endif
- ! };
-   
-   
-   
-   void MeshBase::write_tecplot (const std::string& name,
- ! 			      const std::vector<Complex>* v,
-   			      const std::vector<std::string>* solution_names)
-   {
- ! #ifdef USE_COMPLEX_NUMBERS
- ! 
- !   if (v != NULL)
- !     {
- !       // open _two_ files
- !       std::ofstream out_Real(complex_filename(name, 0));
- !       std::ofstream out_imag(complex_filename(name, 1));;
-   
- !       // buffer for writing separately
- !       std::vector<Real> Real_soln;
- !       std::vector<Real> imag_soln;
- ! 
- !       prepare_complex_data(v, &Real_soln, &imag_soln);
- ! 
- !       if (processor_id() == 0)
- ! 	{
- ! 	  write_tecplot (out_Real, &Real_soln, solution_names);
- ! 	  write_tecplot (out_imag, &imag_soln, solution_names);
- ! 	};
- !     }
- !   else
- !     {
- !       // have no data, save only the mesh
- !       std::ofstream out(name.c_str());
- !       write_tecplot (out);  
- !     };
-   
- ! #else
-   
-     std::ofstream out(name.c_str());
-   
-     write_tecplot (out, v, solution_names);
-   
- ! #endif
- ! };
-   
-   
-   
-   
-   void MeshBase::write_tecplot (std::ostream& out,
- ! 			      const std::vector<Real>* v,
-   			      const std::vector<std::string>* solution_names)
-   {
- !   assert (out);
-   
-     // Write header to stream
-     {
-       {
-         out << "# This file was generated by:" << std::endl
-   	  << "#" << std::endl
- ! 	  << "# $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $" << std::endl
-   	  << "#" << std::endl
-   	  << "# For a description of the Tecplot format see the Tecplot User's guide."
-   	  << std::endl
-   	  << "#" << std::endl;
- !     };
-   
-       out << "Variables=x,y,z";
- !     
-       if (solution_names != NULL)
-         for (unsigned int n=0; n<solution_names->size(); n++)
- ! 	out << "," << (*solution_names)[n];
- !     
-       out << std::endl;
-       
-       if (_dim != 1)
- --- 49,202 ----
-   void MeshBase::write_tecplot (const std::string& name,
-   			      EquationSystems& es)
-   {
- ! // #ifdef USE_COMPLEX_NUMBERS
-   
- ! //   // open _two_ files
- ! //   std::ofstream out_Real(complex_filename(name, 0));
- ! //   std::ofstream out_imag(complex_filename(name, 1));;
- ! 
- ! //   // get data
- ! //   std::vector<Number> soln;
- ! //   std::vector<std::string> names;
- ! //   es.build_variable_names  (names);
- ! //   es.build_solution_vector (soln);
- ! 
- ! //   // buffer for writing separately
- ! //   std::vector<Real> Real_soln;
- ! //   std::vector<Real> imag_soln;
- ! 
- ! //   prepare_complex_data(&soln, &Real_soln, &imag_soln);
- ! 
- ! //   if (processor_id() == 0)
- ! //     {
- ! //       write_tecplot (out_Real, &Real_soln, &names);
- ! //       write_tecplot (out_imag, &imag_soln, &names);
- ! //     }
-   
- ! // #else
-   
-     std::ofstream out(name.c_str());
-   
-     write_tecplot (out, es);
-   
- ! //#endif
- ! }
-   
-   
-   
-   void MeshBase::write_tecplot (std::ostream& out,
-   			      EquationSystems& es)
-   {
- !   std::vector<Number> soln;
-     std::vector<std::string> names;
-     
-     es.build_variable_names  (names);
-     es.build_solution_vector (soln);
-   
- ! // #ifdef USE_COMPLEX_NUMBERS
-   
- ! //   // buffer for writing separately
- ! //   std::vector<Real> Real_soln;
- ! //   std::vector<Real> imag_soln;
-   
- ! //   prepare_complex_data(&soln, &Real_soln, &imag_soln);
-   
- ! //   if (processor_id() == 0)
- ! //     {
- ! //       std::cout << "Warning: save only Real part." << std::endl;
- ! //       write_tecplot (out, &Real_soln, &names);
- ! //     }
-   
- ! // #else
-   
-     if (processor_id() == 0)
-       write_tecplot (out, &soln, &names);
-   
- ! //#endif
- ! }
-   
-   
-   
-   void MeshBase::write_tecplot (const std::string& name,
- ! 			      const std::vector<Number>* v,
-   			      const std::vector<std::string>* solution_names)
-   {
- ! // #ifdef USE_COMPLEX_NUMBERS
-   
- ! //   if (v != NULL)
- ! //     {
- ! //       // open _two_ files
- ! //       std::ofstream out_Real(complex_filename(name, 0));
- ! //       std::ofstream out_imag(complex_filename(name, 1));;
- ! 
- ! //       // buffer for writing separately
- ! //       std::vector<Real> Real_soln;
- ! //       std::vector<Real> imag_soln;
- ! 
- ! //       prepare_complex_data(v, &Real_soln, &imag_soln);
- ! 
- ! //       if (processor_id() == 0)
- ! // 	{
- ! // 	  write_tecplot (out_Real, &Real_soln, solution_names);
- ! // 	  write_tecplot (out_imag, &imag_soln, solution_names);
- ! // 	}
- ! //     }
- ! //   else
- ! //     {
- ! //       // have no data, save only the mesh
- ! //       std::ofstream out(name.c_str());
- ! //       write_tecplot (out);  
- ! //     }
-   
- ! // #else
-   
-     std::ofstream out(name.c_str());
-   
-     write_tecplot (out, v, solution_names);
-   
- ! //#endif
- ! }
-   
-   
-   
-   
-   void MeshBase::write_tecplot (std::ostream& out,
- ! 			      const std::vector<Number>* v,
-   			      const std::vector<std::string>* solution_names)
-   {
- !   assert (out.good());
-   
-     // Write header to stream
-     {
-       {
-         out << "# This file was generated by:" << std::endl
-   	  << "#" << std::endl
- ! 	  << "# $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $" << std::endl
-   	  << "#" << std::endl
-   	  << "# For a description of the Tecplot format see the Tecplot User's guide."
-   	  << std::endl
-   	  << "#" << std::endl;
- !     }
-   
-       out << "Variables=x,y,z";
- ! 
-       if (solution_names != NULL)
-         for (unsigned int n=0; n<solution_names->size(); n++)
- ! 	{
- ! #ifdef USE_REAL_NUMBERS
- ! 	  
- ! 	  // Write variable names for real variables
- ! 	  out << "," << (*solution_names)[n];
- ! 
- ! #else
- ! 	  
- ! 	  // Write variable names for complex variables
- ! 	  out << "," << "r_"   << (*solution_names)[n]
- ! 	      << "," << "i_"   << (*solution_names)[n];
- ! 	  
- ! #endif
- ! 	}
- ! 
-       out << std::endl;
-       
-       if (_dim != 1)
- ***************
- *** 194,220 ****
-   	  out << ", et=quadrilateral" << std::endl;
-   	else if (_dim == 3)
-   	  out << ", et=brick" << std::endl;
- !       };
- !   };
-   
-     for (unsigned int i=0; i<n_nodes(); i++)
-       {
- !       point(i).write_unformatted(out);
-   
-         if ((v != NULL) && (solution_names != NULL))
-   	{
-   	  const unsigned int n_vars = solution_names->size();
-   
-   	  for (unsigned int c=0; c<n_vars; c++)
- ! 	    out << (*v)[i*n_vars + c] << std::endl;
-   	}
-       }
-   
- !   for (unsigned int i=0; i<n_elem(); i++)
- !     if (elem(i)->active())
- !       elem(i)->write_tecplot_connectivity(out);
-   
- ! };
-   
-   
-   
- --- 207,249 ----
-   	  out << ", et=quadrilateral" << std::endl;
-   	else if (_dim == 3)
-   	  out << ", et=brick" << std::endl;
- !       }
- !   }
-   
-     for (unsigned int i=0; i<n_nodes(); i++)
-       {
- !       // Print the point without a newline
- !       point(i).write_unformatted(out, false);
-   
-         if ((v != NULL) && (solution_names != NULL))
-   	{
-   	  const unsigned int n_vars = solution_names->size();
-   
- + 
-   	  for (unsigned int c=0; c<n_vars; c++)
- ! 	    {
- ! #ifdef USE_REAL_NUMBERS	      
- ! 	      // Write real data
- ! 	      out << (*v)[i*n_vars + c] << " ";
- ! 
- ! #else
- ! 	      // Write complex data
- ! 	      out << (*v)[i*n_vars + c].real() << " "
- ! 		  << (*v)[i*n_vars + c].imag() << " ";
- ! 
- ! #endif
- ! 	    }
- ! 	  
- ! 	  out << std::endl;
-   	}
-       }
-   
- !   const_active_elem_iterator       it (elements_begin());
- !   const const_active_elem_iterator end(elements_end());
-   
- !   for ( ; it != end; ++it)
- !     (*it)->write_tecplot_connectivity(out);
- ! }
-   
-   
-   
- ***************
- *** 235,244 ****
-       ~TecplotMacros();
-       float & nd(const unsigned int i, const unsigned int j);
-       int   & cd(const unsigned int i, const unsigned int j);
- !     //    std::vector<float> nodalData;
- !     //    std::vector<int>   connData;
- !     float* nodalData;
- !     int*   connData;
-     private:
-       const unsigned int n_nodes;
-       const unsigned int n_vars;
- --- 264,273 ----
-       ~TecplotMacros();
-       float & nd(const unsigned int i, const unsigned int j);
-       int   & cd(const unsigned int i, const unsigned int j);
- !     std::vector<float> nodalData;
- !     std::vector<int>   connData;
- !     //float* nodalData;
- !     //int*   connData;
-     private:
-       const unsigned int n_nodes;
-       const unsigned int n_vars;
- ***************
- *** 257,278 ****
-     n_nodes(nn),
-     n_vars(nvar),
-     n_cells(nc),
- !   n_vert(nvrt)//,
- !   //  nodalData(n_nodes*n_vars),
- !   //  connData(n_cells*n_vert) 
- ! {
- !   nodalData = new float[n_nodes*n_vars];
- !   connData  = new int[n_cells*n_vert];
- ! };
-   
-   
-   
-   inline
-   TecplotMacros::~TecplotMacros()
-   {
- !   delete [] nodalData;
- !   delete [] connData;
- ! };
-   
-   
-   
- --- 286,303 ----
-     n_nodes(nn),
-     n_vars(nvar),
-     n_cells(nc),
- !   n_vert(nvrt)
- ! {
- !   nodalData.resize(n_nodes*n_vars);
- !   connData.resize(n_cells*n_vert);
- ! }
-   
-   
-   
-   inline
-   TecplotMacros::~TecplotMacros()
-   {
- ! }
-   
-   
-   
- ***************
- *** 280,286 ****
-   float & TecplotMacros::nd(const unsigned int i, const unsigned int j)
-   {
-     return nodalData[(i)*(n_nodes) + (j)]; 
- ! };
-   
-   
-   
- --- 305,311 ----
-   float & TecplotMacros::nd(const unsigned int i, const unsigned int j)
-   {
-     return nodalData[(i)*(n_nodes) + (j)]; 
- ! }
-   
-   
-   
- ***************
- *** 288,294 ****
-   int & TecplotMacros::cd(const unsigned int i, const unsigned int j)
-   {
-     return connData[(i) + (j)*(n_vert)]; 
- ! };
-   
-   #endif
-   //--------------------------------------------------------
- --- 313,319 ----
-   int & TecplotMacros::cd(const unsigned int i, const unsigned int j)
-   {
-     return connData[(i) + (j)*(n_vert)]; 
- ! }
-   
-   #endif
-   //--------------------------------------------------------
- ***************
- *** 299,305 ****
-   void MeshBase::write_tecplot_binary(const std::string& name,
-   				    EquationSystems& es)
-   {
- !   std::vector<Complex> soln;
-     std::vector<std::string> names;
-     
-     es.build_variable_names  (names);
- --- 324,330 ----
-   void MeshBase::write_tecplot_binary(const std::string& name,
-   				    EquationSystems& es)
-   {
- !   std::vector<Number> soln;
-     std::vector<std::string> names;
-     
-     es.build_variable_names  (names);
- ***************
- *** 307,369 ****
-     
-     if (processor_id() == 0)
-       write_tecplot_binary (name, &soln, &names);
- ! };
- ! 
- ! 
- ! 
- ! 
- ! void MeshBase::write_tecplot_binary(const std::string& name,
- ! 				    const std::vector<Complex>* vec,
- ! 				    const std::vector<std::string>* solution_names)
- ! {
- ! #ifdef USE_COMPLEX_NUMBERS
-   
- -   if (vec != NULL)
- -     {
- -       std::string buf;
-   
- -       // buffer for writing separately
- -       std::vector<Real> Real_soln;
- -       std::vector<Real> imag_soln;
-   
- -       prepare_complex_data(vec, &Real_soln, &imag_soln);
-   
- !       if (processor_id() == 0)
- ! 	{
- ! 	  buf = complex_filename(name, 0);
- ! 	  do_write_tecplot_binary (buf, &Real_soln, solution_names);
- ! 	  buf = complex_filename(name, 1);
- ! 	  do_write_tecplot_binary (buf, &imag_soln, solution_names);
- ! 	};
- !     }
- !   else
- !     {
- !       do_write_tecplot_binary (name);
- !     };
-   
- ! #else
-   
- !   do_write_tecplot_binary(name, vec, solution_names);
-   
- ! #endif
- ! };
-   
-   
-   
- ! void MeshBase::do_write_tecplot_binary(const std::string& name,
- ! 				       const std::vector<Real>* vec,
- ! 				       const std::vector<std::string>* solution_names)
-   {
-     // Call the ASCII output function if configure did not detect
-     // the Tecplot binary API
-   #ifndef HAVE_TECPLOT_API
-     
-     {
-       std::ofstream out (name.c_str());
-       write_tecplot(out, vec, solution_names);
-   
-       return;
- !   };
-     
-   #else
-     
- --- 332,397 ----
-     
-     if (processor_id() == 0)
-       write_tecplot_binary (name, &soln, &names);
- ! }
-   
-   
-   
-   
- ! // void MeshBase::write_tecplot_binary(const std::string& name,
- ! // 				    const std::vector<Number>* vec,
- ! // 				    const std::vector<std::string>* solution_names)
- ! // {
- ! // #ifdef USE_COMPLEX_NUMBERS
- ! 
- ! //   if (vec != NULL)
- ! //     {
- ! //       std::string buf;
- ! 
- ! //       // buffer for writing separately
- ! //       std::vector<Real> Real_soln;
- ! //       std::vector<Real> imag_soln;
- ! 
- ! //       prepare_complex_data(vec, &Real_soln, &imag_soln);
- ! 
- ! //       if (processor_id() == 0)
- ! // 	{
- ! // 	  buf = complex_filename(name, 0);
- ! // 	  do_write_tecplot_binary (buf, &Real_soln, solution_names);
- ! // 	  buf = complex_filename(name, 1);
- ! // 	  do_write_tecplot_binary (buf, &imag_soln, solution_names);
- ! // 	}
- ! //     }
- ! //   else
- ! //     {
- ! //       do_write_tecplot_binary (name);
- ! //     }
-   
- ! // #else
-   
- ! //   do_write_tecplot_binary(name, vec, solution_names);
-   
- ! // #endif
- ! //}
-   
-   
-   
- ! void MeshBase::write_tecplot_binary(const std::string& name,
- ! 				    const std::vector<Number>* vec,
- ! 				    const std::vector<std::string>* solution_names)
-   {
-     // Call the ASCII output function if configure did not detect
-     // the Tecplot binary API
-   #ifndef HAVE_TECPLOT_API
-     
-     {
- +     std::cerr << "WARNING: Tecplot Binary files require the Tecplot API." << std::endl
- + 	      << "Continuing with ASCII output." << std::endl;
- +     
-       std::ofstream out (name.c_str());
-       write_tecplot(out, vec, solution_names);
-   
-       return;
- !   }
-     
-   #else
-     
- ***************
- *** 374,380 ****
-         write_tecplot(out, vec, solution_names);
-   
-         return;
- !     };
-   
-     // Required variables
-     std::string tecplot_variable_names;
- --- 402,408 ----
-         write_tecplot(out, vec, solution_names);
-   
-         return;
- !     }
-   
-     // Required variables
-     std::string tecplot_variable_names;
- ***************
- *** 388,408 ****
-       
-       if (solution_names != NULL)
-         {
- ! 	tecplot_variable_names += ", ";
- ! 	tecplot_variable_names += (*solution_names)[0];
- ! 
- ! 	for (unsigned int name=1; name<solution_names->size(); name++)
-   	  {
-   	    tecplot_variable_names += ", ";
-   	    tecplot_variable_names += (*solution_names)[name];
- ! 	  };
- !       };
- !   };
-   
-     // Instantiate a TecplotMacros interface.  In 2D the most nodes per
-     // face should be 4, in 3D it's 8.
-     TecplotMacros tm(n_nodes(),
-   		   (3 + ((solution_names == NULL) ? 0 : solution_names->size())),
-   		   n_active_sub_elem(),
-   		   ((_dim==2) ? 4 : 8)
-   		   );
- --- 416,452 ----
-       
-       if (solution_names != NULL)
-         {
- ! 	for (unsigned int name=0; name<solution_names->size(); name++)
-   	  {
- + #ifdef USE_REAL_NUMBERS
- + 
-   	    tecplot_variable_names += ", ";
-   	    tecplot_variable_names += (*solution_names)[name];
- ! 
- ! #else
- ! 	    
- ! 	    tecplot_variable_names += ", ";
- ! 	    tecplot_variable_names += "r_";
- ! 	    tecplot_variable_names += (*solution_names)[name];
- ! 	    tecplot_variable_names += ", ";
- ! 	    tecplot_variable_names += "i_";
- ! 	    tecplot_variable_names += (*solution_names)[name];
- ! 
- ! #endif
- ! 	  }
- !       }
- !   }
-   
-     // Instantiate a TecplotMacros interface.  In 2D the most nodes per
-     // face should be 4, in 3D it's 8.
- + 
- +   
-     TecplotMacros tm(n_nodes(),
- + #ifdef USE_REAL_NUMBERS		   
-   		   (3 + ((solution_names == NULL) ? 0 : solution_names->size())),
- + #else
- + 		   (3 + 2*((solution_names == NULL) ? 0 : solution_names->size())),
- + #endif
-   		   n_active_sub_elem(),
-   		   ((_dim==2) ? 4 : 8)
-   		   );
- ***************
- *** 421,451 ****
-   	  (solution_names != NULL))
-   	{
-   	  const unsigned int n_vars = solution_names->size(); 
- !   
-   	  for (unsigned int c=0; c<n_vars; c++)
- ! 	    tm.nd((3+c),v) = static_cast<float>((*vec)[v*n_vars + c]);
- ! 	};
- !     };
-   
-   
-     // Copy the connectivity
-     {   
-       unsigned int te = 0;
- !     
- !     for (unsigned int e=0; e<n_elem(); e++)
- !       {
- ! 	if (elem(e)->active())
- ! 	  for (unsigned int se=0; se<elem(e)->n_sub_elem(); se++)
- ! 	    {
- ! 	      const std::vector<unsigned int> connectivity = elem(e)->tecplot_connectivity(se);
- ! 	      
- ! 	      for (unsigned int node=0; node<connectivity.size(); node++)
- ! 		tm.cd(node,te) = connectivity[node];
- ! 	      
- ! 	      te++;
- ! 	    };
- !       };
- !   };
-     
-     
-     // Ready to call the Tecplot API
- --- 465,503 ----
-   	  (solution_names != NULL))
-   	{
-   	  const unsigned int n_vars = solution_names->size(); 
- ! 
-   	  for (unsigned int c=0; c<n_vars; c++)
- ! 	    {
- ! #ifdef USE_REAL_NUMBERS
- ! 	      
- ! 	      tm.nd((3+c),v) = static_cast<float>((*vec)[v*n_vars + c]);
- ! #else
- ! 	      tm.nd((3+2*c),v)   = static_cast<float>((*vec)[v*n_vars + c].real());
- ! 	      tm.nd((3+2*c+1),v) = static_cast<float>((*vec)[v*n_vars + c].imag());
- ! #endif
- ! 	    }
- ! 	}
- !     }
-   
-   
-     // Copy the connectivity
-     {   
-       unsigned int te = 0;
- ! 
- !     const_active_elem_iterator       it (elements_begin());
- !     const const_active_elem_iterator end(elements_end());
- ! 
- !     for ( ; it != end; ++it)
- !       for (unsigned int se=0; se<(*it)->n_sub_elem(); se++)
- ! 	{
- ! 	  const std::vector<unsigned int> connectivity = (*it)->tecplot_connectivity(se);
- ! 	  
- ! 	  for (unsigned int node=0; node<connectivity.size(); node++)
- ! 	    tm.cd(node,te) = connectivity[node];
- ! 	  
- ! 	  te++;
- ! 	}
- !   }
-     
-     
-     // Ready to call the Tecplot API
- ***************
- *** 472,479 ****
-   			  NULL);
-       
-       assert (ierr == 0);
-       
- !     int total = ((3 + ((solution_names == NULL) ? 0 : solution_names->size()))*num_nodes);
-       
-       ierr = tecio::TECDAT (&total,
-   			  &tm.nodalData[0],
- --- 524,538 ----
-   			  NULL);
-       
-       assert (ierr == 0);
- + 
-       
- !     int total =
- ! #ifdef USE_REAL_NUMBERS
- !       ((3 + ((solution_names == NULL) ? 0 : solution_names->size()))*num_nodes);
- ! #else  
- !       ((3 + 2*((solution_names == NULL) ? 0 : solution_names->size()))*num_nodes);
- ! #endif
- ! 
-       
-       ierr = tecio::TECDAT (&total,
-   			  &tm.nodalData[0],
- ***************
- *** 488,496 ****
-       ierr = tecio::TECEND ();
-       
-       assert (ierr == 0);
- !   };
-         
- ! #endif
-     
- ! };
-   
- --- 547,555 ----
-       ierr = tecio::TECEND ();
-       
-       assert (ierr == 0);
- !   }
-         
- ! #endif // #ifdef HAVE_TECPLOT_API
-     
- ! }
-   
- Index: src/mesh/mesh_ucd_support.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/mesh/mesh_ucd_support.C,v
- retrieving revision 1.7
- retrieving revision 1.8
- diff -c -r1.7 -r1.8
- *** src/mesh/mesh_ucd_support.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/mesh/mesh_ucd_support.C	13 Feb 2003 22:56:12 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 40,46 ****
-     read_ucd (in);
-   
-     return;
- ! };
-   
-   
-   
- --- 40,46 ----
-     read_ucd (in);
-   
-     return;
- ! }
-   
-   
-   
- ***************
- *** 91,98 ****
-   
-   	// Build the node
-   	node_ptr(i) = Node::build(x,y,z,i);
- !       };
- !   };
-   
-   
-     
- --- 91,98 ----
-   
-   	// Build the node
-   	node_ptr(i) = Node::build(x,y,z,i);
- !       }
- !   }
-   
-   
-     
- ***************
- *** 143,152 ****
-   	    assert (node < n_nodes());
-   	    
-   	    elem(i)->set_node(n) = node_ptr(node-1); // assign the node
- ! 	  };
- !       };
- !   };  
- ! };
-   
-   
-   
- --- 143,152 ----
-   	    assert (node < n_nodes());
-   	    
-   	    elem(i)->set_node(n) = node_ptr(node-1); // assign the node
- ! 	  }
- !       }
- !   }  
- ! }
-   
-   
-   
- ***************
- *** 158,164 ****
-     write_ucd (out);
-   
-     return;
- ! };
-   
-   
-   
- --- 158,164 ----
-     write_ucd (out);
-   
-     return;
- ! }
-   
-   
-   
- ***************
- *** 174,185 ****
-     {
-       out << "# This file was generated by:" << std::endl
-   	<< "#" << std::endl
- ! 	<< "# $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $" << std::endl
-   	<< "#" << std::endl
-   	<< "# For a description of the UCD format see the AVS Developer's guide."
-   	<< std::endl
-   	<< "#" << std::endl;
- !   };
-   
-     
-     // Write the mesh info
- --- 174,185 ----
-     {
-       out << "# This file was generated by:" << std::endl
-   	<< "#" << std::endl
- ! 	<< "# $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $" << std::endl
-   	<< "#" << std::endl
-   	<< "# For a description of the UCD format see the AVS Developer's guide."
-   	<< std::endl
-   	<< "#" << std::endl;
- !   }
-   
-     
-     // Write the mesh info
- ***************
- *** 192,198 ****
-       {
-         out << (n+1) << "\t";
-         point(n).write_unformatted(out);
- !     };
-   
-     // Write the elements
-     for (unsigned int e=0; e<n_elem(); e++)
- --- 192,198 ----
-       {
-         out << (n+1) << "\t";
-         point(n).write_unformatted(out);
- !     }
-   
-     // Write the elements
-     for (unsigned int e=0; e<n_elem(); e++)
- ***************
- *** 200,204 ****
-         out << (e+1) << " 0 " << elem(e)->type() << "\t"; 
-         elem(e)->write_ucd_connectivity(out);
-       }  
- ! };
-   
- --- 200,204 ----
-         out << (e+1) << " 0 " << elem(e)->type() << "\t"; 
-         elem(e)->write_ucd_connectivity(out);
-       }  
- ! }
-   
- Index: src/mesh/mesh_unv_support.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/mesh/mesh_unv_support.C,v
- retrieving revision 1.7
- retrieving revision 1.8
- diff -c -r1.7 -r1.8
- *** src/mesh/mesh_unv_support.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/mesh/mesh_unv_support.C	13 Feb 2003 22:56:12 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 41,53 ****
-     read_unv(file);
-     file.close();
-     return;
- ! };
-   
-   
-   
-   void Mesh::read_unv(std::istream& in){
-     UnvInterface i(in,_nodes,_elements,boundary_info);
- ! };
-   
-   
-   //-----------------------------------------------------------------------------
- --- 41,53 ----
-     read_unv(file);
-     file.close();
-     return;
- ! }
-   
-   
-   
-   void Mesh::read_unv(std::istream& in){
-     UnvInterface i(in,_nodes,_elements,boundary_info);
- ! }
-   
-   
-   //-----------------------------------------------------------------------------
- ***************
- *** 65,71 ****
-     {
-       std::cout << "Input file not good!" << std::endl;
-       error();
- !   };
-   
-     label_dataset_nodes = "2411";
-     label_dataset_elms  = "2412";
- --- 65,71 ----
-     {
-       std::cout << "Input file not good!" << std::endl;
-       error();
- !   }
-   
-     label_dataset_nodes = "2411";
-     label_dataset_elms  = "2412";
- ***************
- *** 85,91 ****
-     {
-       std::cout << "Error opening temporary file." << std::endl;
-       error();
- !   };
-      
-   
-     init();
- --- 85,91 ----
-     {
-       std::cout << "Error opening temporary file." << std::endl;
-       error();
- !   }
-      
-   
-     init();
- ***************
- *** 100,106 ****
-     {
-       std::cout << "Error re-opening temporary file for reading." << std::endl;
-       error();
- !   };
-      
-   
-     node_in();
- --- 100,106 ----
-     {
-       std::cout << "Error re-opening temporary file for reading." << std::endl;
-       error();
- !   }
-      
-   
-     node_in();
- ***************
- *** 125,131 ****
-     //      << std::endl;}
-   
-   
- ! };
-   
-   
-   
- --- 125,131 ----
-     //      << std::endl;}
-   
-   
- ! }
-   
-   
-   
- ***************
- *** 138,146 ****
-     {
-       std::cout << "Error deleting temporary file." << std::endl;
-       error();
- !   };
-   
- ! };
-   
-   
-   
- --- 138,146 ----
-     {
-       std::cout << "Error deleting temporary file." << std::endl;
-       error();
- !   }
-   
- ! }
-   
-   
-   
- ***************
- *** 161,175 ****
-   	{
-   	  olds = news;    // go on reading
-   	  phys_file >> news;
- ! 	};
-   
-         if(phys_file.eof()) // end of file is reached
-   	{ break; }
-   
-         scan_dataset(news); // scan the dataset for important information
- !     };
-   
- ! };
-   
-   
-   
- --- 161,175 ----
-   	{
-   	  olds = news;    // go on reading
-   	  phys_file >> news;
- ! 	}
-   
-         if(phys_file.eof()) // end of file is reached
-   	{ break; }
-   
-         scan_dataset(news); // scan the dataset for important information
- !     }
-   
- ! }
-   
-   
-   
- ***************
- *** 243,249 ****
-   	  temporary_file << "\n";
-   
-   	  num_nodes++;                   // count nodes
- ! 	};
-       }
-   
-     // dataset containing the elements
- --- 243,249 ----
-   	  temporary_file << "\n";
-   
-   	  num_nodes++;                   // count nodes
- ! 	}
-       }
-   
-     // dataset containing the elements
- ***************
- *** 299,305 ****
-   
-   	  temporary_file << "\n";
-   	  num_elements++;                 // count elements
- ! 	};
-       }
-   
-     // dataset containing the boundary conditions
- --- 299,305 ----
-   
-   	  temporary_file << "\n";
-   	  num_elements++;                 // count elements
- ! 	}
-       }
-   
-     // dataset containing the boundary conditions
- ***************
- *** 400,406 ****
-   	  temporary_file << "\n";
-   
-   	  num_bcs++;                 // count boundary conditions
- ! 	};
-         }
-       }
-   
- --- 400,406 ----
-   	  temporary_file << "\n";
-   
-   	  num_bcs++;                 // count boundary conditions
- ! 	}
-         }
-       }
-   
- ***************
- *** 413,419 ****
-   	phys_file.ignore(256,'\n');}      // ignore the rest
-         while (data != "-1");               // look for delimiter
-       }
- ! };
-   
-   
-   
- --- 413,419 ----
-   	phys_file.ignore(256,'\n');}      // ignore the rest
-         while (data != "-1");               // look for delimiter
-       }
- ! }
-   
-   
-   
- ***************
- *** 443,449 ****
-   
-     // Move file pointer
-     temporary_file.seekg(ds_position[ds_num],std::ios::beg);
- ! };
-   
-   
-   
- --- 443,449 ----
-   
-     // Move file pointer
-     temporary_file.seekg(ds_position[ds_num],std::ios::beg);
- ! }
-   
-   
-   
- ***************
- *** 484,491 ****
-   
-         // add node to the nodes vector.
-         nodes[i] = Node::build(x,y,z,i);
- !     };
- ! };
-   
-   
-   
- --- 484,491 ----
-   
-         // add node to the nodes vector.
-         nodes[i] = Node::build(x,y,z,i);
- !     }
- ! }
-   
-   
-   
- ***************
- *** 689,695 ****
-   	elements[i]->set_node(assign_elm_nodes[j]) = nodes[assign_nodes[node_labels[j]]];
-   
-       }
- ! };
-   
-   void UnvInterface::bcs_in(BoundaryInfo& boundary_info)
-   {
- --- 689,695 ----
-   	elements[i]->set_node(assign_elm_nodes[j]) = nodes[assign_nodes[node_labels[j]]];
-   
-       }
- ! }
-   
-   void UnvInterface::bcs_in(BoundaryInfo& boundary_info)
-   {
- ***************
- *** 753,759 ****
-   
-     }
-   
- ! };
-   
-   
-   
- --- 753,759 ----
-   
-     }
-   
- ! }
-   
-   
-   
- ***************
- *** 779,788 ****
-     {
-       // we assume that if this one number is written correctly, all numbers are
-       need_D_to_e = false;
- !   };
-   
-     return number;
-   
- ! };
-   
-   
- --- 779,788 ----
-     {
-       // we assume that if this one number is written correctly, all numbers are
-       need_D_to_e = false;
- !   }
-   
-     return number;
-   
- ! }
-   
-   
- Index: src/mesh/mesh_xdr_support.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/mesh/mesh_xdr_support.C,v
- retrieving revision 1.7
- retrieving revision 1.9
- diff -c -r1.7 -r1.9
- *** src/mesh/mesh_xdr_support.C	3 Feb 2003 03:51:49 -0000	1.7
- --- src/mesh/mesh_xdr_support.C	20 Feb 2003 04:59:58 -0000	1.9
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 142,152 ****
-   
-   	    neeb.resize(n_blocks);
-   	    neeb     = mh->get_num_elem_each_block();
- ! 	  };
-   	  
-   	
-   	break;
- !       };
-         
-       case (XdrIO::W_ASCII):
-       case (XdrIO::ENCODE):
- --- 142,152 ----
-   
-   	    neeb.resize(n_blocks);
-   	    neeb     = mh->get_num_elem_each_block();
- ! 	  }
-   	  
-   	
-   	break;
- !       }
-         
-       case (XdrIO::W_ASCII):
-       case (XdrIO::ENCODE):
- ***************
- *** 186,199 ****
-   	 */
-   	m.header(mh); // Needs to work for both types of file
-   	break;
- !       };
-         
-       default:
-         {
-   	// Shouldn't have gotten here.
-   	error();
- !       };
- !     };
-   
-     
-     /**
- --- 186,199 ----
-   	 */
-   	m.header(mh); // Needs to work for both types of file
-   	break;
- !       }
-         
-       default:
-         {
-   	// Shouldn't have gotten here.
-   	error();
- !       }
- !     }
-   
-     
-     /**
- ***************
- *** 213,219 ****
-       {
-         nodes.resize(numNodes);
-         elements.resize(numElem);
- !     };
-   
-     
-     
- --- 213,219 ----
-       {
-         nodes.resize(numNodes);
-         elements.resize(numElem);
- !     }
-   
-     
-     
- ***************
- *** 263,272 ****
-   	  {
-   	    // I don't know what type of mesh it is.
-   	    error();
- ! 	  };
-   	
-   	break;
- !       };
-   
-       case (XdrIO::ENCODE):
-       case (XdrIO::W_ASCII):
- --- 263,272 ----
-   	  {
-   	    // I don't know what type of mesh it is.
-   	    error();
- ! 	  }
-   	
-   	break;
- !       }
-   
-       case (XdrIO::ENCODE):
-       case (XdrIO::W_ASCII):
- ***************
- *** 289,310 ****
-   		    conn[lastConnIndex + n] = mesh.elem(e)->node(n);
-   		  
-   		  lastConnIndex += nn;
- ! 		};
-   	    
-   	    // Send conn to the XDR file
-   	    m.Icon(&conn[0], nn, lastConnIndex/nn);
- ! 	  };
-   	
-   	break;
- !       };
-   
-       default:
-         {
-   	// How'd we get here? We have to be either
-   	// reading or writing.
-   	error();
- !       };
- !     };
-       
-     /**
-      * If we are reading,
- --- 289,310 ----
-   		    conn[lastConnIndex + n] = mesh.elem(e)->node(n);
-   		  
-   		  lastConnIndex += nn;
- ! 		}
-   	    
-   	    // Send conn to the XDR file
-   	    m.Icon(&conn[0], nn, lastConnIndex/nn);
- ! 	  }
-   	
-   	break;
- !       }
-   
-       default:
-         {
-   	// How'd we get here? We have to be either
-   	// reading or writing.
-   	error();
- !       }
- !     }
-       
-     /**
-      * If we are reading,
- ***************
- *** 336,342 ****
-   				      innd);
-   	  
-   	  break;
- ! 	};
-   	
-         case (XdrIO::W_ASCII):
-         case (XdrIO::ENCODE):
- --- 336,342 ----
-   				      innd);
-   	  
-   	  break;
- ! 	}
-   	
-         case (XdrIO::W_ASCII):
-         case (XdrIO::ENCODE):
- ***************
- *** 352,378 ****
-   	      coords[lastIndex+2] = p(2);
-   	      
-   	      lastIndex += 3;
- ! 	    };
-   	  
-   	  // Put the nodes in the XDR file
-   	  m.coord(&coords[0], mesh.spatial_dimension(), mesh.n_nodes()); 
-   	  break;
- ! 	};
-   	
-         default:
-   	{
-   	  // How'd we get here? We have to be either
-   	  // reading or writing.
-   	  error();
- ! 	};
- !       };
-       
-       /**
-        * Free memory used in
-        * the coords vector.
-        */
-       coords.clear();
- !   };
-   
-     
-     /**
- --- 352,378 ----
-   	      coords[lastIndex+2] = p(2);
-   	      
-   	      lastIndex += 3;
- ! 	    }
-   	  
-   	  // Put the nodes in the XDR file
-   	  m.coord(&coords[0], mesh.spatial_dimension(), mesh.n_nodes()); 
-   	  break;
- ! 	}
-   	
-         default:
-   	{
-   	  // How'd we get here? We have to be either
-   	  // reading or writing.
-   	  error();
- ! 	}
- !       }
-       
-       /**
-        * Free memory used in
-        * the coords vector.
-        */
-       coords.clear();
- !   }
-   
-     
-     /**
- ***************
- *** 408,416 ****
-   		      elements[e]->set_node(innd) = nodes[conn[innd+lastConnIndex]];
-   		    
-   		    lastConnIndex += mesh.elem(e)->n_nodes();
- ! 		  };
-   		lastFaceIndex += neeb[idx];
- ! 	      };
-   	  }
-     
-   	else if (orig_type == 1) // MGF-style (1) Hex27 mesh
- --- 408,416 ----
-   		      elements[e]->set_node(innd) = nodes[conn[innd+lastConnIndex]];
-   		    
-   		    lastConnIndex += mesh.elem(e)->n_nodes();
- ! 		  }
-   		lastFaceIndex += neeb[idx];
- ! 	      }
-   	  }
-     
-   	else if (orig_type == 1) // MGF-style (1) Hex27 mesh
- ***************
- *** 420,428 ****
-   		elements[ielm] = new Hex27;
-   		for (int innd=0; innd < 27; ++innd)
-   		  elements[ielm]->set_node(innd) = nodes[conn[innd+2+(27+2)*ielm]];	
- ! 	      };
- ! 	  };
- !       };
-     
-       /**
-        * Free memory used in
- --- 420,428 ----
-   		elements[ielm] = new Hex27;
-   		for (int innd=0; innd < 27; ++innd)
-   		  elements[ielm]->set_node(innd) = nodes[conn[innd+2+(27+2)*ielm]];	
- ! 	      }
- ! 	  }
- !       }
-     
-       /**
-        * Free memory used in
- ***************
- *** 430,436 ****
-        * vector.
-        */
-       conn.clear();
- !   };
-   
-   
-     /**
- --- 430,436 ----
-        * vector.
-        */
-       conn.clear();
- !   }
-   
-   
-     /**
- ***************
- *** 456,462 ****
-   	  boundary_info.add_side(bcs[0+ibc*3], bcs[1+ibc*3], bcs[2+ibc*3]);
-   	  
-   	break;
- !       };
-   
-       case (XdrIO::W_ASCII):
-       case (XdrIO::ENCODE):
- --- 456,462 ----
-   	  boundary_info.add_side(bcs[0+ibc*3], bcs[1+ibc*3], bcs[2+ibc*3]);
-   	  
-   	break;
- !       }
-   
-       case (XdrIO::W_ASCII):
-       case (XdrIO::ENCODE):
- ***************
- *** 473,484 ****
-   	    bcs[0+ibc*3] = elem_list[ibc];
-   	    bcs[1+ibc*3] = side_list[ibc];
-   	    bcs[2+ibc*3] = elem_id_list[ibc];
- ! 	  };
-   	
-   	m.BC(&bcs[0], numBCs);
-   	
-   	break;
- !       };
-         
-   
-       default:
- --- 473,484 ----
-   	    bcs[0+ibc*3] = elem_list[ibc];
-   	    bcs[1+ibc*3] = side_list[ibc];
-   	    bcs[2+ibc*3] = elem_id_list[ibc];
- ! 	  }
-   	
-   	m.BC(&bcs[0], numBCs);
-   	
-   	break;
- !       }
-         
-   
-       default:
- ***************
- *** 486,500 ****
-   	// How'd we get here? We have to be either
-   	// reading or writing.
-   	error();
- !       };
- !     };
- ! };
-   
-   
-   
-   void XdrInterface::soln_interface(const std::string& name,
-   				  const XdrIO::XdrIO_TYPE access,
- ! 				  std::vector<Complex>& soln,
-   				  std::vector<std::string>& var_names,
-   				  Mesh& mesh)
-   {
- --- 486,500 ----
-   	// How'd we get here? We have to be either
-   	// reading or writing.
-   	error();
- !       }
- !     }
- ! }
-   
-   
-   
-   void XdrInterface::soln_interface(const std::string& name,
-   				  const XdrIO::XdrIO_TYPE access,
- ! 				  std::vector<Number>& soln,
-   				  std::vector<std::string>& var_names,
-   				  Mesh& mesh)
-   {
- ***************
- *** 525,531 ****
-   
-   #endif
-   
- ! };
-   
-   
-   
- --- 525,531 ----
-   
-   #endif
-   
- ! }
-   
-   
-   
- ***************
- *** 634,640 ****
-   	  soln.resize(numVar*numNodes);
-   
-   	  s.values(&soln[0], numNodes);
- ! 	};	
-   	
-   	break;
-         }
- --- 634,640 ----
-   	  soln.resize(numVar*numNodes);
-   
-   	  s.values(&soln[0], numNodes);
- ! 	}	
-   	
-   	break;
-         }
- ***************
- *** 664,673 ****
-   		var_title += var_names[var][c];
-   
-   	      var_title += '\0';
- ! 	    };
-   
-   	  sh->setVarTitle(var_title.c_str(), var_title.size());
- ! 	};
-   	
-   	/**
-   	 * Put the information
- --- 664,673 ----
-   		var_title += var_names[var][c];
-   
-   	      var_title += '\0';
- ! 	    }
-   
-   	  sh->setVarTitle(var_title.c_str(), var_title.size());
- ! 	}
-   	
-   	/**
-   	 * Put the information
- ***************
- *** 680,686 ****
-   	  assert (soln.size() == var_names.size()*mesh.n_nodes());
-   	  
-   	  s.values(&soln[0], mesh.n_nodes());
- ! 	};
-   	
-   	break;
-         }
- --- 680,686 ----
-   	  assert (soln.size() == var_names.size()*mesh.n_nodes());
-   	  
-   	  s.values(&soln[0], mesh.n_nodes());
- ! 	}
-   	
-   	break;
-         }
- ***************
- *** 698,704 ****
-      * filename and mesh_base.header.
-      */
-     delete sh;
- ! };
-   
-   
-   
- --- 698,704 ----
-      * filename and mesh_base.header.
-      */
-     delete sh;
- ! }
-   
-   
-   
- ***************
- *** 733,739 ****
-   			   _elements,
-   			   boundary_info,
-   			   *this);
- ! };
-   
-   
-   
- --- 733,739 ----
-   			   _elements,
-   			   boundary_info,
-   			   *this);
- ! }
-   
-   
-   
- ***************
- *** 772,778 ****
-   			   *this);
-     
-   #endif
- ! };
-   			       
-     
-   
- --- 772,778 ----
-   			   *this);
-     
-   #endif
- ! }
-   			       
-     
-   
- ***************
- *** 781,787 ****
-   
-   
-   void Mesh::read_xdr_soln(const std::string& name,
- ! 			 std::vector<Complex>& soln,
-   			 std::vector<std::string>& var_names)
-   {
-     /**
- --- 781,787 ----
-   
-   
-   void Mesh::read_xdr_soln(const std::string& name,
- ! 			 std::vector<Number>& soln,
-   			 std::vector<std::string>& var_names)
-   {
-     /**
- ***************
- *** 798,810 ****
-   			   soln,
-   			   var_names,
-   			   *this);
- ! };
-   
-   
-   
-   
-   void Mesh::read_xdr_soln_binary(const std::string& name,
- ! 				std::vector<Complex>& soln,
-   				std::vector<std::string>& var_names)
-   {
-   #ifndef HAVE_RPC_RPC_H
- --- 798,810 ----
-   			   soln,
-   			   var_names,
-   			   *this);
- ! }
-   
-   
-   
-   
-   void Mesh::read_xdr_soln_binary(const std::string& name,
- ! 				std::vector<Number>& soln,
-   				std::vector<std::string>& var_names)
-   {
-   #ifndef HAVE_RPC_RPC_H
- ***************
- *** 832,838 ****
-   			   *this);
-     
-   #endif
- ! };
-   
-   
-   
- --- 832,838 ----
-   			   *this);
-     
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 857,863 ****
-   			   _elements,
-   			   boundary_info,
-   			   *this);
- ! };
-   
-   
-   
- --- 857,863 ----
-   			   _elements,
-   			   boundary_info,
-   			   *this);
- ! }
-   
-   
-   
- ***************
- *** 891,903 ****
-   			   *this);
-   
-   #endif
- ! };
-   
-   
-   
-   
-   void Mesh::write_xdr_soln(const std::string& name,
- ! 			  std::vector<Complex>& soln,
-   			  std::vector<std::string>& var_names)
-   {
-     /**
- --- 891,903 ----
-   			   *this);
-   
-   #endif
- ! }
-   
-   
-   
-   
-   void Mesh::write_xdr_soln(const std::string& name,
- ! 			  std::vector<Number>& soln,
-   			  std::vector<std::string>& var_names)
-   {
-     /**
- ***************
- *** 914,926 ****
-   			   soln,
-   			   var_names,
-   			   *this);
- ! };
-   
-   
-   
-   
-   void Mesh::write_xdr_soln_binary(const std::string& name,
- ! 				 std::vector<Complex>& soln,
-   				 std::vector<std::string>& var_names)
-   
-   {
- --- 914,926 ----
-   			   soln,
-   			   var_names,
-   			   *this);
- ! }
-   
-   
-   
-   
-   void Mesh::write_xdr_soln_binary(const std::string& name,
- ! 				 std::vector<Number>& soln,
-   				 std::vector<std::string>& var_names)
-   
-   {
- ***************
- *** 949,955 ****
-   			   *this);
-    
-   #endif
- ! };
-   
-   
-   
- --- 949,955 ----
-   			   *this);
-    
-   #endif
- ! }
-   
-   
-   
- Index: src/numerics/dense_matrix.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/numerics/dense_matrix.C,v
- retrieving revision 1.6
- diff -c -r1.6 dense_matrix.C
- *** src/numerics/dense_matrix.C	3 Feb 2003 03:51:50 -0000	1.6
- --- src/numerics/dense_matrix.C	21 Feb 2003 20:53:40 -0000
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 26,40 ****
-   
-   // ------------------------------------------------------------
-   // Dense Matrix member functions
- ! template<typename Tp>
- ! void DenseMatrix<Tp>::left_multiply (const DenseMatrix<Tp>& A,
- ! 				     const bool transpose)
-   {
-     // C = A*B  C (mxn), A (mxp), B (pxn)
-     
- !   DenseMatrix<Tp> B(*this);
-   
- !   DenseMatrix<Tp>& C = *this;
-   
-     C.zero();
-     
- --- 26,40 ----
-   
-   // ------------------------------------------------------------
-   // Dense Matrix member functions
- ! template<typename T>
- ! void DenseMatrix<T>::left_multiply (const DenseMatrix<T>& A,
- ! 				    const bool transpose)
-   {
-     // C = A*B  C (mxn), A (mxp), B (pxn)
-     
- !   DenseMatrix<T> B(*this);
-   
- !   DenseMatrix<T>& C = *this;
-   
-     C.zero();
-     
- ***************
- *** 50,67 ****
-         const unsigned int n_s = C.n();
-         const unsigned int p_s = A.n(); 
-   
-         for (unsigned int i=0; i<m_s; i++)
- ! 	for (unsigned int j=0; j<n_s; j++)
- ! 	  for (unsigned int k=0; k<p_s; k++)
- ! 	    C(i,j) += A(i,k)*B(k,j);	           
-       }
-     else
-       {
-         /*
- !       std::cout << "A=" << std::endl;
- !       A.print();
- !       std::cout << "B=" << std::endl;
- !       B.print();
-         */
-         
-         resize (A.n(), B.n());
- --- 50,71 ----
-         const unsigned int n_s = C.n();
-         const unsigned int p_s = A.n(); 
-   
- +       // Do it this way because there is a
- +       // decent chance (at least for constraint matrices)
- +       // that A(i,k) = 0.
-         for (unsigned int i=0; i<m_s; i++)
- ! 	for (unsigned int k=0; k<p_s; k++)
- ! 	  if (A(i,k) != 0.)
- ! 	    for (unsigned int j=0; j<n_s; j++)
- ! 	      C(i,j) += A(i,k)*B(k,j);	           
-       }
-     else
-       {
-         /*
- ! 	std::cout << "A=" << std::endl;
- ! 	A.print();
- ! 	std::cout << "B=" << std::endl;
- ! 	B.print();
-         */
-         
-         resize (A.n(), B.n());
- ***************
- *** 74,112 ****
-         const unsigned int n_s = C.n();
-         const unsigned int p_s = A.m(); 
-   
-         for (unsigned int i=0; i<m_s; i++)
- ! 	for (unsigned int j=0; j<n_s; j++)
- ! 	  for (unsigned int k=0; k<p_s; k++)
- ! 	    C(i,j) += A.transpose(i,k)*B(k,j);
-   
-         /*
- !       std::cout << "C=" << std::endl;
- !       C.print();
-         */
- !     };    	     
- ! };
-   
-   
-   
- ! template<typename Tp>
- ! void DenseMatrix<Tp>::right_multiply (const DenseMatrix<Tp>& B,
- ! 				      const bool transpose)
-   {
-     // C = A*B  C (mxn), A (mxp), B (pxn)
-     
- !   DenseMatrix<Tp> A(*this);
-     
- !   DenseMatrix<Tp>& C = *this;
-     
-     C.zero();
-     
-     if (!transpose)
-       {
-         /*
- !       std::cout << "A=" << std::endl;
- !       A.print();
- !       std::cout << "B=" << std::endl;
- !       B.print();
-         */
-         resize (A.m(), B.n());
-         
- --- 78,120 ----
-         const unsigned int n_s = C.n();
-         const unsigned int p_s = A.m(); 
-   
- +       // Do it this way because there is a
- +       // decent chance (at least for constraint matrices)
- +       // that A.transpose(i,k) = 0.
-         for (unsigned int i=0; i<m_s; i++)
- ! 	for (unsigned int k=0; k<p_s; k++)
- ! 	  if (A.transpose(i,k) != 0.)
- ! 	    for (unsigned int j=0; j<n_s; j++)
- ! 	      C(i,j) += A.transpose(i,k)*B(k,j);
-   
-         /*
- ! 	std::cout << "C=" << std::endl;
- ! 	C.print();
-         */
- !     }    	     
- ! }
-   
-   
-   
- ! template<typename T>
- ! void DenseMatrix<T>::right_multiply (const DenseMatrix<T>& B,
- ! 				     const bool transpose)
-   {
-     // C = A*B  C (mxn), A (mxp), B (pxn)
-     
- !   DenseMatrix<T> A(*this);
-     
- !   DenseMatrix<T>& C = *this;
-     
-     C.zero();
-     
-     if (!transpose)
-       {
-         /*
- ! 	std::cout << "A=" << std::endl;
- ! 	A.print();
- ! 	std::cout << "B=" << std::endl;
- ! 	B.print();
-         */
-         resize (A.m(), B.n());
-         
- ***************
- *** 118,131 ****
-         const unsigned int n_s = C.n();
-         const unsigned int p_s = A.n(); 
-   
- !       for (unsigned int i=0; i<m_s; i++)
- ! 	for (unsigned int j=0; j<n_s; j++)
- ! 	  for (unsigned int k=0; k<p_s; k++)
- ! 	    C(i,j) += A(i,k)*B(k,j);
-   
-         /*
- !       std::cout << "C=" << std::endl;
- !       C.print();
-         */
-       }
-     else
- --- 126,143 ----
-         const unsigned int n_s = C.n();
-         const unsigned int p_s = A.n(); 
-   
- !       // Do it this way because there is a
- !       // decent chance (at least for constraint matrices)
- !       // that B(k,j) = 0.
- !       for (unsigned int j=0; j<n_s; j++)
- ! 	for (unsigned int k=0; k<p_s; k++)
- ! 	  if (B(k,j) != 0.)
- ! 	    for (unsigned int i=0; i<m_s; i++)
- ! 	      C(i,j) += A(i,k)*B(k,j);
-   
-         /*
- ! 	std::cout << "C=" << std::endl;
- ! 	C.print();
-         */
-       }
-     else
- ***************
- *** 140,157 ****
-         const unsigned int n_s = C.n();
-         const unsigned int p_s = A.n(); 
-   
- !       for (unsigned int i=0; i<m_s; i++)
- ! 	for (unsigned int j=0; j<n_s; j++)
- ! 	  for (unsigned int k=0; k<p_s; k++)
- ! 	    C(i,j) += A(i,k)*B.transpose(k,j);	           
- !     };    	     
- ! };
-   
-   
-   //--------------------------------------------------------------
-   // Explicit instantiations
-   template class DenseMatrix<Complex>;
- - #ifdef USE_COMPLEX_NUMBERS
- -  /* Avoid double instantiation in case of real-only */
- -  template class DenseMatrix<Real>;
- - #endif
- --- 152,170 ----
-         const unsigned int n_s = C.n();
-         const unsigned int p_s = A.n(); 
-   
- !       // Do it this way because there is a
- !       // decent chance (at least for constraint matrices)
- !       // that B.transpose(k,j) = 0.
- !       for (unsigned int j=0; j<n_s; j++)
- ! 	for (unsigned int k=0; k<p_s; k++)
- ! 	  if (B.transpose(k,j) != 0.)
- ! 	    for (unsigned int i=0; i<m_s; i++)
- ! 	      C(i,j) += A(i,k)*B.transpose(k,j);	           
- !     }    	     
- ! }
-   
-   
-   //--------------------------------------------------------------
-   // Explicit instantiations
- + template class DenseMatrix<Real>;
-   template class DenseMatrix<Complex>;
- Index: src/numerics/petsc_interface.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/numerics/petsc_interface.C,v
- retrieving revision 1.6
- retrieving revision 1.10
- diff -c -r1.6 -r1.10
- *** src/numerics/petsc_interface.C	3 Feb 2003 03:51:50 -0000	1.6
- --- src/numerics/petsc_interface.C	20 Feb 2003 23:18:16 -0000	1.10
- ***************
- *** 1,4 ****
- ! //    $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 26,73 ****
-   
-   // C++ includes
-   
- - 
- - 
-   // Local Includes
-   #include "petsc_interface.h"
-   
-   
-   /*----------------------- functions ----------------------------------*/
- ! void PetscInterface::clear ()
-   {
- !   if (initialized)
-       {
- !       initialized = false;
-   
-         int ierr=0;
-   
- !       ierr = SLESDestroy(sles); CHKERRQ(ierr);
- !     };
- ! };
-   
-   
-   
- ! void PetscInterface::init ()
-   {
-     int ierr=0;
-     
-     // Initialize the data structures if not done so already.
- !   if (!initialized)
-       {
- !       initialized = true;
-   
-         // Create the linear solver context
- !       ierr = SLESCreate (PETSC_COMM_WORLD, &sles); CHKERRQ(ierr);
-         
-         // Create the Krylov subspace & preconditioner contexts
- !       ierr = SLESGetKSP       (sles, &ksp); CHKERRQ(ierr);
- !       ierr = SLESGetPC        (sles, &pc);  CHKERRQ(ierr);
-         
-         // Have the Krylov subspace method use our good initial guess rather than 0
-         // 2.1.0 - style
-         //ierr = KSPSetInitialGuessNonzero (ksp); CHKERRQ(ierr);
-         // 2.1.1 - style
- !       ierr = KSPSetInitialGuessNonzero (ksp, PETSC_TRUE); CHKERRQ(ierr);
-         
-         // Set the options from user-input
-         // Set runtime options, e.g.,
- --- 26,81 ----
-   
-   // C++ includes
-   
-   // Local Includes
-   #include "petsc_interface.h"
-   
-   
- + 
-   /*----------------------- functions ----------------------------------*/
- ! template <typename T>
- ! void PetscInterface<T>::clear ()
-   {
- !   if (initialized())
-       {
- !       _is_initialized = false;
-   
-         int ierr=0;
-   
- !       ierr = SLESDestroy(_sles); CHKERRQ(ierr);
-   
- +       _solver_type         = GMRES;
- +       _preconditioner_type = ILU_PRECOND;
- +     }
- + }
-   
-   
- ! 
- ! template <typename T>
- ! void PetscInterface<T>::init ()
-   {
-     int ierr=0;
-     
-     // Initialize the data structures if not done so already.
- !   if (!initialized())
-       {
- !       _is_initialized = true;
-   
-         // Create the linear solver context
- !       ierr = SLESCreate (PETSC_COMM_WORLD, &_sles); CHKERRQ(ierr);
-         
-         // Create the Krylov subspace & preconditioner contexts
- !       ierr = SLESGetKSP       (_sles, &_ksp); CHKERRQ(ierr);
- !       ierr = SLESGetPC        (_sles, &_pc);  CHKERRQ(ierr);
-         
-         // Have the Krylov subspace method use our good initial guess rather than 0
-         // 2.1.0 - style
-         //ierr = KSPSetInitialGuessNonzero (ksp); CHKERRQ(ierr);
-         // 2.1.1 - style
- !       ierr = KSPSetInitialGuessNonzero (_ksp, PETSC_TRUE); CHKERRQ(ierr);
- !       
- !       // Set user-specified  solver and preconditioner types
- !       set_petsc_solver_type();
- !       set_petsc_preconditioner_type();
-         
-         // Set the options from user-input
-         // Set runtime options, e.g.,
- ***************
- *** 76,96 ****
-         //  SLESSetFromOptions() is called _after_ any other customization
-         //  routines.
-         
- !       ierr = SLESSetFromOptions (sles);                   CHKERRQ(ierr);
- !     };
- ! };
-   
-   
-   
-   std::pair<unsigned int, Real> 
- ! PetscInterface::solve (PetscMatrix &matrix,
- ! 		       PetscVector &solution,
- ! 		       PetscVector &rhs,
- ! 		       const double tol,
- ! 		       const unsigned int m_its)
-   {
-     init ();
-     
-     int ierr=0;
-     int its=0, max_its = static_cast<int>(m_its);
-     PetscReal final_resid=0.;
- --- 84,109 ----
-         //  SLESSetFromOptions() is called _after_ any other customization
-         //  routines.
-         
- !       ierr = SLESSetFromOptions (_sles);                   CHKERRQ(ierr);
- !     }
- ! }
-   
-   
-   
- + template <typename T>
-   std::pair<unsigned int, Real> 
- ! PetscInterface<T>::solve (SparseMatrix<T> &matrix_in,
- ! 			  NumericVector<T> &solution_in,
- ! 			  NumericVector<T> &rhs_in,
- ! 			  const double tol,
- ! 			  const unsigned int m_its)
-   {
-     init ();
-     
- +   PetscMatrix<T>& matrix   = reinterpret_cast<PetscMatrix<T>&>(matrix_in);
- +   PetscVector<T>& solution = reinterpret_cast<PetscVector<T>&>(solution_in);
- +   PetscVector<T>& rhs      = reinterpret_cast<PetscVector<T>&>(rhs_in);
- +   
-     int ierr=0;
-     int its=0, max_its = static_cast<int>(m_its);
-     PetscReal final_resid=0.;
- ***************
- *** 102,132 ****
-   
-     
-     // Set operators. The input matrix works as the preconditioning matrix
- !   ierr = SLESSetOperators(sles, matrix.mat, matrix.mat,
-   			  SAME_NONZERO_PATTERN);             CHKERRQ(ierr);
-   
-     
- !   ierr = KSPSetTolerances (ksp, tol, tol,
-   			   PETSC_DEFAULT,
-   			   max_its);                         CHKERRQ(ierr);
-   
-     
-     // Solve the linear system
- !   ierr = SLESSolve (sles, rhs.vec, solution.vec, &its);      CHKERRQ(ierr);
-     
-     
- !   ierr = KSPGetResidualNorm (ksp, &final_resid);             CHKERRQ(ierr);
-     
- !   //ierr = KSPTrueMonitor (ksp, its, final_resid, PETSC_NULL); CHKERRQ(ierr);
-     
- !   std::pair<unsigned int, Real> p;
-   
- -   p.first  = static_cast<unsigned int>(its);
- -   p.second = static_cast<Real>(final_resid);
-   
- -   return p;
- - };
-   
-   
-   
- ! #endif
- --- 115,246 ----
-   
-     
-     // Set operators. The input matrix works as the preconditioning matrix
- !   ierr = SLESSetOperators(_sles, matrix.mat, matrix.mat,
-   			  SAME_NONZERO_PATTERN);             CHKERRQ(ierr);
-   
-     
- !   ierr = KSPSetTolerances (_ksp, tol, tol,
-   			   PETSC_DEFAULT,
-   			   max_its);                         CHKERRQ(ierr);
-   
-     
-     // Solve the linear system
- !   ierr = SLESSolve (_sles, rhs.vec, solution.vec, &its);     CHKERRQ(ierr);
-     
-     
- !   ierr = KSPGetResidualNorm (_ksp, &final_resid);            CHKERRQ(ierr);
-     
- !   std::pair<unsigned int, Real> p (its, final_resid);
- ! 
- !   return p;
- ! }
- ! 
- ! 
- ! 
- ! template <typename T>
- ! void PetscInterface<T>::set_petsc_solver_type()
- ! {
- !   int ierr = 0;
-     
- !   switch (_solver_type)
- !     {
- ! 
- !     case CG:
- !       ierr = KSPSetType (_ksp, (char*) KSPCG); CHKERRQ(ierr); return;
- ! 
- !     case CR:
- !       ierr = KSPSetType (_ksp, (char*) KSPCR); CHKERRQ(ierr); return;
- ! 
- !     case CGS:
- !       ierr = KSPSetType (_ksp, (char*) KSPCGS); CHKERRQ(ierr); return;
- ! 
- !     case BICG:
- !       ierr = KSPSetType (_ksp, (char*) KSPBICG); CHKERRQ(ierr); return;
- ! 
- !     case TCQMR:
- !       ierr = KSPSetType (_ksp, (char*) KSPTCQMR); CHKERRQ(ierr); return;
- ! 
- !     case TFQMR:
- !       ierr = KSPSetType (_ksp, (char*) KSPTFQMR); CHKERRQ(ierr); return;
- ! 
- !     case LSQR:
- !       ierr = KSPSetType (_ksp, (char*) KSPLSQR); CHKERRQ(ierr); return;
- ! 
- !     case BICGSTAB:
- !       ierr = KSPSetType (_ksp, (char*) KSPBCGS); CHKERRQ(ierr); return;
- ! 
- !     case MINRES:
- !       ierr = KSPSetType (_ksp, (char*) KSPMINRES); CHKERRQ(ierr); return;
- ! 
- !     case GMRES:
- !       ierr = KSPSetType (_ksp, (char*) KSPGMRES); CHKERRQ(ierr); return;
- ! 
- !     case RICHARDSON:
- !       ierr = KSPSetType (_ksp, (char*) KSPRICHARDSON); CHKERRQ(ierr); return;
- ! 
- !     case CHEBYSHEV:
- !       ierr = KSPSetType (_ksp, (char*) KSPCHEBYCHEV); CHKERRQ(ierr); return;
- ! 
- !     default:
- !       std::cerr << "ERROR:  Unsupported PETSC Solver: "
- ! 		<< _solver_type                     << std::endl
- ! 		<< "Continuing with PETSC defaults" << std::endl;
- !     }
- ! }
- ! 
- ! 
- ! 
- ! template <typename T>
- ! void PetscInterface<T>::set_petsc_preconditioner_type()
- ! {
- !   int ierr = 0;
- !  
- !   switch (_preconditioner_type)
- !     {
- !     case IDENTITY_PRECOND:
- !       ierr = PCSetType (_pc, (char*) PCNONE); CHKERRQ(ierr); return;
- ! 	
- !     case CHOLESKY_PRECOND:
- !       ierr = PCSetType (_pc, (char*) PCCHOLESKY); CHKERRQ(ierr); return;
- ! 
- !     case ICC_PRECOND:
- !       ierr = PCSetType (_pc, (char*) PCICC); CHKERRQ(ierr); return;
- ! 
- !     case ILU_PRECOND:
- !       ierr = PCSetType (_pc, (char*) PCILU); CHKERRQ(ierr); return;
- ! 
- !     case LU_PRECOND:
- !       ierr = PCSetType (_pc, (char*) PCLU); CHKERRQ(ierr); return;
- !       
- !     case ASM_PRECOND:
- !       ierr = PCSetType (_pc, (char*) PCASM); CHKERRQ(ierr); return;
- ! 
- !     case JACOBI_PRECOND:
- !       ierr = PCSetType (_pc, (char*) PCJACOBI); CHKERRQ(ierr); return;
- ! 
- !     case BLOCK_JACOBI_PRECOND:
- !       ierr = PCSetType (_pc, (char*) PCBJACOBI); CHKERRQ(ierr); return;
- ! 
- !     case SOR_PRECOND:
- !       ierr = PCSetType (_pc, (char*) PCSOR); CHKERRQ(ierr); return;
- ! 
- !     case EISENSTAT_PRECOND:
- !       ierr = PCSetType (_pc, (char*) PCEISENSTAT); CHKERRQ(ierr); return;
- ! 
- !     default:
- !       std::cerr << "ERROR:  Unsupported PETSC Preconditioner: "
- ! 		<< _preconditioner_type             << std::endl
- ! 		<< "Continuing with PETSC defaults" << std::endl;
- !     }
- ! }
- ! 
-   
-   
-   
- + //------------------------------------------------------------------
- + // Explicit instantiations
- + template class PetscInterface<Number>;
- +  
-   
-   
- ! #endif // #ifdef HAVE_PETSC
- Index: src/numerics/petsc_matrix.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/numerics/petsc_matrix.C,v
- retrieving revision 1.7
- retrieving revision 1.13
- diff -c -r1.7 -r1.13
- *** src/numerics/petsc_matrix.C	3 Feb 2003 03:51:50 -0000	1.7
- --- src/numerics/petsc_matrix.C	20 Feb 2003 23:18:16 -0000	1.13
- ***************
- *** 1,4 ****
- ! //    $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 18,57 ****
-   // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-   
-   
-   
- ! #include "mesh_common.h"
- ! 
- ! #ifdef HAVE_PETSC
- ! 
-   #include "petsc_matrix.h"
-   #include "petsc_vector.h"
- - #include <petscviewer.h>
- - 
- - 
- - 
- - 
- - 
- - PetscMatrix::PetscMatrix () :
- -   is_initialized(false)
- - {};
- - 
- - 
-   
-   
- ! PetscMatrix::~PetscMatrix ()
- ! {
- !   clear ();
- ! };
-   
-   
-   
-   
- ! void PetscMatrix::init (const unsigned int m,
- ! 			const unsigned int n,
- ! 			const unsigned int m_l,
- ! 			const unsigned int n_l,
- ! 			const unsigned int nnz,
- ! 			const unsigned int noz)
-   {
-     if ((m==0) || (n==0))
-       return;
- --- 18,45 ----
-   // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-   
-   
- + // C++ includes
-   
- ! // Local includes
-   #include "petsc_matrix.h"
-   #include "petsc_vector.h"
-   
- + #ifdef HAVE_PETSC
-   
- ! #include "dof_map.h"
-   
-   
-   
-   
- ! //-----------------------------------------------------------------------
- ! // PetscMatrix members
- ! template <typename T>
- ! void PetscMatrix<T>::init (const unsigned int m,
- ! 			   const unsigned int n,
- ! 			   const unsigned int m_l,
- ! 			   const unsigned int n_l,
- ! 			   const unsigned int nnz,
- ! 			   const unsigned int noz)
-   {
-     if ((m==0) || (n==0))
-       return;
- ***************
- *** 65,72 ****
-   	error();
-         }
-   
- !     is_initialized = true;
- !   };
-   
-     
-     int ierr=0;
- --- 53,60 ----
-   	error();
-         }
-   
- !     _is_initialized = true;
- !   }
-   
-     
-     int ierr=0;
- ***************
- *** 96,134 ****
-       }
-   
-     zero ();
- ! };
- ! 
-   
-   
-   
-   
- ! void PetscMatrix::init (const DofMap& dof_map)
-   {
-     {
-       if (initialized())
-         {
-   	std::cerr << "ERROR: Matrix already initialized!"
- ! 		  << std::endl;
- ! 	
-   	error();
-         }
-   
- !     is_initialized = true;
- !   };
-   
-     
-     int proc_id = 0;
-   
-     MPI_Comm_rank (PETSC_COMM_WORLD, &proc_id);
-     
- !   const unsigned int m   = dof_map.n_dofs();
-     const unsigned int n   = m;
- !   const unsigned int n_l = dof_map.n_dofs_on_processor(proc_id); 
-     const unsigned int m_l = n_l;
-   
-   
- !   const std::vector<unsigned int>& n_nz = dof_map.get_n_nz();
- !   const std::vector<unsigned int>& n_oz = dof_map.get_n_oz();
-   
-     // Make sure the sparsity pattern isn't empty
-     assert (n_nz.size() == n_l);
- --- 84,123 ----
-       }
-   
-     zero ();
- ! }
-   
-   
-   
-   
- ! template <typename T>
- ! void PetscMatrix<T>::init ()
-   {
- +   assert (_dof_map != NULL);
- +   
-     {
-       if (initialized())
-         {
-   	std::cerr << "ERROR: Matrix already initialized!"
- ! 		  << std::endl;	
-   	error();
-         }
-   
- !     _is_initialized = true;
- !   }
-   
-     
-     int proc_id = 0;
-   
-     MPI_Comm_rank (PETSC_COMM_WORLD, &proc_id);
-     
- !   const unsigned int m   = _dof_map->n_dofs();
-     const unsigned int n   = m;
- !   const unsigned int n_l = _dof_map->n_dofs_on_processor(proc_id); 
-     const unsigned int m_l = n_l;
-   
-   
- !   const std::vector<unsigned int>& n_nz = _dof_map->get_n_nz();
- !   const std::vector<unsigned int>& n_oz = _dof_map->get_n_oz();
-   
-     // Make sure the sparsity pattern isn't empty
-     assert (n_nz.size() == n_l);
- ***************
- *** 165,267 ****
-       }
-   
-     zero();
- ! };
- ! 
-   
-   
-   
- ! 
- ! void PetscMatrix::init (const DofMap& dof_map,
- ! 			PetscMatrix& parent_matrix)
- ! {
- !   {
- !     if (initialized())
- !       {
- ! 	std::cerr << "ERROR: Matrix already initialized!"
- ! 		  << std::endl;
- ! 	
- ! 	error();
- !       }
- ! 
- !     is_initialized = true;
- !   };
- ! 
- !   
- !   int proc_id = 0;
- ! 
- !   MPI_Comm_rank (PETSC_COMM_WORLD, &proc_id);
- !   
- !   const unsigned int m   = dof_map.n_dofs();
- !   const unsigned int m_l = dof_map.n_dofs_on_processor(proc_id); 
- !   const unsigned int n_l = m_l;
- ! 
- ! 
- !   const std::vector<unsigned int>& n_nz = dof_map.get_n_nz();
- !   const std::vector<unsigned int>& n_oz = dof_map.get_n_oz();
- ! 
- !   // Make sure the sparsity pattern isn't empty
- !   assert (n_nz.size() == n_l);
- !   assert (n_oz.size() == n_l);
- ! 
- !   // Make sure our matrix will fit inside the parent matrix
- !   {
- !     assert (n_nz.size() <= (parent_matrix.row_stop() -
- ! 			    parent_matrix.row_start()) );
- !     
- !     for (unsigned int row=0; row<n_nz.size(); row++)
- !       assert (n_nz[row] <= (parent_matrix.row_stop() -
- ! 			    parent_matrix.row_start()) );
- !   };
- ! 
- !   
- !   if (m==0)
- !     return;
- !   
- !   int ierr=0;
- !   int n_local=static_cast<int>(n_l);
- ! 
- ! 
- !   // create the index sets with which we will extract storage
- !   // from the parent matrix
- !   IS is_rows, is_cols;
- !   {
- !     std::vector<int> local_rows(m_l, 0);
- ! 
- !     unsigned int next_row = parent_matrix.row_start();
- !   
- !     for (unsigned int row=0; row<m_l; row++)
- !       local_rows[row] = next_row++;
- ! 
- !     ierr = ISCreateGeneral(PETSC_COMM_WORLD, m_l, &local_rows[0], &is_rows);
- !                                            CHKERRQ(ierr);
- ! 
- !     ierr = ISAllGather(is_rows, &is_cols); CHKERRQ(ierr);
- ! 
- !     ierr = MatGetSubMatrix(parent_matrix.mat, is_rows, is_cols,
- ! 			   n_local, MAT_INITIAL_MATRIX, &mat);
- !                                            CHKERRQ(ierr);
- ! 
- !     ierr = ISDestroy(is_rows); CHKERRQ(ierr); 
- !     ierr = ISDestroy(is_cols); CHKERRQ(ierr); 					   
- !   };
- ! 
- !   zero();
- ! };
- ! 
- ! 
- ! 
- ! void PetscMatrix::zero ()
-   {
-     assert (initialized());
-     
-     int ierr=0;
-   
-     ierr = MatZeroEntries(mat); CHKERRQ(ierr);
- ! };
-   
-   
-   
- ! void PetscMatrix::clear ()
-   {
-     int ierr=0;
-     
- --- 154,177 ----
-       }
-   
-     zero();
- ! }
-   
-   
-   
- ! template <typename T>
- ! void PetscMatrix<T>::zero ()
-   {
-     assert (initialized());
-     
-     int ierr=0;
-   
-     ierr = MatZeroEntries(mat); CHKERRQ(ierr);
- ! }
-   
-   
-   
- ! template <typename T>
- ! void PetscMatrix<T>::clear ()
-   {
-     int ierr=0;
-     
- ***************
- *** 269,281 ****
-       {
-         ierr = MatDestroy (mat); CHKERRQ(ierr);
-         
- !       is_initialized = false;
- !     };
- ! };
-   
-   
-   
- ! Real PetscMatrix::l1_norm () const
-   {
-     assert (initialized());
-     
- --- 179,192 ----
-       {
-         ierr = MatDestroy (mat); CHKERRQ(ierr);
-         
- !       _is_initialized = false;
- !     }
- ! }
-   
-   
-   
- ! template <typename T>
- ! Real PetscMatrix<T>::l1_norm () const
-   {
-     assert (initialized());
-     
- ***************
- *** 290,300 ****
-     value = static_cast<Real>(petsc_value);
-   
-     return value;
- ! };
-   
-   
-   
- ! Real PetscMatrix::linfty_norm () const
-   {
-     assert (initialized());
-     
- --- 201,212 ----
-     value = static_cast<Real>(petsc_value);
-   
-     return value;
- ! }
-   
-   
-   
- ! template <typename T>
- ! Real PetscMatrix<T>::linfty_norm () const
-   {
-     assert (initialized());
-     
- ***************
- *** 309,319 ****
-     value = static_cast<Real>(petsc_value);
-   
-     return value;
- ! };
-   
-   
-   
- ! void PetscMatrix::print_matlab (const std::string name) const
-   {
-     assert (initialized());
-     assert (closed());
- --- 221,232 ----
-     value = static_cast<Real>(petsc_value);
-   
-     return value;
- ! }
-   
-   
-   
- ! template <typename T>
- ! void PetscMatrix<T>::print_matlab (const std::string name) const
-   {
-     assert (initialized());
-     assert (closed());
- ***************
- *** 357,363 ****
-      * Destroy the viewer.
-      */
-     ierr = PetscViewerDestroy (petsc_viewer);                    CHKERRQ(ierr);
- ! };
-   
-   
- ! #endif
- --- 270,282 ----
-      * Destroy the viewer.
-      */
-     ierr = PetscViewerDestroy (petsc_viewer);                    CHKERRQ(ierr);
- ! }
- ! 
- ! 
- ! 
- ! //------------------------------------------------------------------
- ! // Explicit instantiations
- ! template class PetscMatrix<Number>;
-   
-   
- ! #endif // #ifdef HAVE_PETSC
- Index: src/numerics/petsc_vector.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/numerics/petsc_vector.C,v
- retrieving revision 1.6
- retrieving revision 1.11
- diff -c -r1.6 -r1.11
- *** src/numerics/petsc_vector.C	3 Feb 2003 03:51:50 -0000	1.6
- --- src/numerics/petsc_vector.C	20 Feb 2003 23:18:16 -0000	1.11
- ***************
- *** 1,4 ****
- ! //    $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 19,67 ****
-   
-   
-   
- - #include "mesh_common.h"
- - 
- - #ifdef HAVE_PETSC
- - 
- - 
-   // C++ includes
-   
- - 
- - 
-   // Local Includes
-   #include "petsc_vector.h"
-   
-   
-   
- ! 
- ! /*
- ! PetscVector::PetscVector (const PetscVector& v) :
- !   is_closed(false),
- !   initialized(false)
- ! {
- !   error();
- !   int ierr=0;
- !   
- !   ierr = VecDuplicate(v.vec, &vec); CHKERRQ(ierr);
- ! 
- !   ierr = VecCopy(v.vec, vec); CHKERRQ(ierr);
- ! };
- ! */
-   
-   
-   
- ! void PetscVector::init (const PetscVector& v, const bool fast)
- ! {
- !   init (v.local_size(), v.size(), fast);
-   
- !   vec = v.vec;
- ! };
-   
-   
-   
- ! Real PetscVector::l1_norm () const
-   {
- !   assert(is_closed);
-     
-     int ierr=0;
-     double value=0.;
- --- 19,50 ----
-   
-   
-   
-   // C++ includes
-   
-   // Local Includes
-   #include "petsc_vector.h"
-   
-   
-   
- ! #ifdef HAVE_PETSC
-   
-   
-   
- ! // void PetscVector<T>::init (const NumericVector<T>& v, const bool fast)
- ! // {
- ! //   error();
- !   
- ! //   init (v.local_size(), v.size(), fast);
-   
- ! //   vec = reinterpret_cast<const PetscVector<T>&>(v).vec;
- ! // }
-   
-   
-   
- ! template <typename T>
- ! Real PetscVector<T>::l1_norm () const
-   {
- !   assert(closed());
-     
-     int ierr=0;
-     double value=0.;
- ***************
- *** 69,81 ****
-     ierr = VecNorm (vec, NORM_1, &value);
-     
-     return static_cast<Real>(value);
- ! };
-   
-   
-   
- ! Real PetscVector::l2_norm () const
-   {
- !   assert(is_closed);
-     
-     int ierr=0;
-     double value=0.;
- --- 52,65 ----
-     ierr = VecNorm (vec, NORM_1, &value);
-     
-     return static_cast<Real>(value);
- ! }
-   
-   
-   
- ! template <typename T>
- ! Real PetscVector<T>::l2_norm () const
-   {
- !   assert(closed());
-     
-     int ierr=0;
-     double value=0.;
- ***************
- *** 83,96 ****
-     ierr = VecNorm (vec, NORM_2, &value);
-     
-     return static_cast<Real>(value);
- ! };
-   
-   
-   
-   
- ! Real PetscVector::linfty_norm () const
-   {
- !   assert(is_closed);
-     
-     int ierr=0;
-     double value=0.;
- --- 67,81 ----
-     ierr = VecNorm (vec, NORM_2, &value);
-     
-     return static_cast<Real>(value);
- ! }
-   
-   
-   
-   
- ! template <typename T>
- ! Real PetscVector<T>::linfty_norm () const
-   {
- !   assert(closed());
-     
-     int ierr=0;
-     double value=0.;
- ***************
- *** 98,133 ****
-     ierr = VecNorm (vec, NORM_INFINITY, &value);
-     
-     return static_cast<Real>(value);
- ! };
-   
-   
-   
-   
- ! PetscVector& PetscVector::operator += (const PetscVector& v)
-   {
- !   assert(is_closed);
-     
-     add(1., v);
-     
-     return *this;
- ! };
- ! 
-   
-   
-   
- ! PetscVector& PetscVector::operator -= (const PetscVector& v)
-   {
- !   assert(is_closed);
-     
-     add(-1., v);
-     
-     return *this;
- ! };
-   
-   
-   
- ! 
- ! void PetscVector::set (const unsigned int i, const Complex value)
-   {
-     assert(i<size());
-     
- --- 83,121 ----
-     ierr = VecNorm (vec, NORM_INFINITY, &value);
-     
-     return static_cast<Real>(value);
- ! }
-   
-   
-   
-   
- ! template <typename T>
- ! NumericVector<T>&
- ! PetscVector<T>::operator += (const NumericVector<T>& v)
-   {
- !   assert(closed());
-     
-     add(1., v);
-     
-     return *this;
- ! }
-   
-   
-   
- ! template <typename T>
- ! NumericVector<T>&
- ! PetscVector<T>::operator -= (const NumericVector<T>& v)
-   {
- !   assert(closed());
-     
-     add(-1., v);
-     
-     return *this;
- ! }
-   
-   
-   
- ! template <typename T>
- ! void PetscVector<T>::set (const unsigned int i, const T value)
-   {
-     assert(i<size());
-     
- ***************
- *** 138,149 ****
-     ierr = VecSetValues (vec, 1, &i_val, &petsc_value, INSERT_VALUES); CHKERRQ(ierr);
-   
-     return;
- ! };
- ! 
-   
-   
-   
- ! void PetscVector::add (const unsigned int i, const Complex value)
-   {
-     assert(i<size());
-     
- --- 126,137 ----
-     ierr = VecSetValues (vec, 1, &i_val, &petsc_value, INSERT_VALUES); CHKERRQ(ierr);
-   
-     return;
- ! }
-   
-   
-   
- ! template <typename T>
- ! void PetscVector<T>::add (const unsigned int i, const T value)
-   {
-     assert(i<size());
-     
- ***************
- *** 154,187 ****
-     ierr = VecSetValues (vec, 1, &i_val, &petsc_value, ADD_VALUES); CHKERRQ(ierr);
-   
-     return;
- ! };
- ! 
-   
-   
-   
- ! void PetscVector::add_vector (const std::vector<Complex>& v,
- ! 			      const std::vector<unsigned int>& dof_indices)
-   {
-     assert (!v.empty());
-     assert (v.size() == dof_indices.size());
-     
-     for (unsigned int i=0; i<v.size(); i++)
-       add (dof_indices[i], v[i]);
- ! };
-   
-   
-   
- ! void PetscVector::add_petsc_vector (const PetscVector& V,
- ! 				    const std::vector<unsigned int>& dof_indices)
-   {
-     assert (V.size() == dof_indices.size());
-   
-     for (unsigned int i=0; i<V.size(); i++)
-       add (dof_indices[i], V(i));
- ! };
-   
-   
- ! void PetscVector::add (const Complex v)
-   {
-     int ierr=0;
-     PetscScalar* values;
- --- 142,178 ----
-     ierr = VecSetValues (vec, 1, &i_val, &petsc_value, ADD_VALUES); CHKERRQ(ierr);
-   
-     return;
- ! }
-   
-   
-   
- ! template <typename T>
- ! void PetscVector<T>::add_vector (const std::vector<T>& v,
- ! 				 const std::vector<unsigned int>& dof_indices)
-   {
-     assert (!v.empty());
-     assert (v.size() == dof_indices.size());
-     
-     for (unsigned int i=0; i<v.size(); i++)
-       add (dof_indices[i], v[i]);
- ! }
-   
-   
-   
- ! template <typename T>
- ! void PetscVector<T>::add_vector (const NumericVector<T>& V,
- ! 				 const std::vector<unsigned int>& dof_indices)
-   {
-     assert (V.size() == dof_indices.size());
-   
-     for (unsigned int i=0; i<V.size(); i++)
-       add (dof_indices[i], V(i));
- ! }
-   
-   
- ! 
- ! template <typename T>
- ! void PetscVector<T>::add (const T v)
-   {
-     int ierr=0;
-     PetscScalar* values;
- ***************
- *** 193,236 ****
-         PetscScalar value = (values[ig] + static_cast<PetscScalar>(v));
-         ierr = VecRestoreArray (vec, &values); CHKERRQ(ierr);
-         ierr = VecSetValues (vec, 1, &ig, &value, INSERT_VALUES); CHKERRQ(ierr); 
- !     };
- ! };
- ! 
-   
-   
-   
- ! void PetscVector::add (const PetscVector& v)
-   {
-     add (1., v);
- ! };
- ! 
-   
-   
-   
- ! void PetscVector::add (const Complex a, const PetscVector& v)
-   {
-     int ierr=0;
-     PetscScalar petsc_a=static_cast<PetscScalar>(a);
-     
-     assert(size() == v.size());
-     
-     ierr = VecAXPY(&petsc_a, v.vec, vec); CHKERRQ(ierr);
- ! };
-   
-   
-   
- ! void PetscVector::scale (const Complex factor)
-   {
-     int ierr=0;
-     PetscScalar petsc_factor = static_cast<PetscScalar>(factor);
-     
-     ierr = VecScale(&petsc_factor, vec); CHKERRQ(ierr);
- ! };
-   
-   
-   
- ! PetscVector& 
- ! PetscVector::operator = (const Complex s)
-   {
-     int ierr=0;
-     PetscScalar petsc_s=static_cast<PetscScalar>(s);
- --- 184,231 ----
-         PetscScalar value = (values[ig] + static_cast<PetscScalar>(v));
-         ierr = VecRestoreArray (vec, &values); CHKERRQ(ierr);
-         ierr = VecSetValues (vec, 1, &ig, &value, INSERT_VALUES); CHKERRQ(ierr); 
- !     }
- ! }
-   
-   
-   
- ! template <typename T>
- ! void PetscVector<T>::add (const NumericVector<T>& v)
-   {
-     add (1., v);
- ! }
-   
-   
-   
- ! template <typename T>
- ! void PetscVector<T>::add (const T a, const NumericVector<T>& v_in)
-   {
-     int ierr=0;
-     PetscScalar petsc_a=static_cast<PetscScalar>(a);
- + 
- +   const PetscVector<T>& v = reinterpret_cast<const PetscVector<T>&>(v_in);
-     
-     assert(size() == v.size());
-     
-     ierr = VecAXPY(&petsc_a, v.vec, vec); CHKERRQ(ierr);
- ! }
-   
-   
-   
- ! template <typename T>
- ! void PetscVector<T>::scale (const T factor)
-   {
-     int ierr=0;
-     PetscScalar petsc_factor = static_cast<PetscScalar>(factor);
-     
-     ierr = VecScale(&petsc_factor, vec); CHKERRQ(ierr);
- ! }
-   
-   
-   
- ! template <typename T>
- ! NumericVector<T>& 
- ! PetscVector<T>::operator = (const T s)
-   {
-     int ierr=0;
-     PetscScalar petsc_s=static_cast<PetscScalar>(s);
- ***************
- *** 241,252 ****
-       }
-     
-     return *this;
- ! };
-   
-   
-   
- ! PetscVector&
- ! PetscVector::operator = (const PetscVector& v)
-   {
-     int ierr=0;
-   
- --- 236,268 ----
-       }
-     
-     return *this;
- ! }
- ! 
- ! 
- ! 
- ! template <typename T>
- ! NumericVector<T>&
- ! PetscVector<T>::operator = (const NumericVector<T>& v_in)
- ! {
- !   int ierr=0;
- !   
- !   const PetscVector<T>& v = reinterpret_cast<const PetscVector<T>&>(v_in);
- ! 
- !   assert (size() == v.size());
- ! 
- !   if (size() != 0)
- !     {
- !       ierr = VecCopy (v.vec, vec); CHKERRQ(ierr);
- !     }
- !   
- !   return *this;
- ! }
-   
-   
-   
- ! template <typename T>
- ! PetscVector<T>&
- ! PetscVector<T>::operator = (const PetscVector<T>& v)
-   {
-     int ierr=0;
-   
- ***************
- *** 258,269 ****
-       }
-     
-     return *this;
- ! };
-   
-   
-   
- ! PetscVector&
- ! PetscVector::operator = (const std::vector<Complex>& v)
-   {
-     const unsigned int nl   = local_size();
-     const unsigned int ioff = first_local_index();
- --- 274,286 ----
-       }
-     
-     return *this;
- ! }
-   
-   
-   
- ! template <typename T>
- ! NumericVector<T>&
- ! PetscVector<T>::operator = (const std::vector<T>& v)
-   {
-     const unsigned int nl   = local_size();
-     const unsigned int ioff = first_local_index();
- ***************
- *** 301,316 ****
-       }
-   
-     return *this;
- ! };
- ! 
-   
-   
- - void PetscVector::localize (PetscVector& v_local) const
-   
-   {
-     assert (v_local.local_size() == size());
-   
- -   
-     int ierr=0;
-     const int n  = size();
-   
- --- 318,334 ----
-       }
-   
-     return *this;
- ! }
-   
-   
-   
- + template <typename T>
- + void PetscVector<T>::localize (NumericVector<T>& v_local_in) const
-   {
- +   const PetscVector<T>& v_local = reinterpret_cast<const PetscVector<T>&>(v_local_in);
- + 
-     assert (v_local.local_size() == size());
-   
-     int ierr=0;
-     const int n  = size();
-   
- ***************
- *** 336,348 ****
-   
-     ierr = ISDestroy (is);              CHKERRQ(ierr);
-     ierr = VecScatterDestroy(scatter);  CHKERRQ(ierr);
- ! };
-   
-   
-   
- ! void PetscVector::localize (PetscVector& v_local,
- ! 			    const std::vector<unsigned int>& send_list) const
-   {
-     assert (v_local.local_size() == size());
-     assert (send_list.size() <= v_local.size());
-     
- --- 354,369 ----
-   
-     ierr = ISDestroy (is);              CHKERRQ(ierr);
-     ierr = VecScatterDestroy(scatter);  CHKERRQ(ierr);
- ! }
-   
-   
-   
- ! template <typename T>
- ! void PetscVector<T>::localize (NumericVector<T>& v_local_in,
- ! 			       const std::vector<unsigned int>& send_list) const
-   {
- +   const PetscVector<T>& v_local = reinterpret_cast<const PetscVector<T>&>(v_local_in);
- + 
-     assert (v_local.local_size() == size());
-     assert (send_list.size() <= v_local.size());
-     
- ***************
- *** 373,384 ****
-   
-     ierr = ISDestroy (is);              CHKERRQ(ierr);
-     ierr = VecScatterDestroy(scatter);  CHKERRQ(ierr);
- ! };
-   
-   
-   
- ! void PetscVector::localize (std::vector<Complex>& v_local) const
-   
-   {
-     int ierr=0;
-     const int n  = size();
- --- 394,408 ----
-   
-     ierr = ISDestroy (is);              CHKERRQ(ierr);
-     ierr = VecScatterDestroy(scatter);  CHKERRQ(ierr);
- ! }
-   
-   
-   
- ! // Full specialization for Real datatypes
- ! #ifdef USE_REAL_NUMBERS
-   
- + template <>
- + void PetscVector<Real>::localize (std::vector<Real>& v_local) const
-   {
-     int ierr=0;
-     const int n  = size();
- ***************
- *** 398,404 ****
-         ierr = VecGetArray (vec, &values); CHKERRQ(ierr);
-   
-         for (int i=0; i<n; i++)
- ! 	v_local[i] = static_cast<Complex>(values[i]);
-   
-         ierr = VecRestoreArray (vec, &values); CHKERRQ(ierr);
-       }
- --- 422,428 ----
-         ierr = VecGetArray (vec, &values); CHKERRQ(ierr);
-   
-         for (int i=0; i<n; i++)
- ! 	v_local[i] = static_cast<Real>(values[i]);
-   
-         ierr = VecRestoreArray (vec, &values); CHKERRQ(ierr);
-       }
- ***************
- *** 407,479 ****
-     else
-       {
-         unsigned int ioff = first_local_index();
- !       std::vector<Complex> local_values(n, 0.);
-   
-         {
-   	ierr = VecGetArray (vec, &values); CHKERRQ(ierr);
-   	
-   	for (int i=0; i<nl; i++)
- ! 	  local_values[i+ioff] = static_cast<Complex>(values[i]);
-   	
-   	ierr = VecRestoreArray (vec, &values); CHKERRQ(ierr);
-         }
-         
-         if (sizeof(Real) == sizeof(double))     
- !       {
- ! 	if (sizeof(Real) == sizeof(Complex))
- ! 	  MPI_Allreduce (&local_values[0], &v_local[0], n, MPI_DOUBLE, MPI_SUM,
- ! 		         PETSC_COMM_WORLD);
- ! 	else
- ! 	  MPI_Allreduce (&local_values[0], &v_local[0], n, MPIU_SCALAR, MPI_SUM,
- ! 		         PETSC_COMM_WORLD);	
- !       }
-   
-         else if (sizeof(Real) == sizeof(float))     
- ! 
- !       {
- ! 	if (sizeof(Real) == sizeof(Complex))
- !   	  MPI_Allreduce (&local_values[0], &v_local[0], n, MPI_FLOAT, MPI_SUM,
- ! 		         PETSC_COMM_WORLD);
- ! 	else
- ! 	  MPI_Allreduce (&local_values[0], &v_local[0], n, MPIU_SCALAR, MPI_SUM,
- ! 		         PETSC_COMM_WORLD);
- !       }
-   
-         else
-   	error();
-       }  
- ! };
- ! 
-   
-   
- - /*
- - ifdef USE_COMPLEX_NUMBERS
- -         {
- -           //TODO:[DD] localize may be done in a better way...
- -           // There is no MPI_COMPLEX in C. For now, use PETSc 
- - 	    
- - 	  // have an appropriately sized PetscVector handy
- - 	  PetscVector pv(n);
- - 	  
- - 	  // localize ourselves to this vector
- - 	  localize(&pv);
- - 
- - 	  // copy data to v_local
- - 	  for (int i=0; i<n; i++)
- - 	      v_local[i] =  static_cast<Complex>(pv(i));
- - 
- - 	  // note that the destructor of pv calls clear()
- - 	};
- - else
- - endif
- - */
-   
-   
- ! void PetscVector::localize_to_one (std::vector<Complex>& v_local,
- ! 				   const unsigned int pid) const
-   
-   {
- !   int ierr=0, proc_id=static_cast<int>(pid);
-     const int n  = size();
-     const int nl = local_size();
-     PetscScalar *values;
- --- 431,473 ----
-     else
-       {
-         unsigned int ioff = first_local_index();
- !       std::vector<Real> local_values(n, 0.);
-   
-         {
-   	ierr = VecGetArray (vec, &values); CHKERRQ(ierr);
-   	
-   	for (int i=0; i<nl; i++)
- ! 	  local_values[i+ioff] = static_cast<Real>(values[i]);
-   	
-   	ierr = VecRestoreArray (vec, &values); CHKERRQ(ierr);
-         }
-         
-         if (sizeof(Real) == sizeof(double))     
- ! 	MPI_Allreduce (&local_values[0], &v_local[0], n, MPI_DOUBLE, MPI_SUM,
- ! 		       PETSC_COMM_WORLD);
-   
-         else if (sizeof(Real) == sizeof(float))     
- ! 	MPI_Allreduce (&local_values[0], &v_local[0], n, MPI_FLOAT, MPI_SUM,
- ! 		       PETSC_COMM_WORLD);
-   
-         else
-   	error();
-       }  
- ! }
-   
- + #endif
-   
-   
-   
- ! // Full specialization for Complex datatypes
- ! #ifdef USE_COMPLEX_NUMBERS
-   
- + template <>
- + void PetscVector<Complex>::localize (std::vector<Complex>& v_local) const
-   {
- !   //TODO:[DD/BSK] Will this work in parallel?
- !   
- !   int ierr=0;
-     const int n  = size();
-     const int nl = local_size();
-     PetscScalar *values;
- ***************
- *** 484,491 ****
-     
-     for (int i=0; i<n; i++)
-       v_local[i] = 0.;
- ! 
- ! 
-     // only one processor
-     if (n == nl)
-       {      
- --- 478,484 ----
-     
-     for (int i=0; i<n; i++)
-       v_local[i] = 0.;
- !   
-     // only one processor
-     if (n == nl)
-       {      
- ***************
- *** 502,508 ****
-       {
-         unsigned int ioff = first_local_index();
-         std::vector<Complex> local_values(n, 0.);
- !       
-         {
-   	ierr = VecGetArray (vec, &values); CHKERRQ(ierr);
-   	
- --- 495,501 ----
-       {
-         unsigned int ioff = first_local_index();
-         std::vector<Complex> local_values(n, 0.);
- ! 
-         {
-   	ierr = VecGetArray (vec, &values); CHKERRQ(ierr);
-   	
- ***************
- *** 511,575 ****
-   	
-   	ierr = VecRestoreArray (vec, &values); CHKERRQ(ierr);
-         }
-   
-   
- -       if (sizeof(Real) == sizeof(double))     
- -       {
- - 	if (sizeof(Real) == sizeof(Complex))
- - 	  MPI_Reduce (&local_values[0], &v_local[0], n, MPI_DOUBLE, MPI_SUM,
- - 		      proc_id, PETSC_COMM_WORLD);
- - 	else
- - 	  MPI_Reduce (&local_values[0], &v_local[0], n, MPIU_SCALAR, MPI_SUM,
- - 		      proc_id, PETSC_COMM_WORLD);	
- -       }
-   
- !       else if (sizeof(Real) == sizeof(float))     
-   
-         {
- ! 	if (sizeof(Real) == sizeof(Complex))
- !   	  MPI_Reduce (&local_values[0], &v_local[0], n, MPI_FLOAT, MPI_SUM,
- ! 		      proc_id, PETSC_COMM_WORLD);
- ! 	else
- ! 	{
- ! 	  std::cout << "Error: complex<float> not supported by PETSc." << std::endl;
- ! 	  error();
- ! 	};
-         }
-   
-         else
-   	error();
-   
-       }
-   
- ! };
-   
-   
-   /*
- ! ifdef USE_COMPLEX_NUMBERS
- !         {
- !           //TODO:[DD] localize_to_one may be done in a better way...
- ! 
- ! 	  int my_proc_id = 0;
- ! 	  MPI_Comm_rank (PETSC_COMM_WORLD, &my_proc_id);
- ! 
- ! 	  if (my_proc_id == proc_id)
- ! 	    {
- ! 	      // have an appropriately sized PetscVector handy
- ! 	      PetscVector pv(n);
-   	  
- ! 	      // localize ourselves to this vector
- ! 	      localize(&pv);
-   
- ! 	      // copy data to v_local
- ! 	      for (int i=0; i<n; i++)
- ! 		  v_local[i] =  static_cast<Complex>(pv(i));
- ! 
- ! 	    };
- ! 	};
- ! else
- !         error();
- ! endif
-   */
-   
-   
- ! #endif
- --- 504,694 ----
-   	
-   	ierr = VecRestoreArray (vec, &values); CHKERRQ(ierr);
-         }
- +       
- +       MPI_Allreduce (&local_values[0], &v_local[0], n, MPIU_SCALAR, MPI_SUM,
- + 		     PETSC_COMM_WORLD);	
- +     }  
- + }
-   
- + #endif
-   
-   
- ! 
- ! /*
- !   ifdef USE_COMPLEX_NUMBERS
- !   {
- !   //TODO:[DD] localize may be done in a better way...
- !   // There is no MPI_COMPLEX in C. For now, use PETSc 
- ! 	    
- !   // have an appropriately sized PetscVector<T> handy
- !   PetscVector<T> pv(n);
- ! 	  
- !   // localize ourselves to this vector
- !   localize(&pv);
- ! 
- !   // copy data to v_local
- !   for (int i=0; i<n; i++)
- !   v_local[i] =  static_cast<T>(pv(i));
- ! 
- !   // note that the destructor of pv calls clear()
- !   }
- !   else
- !   endif
- ! */
- ! 
- ! 
- ! 
- ! 
- ! 
- ! // Full specialization for Real datatypes
- ! #ifdef USE_REAL_NUMBERS
- ! 
- ! template <>
- ! void PetscVector<Real>::localize_to_one (std::vector<Real>& v_local,
- ! 					 const unsigned int pid) const
- ! {
- !   int ierr=0;
- !   const int n  = size();
- !   const int nl = local_size();
- !   PetscScalar *values;
- ! 
- !   
- !   v_local.resize(n);
- ! 
- !   
- !   for (int i=0; i<n; i++)
- !     v_local[i] = 0.;
- !   
- !   // only one processor
- !   if (n == nl)
- !     {      
- !       ierr = VecGetArray (vec, &values); CHKERRQ(ierr);
- ! 
- !       for (int i=0; i<n; i++)
- ! 	v_local[i] = static_cast<Real>(values[i]);
- ! 
- !       ierr = VecRestoreArray (vec, &values); CHKERRQ(ierr);
- !     }
- ! 
- !   // otherwise multiple processors
- !   else
- !     {
- !       unsigned int ioff = first_local_index();
- !       std::vector<Real> local_values(n, 0.);
-   
-         {
- ! 	ierr = VecGetArray (vec, &values); CHKERRQ(ierr);
- ! 	
- ! 	for (int i=0; i<nl; i++)
- ! 	  local_values[i+ioff] = static_cast<Real>(values[i]);
- ! 	
- ! 	ierr = VecRestoreArray (vec, &values); CHKERRQ(ierr);
-         }
- +       
- +       if (sizeof(Real) == sizeof(double))     
- + 	MPI_Reduce (&local_values[0], &v_local[0], n, MPI_DOUBLE, pid, MPI_SUM,
- + 		    PETSC_COMM_WORLD);
- + 
- +       else if (sizeof(Real) == sizeof(float))     
- + 	MPI_Reduce (&local_values[0], &v_local[0], n, MPI_FLOAT, pid, MPI_SUM,
- + 		    PETSC_COMM_WORLD);
-   
-         else
-   	error();
- +     }  
- + }
- + 
- + #endif
- + 
- + 
- + // Full specialization for Complex datatypes
- + #ifdef USE_COMPLEX_NUMBERS
- + 
- + template <>
- + void PetscVector<Complex>::localize_to_one (std::vector<Complex>& v_local,
- + 					    const unsigned int pid) const
- + {
- +   //TODO:[DD/BSK] Will this work in parallel?
- +   
- +   int ierr=0;
- +   const int n  = size();
- +   const int nl = local_size();
- +   PetscScalar *values;
- + 
- +   
- +   v_local.resize(n);
-   
- +   
- +   for (int i=0; i<n; i++)
- +     v_local[i] = 0.;
- +   
- +   // only one processor
- +   if (n == nl)
- +     {      
- +       ierr = VecGetArray (vec, &values); CHKERRQ(ierr);
- + 
- +       for (int i=0; i<n; i++)
- + 	v_local[i] = static_cast<Complex>(values[i]);
- + 
- +       ierr = VecRestoreArray (vec, &values); CHKERRQ(ierr);
-       }
-   
- !   // otherwise multiple processors
- !   else
- !     {
- !       unsigned int ioff = first_local_index();
- !       std::vector<Complex> local_values(n, 0.);
- ! 
- !       {
- ! 	ierr = VecGetArray (vec, &values); CHKERRQ(ierr);
- ! 	
- ! 	for (int i=0; i<nl; i++)
- ! 	  local_values[i+ioff] = static_cast<Complex>(values[i]);
- ! 	
- ! 	ierr = VecRestoreArray (vec, &values); CHKERRQ(ierr);
- !       }
- !       
- !       MPI_Reduce (&local_values[0], &v_local[0], n, MPIU_SCALAR, pid, MPI_SUM,
- ! 		  PETSC_COMM_WORLD);	
- !     }  
- ! }
- ! 
- ! #endif
-   
-   
-   /*
- !   ifdef USE_COMPLEX_NUMBERS
- !   {
- !   //TODO:[DD] localize_to_one may be done in a better way...
- ! 
- !   int my_proc_id = 0;
- !   MPI_Comm_rank (PETSC_COMM_WORLD, &my_proc_id);
- ! 
- !   if (my_proc_id == proc_id)
- !   {
- !   // have an appropriately sized PetscVector<T> handy
- !   PetscVector<T> pv(n);
-   	  
- !   // localize ourselves to this vector
- !   localize(&pv);
- ! 
- !   // copy data to v_local
- !   for (int i=0; i<n; i++)
- !   v_local[i] =  static_cast<T>(pv(i));
-   
- !   }
- !   }
- !   else
- !   error();
- !   endif
-   */
-   
-   
- ! 
- ! //------------------------------------------------------------------
- ! // Explicit instantiations
- ! template class PetscVector<Number>;
- ! 
- ! 
- ! 
- ! #endif // #ifdef HAVE_PETSC
- Index: src/quadrature/quadrature.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/quadrature/quadrature.C,v
- retrieving revision 1.6
- retrieving revision 1.9
- diff -c -r1.6 -r1.9
- *** src/quadrature/quadrature.C	3 Feb 2003 03:51:50 -0000	1.6
- --- src/quadrature/quadrature.C	13 Feb 2003 22:56:13 -0000	1.9
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 18,24 ****
- --- 18,26 ----
-   // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-   
-   
- + // C++ includes
-   
- + // Local includes
-   #include "quadrature.h"
-   
-   void QBase::init(const ElemType t)
- ***************
- *** 51,62 ****
-   
-       default:
-         error();
- !     };
- ! 
- !   error();
- !   
- !   return;
- ! };
-   
-   
-   
- --- 53,60 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 97,108 ****
-       default:
-         error();
-   
- !     };
-   
- -   error();
-   
- !   return;
- ! };
-   
-   
-   
- --- 95,134 ----
-       default:
-         error();
-   
- !     }
- ! }
- ! 
- ! 
-   
-   
- ! void QBase::scale(std::pair<Real, Real> old_range,
- ! 		  std::pair<Real, Real> new_range)
- ! {
- !   // Make sure we are in 1D
- !   assert(_dim == 1);
- !   
- !   // Make sure that we have sane ranges 
- !   assert(new_range.second > new_range.first);
- !   assert(old_range.second > old_range.first);
- ! 
- !   // Make sure there are some points
- !   assert(_points.size() > 0);
- ! 
- !   // We're mapping from old_range -> new_range 
- !   for (unsigned int i=0; i<_points.size(); i++)
- !     {
- !       _points[i](0) = (_points[i](0) - old_range.first) *
- ! 	              (new_range.second - new_range.first) /
- ! 	              (old_range.second - old_range.first) +
- ! 	              new_range.first;
- !     }
- ! 
- !   // Compute the scale factor and scale the weights
- !   const Real scfact = (new_range.second - new_range.first) /
- !                       (old_range.second - old_range.first);
- !   for (unsigned int i=0; i<_points.size(); i++)
- !     _weights[i] *= scfact;
- ! }
-   
-   
-   
- ***************
- *** 127,138 ****
-   	_weights[qp] = q1D->w(i)*q1D->w(j);
-   	
-   	qp++;
- !       };
-   
-   }
-   
-   
-   
-   void QBase::tensor_product_hex(QBase* q1D)
-   {
-     const unsigned int n_points = q1D->n_points();
- --- 153,196 ----
-   	_weights[qp] = q1D->w(i)*q1D->w(j);
-   	
-   	qp++;
- !       }
- ! }
- ! 
-   
- + 
- + 
- + void QBase::tensor_product_tri(QBase* gauss1D, QBase* jac1D)
- + {
- +   
- +   // Both rules should be of the same order
- +   assert(gauss1D->n_points() == jac1D->n_points());
- + 
- +   // Save the number of points as a convenient variable
- +   const unsigned int n_points = gauss1D->n_points();
- +   
- +   // Both rules should be between x=0 and x=1
- +   assert(gauss1D->qp(0)(0) >= 0.0); assert(gauss1D->qp(n_points-1)(0) <= 1.0);
- +   assert(jac1D->qp(0)(0)   >= 0.0); assert(jac1D->qp(n_points-1)(0) <= 1.0);
- + 
- +   // Resize the points and weights vectors
- +   _points.resize(n_points * n_points);
- +   _weights.resize(n_points * n_points);
- + 
- +   // Compute the conical product
- +   unsigned int gp = 0;
- +   for (unsigned int i=0; i<n_points; i++)
- +     for (unsigned int j=0; j<n_points; j++)
- +       {
- + 	_points[gp](0) = jac1D->qp(j)(0);                          //s[j];
- + 	_points[gp](1) = gauss1D->qp(i)(0) * (1.-jac1D->qp(j)(0)); //r[i]*(1.-s[j]);
- + 	_weights[gp]   = gauss1D->w(i) * jac1D->w(j);              //A[i]*B[j];
- + 	gp++;
- +       }
-   }
-   
-   
-   
- + 
-   void QBase::tensor_product_hex(QBase* q1D)
-   {
-     const unsigned int n_points = q1D->n_points();
- ***************
- *** 154,160 ****
-   	  _weights[qp] = q1D->w(i) * q1D->w(j) * q1D->w(k);
-   	  
-   	  qp++;
- ! 	};
-   }
-   
-   
- --- 212,218 ----
-   	  _weights[qp] = q1D->w(i) * q1D->w(j) * q1D->w(k);
-   	  
-   	  qp++;
- ! 	}
-   }
-   
-   
- ***************
- *** 180,196 ****
-   	_weights[qp] = q2D->w(i) * q1D->w(j);
-   
-   	qp++;
- !       };
-     
-   }
-   
-   
-   
-   
-   
-   void QBase::side_rule_quad(QBase* q1D, unsigned int side)
-   {
- - 
-     const unsigned int n_points = q1D->n_points();
-     
-     _points.resize(n_points);
- --- 238,288 ----
-   	_weights[qp] = q2D->w(i) * q1D->w(j);
-   
-   	qp++;
- !       }
-     
-   }
-   
-   
-   
-   
- + void QBase::tensor_product_tet(QBase* gauss1D, QBase* jacA1D, QBase* jacB1D)
- + {
- +   here();
- + 
- +   // All rules should be of the same order
- +   assert(gauss1D->n_points() == jacA1D->n_points());
- +   assert(jacA1D->n_points()  == jacB1D->n_points());
- +   
- +   // Save the number of points as a convenient variable
- +   const unsigned int n_points = gauss1D->n_points();
- +   
- +   // All rules should be between x=0 and x=1
- +   assert(gauss1D->qp(0)(0) >= 0.0); assert(gauss1D->qp(n_points-1)(0) <= 1.0);
- +   assert(jacA1D->qp(0)(0)  >= 0.0); assert(jacA1D->qp(n_points-1)(0)  <= 1.0);
- +   assert(jacB1D->qp(0)(0)  >= 0.0); assert(jacB1D->qp(n_points-1)(0)  <= 1.0);
- + 
- +   // Resize the points and weights vectors
- +   _points.resize(n_points * n_points * n_points);
- +   _weights.resize(n_points * n_points * n_points);
- + 
- +   // Compute the conical product
- +   unsigned int gp = 0;
- +   for (unsigned int i=0; i<n_points; i++)
- +     for (unsigned int j=0; j<n_points; j++)
- +       for (unsigned int k=0; k<n_points; k++)
- +       {
- + 	_points[gp](0) = jacB1D->qp(k)(0);                                                  //t[k];
- + 	_points[gp](1) = jacA1D->qp(j)(0)  * (1.-jacB1D->qp(k)(0));                         //s[j]*(1.-t[k]);
- + 	_points[gp](2) = gauss1D->qp(i)(0) * (1.-jacA1D->qp(j)(0)) * (1.-jacB1D->qp(k)(0)); //r[i]*(1.-s[j])*(1.-t[k]);
- + 	_weights[gp]   = gauss1D->w(i)     * jacA1D->w(j)          * jacB1D->w(k);          //A[i]*B[j]*C[k];
- + 	gp++;
- +       }
- + }
- + 
- + 
-   
-   void QBase::side_rule_quad(QBase* q1D, unsigned int side)
-   {
-     const unsigned int n_points = q1D->n_points();
-     
-     _points.resize(n_points);
- ***************
- *** 252,258 ****
-       default:
-         error();
-       }
- -   
-   }
-   
-   
- --- 344,349 ----
- ***************
- *** 308,314 ****
-   
-       default:
-         error();
- !     };
-     
-   }
-   
- --- 399,405 ----
-   
-       default:
-         error();
- !     }
-     
-   }
-   
- ***************
- *** 513,519 ****
-   
-       default:
-         error();
- !     };
-     
-   }
-   
- --- 604,610 ----
-   
-       default:
-         error();
- !     }
-     
-   }
-   
- ***************
- *** 628,634 ****
-         }
-       default:
-         error();
- !     };
-   }
-   
-   
- --- 719,725 ----
-         }
-       default:
-         error();
- !     }
-   }
-   
-   
- ***************
- *** 757,767 ****
-   
-       default:
-         error();
- !     };
- !   
- ! 
- !   
- ! 
- !   
- !       
-   }
- --- 848,852 ----
-   
-       default:
-         error();
- !     }
-   }
- Index: src/quadrature/quadrature_gauss_1D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/quadrature/quadrature_gauss_1D.C,v
- retrieving revision 1.4
- retrieving revision 1.7
- diff -c -r1.4 -r1.7
- *** src/quadrature/quadrature_gauss_1D.C	24 Jan 2003 17:24:45 -0000	1.4
- --- src/quadrature/quadrature_gauss_1D.C	13 Feb 2003 22:56:13 -0000	1.7
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 19,24 ****
- --- 19,26 ----
-   
-   
-   
- + // C++ includes
- + 
-   // Local includes
-   #include "quadrature_gauss.h"
-    
- ***************
- *** 41,47 ****
-   	_weights[0]    = 2.;
-   	
-   	return;
- !       };
-       case SECOND:
-       case THIRD:
-         {
- --- 43,49 ----
-   	_weights[0]    = 2.;
-   	
-   	return;
- !       }
-       case SECOND:
-       case THIRD:
-         {
- ***************
- *** 55,61 ****
-   	_weights[1]   = _weights[0];
-   
-   	return;
- !       };
-       case FOURTH:
-       case FIFTH:
-         {
- --- 57,63 ----
-   	_weights[1]   = _weights[0];
-   
-   	return;
- !       }
-       case FOURTH:
-       case FIFTH:
-         {
- ***************
- *** 71,77 ****
-   	_weights[2]   = _weights[0];
-   
-   	return;
- !       };
-       case SIXTH:
-       case SEVENTH:
-         {
- --- 73,79 ----
-   	_weights[2]   = _weights[0];
-   
-   	return;
- !       }
-       case SIXTH:
-       case SEVENTH:
-         {
- ***************
- *** 89,95 ****
-   	_weights[3]   = _weights[0];
-   
-   	return;
- !       };
-       case EIGHTH:
-       case NINTH:
-         {
- --- 91,97 ----
-   	_weights[3]   = _weights[0];
-   
-   	return;
- !       }
-       case EIGHTH:
-       case NINTH:
-         {
- ***************
- *** 109,124 ****
-   	_weights[4]   = _weights[0];
-   
-   	return;
- !       };
-       case TENTH:
-       case ELEVENTH:
-         {
- - 	std::cerr << "Check this one!  I noticed trouble with it\n"
- - 		  << "on 1/9/2003.  -Ben"
- - 		  << std::endl;		  
- - 	error();
- - 
- - 	
-   	_points.resize (6);
-   	_weights.resize(6);
-   	      
- --- 111,120 ----
-   	_weights[4]   = _weights[0];
-   
-   	return;
- !       }
-       case TENTH:
-       case ELEVENTH:
-         {
-   	_points.resize (6);
-   	_weights.resize(6);
-   	      
- ***************
- *** 137,143 ****
-   	_weights[5]   = _weights[0];
-   
-   	return;
- !       };
-       case TWELFTH:
-       case THIRTEENTH:
-         {
- --- 133,139 ----
-   	_weights[5]   = _weights[0];
-   
-   	return;
- !       }
-       case TWELFTH:
-       case THIRTEENTH:
-         {
- ***************
- *** 152,167 ****
-   	_points[5]    = -_points[1];
-   	_points[6]    = -_points[0];
-   
- ! 	_weights[0]   = 0.129484966168869693270611432679;
- ! 	_weights[1]   = 0.219705391489276667901467771424;
- ! 	_weights[2]   = 0.381830050505118944950369775489;
- ! 	_weights[3]   = 0.417959183673469387755102040816;
-   	_weights[4]   = _weights[2];
-   	_weights[5]   = _weights[1];
-   	_weights[6]   = _weights[0];
-   
-   	return;
- !       };
-       case FOURTEENTH:
-       case FIFTEENTH:
-         {
- --- 148,163 ----
-   	_points[5]    = -_points[1];
-   	_points[6]    = -_points[0];
-   
- ! 	_weights[0]   = 0.12948496616887;
- ! 	_weights[1]   = 0.27970539148928;
- ! 	_weights[2]   = 0.38183005050512;
- ! 	_weights[3]   = 0.41795918367347;
-   	_weights[4]   = _weights[2];
-   	_weights[5]   = _weights[1];
-   	_weights[6]   = _weights[0];
-   
-   	return;
- !       }
-       case FOURTEENTH:
-       case FIFTEENTH:
-         {
- ***************
- *** 187,193 ****
-   	_weights[7]   = _weights[0];
-   
-   	return;
- !       };
-       case SIXTEENTH:
-       case SEVENTEENTH:
-         {
- --- 183,189 ----
-   	_weights[7]   = _weights[0];
-   
-   	return;
- !       }
-       case SIXTEENTH:
-       case SEVENTEENTH:
-         {
- ***************
- *** 215,221 ****
-   	_weights[8]   = _weights[0];
-   
-   	return;
- !       };
-       case EIGHTTEENTH:
-       case NINTEENTH:
-         {
- --- 211,217 ----
-   	_weights[8]   = _weights[0];
-   
-   	return;
- !       }
-       case EIGHTTEENTH:
-       case NINTEENTH:
-         {
- ***************
- *** 245,251 ****
-   	_weights[9]   = _weights[0];
-   
-   	return;
- !       };      
-       case TWENTIETH:
-       case TWENTYFIRST:
-       case TWENTYSECOND:
- --- 241,247 ----
-   	_weights[9]   = _weights[0];
-   
-   	return;
- !       }      
-       case TWENTIETH:
-       case TWENTYFIRST:
-       case TWENTYSECOND:
- ***************
- *** 281,299 ****
-   	_weights[11]  = _weights[0];
-   
-   	return;
- !       };      
-       default:
-         {
-   	std::cerr << "Quadrature rule " << _order
-   		  << " not supported!" << std::endl;
-   	      
-   	error();
- !       };
- !     };
-   
- -   error();
-   
-     return;
- ! };
-    
-   
- --- 277,295 ----
-   	_weights[11]  = _weights[0];
-   
-   	return;
- !       }      
-       default:
-         {
-   	std::cerr << "Quadrature rule " << _order
-   		  << " not supported!" << std::endl;
-   	      
-   	error();
- !       }
- !     }
- ! 
-   
-   
-     return;
- ! }
-    
-   
- Index: src/quadrature/quadrature_gauss_2D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/quadrature/quadrature_gauss_2D.C,v
- retrieving revision 1.7
- retrieving revision 1.9
- diff -c -r1.7 -r1.9
- *** src/quadrature/quadrature_gauss_2D.C	4 Feb 2003 17:02:29 -0000	1.7
- --- src/quadrature/quadrature_gauss_2D.C	13 Feb 2003 22:56:13 -0000	1.9
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 21,27 ****
-   
-   // Local includes
-   #include "quadrature_gauss.h"
- ! 
-   
-   
-   void QGauss::init_2D(const ElemType _type)
- --- 21,27 ----
-   
-   // Local includes
-   #include "quadrature_gauss.h"
- ! #include "quadrature_jacobi.h"
-   
-   
-   void QGauss::init_2D(const ElemType _type)
- ***************
- *** 167,210 ****
-   
-   	  case SIXTH:
-   	  case SEVENTH:
-   	    {
- ! 	      // This quadrature rule combines two
- ! 	      // four-point rules on the unit interval
- ! 	      // to create a 16-point, 7th-order accurate
- ! 	      // quadrature rule.  For information, see
- ! 	      // Approximate Calculation of Multiple Integrals,
- ! 	      // Stroud, A. H. p 314
- ! 	      std::vector<Real> r(4);
- ! 	      std::vector<Real> s(4);
- ! 	      std::vector<Real> A(4);
- ! 	      std::vector<Real> B(4);
- ! 
- ! 	      // Interval Quadrature points
- ! 	      // Gauss Points        // Jacobi-Gauss Points
- ! 	      r[0] = 0.0694318422;   s[0] = 0.0571041961;
- ! 	      r[1] = 0.3300094782;   s[1] = 0.2768430136;
- ! 	      r[2] = 0.6699905218;   s[2] = 0.5835904324;
- ! 	      r[3] = 0.9305681558;   s[3] = 0.8602401357;
- ! 
- ! 	      // Interval Quadrature Weights
- ! 	      // Gauss Weights       // Jacobi-Gauss Weights
- ! 	      A[0] = 0.1739274226;   B[0] = 0.1355069134;
- ! 	      A[1] = 0.3260725774;   B[1] = 0.2034645680;
- ! 	      A[2] = 0.3260725774;   B[2] = 0.1298475476;
- ! 	      A[3] = 0.1739274226;   B[3] = 0.0311809709;
- ! 
- ! 	      // Compute the conical products
- ! 	      _points.resize(16);
- ! 	      _weights.resize(16);
- ! 	      unsigned int gp = 0;
- ! 	      for (unsigned int i=0; i<4; i++)
- ! 		for (unsigned int j=0; j<4; j++)
- ! 		  {
- ! 		    _points[gp](0) = s[j];
- ! 		    _points[gp](1) = r[i]*(1.-s[j]);
- ! 		    _weights[gp]   = A[i]*B[j];
- ! 		    gp++;
- ! 		  }
-   	      return;
-   	    }
-   	    
- --- 167,210 ----
-   
-   	  case SIXTH:
-   	  case SEVENTH:
- + 	  case EIGHTH:
- + 	  case NINTH:     
- + 	  case TENTH:        
- + 	  case ELEVENTH:     
- + 	  case TWELFTH:      
- + 	  case THIRTEENTH:   
- + 	  case FOURTEENTH:   
- + 	  case FIFTEENTH:    
- + 	  case SIXTEENTH:    
- + 	  case SEVENTEENTH:  
- + 	  case EIGHTTEENTH:  
- + 	  case NINTEENTH:    
- + 	  case TWENTIETH:    
- + 	  case TWENTYFIRST:  
- + 	  case TWENTYSECOND: 
- + 	  case TWENTYTHIRD:  
-   	    {
- ! 	      // The following quadrature rules are
- ! 	      // generated as conical products.  These
- ! 	      // tend to be non-optimal (use too many
- ! 	      // points, cluster points in certain
- ! 	      // regions of the domain) but they are
- ! 	      // quite easy to automatically generate
- ! 	      // using a 1D Gauss rule on [0,1] and a
- ! 	      // 1D Jacobi-Gauss rule on [0,1].
- ! 
- ! 	      // Define the quadrature rules...
- ! 	      QGauss  gauss1D(1,_order);
- ! 	      QJacobi jac1D(1,_order,1,0);
- ! 	      
- ! 	      // The Gauss rule needs to be scaled to [0,1]
- ! 	      std::pair<Real, Real> old_range(-1,1);
- ! 	      std::pair<Real, Real> new_range(0,1);
- ! 	      gauss1D.scale(old_range,
- ! 			    new_range);
- ! 
- ! 	      // Compute the tensor product
- ! 	      tensor_product_tri(&gauss1D, &jac1D);
-   	      return;
-   	    }
-   	    
- ***************
- *** 214,220 ****
-   
-   	      error();
-   	    }
- ! 	  };
-         }
-   
-   	    
- --- 214,220 ----
-   
-   	      error();
-   	    }
- ! 	  }
-         }
-   
-   	    
- ***************
- *** 225,238 ****
-   	std::cerr << "Element type not supported!:" << _type << std::endl;
-   	error();
-         }
- !     };
-   
-     error();
-   
-     return;
-   
-   #endif
- ! };
-   
-   
-   
- --- 225,238 ----
-   	std::cerr << "Element type not supported!:" << _type << std::endl;
-   	error();
-         }
- !     }
-   
-     error();
-   
-     return;
-   
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 274,287 ****
-   	std::cerr << "Element type not supported!:" << _type << std::endl;
-   	error();
-         }
- !     };
-     
-     error();
-     
-     return;
-   
-   #endif
- ! };
-   
-   
-   
- --- 274,287 ----
-   	std::cerr << "Element type not supported!:" << _type << std::endl;
-   	error();
-         }
- !     }
-     
-     error();
-     
-     return;
-   
-   #endif
- ! }
-   
-   
-   
- Index: src/quadrature/quadrature_gauss_3D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/quadrature/quadrature_gauss_3D.C,v
- retrieving revision 1.6
- retrieving revision 1.8
- diff -c -r1.6 -r1.8
- *** src/quadrature/quadrature_gauss_3D.C	3 Feb 2003 03:51:50 -0000	1.6
- --- src/quadrature/quadrature_gauss_3D.C	13 Feb 2003 22:56:14 -0000	1.8
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 21,27 ****
-   
-   // Local includes
-   #include "quadrature_gauss.h"
- ! 
-   
-   
-   void QGauss::init_3D(const ElemType _type)
- --- 21,27 ----
-   
-   // Local includes
-   #include "quadrature_gauss.h"
- ! #include "quadrature_jacobi.h"
-   
-   
-   void QGauss::init_3D(const ElemType _type)
- ***************
- *** 318,365 ****
-   
-   	  case SIXTH:
-   	  case SEVENTH:
-   	    {
- ! 	      // This is a conical product formula (probably
- ! 	      // non-optimal) taken from Stroud, A.H. pg. 315
- ! 	      // The rule is formed using the points and weights
- ! 	      // of the 7th order quadrature rule for triangles.
- ! 	      // There are 64 points in this rule.
-   
-   	      // Points (1D)            // Weights
- ! 	      std::vector<Real> r(4);   std::vector<Real> A(4);
- ! 	      std::vector<Real> s(4);   std::vector<Real> B(4);
- ! 	      std::vector<Real> t(4);   std::vector<Real> C(4);
- ! 
- ! 	      // Fill in the interval points
- ! 	      r[0] = 0.0694318422; s[0] = 0.0571041961; t[0] = 0.0485005494;
- ! 	      r[1] = 0.3300094782; s[1] = 0.2768430136; t[1] = 0.2386007376;
- ! 	      r[2] = 0.6699905218; s[2] = 0.5835904324; t[2] = 0.5170472951;
- ! 	      r[3] = 0.9305681558; s[3] = 0.8602401357; t[3] = 0.7958514179;
- ! 
- ! 	      // Fill in the weights
- ! 	      A[0] = 0.1739274226; B[0] = 0.1355069134; C[0] = 0.1108884156;
- ! 	      A[1] = 0.3260725774; B[1] = 0.2034645680; C[1] = 0.1434587898;
- ! 	      A[2] = 0.3260725774; B[2] = 0.1298475476; C[2] = 0.0686338872;
- ! 	      A[3] = 0.1739274226; B[3] = 0.0311809709; C[3] = 0.0103522407;
- ! 
- ! 	      // Make room for the points and weights
- ! 	      _points.resize(64);
- ! 	      _weights.resize(64);
- ! 
- ! 	      // Compute the conical products
- ! 	      unsigned int gp = 0;
- ! 	      for (unsigned int i=0; i<4; i++)
- ! 		for (unsigned int j=0; j<4; j++)
- ! 		  for (unsigned int k=0; k<4; k++)
- ! 		    {
- ! 		      _points[gp](0) = t[k];
- ! 		      _points[gp](1) = s[j]*(1.-t[k]);
- ! 		      _points[gp](2) = r[i]*(1.-s[j])*(1.-t[k]);
- ! 		      _weights[gp]   = A[i]*B[j]*C[k];
- ! 		      gp++;
- ! 		    }
- ! 	      
-   	      
-   	      return;
-   	    }
-   	  default:
- --- 318,396 ----
-   
-   	  case SIXTH:
-   	  case SEVENTH:
- + 	  case EIGHTH:
- + 	  case NINTH:     
- + 	  case TENTH:        
- + 	  case ELEVENTH:     
- + 	  case TWELFTH:      
- + 	  case THIRTEENTH:   
- + 	  case FOURTEENTH:   
- + 	  case FIFTEENTH:    
- + 	  case SIXTEENTH:    
- + 	  case SEVENTEENTH:  
- + 	  case EIGHTTEENTH:  
- + 	  case NINTEENTH:    
- + 	  case TWENTIETH:    
- + 	  case TWENTYFIRST:  
- + 	  case TWENTYSECOND: 
- + 	  case TWENTYTHIRD:
-   	    {
- ! 	      // The following quadrature rules are
- ! 	      // generated as conical products.  These
- ! 	      // tend to be non-optimal (use too many
- ! 	      // points, cluster points in certain
- ! 	      // regions of the domain) but they are
- ! 	      // quite easy to automatically generate
- ! 	      // using a 1D Gauss rule on [0,1] and two 
- ! 	      // 1D Jacobi-Gauss rules on [0,1].
-   
-   	      // Points (1D)            // Weights
- ! 	      // std::vector<Real> r(4);   std::vector<Real> A(4);
- ! // 	      std::vector<Real> s(4);   std::vector<Real> B(4);
- ! // 	      std::vector<Real> t(4);   std::vector<Real> C(4);
- ! 
- ! // 	      // Fill in the interval points
- ! // 	      r[0] = 0.0694318422; s[0] = 0.0571041961; t[0] = 0.0485005494;
- ! // 	      r[1] = 0.3300094782; s[1] = 0.2768430136; t[1] = 0.2386007376;
- ! // 	      r[2] = 0.6699905218; s[2] = 0.5835904324; t[2] = 0.5170472951;
- ! // 	      r[3] = 0.9305681558; s[3] = 0.8602401357; t[3] = 0.7958514179;
- ! 
- ! // 	      // Fill in the weights
- ! // 	      A[0] = 0.1739274226; B[0] = 0.1355069134; C[0] = 0.1108884156;
- ! // 	      A[1] = 0.3260725774; B[1] = 0.2034645680; C[1] = 0.1434587898;
- ! // 	      A[2] = 0.3260725774; B[2] = 0.1298475476; C[2] = 0.0686338872;
- ! // 	      A[3] = 0.1739274226; B[3] = 0.0311809709; C[3] = 0.0103522407;
- ! 
- ! // 	      // Make room for the points and weights
- ! // 	      _points.resize(64);
- ! // 	      _weights.resize(64);
- ! 
- ! // 	      // Compute the conical products
- ! // 	      unsigned int gp = 0;
- ! // 	      for (unsigned int i=0; i<4; i++)
- ! // 		for (unsigned int j=0; j<4; j++)
- ! // 		  for (unsigned int k=0; k<4; k++)
- ! // 		    {
- ! // 		      _points[gp](0) = t[k];
- ! // 		      _points[gp](1) = s[j]*(1.-t[k]);
- ! // 		      _points[gp](2) = r[i]*(1.-s[j])*(1.-t[k]);
- ! // 		      _weights[gp]   = A[i]*B[j]*C[k];
- ! // 		      gp++;
- ! // 		    }
-   	      
- + 	      // Define the quadrature rules...
- + 	      QGauss  gauss1D(1,_order);
- + 	      QJacobi jacA1D(1,_order,1,0);
- + 	      QJacobi jacB1D(1,_order,2,0);
- + 
- + 	      // The Gauss rule needs to be scaled to [0,1]
- + 	      std::pair<Real, Real> old_range(-1,1);
- + 	      std::pair<Real, Real> new_range(0,1);
- + 	      gauss1D.scale(old_range,
- + 			    new_range);
- + 
- + 	      // Compute the tensor product
- + 	      tensor_product_tet(&gauss1D, &jacA1D, &jacB1D);
-   	      return;
-   	    }
-   	  default:
- ***************
- *** 368,374 ****
-   		    
-   	      error();
-   	    }
- ! 	  };
-         }
-   
-         
- --- 399,405 ----
-   		    
-   	      error();
-   	    }
- ! 	  }
-         }
-   
-         
- ***************
- *** 458,471 ****
-   	std::cerr << "ERROR: Unsupported type: " << _type << std::endl;
-   	error();
-         }
- !     };
-   
-     error();
-   
-     return;
-     
-   #endif
- ! };
-   
-   
-   
- --- 489,502 ----
-   	std::cerr << "ERROR: Unsupported type: " << _type << std::endl;
-   	error();
-         }
- !     }
-   
-     error();
-   
-     return;
-     
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 538,551 ****
-   	std::cerr << "ERROR: Unsupported type: " << _type << std::endl;
-   	error();
-         }
- !     };
-   
-     error();
-     
-     return;
-     
-   #endif
- ! };
-   
-   
-   
- --- 569,582 ----
-   	std::cerr << "ERROR: Unsupported type: " << _type << std::endl;
-   	error();
-         }
- !     }
-   
-     error();
-     
-     return;
-     
-   #endif
- ! }
-   
-   
-   
- Index: src/quadrature/quadrature_simpson_1D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/quadrature/quadrature_simpson_1D.C,v
- retrieving revision 1.4
- retrieving revision 1.5
- diff -c -r1.4 -r1.5
- *** src/quadrature/quadrature_simpson_1D.C	24 Jan 2003 17:24:45 -0000	1.4
- --- src/quadrature/quadrature_simpson_1D.C	13 Feb 2003 22:56:14 -0000	1.5
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 40,43 ****
-     _weights[2] = 0.333333333333333333333333333333;
-     
-     return;
- ! };
- --- 40,43 ----
-     _weights[2] = 0.333333333333333333333333333333;
-     
-     return;
- ! }
- Index: src/quadrature/quadrature_simpson_2D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/quadrature/quadrature_simpson_2D.C,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** src/quadrature/quadrature_simpson_2D.C	3 Feb 2003 03:51:50 -0000	1.5
- --- src/quadrature/quadrature_simpson_2D.C	13 Feb 2003 22:56:14 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 46,52 ****
-   	q1D.init(EDGE2);
-   	tensor_product_quad( &q1D );
-   	return;
- !       };
-   
-   	    
-         //---------------------------------------------
- --- 46,52 ----
-   	q1D.init(EDGE2);
-   	tensor_product_quad( &q1D );
-   	return;
- !       }
-   
-   	    
-         //---------------------------------------------
- ***************
- *** 92,98 ****
-    	_weights[5] = 0.125;                            // 1./8.
-   	
-   	return;
- !       };
-   
-         
-         //---------------------------------------------
- --- 92,98 ----
-    	_weights[5] = 0.125;                            // 1./8.
-   	
-   	return;
- !       }
-   
-         
-         //---------------------------------------------
- ***************
- *** 102,115 ****
-   	std::cerr << "Element type not supported!:" << _type << std::endl;
-   	error();
-         }
- !     };
-   
-     error();
-   
-     return;
-   
-   #endif
- ! };
-   
-   
-   
- --- 102,115 ----
-   	std::cerr << "Element type not supported!:" << _type << std::endl;
-   	error();
-         }
- !     }
-   
-     error();
-   
-     return;
-   
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 152,163 ****
-    	std::cerr << "Element type not supported!:" << _type << std::endl;
-    	error();
-         }
- !     };
-     
-     //  error();
-     
-     return;
-   
-   #endif
- ! };
-   
- --- 152,163 ----
-    	std::cerr << "Element type not supported!:" << _type << std::endl;
-    	error();
-         }
- !     }
-     
-     //  error();
-     
-     return;
-   
-   #endif
- ! }
-   
- Index: src/quadrature/quadrature_simpson_3D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/quadrature/quadrature_simpson_3D.C,v
- retrieving revision 1.4
- retrieving revision 1.5
- diff -c -r1.4 -r1.5
- *** src/quadrature/quadrature_simpson_3D.C	24 Jan 2003 17:24:45 -0000	1.4
- --- src/quadrature/quadrature_simpson_3D.C	13 Feb 2003 22:56:14 -0000	1.5
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 106,112 ****
-   	_weights[9] = _weights[4];
-   	
-   	return;
- !       };
-         
-         
-         
- --- 106,112 ----
-   	_weights[9] = _weights[4];
-   	
-   	return;
- !       }
-         
-         
-         
- ***************
- *** 129,135 ****
-   	tensor_product_prism(&q1D, &q2D);
-   
-   	return;
- !       };
-   
-         
-         //---------------------------------------------
- --- 129,135 ----
-   	tensor_product_prism(&q1D, &q2D);
-   
-   	return;
- !       }
-   
-         
-         //---------------------------------------------
- ***************
- *** 139,152 ****
-   	std::cerr << "ERROR: Unsupported type: " << _type << std::endl;
-   	error();
-         }
- !     };
-   
-     error();
-   
-     return;
-     
-   #endif
- ! };
-   
-   
-   
- --- 139,152 ----
-   	std::cerr << "ERROR: Unsupported type: " << _type << std::endl;
-   	error();
-         }
- !     }
-   
-     error();
-   
-     return;
-     
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 209,220 ****
-   	std::cerr << "ERROR: Unsupported type: " << _type << std::endl;
-   	error();
-         }
- !     };
-   
-     error();
-     
-     return;
-     
-   #endif
- ! };
-   
- --- 209,220 ----
-   	std::cerr << "ERROR: Unsupported type: " << _type << std::endl;
-   	error();
-         }
- !     }
-   
-     error();
-     
-     return;
-     
-   #endif
- ! }
-   
- Index: src/quadrature/quadrature_trap_1D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/quadrature/quadrature_trap_1D.C,v
- retrieving revision 1.4
- retrieving revision 1.5
- diff -c -r1.4 -r1.5
- *** src/quadrature/quadrature_trap_1D.C	24 Jan 2003 17:24:45 -0000	1.4
- --- src/quadrature/quadrature_trap_1D.C	13 Feb 2003 22:56:14 -0000	1.5
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 38,41 ****
-     _weights[1] = 1.;
-     
-     return;
- ! };
- --- 38,41 ----
-     _weights[1] = 1.;
-     
-     return;
- ! }
- Index: src/quadrature/quadrature_trap_2D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/quadrature/quadrature_trap_2D.C,v
- retrieving revision 1.4
- retrieving revision 1.5
- diff -c -r1.4 -r1.5
- *** src/quadrature/quadrature_trap_2D.C	24 Jan 2003 17:24:45 -0000	1.4
- --- src/quadrature/quadrature_trap_2D.C	13 Feb 2003 22:56:14 -0000	1.5
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 49,55 ****
-   	tensor_product_quad( &q1D );
-   	      
-   	return;
- !       };
-   
-   	    
-         //---------------------------------------------
- --- 49,55 ----
-   	tensor_product_quad( &q1D );
-   	      
-   	return;
- !       }
-   
-   	    
-         //---------------------------------------------
- ***************
- *** 75,81 ****
-   	_weights[2] = 1./6.;
-   	
-   	return;
- !       };
-   
-         
-         //---------------------------------------------
- --- 75,81 ----
-   	_weights[2] = 1./6.;
-   	
-   	return;
- !       }
-   
-         
-         //---------------------------------------------
- ***************
- *** 85,98 ****
-   	std::cerr << "Element type not supported!:" << _type << std::endl;
-   	error();
-         }
- !     };
-   
-     error();
-   
-     return;
-   
-   #endif
- ! };
-   
-   
-   
- --- 85,98 ----
-   	std::cerr << "Element type not supported!:" << _type << std::endl;
-   	error();
-         }
- !     }
-   
-     error();
-   
-     return;
-   
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 135,146 ****
-   	std::cerr << "Element type not supported!:" << _type << std::endl;
-   	error();
-         }
- !     };
-     
-     error();
-     
-     return;
-   
-   #endif
- ! };
-   
- --- 135,146 ----
-   	std::cerr << "Element type not supported!:" << _type << std::endl;
-   	error();
-         }
- !     }
-     
-     error();
-     
-     return;
-   
-   #endif
- ! }
-   
- Index: src/quadrature/quadrature_trap_3D.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/quadrature/quadrature_trap_3D.C,v
- retrieving revision 1.4
- retrieving revision 1.5
- diff -c -r1.4 -r1.5
- *** src/quadrature/quadrature_trap_3D.C	24 Jan 2003 17:24:45 -0000	1.4
- --- src/quadrature/quadrature_trap_3D.C	13 Feb 2003 22:56:14 -0000	1.5
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 84,90 ****
-   	_weights[3] = _weights[0];
-   	
-   	return;
- !       };
-         
-         
-         
- --- 84,90 ----
-   	_weights[3] = _weights[0];
-   	
-   	return;
- !       }
-         
-         
-         
- ***************
- *** 107,113 ****
-   	tensor_product_prism(&q1D, &q2D);
-   	
-   	return;
- !       };
-   
-         
-         //---------------------------------------------
- --- 107,113 ----
-   	tensor_product_prism(&q1D, &q2D);
-   	
-   	return;
- !       }
-   
-         
-         //---------------------------------------------
- ***************
- *** 117,130 ****
-   	std::cerr << "ERROR: Unsupported type: " << _type << std::endl;
-   	error();
-         }
- !     };
-   
-     error();
-   
-     return;
-     
-   #endif
- ! };
-   
-   
-   
- --- 117,130 ----
-   	std::cerr << "ERROR: Unsupported type: " << _type << std::endl;
-   	error();
-         }
- !     }
-   
-     error();
-   
-     return;
-     
-   #endif
- ! }
-   
-   
-   
- ***************
- *** 179,185 ****
-   	// the side could be either a quad or a tri.
-   	side_rule_prism(&q2D, side);
-   	return;
- !       };
-   
-   
-         
- --- 179,185 ----
-   	// the side could be either a quad or a tri.
-   	side_rule_prism(&q2D, side);
-   	return;
- !       }
-   
-   
-         
- ***************
- *** 190,201 ****
-   	std::cerr << "ERROR: Unsupported type: " << _type << std::endl;
-   	error();
-         }
- !     };
-   
-     error();
-     
-     return;
-     
-   #endif
- ! };
-   
- --- 190,201 ----
-   	std::cerr << "ERROR: Unsupported type: " << _type << std::endl;
-   	error();
-         }
- !     }
-   
-     error();
-     
-     return;
-     
-   #endif
- ! }
-   
- Index: src/utils/perf_log.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/utils/perf_log.C,v
- retrieving revision 1.5
- retrieving revision 1.10
- diff -c -r1.5 -r1.10
- *** src/utils/perf_log.C	24 Jan 2003 17:24:45 -0000	1.5
- --- src/utils/perf_log.C	14 Feb 2003 15:22:51 -0000	1.10
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 40,53 ****
-   bool PerfLog::called = false;
-   
-   
- ! PerfLog::PerfLog(std::string cn,
-   		 const bool le) :
-     class_name(cn),
- !   log_events(le)
-   {
-     if (log_events)
-       clear();
- ! };
-   
-   
-   
- --- 40,54 ----
-   bool PerfLog::called = false;
-   
-   
- ! PerfLog::PerfLog(const std::string cn,
-   		 const bool le) :
-     class_name(cn),
- !   log_events(le),
- !   total_time(0.)
-   {
-     if (log_events)
-       clear();
- ! }
-   
-   
-   
- ***************
- *** 55,61 ****
-   {
-     if (log_events)
-       print_log();
- ! };
-   
-   
-   
- --- 56,62 ----
-   {
-     if (log_events)
-       print_log();
- ! }
-   
-   
-   
- ***************
- *** 82,88 ****
-     
-         log.clear();
-       }
- ! };
-   
-   
-   std::string PerfLog::get_info_header() const
- --- 83,89 ----
-     
-         log.clear();
-       }
- ! }
-   
-   
-   std::string PerfLog::get_info_header() const
- ***************
- *** 113,119 ****
-         // Get user information
-         struct passwd* p = getpwuid(getuid());
-         out << std::endl
- ! 	  << " ---------------------------------------------------------------------" << std::endl
-   #ifdef HAVE_LOCALE
-   	  << "| Time:           " << dateStr.str()    << std::endl
-   #endif
- --- 114,120 ----
-         // Get user information
-         struct passwd* p = getpwuid(getuid());
-         out << std::endl
- ! 	  << " ----------------------------------------------------------------------------" << std::endl
-   #ifdef HAVE_LOCALE
-   	  << "| Time:           " << dateStr.str()    << std::endl
-   #endif
- ***************
- *** 123,129 ****
-   	  << "| OS Version:     " << sysInfo.version  << std::endl
-   	  << "| Machine:        " << sysInfo.machine  << std::endl
-   	  << "| Username:       " << p->pw_name       << std::endl 
- ! 	  << " ---------------------------------------------------------------------" << std::endl;
-       }
-   
-     return out.str();
- --- 124,130 ----
-   	  << "| OS Version:     " << sysInfo.version  << std::endl
-   	  << "| Machine:        " << sysInfo.machine  << std::endl
-   	  << "| Username:       " << p->pw_name       << std::endl 
- ! 	  << " ----------------------------------------------------------------------------" << std::endl;
-       }
-   
-     return out.str();
- ***************
- *** 138,157 ****
-   
-   #ifndef BROKEN_IOSTREAM
-     
- !   if ((log_events) && (!log.empty()))
-       {
-         struct timeval tstop;
-         
-         gettimeofday (&tstop, NULL);
-   	  
- !       const double elapsed_time = ((double) (tstop.tv_sec  - tstart.tv_sec)) +
- ! 	((double) (tstop.tv_usec - tstart.tv_usec))/1000000.;      
- !       
- !       out << " ---------------------------------------------------------------------"  << std::endl;
- !       out << "| " << class_name << " Performance: elapsed_time=" << elapsed_time       << std::endl;
- !       out << " ---------------------------------------------------------------------"  << std::endl;
-         out << "| ";
- !       out.width(24);
-         out << std::left << "Event";
-         
-         out.width(8);
- --- 139,159 ----
-   
-   #ifndef BROKEN_IOSTREAM
-     
- !   if (log_events && !log.empty())
-       {
-         struct timeval tstop;
-         
-         gettimeofday (&tstop, NULL);
-   	  
- !       const double elapsed_time = (static_cast<double>(tstop.tv_sec  - tstart.tv_sec) +
- ! 				   static_cast<double>(tstop.tv_usec - tstart.tv_usec)*1.e-6);
- ! 
- !       out << " ----------------------------------------------------------------------------"  << std::endl;
- !       out << "| " << class_name << " Performance: Alive time=" << elapsed_time
- ! 	  << ", Active time=" << total_time << std::endl;
- !       out << " ----------------------------------------------------------------------------"  << std::endl;
-         out << "| ";
- !       out.width(30);
-         out << std::left << "Event";
-         
-         out.width(8);
- ***************
- *** 163,175 ****
-         out.width(12);
-         out << std::left << "Avg";
-         
- !       out.width(12);
-         out << std::left << "Percent of";
-         
-         out << "|" << std::endl;
-         
-         out << "| ";
- !       out.width(24);
-         out << std::left << "";
-         
-         out.width(8);
- --- 165,177 ----
-         out.width(12);
-         out << std::left << "Avg";
-         
- !       out.width(13);
-         out << std::left << "Percent of";
-         
-         out << "|" << std::endl;
-         
-         out << "| ";
- !       out.width(30);
-         out << std::left << "";
-         
-         out.width(8);
- ***************
- *** 181,194 ****
-         out.width(12);
-         out << std::left << "Time";
-         
- !       out.width(12);
- !       out << std::left << "Total Time";
-         
-         out << "|" << std::endl;
- !       out << "|---------------------------------------------------------------------|" << std::endl
- ! 	  << "|                                                                     |" << std::endl;
-         
-         
-         for (std::map<std::string, PerfData>::const_iterator
-   	     pos = log.begin(); pos != log.end(); ++pos)
-   	{
- --- 183,200 ----
-         out.width(12);
-         out << std::left << "Time";
-         
- !       out.width(13);
- !       out << std::left << "Active Time";
-         
-         out << "|" << std::endl;
- !       out << "|----------------------------------------------------------------------------|" << std::endl
- ! 	  << "|                                                                            |" << std::endl;
-         
-         
- +       unsigned int summed_function_calls = 0;
- +       double       summed_total_time     = 0;
- +       double       summed_percentage     = 0;
- +       
-         for (std::map<std::string, PerfData>::const_iterator
-   	     pos = log.begin(); pos != log.end(); ++pos)
-   	{
- ***************
- *** 197,228 ****
-   	  // Only print the event if the count is non-zero.
-   	  if (perf_data.count != 0)
-   	    {
-   	      out << "| ";
- ! 	      out.width(24);
-   	      out << std::left << pos->first;
- ! 	      
-   	      out.width(8);
- ! 	      out << perf_data.count;
- ! 	      
-   	      out.setf(std::ios::fixed);
-   	      out.width(12);
-   	      out.precision(4);
- ! 	      out << perf_data.tot_time;
- ! 	      
- ! 	      out.width(12);
- ! 	      out.precision(4);
- ! 	      out << perf_data.tot_time/static_cast<double>(perf_data.count);
- ! 	      
-   	      out.width(12);
-   	      out.precision(2);
- ! 	      out << perf_data.tot_time/elapsed_time*100.;
-   	      
-   	      out << "|";
-   	      out << std::endl;
-   	    }
-   	}
-         
- !       out << " ---------------------------------------------------------------------" << std::endl;
-       }
-   
-   #endif
- --- 203,275 ----
-   	  // Only print the event if the count is non-zero.
-   	  if (perf_data.count != 0)
-   	    {
- + 	      const unsigned int perf_count    = perf_data.count;
- + 	      const double       perf_time     = perf_data.tot_time;
- + 	      const double       perf_avg_time = perf_time / static_cast<double>(perf_count);
- + 	      const double       perf_percent  = (total_time != 0.) ? perf_time / total_time * 100. : 0.;
- + 
- + 	      summed_function_calls += perf_count;
- + 	      summed_total_time     += perf_time;
- + 	      summed_percentage     += perf_percent;
- + 
- + 	      // Print the event name
-   	      out << "| ";
- ! 	      out.width(30);
-   	      out << std::left << pos->first;
- ! 
- ! 	      // Print the number of calls to the event
-   	      out.width(8);
- ! 	      out << perf_count;
- ! 
- ! 	      // Print the total time spent in the event
-   	      out.setf(std::ios::fixed);
-   	      out.width(12);
-   	      out.precision(4);
- ! 	      out << perf_time;
- ! 
- ! 	      // Print the average time per function call
-   	      out.width(12);
- + 	      out.precision(6);
- + 	      out << perf_avg_time;
- + 
- + 	      // Print the percentage of the time spent in the event
- + 	      out.width(13);
-   	      out.precision(2);
- ! 	      out << perf_percent;
-   	      
-   	      out << "|";
-   	      out << std::endl;
-   	    }
-   	}
-         
- !       out << " ----------------------------------------------------------------------------" << std::endl;
- !       out << "| ";
- !       out.width(30);
- !       out << std::left << "Totals:";
- ! 
- !       // Print the total number of logged function calls
- !       out.width(8);
- !       out << summed_function_calls;
- ! 
- !       // Print the total time spent in logged function calls
- !       out.setf(std::ios::fixed);
- !       out.width(12);
- !       out.precision(4);
- !       out << summed_total_time;
- ! 
- !       // Null, the average time doesn't make sense as a total
- !       out.width(12);
- !       out << "";
- ! 
- !       // Print the total percentage
- !       out.width(13);
- !       out.precision(2);
- !       out << summed_percentage;
- !       
- !       out << "|";
- !       out << std::endl;
- !       
- !       out << " ----------------------------------------------------------------------------" << std::endl;
-       }
-   
-   #endif
- ***************
- *** 240,256 ****
-     
-     if (log_events)
-       {
- !       // Possibly print machine info      
- !       if (!called)
- ! 	{
- ! 	  called = true;
- ! 	  out << get_info_header();
- ! 	}
- ! 
- !      
- !       // Print the log
-         if (!log.empty())
-   	{
-   	  out << get_perf_info();
-   	}
-       }
- --- 287,303 ----
-     
-     if (log_events)
-       {
- !       // Only print the log
- !       // if it isn't empty
-         if (!log.empty())
-   	{
- + 	  // Possibly print machine info,
- + 	  // but only do this once
- + 	  if (!called)
- + 	    {
- + 	      called = true;
- + 	      out << get_info_header();
- + 	    }	  
-   	  out << get_perf_info();
-   	}
-       }
- ***************
- *** 258,264 ****
-   #endif
-     
-     return out.str();
- ! };
-   
-   
-   
- --- 305,311 ----
-   #endif
-     
-     return out.str();
- ! }
-   
-   
-   
- ***************
- *** 266,269 ****
-   {
-     if (log_events)
-       std::cout << get_log() << std::endl;
- ! };
- --- 313,316 ----
-   {
-     if (log_events)
-       std::cout << get_log() << std::endl;
- ! }
- Index: src/utils/tree.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/utils/tree.C,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** src/utils/tree.C	24 Jan 2003 17:24:45 -0000	1.5
- --- src/utils/tree.C	13 Feb 2003 22:56:14 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 32,38 ****
-   Elem* Tree<N>::find_element(const Point& p) const
-   {
-     return root.find_element(p);
- ! };
-   
-   
-   // ------------------------------------------------------------
- --- 32,38 ----
-   Elem* Tree<N>::find_element(const Point& p) const
-   {
-     return root.find_element(p);
- ! }
-   
-   
-   // ------------------------------------------------------------
- Index: src/utils/tree_node.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/utils/tree_node.C,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** src/utils/tree_node.C	3 Feb 2003 03:51:50 -0000	1.5
- --- src/utils/tree_node.C	13 Feb 2003 22:56:14 -0000	1.6
- ***************
- *** 1,4 ****
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 57,63 ****
-       {
-         refine();
-       }
- ! };
-   
-   
-   
- --- 57,63 ----
-       {
-         refine();
-       }
- ! }
-   
-   
-   
- ***************
- *** 82,88 ****
-     // We don't need to store any nodes any more
-     node_numbers.clear(); 
-     elements.clear();
- ! };
-   
-   
-   
- --- 82,88 ----
-     // We don't need to store any nodes any more
-     node_numbers.clear(); 
-     elements.clear();
- ! }
-   
-   
-   
- ***************
- *** 90,96 ****
-   void TreeNode<N>::set_bounding_box (const std::pair<Point, Point>& bbox)
-   {
-     bounding_box = bbox;
- ! };
-   
-   
-   
- --- 90,96 ----
-   void TreeNode<N>::set_bounding_box (const std::pair<Point, Point>& bbox)
-   {
-     bounding_box = bbox;
- ! }
-   
-   
-   
- ***************
- *** 113,119 ****
-      
-   
-     return false;
- ! };
-   
-   
-   
- --- 113,119 ----
-      
-   
-     return false;
- ! }
-   
-   
-   
- ***************
- *** 211,217 ****
-   	  default:
-   	    std::cerr << "c >= N!" << std::endl;
-   	    error();
- ! 	  };
-   
-   
-   
- --- 211,217 ----
-   	  default:
-   	    std::cerr << "c >= N!" << std::endl;
-   	    error();
- ! 	  }
-   
-   
-   
- ***************
- *** 222,228 ****
-         std::cerr << "Only implemented for Octrees!" << std::endl;
-         error();
-   
- !     };
-   
-     // How did we get here?
-     error();
- --- 222,228 ----
-         std::cerr << "Only implemented for Octrees!" << std::endl;
-         error();
-   
- !     }
-   
-     // How did we get here?
-     error();
- ***************
- *** 230,236 ****
-     Point min, max;
-     
-     return std::pair<Point, Point> (min, max);
- ! };
-   
-   
-   
- --- 230,236 ----
-     Point min, max;
-     
-     return std::pair<Point, Point> (min, max);
- ! }
-   
-   
-   
- ***************
- *** 251,258 ****
-       {
-         for (unsigned int child=0; child<children.size(); child++)
-   	children[child]->print_nodes();
- !     };
- ! };
-   
-   
-   
- --- 251,258 ----
-       {
-         for (unsigned int child=0; child<children.size(); child++)
-   	children[child]->print_nodes();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 273,280 ****
-       {
-         for (unsigned int child=0; child<children.size(); child++)
-   	children[child]->print_elements();
- !     };
- ! };
-   
-   
-   
- --- 273,280 ----
-       {
-         for (unsigned int child=0; child<children.size(); child++)
-   	children[child]->print_elements();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 301,307 ****
-   	  
-   	  for (unsigned int e=0; e<nodes_to_elem[node_number].size(); e++)
-   	    elements_set.insert(mesh.elem(nodes_to_elem[node_number][e]));
- ! 	};
-   
-         // Done with the node numbers.
-         node_numbers.clear();
- --- 301,307 ----
-   	  
-   	  for (unsigned int e=0; e<nodes_to_elem[node_number].size(); e++)
-   	    elements_set.insert(mesh.elem(nodes_to_elem[node_number][e]));
- ! 	}
-   
-         // Done with the node numbers.
-         node_numbers.clear();
- ***************
- *** 322,330 ****
-       {
-         for (unsigned int child=0; child<children.size(); child++)
-   	children[child]->transform_nodes_to_elements (nodes_to_elem);
- !     };
-    
- ! };
-   
-   
-   
- --- 322,330 ----
-       {
-         for (unsigned int child=0; child<children.size(); child++)
-   	children[child]->transform_nodes_to_elements (nodes_to_elem);
- !     }
-    
- ! }
-   
-   
-   
- ***************
- *** 342,348 ****
-   
-         return sum;
-       }
- ! };
-   
-   
-   
- --- 342,348 ----
-   
-         return sum;
-       }
- ! }
-   
-   
-   
- ***************
- *** 372,378 ****
-     error();
-     
-     return NULL;
- ! };
-   
-   
-   
- --- 372,378 ----
-     error();
-     
-     return NULL;
- ! }
-   
-   
-   
- ***************
- *** 443,449 ****
-     // _no_ elements in the tree claim to contain point p.
-     
-     return NULL;     
- ! };
-   
-   
-   
- --- 443,449 ----
-     // _no_ elements in the tree claim to contain point p.
-     
-     return NULL;     
- ! }
-   
-   
-   
- Index: src/utils/xdrIO.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/utils/xdrIO.C,v
- retrieving revision 1.5
- retrieving revision 1.6
- diff -c -r1.5 -r1.6
- *** src/utils/xdrIO.C	24 Jan 2003 17:24:46 -0000	1.5
- --- src/utils/xdrIO.C	13 Feb 2003 22:56:14 -0000	1.6
- ***************
- *** 1,4 ****
- ! // "$Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $\n"
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // "$Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $\n"
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 37,43 ****
-   XdrIO::~XdrIO()
-   {
-     fini();
- ! };
-   
-   
-   
- --- 37,43 ----
-   XdrIO::~XdrIO()
-   {
-     fini();
- ! }
-   
-   
-   
- ***************
- *** 67,73 ****
-       }
-   
-     mp_fp = 0;
- ! };
-   
-   
-   
- --- 67,73 ----
-       }
-   
-     mp_fp = 0;
- ! }
-   
-   
-   
- ***************
- *** 75,81 ****
-   {
-     const Originator orig("DEAL", 3, 3);
-     return orig;
- ! };
-   
-   
-   
- --- 75,81 ----
-   {
-     const Originator orig("DEAL", 3, 3);
-     return orig;
- ! }
-   
-   
-   
- ***************
- *** 223,229 ****
-   
-   
-     
- ! };
-   
-   
-   
- --- 223,229 ----
-   
-   
-     
- ! }
-   
-   
-   
- ***************
- *** 282,288 ****
-       }
-   
-     return totalSize;
- ! };
-   
-   
-   
- --- 282,288 ----
-       }
-   
-     return totalSize;
- ! }
-   
-   
-   
- ***************
- *** 358,364 ****
-       }
-         
-     return totalSize;
- ! };
-   
-   
-   
- --- 358,364 ----
-       }
-         
-     return totalSize;
- ! }
-   
-   
-   
- ***************
- *** 612,618 ****
-       }
-     
-     return 1;
- ! };
-   
-   
-   
- --- 612,618 ----
-       }
-     
-     return 1;
- ! }
-   
-   
-   
- ***************
- *** 699,705 ****
-   	delete [] tempTitle;
-   
-   	return 0;
- !       };
-   #endif
-   
-   
- --- 699,705 ----
-   	delete [] tempTitle;
-   
-   	return 0;
- !       }
-   #endif
-   
-   
- ***************
- *** 742,752 ****
-   	  hd->setVarTitle(titles, c);
-   
-   	  delete [] titles;
- ! 	};
-   
-   	
-   	return 0;
- !       };
-   
-         
-       case (XdrIO::W_ASCII):
- --- 742,752 ----
-   	  hd->setVarTitle(titles, c);
-   
-   	  delete [] titles;
- ! 	}
-   
-   	
-   	return 0;
- !       }
-   
-         
-       case (XdrIO::W_ASCII):
- ***************
- *** 774,780 ****
-   	m_wrtVar = hd->m_wrtVar;
-   
-   	return 0;
- !       };
-   
-   
-         
- --- 774,780 ----
-   	m_wrtVar = hd->m_wrtVar;
-   
-   	return 0;
- !       }
-   
-   
-         
- ***************
- *** 782,791 ****
-         // Unknown access type
-         error();
-   
- !     };
-     
-     return 1;
- ! };
-   
-   
-   
- --- 782,791 ----
-         // Unknown access type
-         error();
-   
- !     }
-     
-     return 1;
- ! }
-   
-   
-   
- ***************
- *** 808,814 ****
-     mp_varTitle = 0;
-     
-     m_time = 0;
- ! };
-   
-   
-   
- --- 808,814 ----
-     mp_varTitle = 0;
-     
-     m_time = 0;
- ! }
-   
-   
-   
- ***************
- *** 818,824 ****
-     delete [] mp_title;
-     delete [] mp_userTitle;
-     delete [] mp_varTitle; 
- ! };
-   
-   
-   
- --- 818,824 ----
-     delete [] mp_title;
-     delete [] mp_userTitle;
-     delete [] mp_varTitle; 
- ! }
-   
-   
-   
- ***************
- *** 828,833 ****
-       len = strlen(src)+1;
-     char* temp = new char[len];
-     return (char *) memcpy(temp, (char *) src, (len)*sizeof(char));
- ! };
-   
-   #undef xdr_REAL
- --- 828,833 ----
-       len = strlen(src)+1;
-     char* temp = new char[len];
-     return (char *) memcpy(temp, (char *) src, (len)*sizeof(char));
- ! }
-   
-   #undef xdr_REAL
- Index: src/utils/xdr_cxx.C
- ===================================================================
- RCS file: /cvsroot/libmesh/libmesh/src/utils/xdr_cxx.C,v
- retrieving revision 1.6
- retrieving revision 1.7
- diff -c -r1.6 -r1.7
- *** src/utils/xdr_cxx.C	3 Feb 2003 03:51:50 -0000	1.6
- --- src/utils/xdr_cxx.C	13 Feb 2003 22:56:14 -0000	1.7
- ***************
- *** 1,4 ****
- ! // "$Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $\n"
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- --- 1,4 ----
- ! // "$Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $\n"
-   
-   // The Next Great Finite Element Library.
-   // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
- ***************
- *** 35,48 ****
-     comm_len(xdr_MAX_STRING_LENGTH)
-   {
-     open(name);
- ! };
-   
-   
-   
-   Xdr::~Xdr()
-   {
-     close();
- ! };
-   
-   
-   
- --- 35,48 ----
-     comm_len(xdr_MAX_STRING_LENGTH)
-   {
-     open(name);
- ! }
-   
-   
-   
-   Xdr::~Xdr()
-   {
-     close();
- ! }
-   
-   
-   
- ***************
- *** 93,100 ****
-         
-       default:
-         error();
- !     };  
- ! };
-   
-   
-   
- --- 93,100 ----
-         
-       default:
-         error();
- !     }  
- ! }
-   
-   
-   
- ***************
- *** 112,125 ****
-   	    xdr_destroy (xdrs);
-   	    delete xdrs;
-   	    xdrs = NULL;
- ! 	  };
-   	
-   	if (fp)
-   	  {
-   	    fflush(fp);
-   	    fclose(fp);
-   	    fp = NULL;
- ! 	  };
-   #else
-   	
-   	std::cerr << "ERROR: Functionality is not available." << std::endl
- --- 112,125 ----
-   	    xdr_destroy (xdrs);
-   	    delete xdrs;
-   	    xdrs = NULL;
- ! 	  }
-   	
-   	if (fp)
-   	  {
-   	    fflush(fp);
-   	    fclose(fp);
-   	    fp = NULL;
- ! 	  }
-   #else
-   	
-   	std::cerr << "ERROR: Functionality is not available." << std::endl
- ***************
- *** 150,157 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   
- --- 150,157 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 198,207 ****
-   
-       default:
-         error();
- !     };
-   
-     return false;
- ! };
-   
-   
-   
- --- 198,207 ----
-   
-       default:
-         error();
- !     }
-   
-     return false;
- ! }
-   
-   
-   
- ***************
- *** 252,259 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   
- --- 252,259 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 304,311 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   
- --- 304,311 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 356,363 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   
- --- 356,363 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 408,415 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   
- --- 408,415 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 460,467 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   
- --- 460,467 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 512,519 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   
- --- 512,519 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 576,583 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   
- --- 576,583 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 637,644 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   #endif // USE_COMPLEX_NUMBERS
- --- 637,644 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   #endif // USE_COMPLEX_NUMBERS
- ***************
- *** 725,731 ****
-   	  {
-   	    assert(in.good());
-   	    in >> v[i];
- ! 	  };
-   
-   	in.getline(comm, comm_len);
-   
- --- 725,731 ----
-   	  {
-   	    assert(in.good());
-   	    in >> v[i];
- ! 	  }
-   
-   	in.getline(comm, comm_len);
-   
- ***************
- *** 744,750 ****
-   	  {
-   	    assert(out.good());
-   	    out << v[i] << " ";
- ! 	  };
-   
-   	out << "\t " << comment << std::endl;
-   
- --- 744,750 ----
-   	  {
-   	    assert(out.good());
-   	    out << v[i] << " ";
- ! 	  }
-   
-   	out << "\t " << comment << std::endl;
-   
- ***************
- *** 753,760 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   
- --- 753,760 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 838,844 ****
-   	  {
-   	    assert(in.good());
-   	    in >> v[i];
- ! 	  };
-   
-   	in.getline(comm, comm_len);
-   
- --- 838,844 ----
-   	  {
-   	    assert(in.good());
-   	    in >> v[i];
- ! 	  }
-   
-   	in.getline(comm, comm_len);
-   
- ***************
- *** 857,863 ****
-   	  {
-   	    assert(out.good());
-   	    out << v[i] << " ";
- ! 	  };
-   
-   	out << "\t " << comment << std::endl;
-   
- --- 857,863 ----
-   	  {
-   	    assert(out.good());
-   	    out << v[i] << " ";
- ! 	  }
-   
-   	out << "\t " << comment << std::endl;
-   
- ***************
- *** 866,873 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   
- --- 866,873 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 951,957 ****
-   	  {
-   	    assert(in.good());
-   	    in >> v[i];
- ! 	  };
-   
-   	in.getline(comm, comm_len);
-   
- --- 951,957 ----
-   	  {
-   	    assert(in.good());
-   	    in >> v[i];
- ! 	  }
-   
-   	in.getline(comm, comm_len);
-   
- ***************
- *** 970,976 ****
-   	  {
-   	    assert(out.good());
-   	    out << v[i] << " ";
- ! 	  };
-   
-   	out << "\t " << comment << std::endl;
-   
- --- 970,976 ----
-   	  {
-   	    assert(out.good());
-   	    out << v[i] << " ";
- ! 	  }
-   
-   	out << "\t " << comment << std::endl;
-   
- ***************
- *** 979,986 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   
- --- 979,986 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 1064,1070 ****
-   	  {
-   	    assert(in.good());
-   	    in >> v[i];
- ! 	  };
-   
-   	in.getline(comm, comm_len);
-   
- --- 1064,1070 ----
-   	  {
-   	    assert(in.good());
-   	    in >> v[i];
- ! 	  }
-   
-   	in.getline(comm, comm_len);
-   
- ***************
- *** 1083,1089 ****
-   	  {
-   	    assert(out.good());
-   	    out << v[i] << " ";
- ! 	  };
-   
-   	out << "\t " << comment << std::endl;
-   
- --- 1083,1089 ----
-   	  {
-   	    assert(out.good());
-   	    out << v[i] << " ";
- ! 	  }
-   
-   	out << "\t " << comment << std::endl;
-   
- ***************
- *** 1092,1099 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   
- --- 1092,1099 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 1177,1183 ****
-   	  {
-   	    assert(in.good());
-   	    in >> v[i];
- ! 	  };
-   
-   	in.getline(comm, comm_len);
-   
- --- 1177,1183 ----
-   	  {
-   	    assert(in.good());
-   	    in >> v[i];
- ! 	  }
-   
-   	in.getline(comm, comm_len);
-   
- ***************
- *** 1202,1208 ****
-   #else
-   	    out << v[i] << " ";
-   #endif
- ! 	  };
-   
-   	out << "\t " << comment << std::endl;
-   
- --- 1202,1208 ----
-   #else
-   	    out << v[i] << " ";
-   #endif
- ! 	  }
-   
-   	out << "\t " << comment << std::endl;
-   
- ***************
- *** 1211,1218 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   
- --- 1211,1218 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 1296,1302 ****
-   	  {
-   	    assert(in.good());
-   	    in >> v[i];
- ! 	  };
-   
-   	in.getline(comm, comm_len);
-   
- --- 1296,1302 ----
-   	  {
-   	    assert(in.good());
-   	    in >> v[i];
- ! 	  }
-   
-   	in.getline(comm, comm_len);
-   
- ***************
- *** 1321,1327 ****
-   #else
-   	    out << v[i] << " ";
-   #endif
- ! 	  };
-   
-   	out << "\t " << comment << std::endl;
-   
- --- 1321,1327 ----
-   #else
-   	    out << v[i] << " ";
-   #endif
- ! 	  }
-   
-   	out << "\t " << comment << std::endl;
-   
- ***************
- *** 1330,1337 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   
- --- 1330,1337 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
- ***************
- *** 1341,1354 ****
-   void Xdr::data (std::vector< std::complex<float> >&, const char*)
-   {
-     error();
- ! };
-   
-   
-   
-   void Xdr::data (std::vector< std::complex<double> >&, const char*)
-   {
-     error();
- ! };
-   
-   // endif for USE_COMPLEX_NUMBERS
-   #endif
- --- 1341,1354 ----
-   void Xdr::data (std::vector< std::complex<float> >&, const char*)
-   {
-     error();
- ! }
-   
-   
-   
-   void Xdr::data (std::vector< std::complex<double> >&, const char*)
-   {
-     error();
- ! }
-   
-   // endif for USE_COMPLEX_NUMBERS
-   #endif
- ***************
- *** 1379,1385 ****
-   		     strlen(sptr));
-   
-   	  delete [] sptr;
- ! 	};
-   
-   #else
-   	
- --- 1379,1385 ----
-   		     strlen(sptr));
-   
-   	  delete [] sptr;
- ! 	}
-   
-   #else
-   	
- ***************
- *** 1414,1420 ****
-   	    s[c] = sptr[c];
-   	  
-   	  delete [] sptr;  
- ! 	};
-   
-   #else
-   	
- --- 1414,1420 ----
-   	    s[c] = sptr[c];
-   	  
-   	  delete [] sptr;  
- ! 	}
-   
-   #else
-   	
- ***************
- *** 1448,1454 ****
-   	      break;
-   	    
-   	    s.push_back(comm[c]);
- ! 	  };
-   
-   	return;	
-         }
- --- 1448,1454 ----
-   	      break;
-   	    
-   	    s.push_back(comm[c]);
- ! 	  }
-   
-   	return;	
-         }
- ***************
- *** 1464,1471 ****
-   
-       default:
-         error();
- !     };
- ! };
-   
-   
-   
- --- 1464,1471 ----
-   
-       default:
-         error();
- !     }
- ! }
-   
-   
-   
--- 0 ----
Index: Makefile
===================================================================
RCS file: /cvsroot/libmesh/libmesh/Makefile,v
retrieving revision 1.17
retrieving revision 1.18
diff -c -r1.17 -r1.18
*** Makefile	21 Feb 2003 21:03:50 -0000	1.17
--- Makefile	22 Feb 2003 16:01:08 -0000	1.18
***************
*** 1,4 ****
! # $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  #
  # This is the Makefile for the libMesh library and helper
  # applications.  This file is specific to the project.
--- 1,4 ----
! # $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  #
  # This is the Makefile for the libMesh library and helper
  # applications.  This file is specific to the project.
***************
*** 53,59 ****
  #
  # 
  #
! .PHONY: clean clobber distclean doc log cvsweb TODO
  
  #
  # static library
--- 53,59 ----
  #
  # 
  #
! .PHONY: clean clobber distclean doc doc_upload log cvsweb TODO
  
  #
  # static library
***************
*** 137,142 ****
--- 137,148 ----
  doc:
  	$(doxygen) ./doc/Doxyfile
  
+ #
+ # Upload the documentation to sourceforge
+ #
+ doc_upload:
+ 	$(MAKE) doc
+ 	rsync -azve ssh ./doc/html/ libmesh.sourceforge.net:/home/groups/l/li/libmesh/htdocs
  
  
  log: $(loggedfiles)
Index: doc/header.html
===================================================================
RCS file: /cvsroot/libmesh/libmesh/doc/header.html,v
retrieving revision 1.3
retrieving revision 1.4
diff -c -r1.3 -r1.4
*** doc/header.html	21 Feb 2003 22:50:11 -0000	1.3
--- doc/header.html	22 Feb 2003 16:01:08 -0000	1.4
***************
*** 13,19 ****
            }
          else if (is_nav && (is_major <= 4))
  	 {
! 	    document.write("<link href='orig.css' rel='stylesheet' type='text/css'")
  	 } 
          else
            {     
--- 13,19 ----
            }
          else if (is_nav && (is_major <= 4))
  	 {
! 	    document.write("<link href='common.css' rel='stylesheet' type='text/css'")
  	 } 
          else
            {     
Index: doc/html/common.css
===================================================================
RCS file: /cvsroot/libmesh/libmesh/doc/html/common.css,v
retrieving revision 1.1
retrieving revision 1.2
diff -c -r1.1 -r1.2
*** doc/html/common.css	21 Feb 2003 22:50:12 -0000	1.1
--- doc/html/common.css	22 Feb 2003 16:01:09 -0000	1.2
***************
*** 28,53 ****
  
  
  
! body
! {
    background            : white;
    color                 : black;
  }
  
  
  
  div.main_style {
      background: #eeeeee;
      padding-left         : 1em;
!     margin-left          : 3em;
!     margin-right         : 1em;
      padding-top          : 1em;
      padding-bottom       : 1em;
      margin-top           : 5em;
      margin-bottom        : 5em;
!     border-style: outset;
!     border-width: medium;
!     border-color: #000000;
  }
  
  
--- 28,58 ----
  
  
  
! body {
    background            : white;
    color                 : black;
  }
  
  
+ code {
+   font-size             : larger;
+ }
+ 
  
  div.main_style {
      background: #eeeeee;
      padding-left         : 1em;
!     padding-right        : 1em;
!     margin-left          : 2em;
!     margin-right         : 2em;
      padding-top          : 1em;
      padding-bottom       : 1em;
      margin-top           : 5em;
      margin-bottom        : 5em;
!     border-style         : outset;
!     border-width         : medium;
!     border-color         : #000000;
!     font-size            : larger;
  }
  
  
***************
*** 73,87 ****
      margin-left          : 0em;
      margin-right         : 1em;
      padding-left         : 1em;
!     padding-right        : 3em;
      margin-top           : 0em;
      margin-bottom        : 0em;
      padding-top          : 0em;
      padding-bottom       : 0em;
!     border-style: solid;
!     border-width: medium;
!     border-color: #000000;
!     max-width            : 800;
  }
  div.ah {
      font-weight: bold;
--- 78,91 ----
      margin-left          : 0em;
      margin-right         : 1em;
      padding-left         : 1em;
!     padding-right        : 1em;
      margin-top           : 0em;
      margin-bottom        : 0em;
      padding-top          : 0em;
      padding-bottom       : 0em;
!     border-style         : solid;
!     border-width         : medium;
!     border-color         : #000000;
  }
  div.ah {
      font-weight: bold;
***************
*** 154,160 ****
  }
  
  
! font.keyword       { color: #06dbdb }
  font.keywordtype   { color: lightgreen }
  font.keywordflow   { color: cyan }
  font.comment       { color: #800000 }
--- 158,164 ----
  }
  
  
! font.keyword       { color: teal }
  font.keywordtype   { color: lightgreen }
  font.keywordflow   { color: cyan }
  font.comment       { color: #800000 }
Index: doc/html/orig.css
===================================================================
RCS file: /cvsroot/libmesh/libmesh/doc/html/orig.css,v
retrieving revision 1.1
retrieving revision 1.2
diff -c -r1.1 -r1.2
*** doc/html/orig.css	21 Feb 2003 22:50:13 -0000	1.1
--- doc/html/orig.css	22 Feb 2003 16:01:09 -0000	1.2
***************
*** 1,23 ****
! H1 { text-align: center; }
! CAPTION { font-weight: bold }
! A.qindex {}
! A.qindexRef {}
! A.el { text-decoration: none; font-weight: bold }
! A.elRef { font-weight: bold }
! A.code { text-decoration: none; font-weight: normal; color: #4444ee }
! A.codeRef { font-weight: normal; color: #4444ee }
! A:hover { text-decoration: none; background-color: #f2f2ff }
! DL.el { margin-left: -1cm }
! DIV.fragment { width: 100%; border: none; background-color: #eeeeee }
! DIV.ah { background-color: black; font-weight: bold; color: #ffffff; margin-bottom: 3px; margin-top: 3px }
! TD.md { background-color: #f2f2ff; font-weight: bold; }
! TD.mdname1 { background-color: #f2f2ff; font-weight: bold; color: #602020; }
! TD.mdname { background-color: #f2f2ff; font-weight: bold; color: #602020; width: 600px; }
! DIV.groupHeader { margin-left: 16px; margin-top: 12px; margin-bottom: 6px; font-weight: bold }
! DIV.groupText { margin-left: 16px; font-style: italic; font-size: smaller }
! BODY { background: white }
! TD.indexkey { 
!    background-color: #eeeeff; 
     font-weight: bold; 
     padding-right  : 10px; 
     padding-top    : 2px; 
--- 1,132 ----
! a
! {
!  text-decoration: none;
!  color: navy;
! }
! a.qindex {}
! a.qindexRef {}
! a.el {
!     text-decoration: none;
!     font-weight: bold;
! }
! a.elRef {
!     font-weight: bold
! }
! a.code {
!     text-decoration: none;
!     font-weight: normal;
!     color: navy
! }
! a.codeRef {
!     font-weight: normal;
!     color: #4444ee
! }
! a:hover {
!     text-decoration: none;
!     background-color: #cccccc
! }
! 
! 
! 
! body {
!   background            : white;
!   color                 : black;
! }
! 
! 
! code {
!   font-size             : larger;
! }
! 
! 
! div.main_style {
!     background: #eeeeee;
!     padding-left         : 1em;
!     padding-right        : 1em;
!     margin-left          : 2em;
!     margin-right         : 2em;
!     padding-top          : 1em;
!     padding-bottom       : 1em;
!     margin-top           : 5em;
!     margin-bottom        : 5em;
!     border-style         : outset;
!     border-width         : medium;
!     border-color         : #000000;
!     font-size            : larger;
! }
! 
! 
! 
! 
! hq {
!     text-align: center;
! }
! 
! caption {
!     font-weight: bold
! }
! 
! dl.el {
!     margin-left: -1cm
! }
! 
! 
! 
! 
! div.fragment {
!     background: #999999;
!     margin-left          : 0em;
!     margin-right         : 1em;
!     padding-left         : 1em;
!     padding-right        : 1em;
!     margin-top           : 0em;
!     margin-bottom        : 0em;
!     padding-top          : 0em;
!     padding-bottom       : 0em;
!     border-style         : solid;
!     border-width         : medium;
!     border-color         : #000000;
! }
! div.ah {
!     font-weight: bold;
!     color: "grey";
!     margin-bottom: 3px;
!     margin-top: 3px
! }
! div.groupHeader {
!     margin-left: 16px;
!     margin-top: 12px;
!     margin-bottom: 6px;
!     font-weight: bold
! }
! div.groupText {
!     margin-left: 16px;
!     font-style: italic;
!     font-size: smaller
! }
! 
! 
! 
! 
! 
! 
! td.md {
!     background-color: transparent;
!     font-weight: bold;
! }
! td.mdname1 {
!     background-color: transparent;
!     font-weight: bold;
!     color: #602020;
! }
! td.mdname {
!     background-color: transparent;
!     font-weight: bold;
!     color: #602020;
!     width: 600px;
! }
! td.indexkey { 
!    background-color: transparent;
     font-weight: bold; 
     padding-right  : 10px; 
     padding-top    : 2px; 
***************
*** 28,35 ****
     margin-top     : 2px; 
     margin-bottom  : 2px  
  }
! TD.indexvalue { 
!    background-color: #eeeeff; 
     font-style: italic; 
     padding-right  : 10px; 
     padding-top    : 2px; 
--- 137,144 ----
     margin-top     : 2px; 
     margin-bottom  : 2px  
  }
! td.indexvalue { 
!    background-color: transparent;
     font-style: italic; 
     padding-right  : 10px; 
     padding-top    : 2px; 
***************
*** 40,49 ****
     margin-top     : 2px; 
     margin-bottom  : 2px  
  }
! FONT.keyword       { color: #008000 }
! FONT.keywordtype   { color: #604020 }
! FONT.keywordflow   { color: #e08000 }
! FONT.comment       { color: #800000 }
! FONT.preprocessor  { color: #806020 }
! FONT.stringliteral { color: #002080 }
! FONT.charliteral   { color: #008080 }
--- 149,167 ----
     margin-top     : 2px; 
     margin-bottom  : 2px  
  }
! 
! 
! p,ul,ol {
!    padding-left   : 0;
!    margin-left    : 1.5em;
!    max-width      : 700px;   
! }
! 
! 
! font.keyword       { color: teal }
! font.keywordtype   { color: lightgreen }
! font.keywordflow   { color: cyan }
! font.comment       { color: #800000 }
! font.preprocessor  { color: darkgreen }
! font.stringliteral { color: maroon }
! font.charliteral   { color: #008080 }
Index: include/fe_base.h
===================================================================
RCS file: /cvsroot/libmesh/libmesh/include/fe_base.h,v
retrieving revision 1.9
retrieving revision 1.10
diff -c -r1.9 -r1.10
*** include/fe_base.h	13 Feb 2003 22:56:07 -0000	1.9
--- include/fe_base.h	22 Feb 2003 16:01:09 -0000	1.10
***************
*** 1,4 ****
! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  
  // The Next Great Finite Element Library.
  // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
--- 1,4 ----
! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  
  // The Next Great Finite Element Library.
  // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
***************
*** 344,354 ****
     * the first derivatives of the shape functions are 
     * transformed to global coordinates, giving \p dphi,
     * \p dphidx, \p dphidy, and \p dphidz. This method
!    * should barely be re-defined in derived classes, but
     * still should be usable for children. Therefore, keep
     * it protected.
     */
!   void compute_shape_functions(const QBase* q);
    
  
    /**
--- 344,354 ----
     * the first derivatives of the shape functions are 
     * transformed to global coordinates, giving \p dphi,
     * \p dphidx, \p dphidy, and \p dphidz. This method
!    * should rarely be re-defined in derived classes, but
     * still should be usable for children. Therefore, keep
     * it protected.
     */
!   void compute_shape_functions();
    
  
    /**
Index: include/mesh_documentation.h
===================================================================
RCS file: /cvsroot/libmesh/libmesh/include/mesh_documentation.h,v
retrieving revision 1.10
retrieving revision 1.11
diff -c -r1.10 -r1.11
*** include/mesh_documentation.h	21 Feb 2003 21:03:53 -0000	1.10
--- include/mesh_documentation.h	22 Feb 2003 16:01:10 -0000	1.11
***************
*** 105,112 ****
--- 105,114 ----
    located there as compressed tar archives. You may also access the CVS
    source tree for the latest code.  You can get read-only access to the
    CVS repository via:
+   
    \verbatim
       cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/libmesh co libmesh \endverbatim
+      
    If you would like to contribute to the project you will need a
    SourceForge developer account.
   
***************
*** 153,172 ****
    Configuring the library is straightforward. The GNU
    autoconf package is used to determine site-specific configuration
    parameters. A standard build will occur after typing
    \verbatim
       ./configure
       make \endverbatim
    in the top-level project directory.  To see all the configuration
!   options type  
    \verbatim
!      ./configure --help \endverbatim     
    The configure script will find your compilers and create the \p
    Make.common file with the configuration for your site. If you want
    to use different compilers than those found by configure you can
    specify them in environment variables.  For example, the following
    will build with the \p MIPS compilers on an SGI:
    \verbatim
       CXX=CC CC=cc F77=f77 ./configure \endverbatim
    Note that the FORTRAN compiler is not actually used to compile any
    part of the library, but \p configure uses it to find out how to
    link FORTRAN libraries with C++ code.
--- 155,180 ----
    Configuring the library is straightforward. The GNU
    autoconf package is used to determine site-specific configuration
    parameters. A standard build will occur after typing
+   
    \verbatim
       ./configure
       make \endverbatim
+      
    in the top-level project directory.  To see all the configuration
!   options type
!   
    \verbatim
!      ./configure --help \endverbatim
!      
    The configure script will find your compilers and create the \p
    Make.common file with the configuration for your site. If you want
    to use different compilers than those found by configure you can
    specify them in environment variables.  For example, the following
    will build with the \p MIPS compilers on an SGI:
+   
    \verbatim
       CXX=CC CC=cc F77=f77 ./configure \endverbatim
+      
    Note that the FORTRAN compiler is not actually used to compile any
    part of the library, but \p configure uses it to find out how to
    link FORTRAN libraries with C++ code.
Index: include/reference_counter.h
===================================================================
RCS file: /cvsroot/libmesh/libmesh/include/reference_counter.h,v
retrieving revision 1.8
retrieving revision 1.9
diff -c -r1.8 -r1.9
*** include/reference_counter.h	21 Feb 2003 18:31:30 -0000	1.8
--- include/reference_counter.h	22 Feb 2003 16:01:10 -0000	1.9
***************
*** 1,4 ****
!  // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  
  // The Next Great Finite Element Library.
  // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
--- 1,4 ----
!  // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  
  // The Next Great Finite Element Library.
  // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
***************
*** 111,130 ****
     * Actually holds the data.
     */
    static Counts _counts;
! 
!   /**
!    * The number of objects.  Print the reference count
!    * information when the number returns to 0.
!    */
!   static unsigned int _n_objects;
! 
    /**
     * A flag indicating if \p print_info() has been called.
     */
    static bool _have_printed_info;
  
-   
  #endif
  };
  
  
--- 111,129 ----
     * Actually holds the data.
     */
    static Counts _counts;
!   
    /**
     * A flag indicating if \p print_info() has been called.
     */
    static bool _have_printed_info;
  
  #endif
+   
+   /**
+    * The number of objects.  Print the reference count
+    * information when the number returns to 0.
+    */
+   static unsigned int _n_objects;
  };
  
  
***************
*** 133,152 ****
  // ReferenceCounter class inline methods
  inline ReferenceCounter::ReferenceCounter()
  {
- #if defined(ENABLE_REFERENCE_COUNTING) && defined(DEBUG)
-   
    _n_objects++;
- 
- #endif
  }
  
  
  
  inline ReferenceCounter::~ReferenceCounter()
  {
- #if defined(ENABLE_REFERENCE_COUNTING) && defined(DEBUG)
-   
    _n_objects--;
  
    if (_n_objects == 0)
      print_info();
--- 132,147 ----
  // ReferenceCounter class inline methods
  inline ReferenceCounter::ReferenceCounter()
  {
    _n_objects++;
  }
  
  
  
  inline ReferenceCounter::~ReferenceCounter()
  {
    _n_objects--;
+   
+ #if defined(ENABLE_REFERENCE_COUNTING) && defined(DEBUG)  
  
    if (_n_objects == 0)
      print_info();
Index: src/base/libmesh.C
===================================================================
RCS file: /cvsroot/libmesh/libmesh/src/base/libmesh.C,v
retrieving revision 1.3
retrieving revision 1.4
diff -c -r1.3 -r1.4
*** src/base/libmesh.C	21 Feb 2003 18:31:30 -0000	1.3
--- src/base/libmesh.C	22 Feb 2003 16:01:10 -0000	1.4
***************
*** 1,4 ****
! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  
  // The Next Great Finite Element Library.
  // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
--- 1,4 ----
! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  
  // The Next Great Finite Element Library.
  // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
***************
*** 132,138 ****
    // when the last created object has been destroyed.
    // That does not good if we are leaking memory!
    ReferenceCounter::print_info ();
! 
  
    _is_initialized = false;
    
--- 132,138 ----
    // when the last created object has been destroyed.
    // That does not good if we are leaking memory!
    ReferenceCounter::print_info ();
!   
  
    _is_initialized = false;
    
***************
*** 140,144 ****
--- 140,160 ----
    // This is equivalent to return 0 if all of
    // the reference counted objects have been
    // deleted.
+ 
+   if (ReferenceCounter::n_objects() != 0)
+     {
+       std::cerr << "Memory leak detected!"
+ 		<< std::endl;
+       
+ #if !defined(ENABLE_REFERENCE_COUNTING) || defined(NDEBUG)
+ 
+       std::cerr << "Compile in DEBUG mode with --enable-reference-counting"
+ 		<< std::endl
+ 		<< "for more information"
+ 		<< std::endl;
+ #endif
+   
+     }
+   
    return static_cast<int>(ReferenceCounter::n_objects());
  }
Index: src/base/reference_counter.C
===================================================================
RCS file: /cvsroot/libmesh/libmesh/src/base/reference_counter.C,v
retrieving revision 1.7
retrieving revision 1.8
diff -c -r1.7 -r1.8
*** src/base/reference_counter.C	14 Feb 2003 15:22:47 -0000	1.7
--- src/base/reference_counter.C	22 Feb 2003 16:01:10 -0000	1.8
***************
*** 1,4 ****
! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  
  // The Next Great Finite Element Library.
  // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
--- 1,4 ----
! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  
  // The Next Great Finite Element Library.
  // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
***************
*** 32,41 ****
  #if defined(ENABLE_REFERENCE_COUNTING) && defined(DEBUG)
  
  ReferenceCounter::Counts ReferenceCounter::_counts;
- unsigned int             ReferenceCounter::_n_objects=0;
  bool                     ReferenceCounter::_have_printed_info=false;
  
  #endif
  
  
  
--- 32,42 ----
  #if defined(ENABLE_REFERENCE_COUNTING) && defined(DEBUG)
  
  ReferenceCounter::Counts ReferenceCounter::_counts;
  bool                     ReferenceCounter::_have_printed_info=false;
  
  #endif
+ 
+ unsigned int             ReferenceCounter::_n_objects=0;
  
  
  
Index: src/fe/fe.C
===================================================================
RCS file: /cvsroot/libmesh/libmesh/src/fe/fe.C,v
retrieving revision 1.11
retrieving revision 1.12
diff -c -r1.11 -r1.12
*** src/fe/fe.C	13 Feb 2003 22:56:09 -0000	1.11
--- src/fe/fe.C	22 Feb 2003 16:01:11 -0000	1.12
***************
*** 1,4 ****
! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  
  // The Next Great Finite Element Library.
  // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
--- 1,4 ----
! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  
  // The Next Great Finite Element Library.
  // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
***************
*** 62,69 ****
    compute_map (qrule, elem);
  
    // Compute the shape functions and the derivatives at all of the
!   // quadrature points.  This part is dimension-independet
!   compute_shape_functions (qrule);
  }
  
  
--- 62,69 ----
    compute_map (qrule, elem);
  
    // Compute the shape functions and the derivatives at all of the
!   // quadrature points.
!   compute_shape_functions ();
  }
  
  
Index: src/fe/fe_base.C
===================================================================
RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_base.C,v
retrieving revision 1.6
retrieving revision 1.7
diff -c -r1.6 -r1.7
*** src/fe/fe_base.C	13 Feb 2003 22:56:09 -0000	1.6
--- src/fe/fe_base.C	22 Feb 2003 16:01:11 -0000	1.7
***************
*** 1,4 ****
! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  
  // The Next Great Finite Element Library.
  // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
--- 1,4 ----
! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  
  // The Next Great Finite Element Library.
  // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
***************
*** 434,446 ****
  
  
  
! void FEBase::compute_shape_functions(const QBase* qrule)
  {
-   assert (qrule != NULL);
-   
-   const unsigned int n_qp = qrule->n_points();
- 
- 
    //-------------------------------------------------------------------------
    // Compute the shape function values (and derivatives)
    // at the Quadrature points.  Note that the actual values
--- 434,441 ----
  
  
  
! void FEBase::compute_shape_functions ()
  {
    //-------------------------------------------------------------------------
    // Compute the shape function values (and derivatives)
    // at the Quadrature points.  Note that the actual values
***************
*** 453,459 ****
      case 1:
        {
  	for (unsigned int i=0; i<phi.size(); i++)
! 	  for (unsigned int p=0; p<n_qp; p++)
  	    {
  	      // dphi/dx    = (dphi/dxi)*(dxi/dx)
  	      dphi[i][p](0) =
--- 448,454 ----
      case 1:
        {
  	for (unsigned int i=0; i<phi.size(); i++)
! 	  for (unsigned int p=0; p<phi[i].size(); p++)
  	    {
  	      // dphi/dx    = (dphi/dxi)*(dxi/dx)
  	      dphi[i][p](0) =
***************
*** 462,475 ****
  	      dphi[i][p](1) = dphidy[i][p] = 0.;
  	      dphi[i][p](2) = dphidz[i][p] = 0.;
  	    }
! 	  
! 	break;
        }
  
      case 2:
        {
  	for (unsigned int i=0; i<phi.size(); i++)
! 	  for (unsigned int p=0; p<n_qp; p++)
  	    {
  	      // dphi/dx    = (dphi/dxi)*(dxi/dx) + (dphi/deta)*(deta/dx)
  	      dphi[i][p](0) =
--- 457,471 ----
  	      dphi[i][p](1) = dphidy[i][p] = 0.;
  	      dphi[i][p](2) = dphidz[i][p] = 0.;
  	    }
! 
! 	// All done
! 	return;
        }
  
      case 2:
        {
  	for (unsigned int i=0; i<phi.size(); i++)
! 	  for (unsigned int p=0; p<phi[i].size(); p++)
  	    {
  	      // dphi/dx    = (dphi/dxi)*(dxi/dx) + (dphi/deta)*(deta/dx)
  	      dphi[i][p](0) =
***************
*** 484,496 ****
  	      dphi[i][p](2) = dphidz[i][p] = 0.;
  	    }
  
! 	break;
        }
      
      case 3:
        {
  	for (unsigned int i=0; i<phi.size(); i++)
! 	  for (unsigned int p=0; p<n_qp; p++)
  	    {
  	      // dphi/dx    = (dphi/dxi)*(dxi/dx) + (dphi/deta)*(deta/dx) + (dphi/dzeta)*(dzeta/dx);
  	      dphi[i][p](0) =
--- 480,493 ----
  	      dphi[i][p](2) = dphidz[i][p] = 0.;
  	    }
  
! 	// All done
! 	return;
        }
      
      case 3:
        {
  	for (unsigned int i=0; i<phi.size(); i++)
! 	  for (unsigned int p=0; p<phi[i].size(); p++)
  	    {
  	      // dphi/dx    = (dphi/dxi)*(dxi/dx) + (dphi/deta)*(deta/dx) + (dphi/dzeta)*(dzeta/dx);
  	      dphi[i][p](0) =
***************
*** 511,517 ****
  				dphidzeta[i][p]*dzetadz_map[p]);	      
  	    }
  
! 	break;
        }
  
      default:
--- 508,515 ----
  				dphidzeta[i][p]*dzetadz_map[p]);	      
  	    }
  
! 	// All done
! 	return;
        }
  
      default:
***************
*** 543,549 ****
  	    (xi <=  1.+eps))
  	  return true;
  
! 	break;
        }
  
        
--- 541,547 ----
  	    (xi <=  1.+eps))
  	  return true;
  
! 	return false;
        }
  
        
***************
*** 557,563 ****
  	    ((xi + eta) <= 1.+eps))
  	  return true;
  
! 	break;
        }
  
        
--- 555,561 ----
  	    ((xi + eta) <= 1.+eps))
  	  return true;
  
! 	return false;
        }
  
        
***************
*** 572,578 ****
  	    (eta <=  1.+eps))
  	  return true;
  		
! 	break;
        }
  
  
--- 570,576 ----
  	    (eta <=  1.+eps))
  	  return true;
  		
! 	return false;
        }
  
  
***************
*** 588,594 ****
  	    ((xi + eta + zeta) <= 1.+eps))
  	  return true;
  		
! 	break;
        }
  
        
--- 586,592 ----
  	    ((xi + eta + zeta) <= 1.+eps))
  	  return true;
  		
! 	return false;
        }
  
        
***************
*** 619,625 ****
  	    return true;
  	  }
  
! 	break;
        }
  
      case PRISM6:
--- 617,623 ----
  	    return true;
  	  }
  
! 	return false;
        }
  
      case PRISM6:
***************
*** 633,639 ****
  	    ((xi + eta) <= 1.+eps))
  	  return true;
  
! 	break;
        }
  
  
--- 631,637 ----
  	    ((xi + eta) <= 1.+eps))
  	  return true;
  
! 	return false;
        }
  
  
***************
*** 643,649 ****
  		  << std::endl;
  	error();
  
! 	break;
        }
        
      default:
--- 641,647 ----
  		  << std::endl;
  	error();
  
! 	return false;
        }
        
      default:
Index: src/fe/fe_boundary.C
===================================================================
RCS file: /cvsroot/libmesh/libmesh/src/fe/fe_boundary.C,v
retrieving revision 1.11
retrieving revision 1.12
diff -c -r1.11 -r1.12
*** src/fe/fe_boundary.C	17 Feb 2003 01:23:02 -0000	1.11
--- src/fe/fe_boundary.C	22 Feb 2003 16:01:11 -0000	1.12
***************
*** 1,4 ****
! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  
  // The Next Great Finite Element Library.
  // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
--- 1,4 ----
! // $Id: CHANGELOG,v 1.4 2003-02-22 16:02:59 benkirk Exp $
  
  // The Next Great Finite Element Library.
  // Copyright (C) 2002  Benjamin S. Kirk, John W. Peterson
***************
*** 113,119 ****
      elem_type = elem->type();
      init_shape_functions    (qrule, elem);
      compute_map             (qrule, elem);
!     compute_shape_functions (qrule);
    }  
    
    // copy back old data
--- 113,119 ----
      elem_type = elem->type();
      init_shape_functions    (qrule, elem);
      compute_map             (qrule, elem);
!     compute_shape_functions ();
    }  
    
    // copy back old data
Index: tests/write_reference_elements
===================================================================
RCS file: /cvsroot/libmesh/libmesh/tests/write_reference_elements,v
retrieving revision 1.1.1.1
retrieving revision 1.2
diff -c -r1.1.1.1 -r1.2
*** tests/write_reference_elements	10 Jan 2003 16:17:48 -0000	1.1.1.1
--- tests/write_reference_elements	22 Feb 2003 16:01:11 -0000	1.2
***************
*** 5,11 ****
  # to a tecplot file.
  
  # Relative location of meshtool
! meshtool=../meshtool
  
  # Relative location of reference elements
  ref_element_dir=../reference_elements
--- 5,11 ----
  # to a tecplot file.
  
  # Relative location of meshtool
! meshtool=../bin/meshtool
  
  # Relative location of reference elements
  ref_element_dir=../reference_elements
***************
*** 45,51 ****
      
      for j in ${ext[*]}; do
  	testfile=$base.$j
! 	$meshtool -d$2 -i $1 -o $testfile 2>> $log 1>/dev/null
  	diffs=`$diff $testfile $gold/$testfile`
  	if test "x$diffs" != "x"; then
  
--- 45,52 ----
      
      for j in ${ext[*]}; do
  	testfile=$base.$j
! 	$meshtool -d$2 -i $1 -o $testfile -v 2>> $log 1>/dev/null
! 	echo $diff $testfile $gold/$testfile
  	diffs=`$diff $testfile $gold/$testfile`
  	if test "x$diffs" != "x"; then
  
