
RCS file: /home/benkirk/SOURCE/mesh/src/base/dof_map.C,v
Working file: src/base/dof_map.C
head: 1.13
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 13;	selected revisions: 13
description:
----------------------------
revision 1.13
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -3
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.12
date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +136 -128
reworked the ReferenceCounter class
----------------------------
revision 1.11
date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;  lines: +1 -2
Split up quadrature classes into
separate files.  Removed the quadrature header from
dof_map.C as it did not seem to be using it.
----------------------------
revision 1.10
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +51 -28
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.9
date: 2003/01/10 22:21:25;  author: benkirk;  state: Exp;  lines: +3 -6
AutoPtr code unification
----------------------------
revision 1.8
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +3 -3
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.7
date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +11 -17
removed kdoc. added order to FEType
----------------------------
revision 1.6
date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +7 -7
added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
----------------------------
revision 1.5
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +5 -1
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +3 -3
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -5
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/base/equation_systems.C,v
Working file: src/base/equation_systems.C
head: 1.5
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 5;	selected revisions: 5
description:
----------------------------
revision 1.5
date: 2003/01/16 20:43:46;  author: peterson;  state: Exp;  lines: +1 -2
Removing more unnecessary #includes.
----------------------------
revision 1.4
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +6 -5
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.3
date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +2 -3
removed kdoc. added order to FEType
----------------------------
revision 1.2
date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +9 -4
added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/base/equation_systems_io.C,v
Working file: src/base/equation_systems_io.C
head: 1.5
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 5;	selected revisions: 5
description:
----------------------------
revision 1.5
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -4
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.4
date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +2 -2
reworked the reference counting to use C++ run-type identification
----------------------------
revision 1.3
date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +3 -3
removed kdoc. added order to FEType
----------------------------
revision 1.2
date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +48 -8
added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/base/node.C,v
Working file: src/base/node.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/base/reference_counted_object.C,v
Working file: src/base/reference_counted_object.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;
reworked the reference counting to use C++ run-type identification
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/base/reference_counter.C,v
Working file: src/base/reference_counter.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +7 -7
reworked the reference counting to use C++ run-type identification
----------------------------
revision 1.2
date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +2 -2
reworked the ReferenceCounter class
----------------------------
revision 1.1
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/base/system_data.C,v
Working file: src/base/system_data.C
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -5
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.5
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.4
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -3
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.3
date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +9 -11
removed kdoc. added order to FEType
----------------------------
revision 1.2
date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +10 -2
added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe.C,v
Working file: src/fe/fe.C
head: 1.11
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 11;	selected revisions: 11
description:
----------------------------
revision 1.11
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +90 -1
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
----------------------------
revision 1.10
date: 2003/01/16 22:06:45;  author: benkirk;  state: Exp;  lines: +4 -3
fixed a bug in the finite element mapping.  We always use Lagrange shape functions for the mapping, but in the compute_map() member there were blind calls to n_shape_functions(), which should have been FE<Dim,LAGRANGE>::n_shape_functions().  This was causing inexplicable negative jacobians when using the discontinuous monomials
----------------------------
revision 1.9
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +12 -16
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.8
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +13 -13
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.7
date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +39 -40
removed kdoc. added order to FEType
----------------------------
revision 1.6
date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +6 -6
added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
----------------------------
revision 1.5
date: 2003/01/08 23:25:24;  author: benkirk;  state: Exp;  lines: +49 -17
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +12 -12
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +14 -14
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +14 -14
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_boundary.C,v
Working file: src/fe/fe_boundary.C
head: 1.11
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 11;	selected revisions: 11
description:
----------------------------
revision 1.11
date: 2003/01/18 19:48:29;  author: peterson;  state: Exp;  lines: +2 -2
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
----------------------------
revision 1.10
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +18 -19
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.9
date: 2003/01/10 22:21:25;  author: benkirk;  state: Exp;  lines: +1 -17
AutoPtr code unification
----------------------------
revision 1.8
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +9 -9
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.7
date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +11 -10
removed kdoc. added order to FEType
----------------------------
revision 1.6
date: 2003/01/09 01:11:05;  author: benkirk;  state: Exp;  lines: +16 -0
fix for xlC
----------------------------
revision 1.5
date: 2003/01/09 01:06:48;  author: benkirk;  state: Exp;  lines: +5 -5
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +5 -5
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +5 -5
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +5 -20
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_hierarchic.C,v
Working file: src/fe/fe_hierarchic.C
head: 1.5
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 5;	selected revisions: 5
description:
----------------------------
revision 1.5
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.4
date: 2003/01/15 03:27:38;  author: peterson;  state: Exp;  lines: +1 -2
Removed quadrature.h from the fe_FEFAMILY
source files as they do not appear to use it.
----------------------------
revision 1.3
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +4 -6
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.2
date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +2 -1
removed kdoc. added order to FEType
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_hierarchic_shape_1D.C,v
Working file: src/fe/fe_hierarchic_shape_1D.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.2
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +3 -3
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_hierarchic_shape_2D.C,v
Working file: src/fe/fe_hierarchic_shape_2D.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.2
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +18 -14
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_hierarchic_shape_3D.C,v
Working file: src/fe/fe_hierarchic_shape_3D.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.2
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +18 -14
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_interface.C,v
Working file: src/fe/fe_interface.C
head: 1.7
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 7;	selected revisions: 7
description:
----------------------------
revision 1.7
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +342 -147
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
----------------------------
revision 1.6
date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +1 -3
More unnecessary #includes in source files.
----------------------------
revision 1.5
date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +12 -2
reworked the reference counting to use C++ run-type identification
----------------------------
revision 1.4
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +20 -22
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.3
date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +17 -11
removed kdoc. added order to FEType
----------------------------
revision 1.2
date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +33 -33
added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_lagrange.C,v
Working file: src/fe/fe_lagrange.C
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.3
date: 2003/01/15 03:27:38;  author: peterson;  state: Exp;  lines: +1 -2
Removed quadrature.h from the fe_FEFAMILY
source files as they do not appear to use it.
----------------------------
revision 1.2
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +5 -5
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_lagrange_shape_1D.C,v
Working file: src/fe/fe_lagrange_shape_1D.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.2
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +3 -3
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_lagrange_shape_2D.C,v
Working file: src/fe/fe_lagrange_shape_2D.C
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_lagrange_shape_3D.C,v
Working file: src/fe/fe_lagrange_shape_3D.C
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_map.C,v
Working file: src/fe/fe_map.C
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/16 22:06:45;  author: benkirk;  state: Exp;  lines: +5 -5
fixed a bug in the finite element mapping.  We always use Lagrange shape functions for the mapping, but in the compute_map() member there were blind calls to n_shape_functions(), which should have been FE<Dim,LAGRANGE>::n_shape_functions().  This was causing inexplicable negative jacobians when using the discontinuous monomials
----------------------------
revision 1.3
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.2
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +46 -51
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:58;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_monomial.C,v
Working file: src/fe/fe_monomial.C
head: 1.5
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 5;	selected revisions: 5
description:
----------------------------
revision 1.5
date: 2003/01/16 22:06:45;  author: benkirk;  state: Exp;  lines: +2 -2
fixed a bug in the finite element mapping.  We always use Lagrange shape functions for the mapping, but in the compute_map() member there were blind calls to n_shape_functions(), which should have been FE<Dim,LAGRANGE>::n_shape_functions().  This was causing inexplicable negative jacobians when using the discontinuous monomials
----------------------------
revision 1.4
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.3
date: 2003/01/15 03:27:38;  author: peterson;  state: Exp;  lines: +1 -2
Removed quadrature.h from the fe_FEFAMILY
source files as they do not appear to use it.
----------------------------
revision 1.2
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +7 -9
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_monomial_shape_1D.C,v
Working file: src/fe/fe_monomial_shape_1D.C
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/16 22:06:45;  author: benkirk;  state: Exp;  lines: +16 -16
fixed a bug in the finite element mapping.  We always use Lagrange shape functions for the mapping, but in the compute_map() member there were blind calls to n_shape_functions(), which should have been FE<Dim,LAGRANGE>::n_shape_functions().  This was causing inexplicable negative jacobians when using the discontinuous monomials
----------------------------
revision 1.3
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.2
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +3 -3
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_monomial_shape_2D.C,v
Working file: src/fe/fe_monomial_shape_2D.C
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/16 22:06:45;  author: benkirk;  state: Exp;  lines: +15 -15
fixed a bug in the finite element mapping.  We always use Lagrange shape functions for the mapping, but in the compute_map() member there were blind calls to n_shape_functions(), which should have been FE<Dim,LAGRANGE>::n_shape_functions().  This was causing inexplicable negative jacobians when using the discontinuous monomials
----------------------------
revision 1.3
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.2
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +3 -3
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/fe_monomial_shape_3D.C,v
Working file: src/fe/fe_monomial_shape_3D.C
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/16 22:06:45;  author: benkirk;  state: Exp;  lines: +8 -8
fixed a bug in the finite element mapping.  We always use Lagrange shape functions for the mapping, but in the compute_map() member there were blind calls to n_shape_functions(), which should have been FE<Dim,LAGRANGE>::n_shape_functions().  This was causing inexplicable negative jacobians when using the discontinuous monomials
----------------------------
revision 1.3
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.2
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +10 -10
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe.C,v
Working file: src/fe/inf_fe.C
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +626 -136
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
----------------------------
revision 1.3
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +53 -52
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.2
date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +3 -2
removed kdoc. added order to FEType
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe_boundary.C,v
Working file: src/fe/inf_fe_boundary.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe_jacobi_20_00_eval.C,v
Working file: src/fe/inf_fe_jacobi_20_00_eval.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe_jacobi_30_00_eval.C,v
Working file: src/fe/inf_fe_jacobi_30_00_eval.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe_lagrange_eval.C,v
Working file: src/fe/inf_fe_lagrange_eval.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe_legendre_eval.C,v
Working file: src/fe/inf_fe_legendre_eval.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe_map_eval.C,v
Working file: src/fe/inf_fe_map_eval.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/fe/inf_fe_static.C,v
Working file: src/fe/inf_fe_static.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell.C,v
Working file: src/geom/cell.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_hex.C,v
Working file: src/geom/cell_hex.C
head: 1.5
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 5;	selected revisions: 5
description:
----------------------------
revision 1.5
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +1 -2
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.4
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -5
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.3
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +27 -28
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.2
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +59 -60
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_hex20.C,v
Working file: src/geom/cell_hex20.C
head: 1.10
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 10;	selected revisions: 10
description:
----------------------------
revision 1.10
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.9
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -4
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.8
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.7
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +61 -61
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.6
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +10 -10
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +9 -9
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +10 -10
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +10 -10
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +10 -11
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_hex27.C,v
Working file: src/geom/cell_hex27.C
head: 1.10
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 10;	selected revisions: 10
description:
----------------------------
revision 1.10
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.9
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -4
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.8
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.7
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +66 -66
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.6
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +10 -10
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +9 -9
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +10 -10
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +10 -10
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +10 -11
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_hex8.C,v
Working file: src/geom/cell_hex8.C
head: 1.10
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 10;	selected revisions: 10
description:
----------------------------
revision 1.10
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.9
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -4
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.8
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.7
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +36 -36
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.6
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +10 -10
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +9 -9
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +10 -10
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +10 -10
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +10 -11
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_inf_hex16.C,v
Working file: src/geom/cell_inf_hex16.C
head: 1.13
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 13;	selected revisions: 13
description:
----------------------------
revision 1.13
date: 2003/01/22 22:07:31;  author: d.dreyer;  state: Exp;  lines: +11 -1
Changes for inifinite elements: added some virtual members in FEBase; split fe_base.h from fe.h, but did not touch fe/src/fe*.C -- shall i change these, too?; changed normal vector of InfAbcXY::build_side(0) so that they point inwards; minor documentation issue in meshtool. -- All of this seems quite imperative to me for infinite elements. If anybody doesn't like - please feedback
----------------------------
revision 1.12
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.11
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -3
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.10
date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +2 -4
More unnecessary includes.
----------------------------
revision 1.9
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +12 -12
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.8
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +35 -35
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +10 -10
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.6
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +5 -6
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +6 -6
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +10 -10
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +10 -10
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +10 -10
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_inf_hex18.C,v
Working file: src/geom/cell_inf_hex18.C
head: 1.13
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 13;	selected revisions: 13
description:
----------------------------
revision 1.13
date: 2003/01/22 22:07:31;  author: d.dreyer;  state: Exp;  lines: +12 -1
Changes for inifinite elements: added some virtual members in FEBase; split fe_base.h from fe.h, but did not touch fe/src/fe*.C -- shall i change these, too?; changed normal vector of InfAbcXY::build_side(0) so that they point inwards; minor documentation issue in meshtool. -- All of this seems quite imperative to me for infinite elements. If anybody doesn't like - please feedback
----------------------------
revision 1.12
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.11
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -3
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.10
date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +2 -4
More unnecessary includes.
----------------------------
revision 1.9
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +13 -13
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.8
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +36 -36
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +10 -10
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.6
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +4 -5
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +6 -6
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +10 -10
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +10 -10
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +10 -10
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_inf_hex8.C,v
Working file: src/geom/cell_inf_hex8.C
head: 1.12
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 12;	selected revisions: 12
description:
----------------------------
revision 1.12
date: 2003/01/22 22:07:31;  author: d.dreyer;  state: Exp;  lines: +7 -1
Changes for inifinite elements: added some virtual members in FEBase; split fe_base.h from fe.h, but did not touch fe/src/fe*.C -- shall i change these, too?; changed normal vector of InfAbcXY::build_side(0) so that they point inwards; minor documentation issue in meshtool. -- All of this seems quite imperative to me for infinite elements. If anybody doesn't like - please feedback
----------------------------
revision 1.11
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.10
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -3
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.9
date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +2 -4
More unnecessary includes.
----------------------------
revision 1.8
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +33 -33
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +10 -10
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.6
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +4 -5
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +6 -6
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +10 -10
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +10 -10
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +10 -11
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_inf_prism12.C,v
Working file: src/geom/cell_inf_prism12.C
head: 1.13
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 13;	selected revisions: 13
description:
----------------------------
revision 1.13
date: 2003/01/22 22:07:31;  author: d.dreyer;  state: Exp;  lines: +9 -1
Changes for inifinite elements: added some virtual members in FEBase; split fe_base.h from fe.h, but did not touch fe/src/fe*.C -- shall i change these, too?; changed normal vector of InfAbcXY::build_side(0) so that they point inwards; minor documentation issue in meshtool. -- All of this seems quite imperative to me for infinite elements. If anybody doesn't like - please feedback
----------------------------
revision 1.12
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +4 -4
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.11
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -3
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.10
date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +2 -4
More unnecessary includes.
----------------------------
revision 1.9
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +9 -9
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.8
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +27 -27
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +9 -9
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.6
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +4 -4
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +5 -5
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +8 -8
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +8 -8
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +8 -8
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_inf_prism6.C,v
Working file: src/geom/cell_inf_prism6.C
head: 1.12
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 12;	selected revisions: 12
description:
----------------------------
revision 1.12
date: 2003/01/22 22:07:31;  author: d.dreyer;  state: Exp;  lines: +6 -1
Changes for inifinite elements: added some virtual members in FEBase; split fe_base.h from fe.h, but did not touch fe/src/fe*.C -- shall i change these, too?; changed normal vector of InfAbcXY::build_side(0) so that they point inwards; minor documentation issue in meshtool. -- All of this seems quite imperative to me for infinite elements. If anybody doesn't like - please feedback
----------------------------
revision 1.11
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.10
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -3
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.9
date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +2 -2
More unnecessary includes.
----------------------------
revision 1.8
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +18 -18
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +9 -9
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.6
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +5 -5
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +5 -5
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +8 -8
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +8 -8
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +8 -8
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_prism.C,v
Working file: src/geom/cell_prism.C
head: 1.5
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 5;	selected revisions: 5
description:
----------------------------
revision 1.5
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +1 -2
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.4
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -7
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.3
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +22 -23
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.2
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +19 -19
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_prism6.C,v
Working file: src/geom/cell_prism6.C
head: 1.11
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 11;	selected revisions: 11
description:
----------------------------
revision 1.11
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.10
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -5
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.9
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +11 -18
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.8
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +21 -21
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +8 -8
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.6
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +6 -6
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +8 -8
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +8 -8
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +8 -8
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_pyramid.C,v
Working file: src/geom/cell_pyramid.C
head: 1.5
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 5;	selected revisions: 5
description:
----------------------------
revision 1.5
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +1 -2
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.4
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +1 -5
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.3
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +25 -25
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.2
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +17 -17
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_pyramid5.C,v
Working file: src/geom/cell_pyramid5.C
head: 1.11
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 11;	selected revisions: 11
description:
----------------------------
revision 1.11
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.10
date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -3
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.9
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -9
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.8
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +259 -257
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +8 -8
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.6
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +6 -6
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +8 -8
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +8 -8
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +8 -8
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_tet.C,v
Working file: src/geom/cell_tet.C
head: 1.5
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 5;	selected revisions: 5
description:
----------------------------
revision 1.5
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -2
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.4
date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -4
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.3
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +16 -17
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.2
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +14 -14
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_tet10.C,v
Working file: src/geom/cell_tet10.C
head: 1.11
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 11;	selected revisions: 11
description:
----------------------------
revision 1.11
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.10
date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -4
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.9
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.8
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +33 -32
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +7 -7
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.6
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +6 -6
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +7 -7
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +7 -7
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +7 -7
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/cell_tet4.C,v
Working file: src/geom/cell_tet4.C
head: 1.11
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 11;	selected revisions: 11
description:
----------------------------
revision 1.11
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -4
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.10
date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -4
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.9
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.8
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +23 -23
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +7 -7
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.6
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +6 -6
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +7 -7
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +7 -7
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +7 -7
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/edge.C,v
Working file: src/geom/edge.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/edge_edge2.C,v
Working file: src/geom/edge_edge2.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +2 -2
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.2
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/edge_edge3.C,v
Working file: src/geom/edge_edge3.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +2 -2
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.2
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/edge_inf_edge2.C,v
Working file: src/geom/edge_inf_edge2.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/elem.C,v
Working file: src/geom/elem.C
head: 1.9
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 9;	selected revisions: 9
description:
----------------------------
revision 1.9
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -3
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.8
date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -7
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.7
date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +3 -2
reworked the reference counting to use C++ run-type identification
----------------------------
revision 1.6
date: 2003/01/16 03:55:52;  author: peterson;  state: Exp;  lines: +1 -2
More unnecessary includes.
----------------------------
revision 1.5
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +70 -65
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.4
date: 2003/01/09 22:41:26;  author: benkirk;  state: Exp;  lines: +6 -4
removed kdoc. added order to FEType
----------------------------
revision 1.3
date: 2003/01/09 19:38:45;  author: benkirk;  state: Exp;  lines: +4 -2
documentation.  Fix for template instantiation with Compaq CXX
----------------------------
revision 1.2
date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +4 -2
added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/elem_quality.C,v
Working file: src/geom/elem_quality.C
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/16 19:22:01;  author: peterson;  state: Exp;  lines: +2 -1
Appended enum_ to a few more files.
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/elem_type.C,v
Working file: src/geom/elem_type.C
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +2 -1
Created separate file for the element type enumeration.
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/face.C,v
Working file: src/geom/face.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_inf_quad4.C,v
Working file: src/geom/face_inf_quad4.C
head: 1.8
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 8;	selected revisions: 8
description:
----------------------------
revision 1.8
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +9 -9
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +6 -6
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.6
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +4 -4
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +6 -6
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +6 -6
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +7 -6
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_inf_quad6.C,v
Working file: src/geom/face_inf_quad6.C
head: 1.9
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 9;	selected revisions: 9
description:
----------------------------
revision 1.9
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +2 -2
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.8
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +10 -10
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +6 -6
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.6
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +4 -4
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +6 -6
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +6 -6
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +7 -6
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_infinite.C,v
Working file: src/geom/face_infinite.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_quad.C,v
Working file: src/geom/face_quad.C
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/16 20:43:47;  author: peterson;  state: Exp;  lines: +1 -4
Removing more unnecessary #includes.
----------------------------
revision 1.3
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +13 -14
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.2
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +10 -10
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_quad4.C,v
Working file: src/geom/face_quad4.C
head: 1.10
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 10;	selected revisions: 10
description:
----------------------------
revision 1.10
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +2 -2
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.9
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -15
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.8
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +11 -11
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +7 -7
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.6
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +5 -5
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +7 -7
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +7 -7
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +7 -7
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_quad8.C,v
Working file: src/geom/face_quad8.C
head: 1.10
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 10;	selected revisions: 10
description:
----------------------------
revision 1.10
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -3
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.9
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -4
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.8
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +15 -15
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +7 -7
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.6
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +5 -5
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +7 -7
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +7 -7
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +9 -15
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_quad9.C,v
Working file: src/geom/face_quad9.C
head: 1.10
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 10;	selected revisions: 10
description:
----------------------------
revision 1.10
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -3
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.9
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -8
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.8
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +15 -15
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +7 -7
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.6
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +5 -5
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +7 -7
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +7 -7
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +10 -15
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_tri.C,v
Working file: src/geom/face_tri.C
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/16 20:43:47;  author: peterson;  state: Exp;  lines: +1 -4
Removing more unnecessary #includes.
----------------------------
revision 1.3
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +11 -10
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.2
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +8 -8
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_tri3.C,v
Working file: src/geom/face_tri3.C
head: 1.10
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 10;	selected revisions: 10
description:
----------------------------
revision 1.10
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +2 -2
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.9
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -12
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.8
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +9 -9
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +6 -6
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.6
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +4 -4
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +6 -6
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +6 -6
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:41;  author: benkirk;  state: Exp;  lines: +10 -13
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/face_tri6.C,v
Working file: src/geom/face_tri6.C
head: 1.9
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 9;	selected revisions: 9
description:
----------------------------
revision 1.9
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +3 -3
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.8
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +1 -11
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.7
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +12 -12
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.6
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +6 -6
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.5
date: 2003/01/09 01:24:45;  author: benkirk;  state: Exp;  lines: +5 -5
fix for xlC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +6 -6
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +6 -6
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:41;  author: benkirk;  state: Exp;  lines: +9 -12
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/plane.C,v
Working file: src/geom/plane.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -3
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.2
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +6 -5
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/point.C,v
Working file: src/geom/point.C
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.3
date: 2003/01/15 19:06:48;  author: benkirk;  state: Exp;  lines: +1 -2
forgot math.h
----------------------------
revision 1.2
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -17
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/sphere.C,v
Working file: src/geom/sphere.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.2
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +5 -4
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/geom/surface.C,v
Working file: src/geom/surface.C
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -81
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/mesh/boundary_info.C,v
Working file: src/mesh/boundary_info.C
head: 1.12
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 12;	selected revisions: 12
description:
----------------------------
revision 1.12
date: 2003/01/21 15:41:58;  author: steffen;  state: Exp;  lines: +11 -1
extended UNV support to import analysis datasets (used for boundary conditions)
----------------------------
revision 1.11
date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -2
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.10
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.9
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.8
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +94 -95
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 22:21:25;  author: benkirk;  state: Exp;  lines: +1 -5
AutoPtr code unification
----------------------------
revision 1.6
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +3 -3
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.5
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +6 -2
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:41;  author: benkirk;  state: Exp;  lines: +86 -88
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/mesh/boundary_mesh.C,v
Working file: src/mesh/boundary_mesh.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;
More unnecessary includes. Also added a source file for the
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh.C,v
Working file: src/mesh/mesh.C
head: 1.13
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 13;	selected revisions: 13
description:
----------------------------
revision 1.13
date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +2 -4
More unnecessary #includes in source files.
----------------------------
revision 1.12
date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +2 -1
More unnecessary includes.
----------------------------
revision 1.11
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.10
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +4 -1018
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.9
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.8
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +310 -330
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 22:21:25;  author: benkirk;  state: Exp;  lines: +2 -5
AutoPtr code unification
----------------------------
revision 1.6
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +3 -3
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.5
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +5 -2
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:41;  author: benkirk;  state: Exp;  lines: +2 -4
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_base.C,v
Working file: src/mesh/mesh_base.C
head: 1.18
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 18;	selected revisions: 18
description:
----------------------------
revision 1.18
date: 2003/01/17 13:25:14;  author: benkirk;  state: Exp;  lines: +162 -161
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.17
date: 2003/01/16 22:06:45;  author: benkirk;  state: Exp;  lines: +3 -2
fixed a bug in the finite element mapping.  We always use Lagrange shape functions for the mapping, but in the compute_map() member there were blind calls to n_shape_functions(), which should have been FE<Dim,LAGRANGE>::n_shape_functions().  This was causing inexplicable negative jacobians when using the discontinuous monomials
----------------------------
revision 1.16
date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -23
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.15
date: 2003/01/16 03:55:52;  author: peterson;  state: Exp;  lines: +2 -6
More unnecessary includes.
----------------------------
revision 1.14
date: 2003/01/16 03:35:57;  author: benkirk;  state: Exp;  lines: +3 -3
AutoPtr fix fot xlC
----------------------------
revision 1.13
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.12
date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +21 -11
reworked the ReferenceCounter class
----------------------------
revision 1.11
date: 2003/01/15 23:20:40;  author: hendrik;  state: Exp;  lines: +276 -1
added MeshBase::add_inf_elem() method
----------------------------
revision 1.10
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +30 -22
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.9
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.8
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +173 -150
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 22:21:25;  author: benkirk;  state: Exp;  lines: +2 -5
AutoPtr code unification
----------------------------
revision 1.6
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +3 -3
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.5
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +5 -2
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:41;  author: benkirk;  state: Exp;  lines: +8 -15
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:40:59;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_diva_support.C,v
Working file: src/mesh/mesh_diva_support.C
head: 1.12
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 12;	selected revisions: 12
description:
----------------------------
revision 1.12
date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +1 -6
More unnecessary #includes in source files.
----------------------------
revision 1.11
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.10
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.9
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.8
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +12 -12
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/10 22:21:25;  author: benkirk;  state: Exp;  lines: +5 -17
AutoPtr code unification
----------------------------
revision 1.6
date: 2003/01/10 21:35:08;  author: benkirk;  state: Exp;  lines: +9 -9
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.5
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +17 -5
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +5 -5
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +5 -5
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:41;  author: benkirk;  state: Exp;  lines: +10 -18
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_exodus_support.C,v
Working file: src/mesh/mesh_exodus_support.C
head: 1.8
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 8;	selected revisions: 8
description:
----------------------------
revision 1.8
date: 2003/01/24 00:53:36;  author: d.dreyer;  state: Exp;  lines: +2 -2
eliminated some warnings for --disable-exodus and --disable-ifem
----------------------------
revision 1.7
date: 2003/01/22 01:09:28;  author: peterson;  state: Exp;  lines: +2 -3
Added simpson quadrature rule for triangles.
Checked to make sure it worked, but dont know what order of
accuracy to expect.
----------------------------
revision 1.6
date: 2003/01/16 20:43:47;  author: peterson;  state: Exp;  lines: +1 -2
Removing more unnecessary #includes.
----------------------------
revision 1.5
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.4
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.3
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.2
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +17 -19
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_generation.C,v
Working file: src/mesh/mesh_generation.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +1 -7
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.2
date: 2003/01/16 03:55:52;  author: peterson;  state: Exp;  lines: +1 -8
More unnecessary includes.
----------------------------
revision 1.1
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_gmv_support.C,v
Working file: src/mesh/mesh_gmv_support.C
head: 1.5
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 5;	selected revisions: 5
description:
----------------------------
revision 1.5
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -4
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.4
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +5 -5
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.3
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.2
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +39 -39
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_metis_support.C,v
Working file: src/mesh/mesh_metis_support.C
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +1 -3
More unnecessary #includes in source files.
----------------------------
revision 1.3
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.2
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_misc_support.C,v
Working file: src/mesh/mesh_misc_support.C
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +1 -2
More unnecessary #includes in source files.
----------------------------
revision 1.5
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.4
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +4 -4
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.3
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.2
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +36 -30
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_refinement.C,v
Working file: src/mesh/mesh_refinement.C
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +2 -5
More unnecessary #includes in source files.
----------------------------
revision 1.5
date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +3 -2
reworked the ReferenceCounter class
----------------------------
revision 1.4
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -16
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.3
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.2
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +23 -24
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_tecplot_support.C,v
Working file: src/mesh/mesh_tecplot_support.C
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/16 20:13:50;  author: peterson;  state: Exp;  lines: +2 -4
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.5
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +2 -5
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.4
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +7 -7
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.3
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +2 -3
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.2
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +60 -60
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_ucd_support.C,v
Working file: src/mesh/mesh_ucd_support.C
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +2 -3
More unnecessary #includes in source files.
----------------------------
revision 1.5
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +2 -3
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.4
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +4 -4
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.3
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +2 -3
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.2
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +12 -12
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_unv_support.C,v
Working file: src/mesh/mesh_unv_support.C
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/21 15:41:59;  author: steffen;  state: Exp;  lines: +208 -8
extended UNV support to import analysis datasets (used for boundary conditions)
----------------------------
revision 1.3
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.2
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +20 -22
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/mesh/mesh_xdr_support.C,v
Working file: src/mesh/mesh_xdr_support.C
head: 1.5
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 5;	selected revisions: 5
description:
----------------------------
revision 1.5
date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +1 -4
More unnecessary #includes in source files.
----------------------------
revision 1.4
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +12 -12
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.3
date: 2003/01/15 03:41:39;  author: peterson;  state: Exp;  lines: +1 -2
The only source file which now includes point.h is
point.C.  This is because mesh_base.h now includes node.h which
includes point.h.  Since many things included both mesh_base.h and
point.h, they now include only mesh_base.h
----------------------------
revision 1.2
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +142 -129
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/numerics/coupling_matrix.C,v
Working file: src/numerics/coupling_matrix.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/16 02:12:41;  author: peterson;  state: Exp;
Added empty source file for the CouplingMatrix.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/numerics/dense_matrix.C,v
Working file: src/numerics/dense_matrix.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/numerics/petsc_interface.C,v
Working file: src/numerics/petsc_interface.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/numerics/petsc_matrix.C,v
Working file: src/numerics/petsc_matrix.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/numerics/petsc_vector.C,v
Working file: src/numerics/petsc_vector.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature.C,v
Working file: src/quadrature/quadrature.C
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/19 04:15:50;  author: peterson;  state: Exp;  lines: +250 -1
Moved a few more functions into the quadrature
base class to promote code re-use.  This should also compile
faster since the functions are now only compiled once in
quadrature.C instead of in every rule separately. Have not tested
with prismatic elements (no mesh available) but it should
work fine.
----------------------------
revision 1.3
date: 2003/01/18 19:48:29;  author: peterson;  state: Exp;  lines: +498 -2
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
----------------------------
revision 1.2
date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;  lines: +2 -176
Split up quadrature classes into
separate files.  Removed the quadrature header from
dof_map.C as it did not seem to be using it.
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_gauss.C,v
Working file: src/quadrature/quadrature_gauss.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;  lines: +6 -87
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
----------------------------
revision 1.2
date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
The quadrature source files no longer include
point.h as it is included in quadrature.h
----------------------------
revision 1.1
date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
Split up quadrature classes into
separate files.  Removed the quadrature header from
dof_map.C as it did not seem to be using it.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_gauss_1D.C,v
Working file: src/quadrature/quadrature_gauss_1D.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.2
date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
The quadrature source files no longer include
point.h as it is included in quadrature.h
----------------------------
revision 1.1
date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
Split up quadrature classes into
separate files.  Removed the quadrature header from
dof_map.C as it did not seem to be using it.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_gauss_2D.C,v
Working file: src/quadrature/quadrature_gauss_2D.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;  lines: +6 -136
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
----------------------------
revision 1.2
date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
The quadrature source files no longer include
point.h as it is included in quadrature.h
----------------------------
revision 1.1
date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
Split up quadrature classes into
separate files.  Removed the quadrature header from
dof_map.C as it did not seem to be using it.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_gauss_3D.C,v
Working file: src/quadrature/quadrature_gauss_3D.C
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/19 04:15:50;  author: peterson;  state: Exp;  lines: +10 -251
Moved a few more functions into the quadrature
base class to promote code re-use.  This should also compile
faster since the functions are now only compiled once in
quadrature.C instead of in every rule separately. Have not tested
with prismatic elements (no mesh available) but it should
work fine.
----------------------------
revision 1.3
date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;  lines: +9 -235
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
----------------------------
revision 1.2
date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
The quadrature source files no longer include
point.h as it is included in quadrature.h
----------------------------
revision 1.1
date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
Split up quadrature classes into
separate files.  Removed the quadrature header from
dof_map.C as it did not seem to be using it.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_simpson.C,v
Working file: src/quadrature/quadrature_simpson.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_simpson_1D.C,v
Working file: src/quadrature/quadrature_simpson_1D.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_simpson_2D.C,v
Working file: src/quadrature/quadrature_simpson_2D.C
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/22 01:09:28;  author: peterson;  state: Exp;  lines: +37 -21
Added simpson quadrature rule for triangles.
Checked to make sure it worked, but dont know what order of
accuracy to expect.
----------------------------
revision 1.1
date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_simpson_3D.C,v
Working file: src/quadrature/quadrature_simpson_3D.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/23 03:07:30;  author: peterson;  state: Exp;  lines: +56 -40
Added a simpson quadrature rule for tetrahedra.
----------------------------
revision 1.2
date: 2003/01/19 04:15:50;  author: peterson;  state: Exp;  lines: +25 -140
Moved a few more functions into the quadrature
base class to promote code re-use.  This should also compile
faster since the functions are now only compiled once in
quadrature.C instead of in every rule separately. Have not tested
with prismatic elements (no mesh available) but it should
work fine.
----------------------------
revision 1.1
date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_trap.C,v
Working file: src/quadrature/quadrature_trap.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;  lines: +6 -88
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
----------------------------
revision 1.2
date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
The quadrature source files no longer include
point.h as it is included in quadrature.h
----------------------------
revision 1.1
date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
Split up quadrature classes into
separate files.  Removed the quadrature header from
dof_map.C as it did not seem to be using it.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_trap_1D.C,v
Working file: src/quadrature/quadrature_trap_1D.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.2
date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
The quadrature source files no longer include
point.h as it is included in quadrature.h
----------------------------
revision 1.1
date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
Split up quadrature classes into
separate files.  Removed the quadrature header from
dof_map.C as it did not seem to be using it.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_trap_2D.C,v
Working file: src/quadrature/quadrature_trap_2D.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;  lines: +8 -135
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
----------------------------
revision 1.2
date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
The quadrature source files no longer include
point.h as it is included in quadrature.h
----------------------------
revision 1.1
date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
Split up quadrature classes into
separate files.  Removed the quadrature header from
dof_map.C as it did not seem to be using it.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/quadrature/quadrature_trap_3D.C,v
Working file: src/quadrature/quadrature_trap_3D.C
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/19 04:15:50;  author: peterson;  state: Exp;  lines: +6 -118
Moved a few more functions into the quadrature
base class to promote code re-use.  This should also compile
faster since the functions are now only compiled once in
quadrature.C instead of in every rule separately. Have not tested
with prismatic elements (no mesh available) but it should
work fine.
----------------------------
revision 1.3
date: 2003/01/18 19:48:30;  author: peterson;  state: Exp;  lines: +8 -234
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
----------------------------
revision 1.2
date: 2003/01/15 03:20:55;  author: peterson;  state: Exp;  lines: +1 -2
The quadrature source files no longer include
point.h as it is included in quadrature.h
----------------------------
revision 1.1
date: 2003/01/15 03:08:55;  author: peterson;  state: Exp;
Split up quadrature classes into
separate files.  Removed the quadrature header from
dof_map.C as it did not seem to be using it.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/utils/perf_log.C,v
Working file: src/utils/perf_log.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/utils/statistics.C,v
Working file: src/utils/statistics.C
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +1 -2
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/utils/tree.C,v
Working file: src/utils/tree.C
head: 1.5
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 5;	selected revisions: 5
description:
----------------------------
revision 1.5
date: 2003/01/16 16:25:07;  author: peterson;  state: Exp;  lines: +1 -2
More unnecessary #includes in source files.
----------------------------
revision 1.4
date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +1 -3
reworked the reference counting to use C++ run-type identification
----------------------------
revision 1.3
date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +1 -423
Removing more unnecessary includes.
----------------------------
revision 1.2
date: 2003/01/14 21:20:03;  author: benkirk;  state: Exp;  lines: +2 -2
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/utils/tree_node.C,v
Working file: src/utils/tree_node.C
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +5 -1
reworked the reference counting to use C++ run-type identification
----------------------------
revision 1.1
date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;
Removing more unnecessary includes.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/utils/utility.C,v
Working file: src/utils/utility.C
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/utils/xdrIO.C,v
Working file: src/utils/xdrIO.C
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +2 -4
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.2
date: 2003/01/15 19:05:16;  author: benkirk;  state: Exp;  lines: +2 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/src/utils/xdr_cxx.C,v
Working file: src/utils/xdr_cxx.C
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/15 19:05:16;  author: benkirk;  state: Exp;  lines: +4 -4
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.1
date: 2003/01/06 21:41:00;  author: benkirk;  state: Exp;
major directory restructuring
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/auto_ptr.h,v
Working file: include/auto_ptr.h
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +15 -3
Added documentation.
----------------------------
revision 1.2
date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +21 -11
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.1
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;
switched from std::auto_ptr to AutoPtr
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/boundary_info.h,v
Working file: include/boundary_info.h
head: 1.34
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 34;	selected revisions: 34
description:
----------------------------
revision 1.34
date: 2003/01/21 15:41:58;  author: steffen;  state: Exp;  lines: +20 -5
extended UNV support to import analysis datasets (used for boundary conditions)
----------------------------
revision 1.33
date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +12 -2
Added documentation.
----------------------------
revision 1.32
date: 2003/01/16 02:08:16;  author: peterson;  state: Exp;  lines: +6 -7
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.31
date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +2 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.30
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +25 -24
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.29
date: 2002/12/05 03:56:32;  author: peterson;  state: Exp;  lines: +85 -2
Added three different functors and for_each
statements to the boundary_info code.  This code is marked
with a // New code comment and the original code is still
there.  If we decide to go back to the original all we have
to do is erase the New code.  It should work, but has not
been *extensively* tested.
----------------------------
revision 1.28
date: 2002/11/07 23:43:10;  author: benkirk;  state: Exp;  lines: +7 -2
added print_info to boundary_info and code to automatically generate nodal BCs from side BCs if they are not already specified
----------------------------
revision 1.27
date: 2002/10/21 15:55:26;  author: benkirk;  state: Exp;  lines: +60 -22
added boundary chooser in the GUI.  Right now it is pretty ugly...  Added a method to BoundaryInfo to return the bc_id set to facilitate this
----------------------------
revision 1.26
date: 2002/10/09 02:49:50;  author: benkirk;  state: Exp;  lines: +2 -2
made the BoundaryInfo::invalid_id a const static member, as it should be
----------------------------
revision 1.25
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -2
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.24
date: 2002/06/06 21:34:44;  author: benkirk;  state: Exp;  lines: +14 -7
added some documentation and changed some functions to constant that should have been all along
----------------------------
revision 1.23
date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +3 -9
added equation system support
----------------------------
revision 1.22
date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +22 -4
allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
----------------------------
revision 1.21
date: 2002/05/06 19:18:15;  author: benkirk;  state: Exp;  lines: +23 -17
allow users to specify boundary_ids as short ints instead of unsigned short ints
----------------------------
revision 1.20
date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +12 -47
eliminated templates from everything except Petsc Interface
----------------------------
revision 1.19
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -2
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.18
date: 2002/04/18 19:24:24;  author: benkirk;  state: Exp;  lines: +3 -2
documentation
----------------------------
revision 1.17
date: 2002/04/12 16:04:11;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.16
date: 2002/04/12 03:32:35;  author: benkirk;  state: Exp;  lines: +1 -3
fixed empty numBCs in the case of writing xdr files
----------------------------
revision 1.15
date: 2002/04/11 19:39:03;  author: benkirk;  state: Exp;  lines: +3 -5
boundary_mesh subdomain id now consecutively numbered from 0 independent of corresponding boundary_id
----------------------------
revision 1.14
date: 2002/04/11 17:16:32;  author: peterson;  state: Exp;  lines: +3 -2
Added reading/writing of BCs for XDR meshes.
----------------------------
revision 1.13
date: 2002/04/11 14:28:54;  author: benkirk;  state: Exp;  lines: +5 -3
BoundaryMesh now works.  Moved DofMap into MeshBase, so the user need not concern herself with that any more.
----------------------------
revision 1.12
date: 2002/04/11 04:57:34;  author: benkirk;  state: Exp;  lines: +12 -57
mucho changes.  better just ask Ben... Im a little too tired to write a useful comment now.  Suffice to say boundary conditions basically work, can have a 2D mesh in 3D space, etc...
----------------------------
revision 1.11
date: 2002/04/10 21:39:09;  author: benkirk;  state: Exp;  lines: +28 -1
working on boundary integral support
----------------------------
revision 1.10
date: 2002/04/10 18:13:39;  author: benkirk;  state: Exp;  lines: +79 -31
working on boundary support
----------------------------
revision 1.9
date: 2002/04/10 01:53:21;  author: benkirk;  state: Exp;  lines: +7 -1
working on boundary output.  cleaned up some code in shape_function calculations. probably going to change the way side boundary conditions are stored
----------------------------
revision 1.8
date: 2002/04/09 21:13:20;  author: peterson;  state: Exp;  lines: +8 -1
working on XDR support, boundary support in exodusII
----------------------------
revision 1.7
date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +2 -2
renamed config.h mesh_config.h and did some cleanup
----------------------------
revision 1.6
date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +4 -4
changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
----------------------------
revision 1.5
date: 2002/03/10 13:22:30;  author: benkirk;  state: Exp;  lines: +19 -3
silenced some print statements
----------------------------
revision 1.4
date: 2002/03/08 19:45:05;  author: benkirk;  state: Exp;  lines: +16 -1
lots of changes
----------------------------
revision 1.3
date: 2002/03/05 23:28:17;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.2
date: 2002/03/05 22:49:14;  author: benkirk;  state: Exp;  lines: +4 -1
BoundaryInfo class starting to take shape
----------------------------
revision 1.1
date: 2002/03/05 20:08:05;  author: benkirk;  state: Exp;
errata
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/boundary_mesh.h,v
Working file: include/boundary_mesh.h
head: 1.8
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 8;	selected revisions: 8
description:
----------------------------
revision 1.8
date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +8 -2
Added documentation.
----------------------------
revision 1.7
date: 2003/01/16 02:08:16;  author: peterson;  state: Exp;  lines: +1 -4
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.6
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +2 -2
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.5
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -3
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.4
date: 2002/05/30 18:06:39;  author: benkirk;  state: Exp;  lines: +1 -2
removed perf_log from MeshBase.  the user should log events in the applications code.
----------------------------
revision 1.3
date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +3 -2
added equation system support
----------------------------
revision 1.2
date: 2002/05/17 19:10:22;  author: benkirk;  state: Exp;  lines: +3 -2
added pause and restart to perf_log.  put it in most of the major algorithms
----------------------------
revision 1.1
date: 2002/05/01 22:24:54;  author: benkirk;  state: Exp;
forgot to add some files
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell.h,v
Working file: include/cell.h
head: 1.83
branch:
locks: strict
access list:
symbolic names:
	start: 1.1.1.1
	mesh: 1.1.1
keyword substitution: kv
total revisions: 84;	selected revisions: 84
description:
----------------------------
revision 1.83
date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +1 -2
More unnecessary includes.
----------------------------
revision 1.82
date: 2003/01/16 02:08:16;  author: peterson;  state: Exp;  lines: +1 -2
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.81
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;  lines: +1 -1697
split all the cell implementation into separate files.
----------------------------
revision 1.80
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +270 -270
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.79
date: 2002/12/24 14:50:05;  author: benkirk;  state: Exp;  lines: +2 -3
fixed invalid constructor calls.  SGI compiler caught the error
----------------------------
revision 1.78
date: 2002/12/23 15:18:39;  author: peterson;  state: Exp;  lines: +1 -8
Removed unnecessary write_tecplot function declarations.
----------------------------
revision 1.77
date: 2002/12/23 15:00:45;  author: peterson;  state: Exp;  lines: +9 -9
Moved write_ucd and write_tecplot_connectivity routines into the Elem base class.
----------------------------
revision 1.76
date: 2002/12/22 03:12:16;  author: benkirk;  state: Exp;  lines: +72 -41
added Edge, Face, and Cell classes.  Will be useful in FE reimplementation
----------------------------
revision 1.75
date: 2002/12/04 22:52:50;  author: benkirk;  state: Exp;  lines: +71 -36
added vtk_connectivity support for primitive (non-infinite) elements
----------------------------
revision 1.74
date: 2002/12/01 13:31:47;  author: d.dreyer;  state: Exp;  lines: +54 -1
minor changes to code for infinite elements; added some documentation; added in Makefile target doxy
----------------------------
revision 1.73
date: 2002/11/30 18:45:19;  author: d.dreyer;  state: Exp;  lines: +609 -7
First stage of infinite elements: added geometric entities. Use them with --enable-ifem.
----------------------------
revision 1.72
date: 2002/11/01 20:48:43;  author: benkirk;  state: Exp;  lines: +36 -22
split FE mapping from FE approximation.  made a lot of changes in the FE class that trickled down...
----------------------------
revision 1.71
date: 2002/10/18 15:10:05;  author: benkirk;  state: Exp;  lines: +59 -3
The fast element-containing-point search is now implemented using an OctTree.
----------------------------
revision 1.70
date: 2002/10/16 21:26:33;  author: benkirk;  state: Exp;  lines: +2 -2
Tree builds properly.  Now need to figure out which element contains a point
----------------------------
revision 1.69
date: 2002/10/15 19:22:42;  author: benkirk;  state: Exp;  lines: +3 -3
removed class static pointers to the mesh in the finite element and element base classes.  This is necessary to support multiple meshes at the same time.
----------------------------
revision 1.68
date: 2002/09/26 22:03:44;  author: peterson;  state: Exp;  lines: +21 -1
Added quality bounds for elements based on CUBIT docs.  Added the cut_below and cut_above functions to the StatVector.
----------------------------
revision 1.67
date: 2002/09/24 20:05:07;  author: benkirk;  state: Exp;  lines: +2 -2
the element class now has a static pointer to a constant Mesh named mesh.  This pointer can be used instead of passing the mesh to methods that need vertex locations.  For sanity assert it is not null before you use it!
----------------------------
revision 1.66
date: 2002/09/24 17:39:34;  author: benkirk;  state: Exp;  lines: +24 -16
find_neighbors now uses the minumum element necessary to find a neighbor.  This would be a quad4 in the case of hex{8,20,27}
----------------------------
revision 1.65
date: 2002/09/23 16:46:51;  author: benkirk;  state: Exp;  lines: +3 -3
hmin, hmax, and centroid now computed using element vertices instead of all the nodes.  This will be fatser in the case of Hex27s and other many-noded elements
----------------------------
revision 1.64
date: 2002/09/17 18:09:28;  author: benkirk;  state: Exp;  lines: +6 -1
incorporated Johns quality code for hexes based on diagonal ratio
----------------------------
revision 1.63
date: 2002/09/17 17:41:12;  author: benkirk;  state: Exp;  lines: +180 -58
added Pyramid and Prism base classes.
----------------------------
revision 1.62
date: 2002/09/17 03:57:19;  author: benkirk;  state: Exp;  lines: +89 -181
added Edge, Tri, Quad, Tet, and Hex base classes for specific instances of those types of elements.  still need ones for Prism and Pyramid
----------------------------
revision 1.61
date: 2002/08/21 14:44:46;  author: benkirk;  state: Exp;  lines: +15 -15
testing refinement some more.  Had to make the element parent a pointer (not a const pointer) due to some of the logic in the level-one enforcement.  Hopefully I can make it a const Elem* again in the future
----------------------------
revision 1.60
date: 2002/08/20 19:26:20;  author: benkirk;  state: Exp;  lines: +53 -7
created embedding matrices for all 2D elements and all but Pyramid for the 3D elements
----------------------------
revision 1.59
date: 2002/08/15 15:49:52;  author: benkirk;  state: Exp;  lines: +15 -15
Elements now have subdomain IDs and processor IDs.  You can get to an elements parent even if AMR is disabled.  This is useful for derived elements...  If you build a side of an element the resulting side knows what element it came from.
----------------------------
revision 1.58
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -2
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.57
date: 2002/07/28 21:14:30;  author: benkirk;  state: Exp;  lines: +45 -3
reworking internals of refinement
----------------------------
revision 1.56
date: 2002/05/16 20:25:54;  author: benkirk;  state: Exp;  lines: +17 -73
moved testmesh to meshtool.  made it more user-friendly so I could give it to Owen since he is now working with cubit meshes
----------------------------
revision 1.55
date: 2002/05/16 00:06:21;  author: benkirk;  state: Exp;  lines: +54 -32
preliminary unrefinement support
----------------------------
revision 1.54
date: 2002/05/15 11:22:17;  author: benkirk;  state: Exp;  lines: +92 -1
working on coarsening
----------------------------
revision 1.53
date: 2002/05/13 21:17:36;  author: benkirk;  state: Exp;  lines: +4 -5
pyramid refinement now works
----------------------------
revision 1.52
date: 2002/05/13 19:42:29;  author: benkirk;  state: Exp;  lines: +4 -5
added prism refinement
----------------------------
revision 1.51
date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +18 -15
allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
----------------------------
revision 1.50
date: 2002/05/10 21:05:18;  author: benkirk;  state: Exp;  lines: +2 -3
added hex20 refinement rules.  completely rewrote main.cc to be much more flexible
----------------------------
revision 1.49
date: 2002/05/09 22:55:27;  author: benkirk;  state: Exp;  lines: +2 -3
hex27 refinement now works
----------------------------
revision 1.48
date: 2002/05/07 22:02:57;  author: benkirk;  state: Exp;  lines: +3 -5
refinement now works for all 2D elements, the Tet, and the Hex
----------------------------
revision 1.47
date: 2002/05/06 21:15:22;  author: benkirk;  state: Exp;  lines: +8 -15
refinement works for all 2D element types
----------------------------
revision 1.46
date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +29 -15
refinement (at least uniform) now works
----------------------------
revision 1.45
date: 2002/05/02 13:40:18;  author: benkirk;  state: Exp;  lines: +99 -1
code clean up.  now compiles with g++, icc, cxx (alpha), and CC (SGI)
----------------------------
revision 1.44
date: 2002/05/01 14:59:10;  author: benkirk;  state: Exp;  lines: +8 -8
elements do not allocate storage for their children until they are refined
----------------------------
revision 1.43
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -2
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.42
date: 2002/04/30 21:44:15;  author: benkirk;  state: Exp;  lines: +2 -1
added some more includes to satisfy CC on the SGI
----------------------------
revision 1.41
date: 2002/04/26 16:22:42;  author: peterson;  state: Exp;  lines: +3 -3
Errata.
----------------------------
revision 1.40
date: 2002/04/26 16:19:22;  author: peterson;  state: Exp;  lines: +11 -1
Ghetto drawing of pyramid.
----------------------------
revision 1.39
date: 2002/04/23 17:38:51;  author: benkirk;  state: Exp;  lines: +8 -8
Quad8 shape functions work now
----------------------------
revision 1.38
date: 2002/04/23 16:34:00;  author: benkirk;  state: Exp;  lines: +102 -1
added initial support for quad8 and hex20.  no shape functions yet
----------------------------
revision 1.37
date: 2002/04/22 14:33:10;  author: benkirk;  state: Exp;  lines: +124 -50
initial support for pyramids.  still need shape functions and quadrature rules
----------------------------
revision 1.36
date: 2002/04/18 19:24:24;  author: benkirk;  state: Exp;  lines: +118 -1
documentation
----------------------------
revision 1.35
date: 2002/04/18 16:06:38;  author: benkirk;  state: Exp;  lines: +77 -2
documentation
----------------------------
revision 1.34
date: 2002/04/18 14:03:20;  author: benkirk;  state: Exp;  lines: +6 -6
added QuadratureOrder enum.  broke quadrature.C into multiple files for faster compiles
----------------------------
revision 1.33
date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;  lines: +45 -288
many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
----------------------------
revision 1.32
date: 2002/04/12 16:04:11;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.31
date: 2002/04/11 04:57:34;  author: benkirk;  state: Exp;  lines: +3 -1307
mucho changes.  better just ask Ben... Im a little too tired to write a useful comment now.  Suffice to say boundary conditions basically work, can have a 2D mesh in 3D space, etc...
----------------------------
revision 1.30
date: 2002/04/10 21:39:09;  author: benkirk;  state: Exp;  lines: +411 -1
working on boundary integral support
----------------------------
revision 1.29
date: 2002/04/08 13:01:38;  author: benkirk;  state: Exp;  lines: +18 -16
more on sparsity structure.  changed n_tecplot_* to n_sub_* to be more generic.  added total_weight to mesh.h for partitioning hybrid meshes.
----------------------------
revision 1.28
date: 2002/04/05 22:38:18;  author: benkirk;  state: Exp;  lines: +135 -11
added a lot of documentation and re-ordered the quadratic 1D basis functions
----------------------------
revision 1.27
date: 2002/04/05 03:21:44;  author: benkirk;  state: Exp;  lines: +184 -3
cleaned up ./configure some.  Reversed-engineered the Tri6 connectivity.  Documented some.  Added hooks for n_nz & n_oz in dof_map
----------------------------
revision 1.26
date: 2002/04/03 23:25:33;  author: benkirk;  state: Exp;  lines: +1 -11
removerd order from fe
----------------------------
revision 1.25
date: 2002/04/03 02:26:27;  author: benkirk;  state: Exp;  lines: +35 -101
added GMV variable output support
----------------------------
revision 1.24
date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +203 -22
renamed config.h mesh_config.h and did some cleanup
----------------------------
revision 1.23
date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +42 -32
changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
----------------------------
revision 1.22
date: 2002/03/31 05:58:42;  author: peterson;  state: Exp;  lines: +5 -5
Added a new Conversion class to the ExodusII support.  The purpose of this class is to encapsut naming scheme and node numbering scheme which is purely local to ExodusII.  This way, other parts of the code, espend face.h dont need to know anything about other specialized naming schemes.
----------------------------
revision 1.21
date: 2002/03/29 21:22:51;  author: peterson;  state: Exp;  lines: +16 -11
Exodus support is working
----------------------------
revision 1.20
date: 2002/03/29 15:51:49;  author: peterson;  state: Exp;  lines: +2 -2
initial merge of exodus support, changed configure for lsfcurves, lpapi, lperfctr
----------------------------
revision 1.19
date: 2002/03/28 22:52:32;  author: benkirk;  state: Exp;  lines: +353 -16
added tri6, quad9, hex27.  will add prism17 and tet12 later.  I still need to make edge a base/derived class with edge2 and edge3 as derived classes
----------------------------
revision 1.18
date: 2002/03/21 15:18:27;  author: benkirk;  state: Exp;  lines: +23 -2
added tecplot binary support
----------------------------
revision 1.17
date: 2002/03/05 16:57:43;  author: benkirk;  state: Exp;  lines: +5 -1
errata
----------------------------
revision 1.16
date: 2002/03/05 14:28:22;  author: benkirk;  state: Exp;  lines: +59 -20
adding more stuff
----------------------------
revision 1.15
date: 2002/03/05 06:12:42;  author: benkirk;  state: Exp;  lines: +8 -5
added neighborhood computation, petsc matrix from deal.II
----------------------------
revision 1.14
date: 2002/03/04 22:43:23;  author: benkirk;  state: Exp;  lines: +7 -1
added partitioning
----------------------------
revision 1.13
date: 2002/03/03 00:31:36;  author: benkirk;  state: Exp;  lines: +7 -4
updates makefile and added some fe shape functions, quadrature rules
----------------------------
revision 1.12
date: 2002/03/02 21:19:54;  author: benkirk;  state: Exp;  lines: +147 -3
updates makefile and added some fe shape functions, quadrature rules
----------------------------
revision 1.11
date: 2002/02/28 16:34:51;  author: benkirk;  state: Exp;  lines: +6 -2
errata
----------------------------
revision 1.10
date: 2002/02/26 15:53:40;  author: benkirk;  state: Exp;  lines: +56 -9
Added pointers to neighbors within faces and cells, can now write UCD files
----------------------------
revision 1.9
date: 2002/02/25 22:55:36;  author: benkirk;  state: Exp;  lines: +54 -8
errata
----------------------------
revision 1.8
date: 2002/02/25 14:36:03;  author: benkirk;  state: Exp;  lines: +70 -19
errata
----------------------------
revision 1.7
date: 2002/02/25 05:23:04;  author: benkirk;  state: Exp;  lines: +9 -18
errata
----------------------------
revision 1.6
date: 2002/02/25 02:52:04;  author: benkirk;  state: Exp;  lines: +136 -8
errata
----------------------------
revision 1.5
date: 2002/02/25 01:18:38;  author: benkirk;  state: Exp;  lines: +35 -4
errata
----------------------------
revision 1.4
date: 2002/02/24 16:30:36;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.3
date: 2002/02/24 16:29:51;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.2
date: 2002/02/24 16:27:47;  author: benkirk;  state: Exp;  lines: +96 -4
errata
----------------------------
revision 1.1
date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;
branches:  1.1.1;
Initial revision
----------------------------
revision 1.1.1.1
date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;  lines: +0 -0
init
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_hex.h,v
Working file: include/cell_hex.h
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +2 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.2
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -2
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_hex20.h,v
Working file: include/cell_hex20.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +3 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.5
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.4
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_hex27.h,v
Working file: include/cell_hex27.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +3 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.5
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.4
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_hex8.h,v
Working file: include/cell_hex8.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +4 -4
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.5
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.4
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_inf_hex16.h,v
Working file: include/cell_inf_hex16.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +8 -1
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.5
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.4
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_inf_hex18.h,v
Working file: include/cell_inf_hex18.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/15 19:05:14;  author: benkirk;  state: Exp;  lines: +8 -1
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.5
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.4
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_inf_hex8.h,v
Working file: include/cell_inf_hex8.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +8 -1
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.5
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.4
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_inf_prism12.h,v
Working file: include/cell_inf_prism12.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +8 -1
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.5
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.4
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_inf_prism6.h,v
Working file: include/cell_inf_prism6.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +8 -1
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.5
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.4
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_prism.h,v
Working file: include/cell_prism.h
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_prism6.h,v
Working file: include/cell_prism6.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.5
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.4
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_pyramid.h,v
Working file: include/cell_pyramid.h
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_pyramid5.h,v
Working file: include/cell_pyramid5.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.5
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.4
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_tet.h,v
Working file: include/cell_tet.h
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.2
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -2
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_tet10.h,v
Working file: include/cell_tet10.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +4 -3
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.5
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.4
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/cell_tet4.h,v
Working file: include/cell_tet4.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.5
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.4
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;
split all the cell implementation into separate files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/coupling_matrix.h,v
Working file: include/coupling_matrix.h
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/dense_matrix.h,v
Working file: include/dense_matrix.h
head: 1.24
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 24;	selected revisions: 24
description:
----------------------------
revision 1.24
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -139
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.23
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +66 -76
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.22
date: 2002/11/18 23:20:49;  author: benkirk;  state: Exp;  lines: +29 -7
added code to get dphidx etc... directly from the FE.  may or may not last
----------------------------
revision 1.21
date: 2002/11/08 20:50:38;  author: benkirk;  state: Exp;  lines: +3 -3
fixed quadrature mapping for faces on quads, tris, and hexes.  still need to fix tets, prisms, and pyramids
----------------------------
revision 1.20
date: 2002/10/31 20:22:41;  author: benkirk;  state: Exp;  lines: +145 -3
re-implemented the dof_coupling as a matrix
----------------------------
revision 1.19
date: 2002/10/30 17:15:22;  author: benkirk;  state: Exp;  lines: +3 -3
Hanging node constraints work.  Need to properly compute the sparsity pattern
----------------------------
revision 1.18
date: 2002/10/29 23:15:36;  author: benkirk;  state: Exp;  lines: +47 -2
dof constraints _almost_ working
----------------------------
revision 1.17
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.16
date: 2002/05/30 18:37:31;  author: benkirk;  state: Exp;  lines: +7 -19
added print_info to equation systems
----------------------------
revision 1.15
date: 2002/05/30 18:06:39;  author: benkirk;  state: Exp;  lines: +4 -8
removed perf_log from MeshBase.  the user should log events in the applications code.
----------------------------
revision 1.14
date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +3 -3
changed cout to std::cout
----------------------------
revision 1.13
date: 2002/05/01 23:10:57;  author: benkirk;  state: Exp;  lines: +62 -64
un-templated everything
----------------------------
revision 1.12
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +1 -4
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.11
date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +2 -2
changes for compatibility with icc v6.0
----------------------------
revision 1.10
date: 2002/04/22 13:11:00;  author: benkirk;  state: Exp;  lines: +5 -3
fixed a bug that computed the incorrect sparsity pattern in the case of multiple dofs per vertex
----------------------------
revision 1.9
date: 2002/04/18 19:24:24;  author: benkirk;  state: Exp;  lines: +69 -8
documentation
----------------------------
revision 1.8
date: 2002/04/11 14:28:54;  author: benkirk;  state: Exp;  lines: +7 -8
BoundaryMesh now works.  Moved DofMap into MeshBase, so the user need not concern herself with that any more.
----------------------------
revision 1.7
date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +3 -3
renamed config.h mesh_config.h and did some cleanup
----------------------------
revision 1.6
date: 2002/03/27 03:12:20;  author: benkirk;  state: Exp;  lines: +14 -3
verified that the BLAS matvec is working properly
----------------------------
revision 1.5
date: 2002/03/18 20:07:58;  author: peterson;  state: Exp;  lines: +15 -4
errata
----------------------------
revision 1.4
date: 2002/03/09 00:43:06;  author: benkirk;  state: Exp;  lines: +2 -2
fixed a syntax error
----------------------------
revision 1.3
date: 2002/03/08 19:45:05;  author: benkirk;  state: Exp;  lines: +86 -41
lots of changes
----------------------------
revision 1.2
date: 2002/03/07 20:52:30;  author: benkirk;  state: Exp;  lines: +3 -1
added dof_indices computation
----------------------------
revision 1.1
date: 2002/03/05 14:28:22;  author: benkirk;  state: Exp;
adding more stuff
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/dof_map.h,v
Working file: include/dof_map.h
head: 1.51
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 51;	selected revisions: 51
description:
----------------------------
revision 1.51
date: 2003/01/16 16:42:27;  author: peterson;  state: Exp;  lines: +2 -2
Removing unnecessary includes.  Changing headers which
simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
----------------------------
revision 1.50
date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +2 -4
Removing more unnecessary includes.
----------------------------
revision 1.49
date: 2003/01/16 02:45:35;  author: benkirk;  state: Exp;  lines: +74 -74
reworked the ReferenceCounter class
----------------------------
revision 1.48
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +2 -3
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.47
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -30
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.46
date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +4 -12
removed kdoc. added order to FEType
----------------------------
revision 1.45
date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +4 -4
added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
----------------------------
revision 1.44
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +56 -28
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.43
date: 2002/12/01 22:19:16;  author: d.dreyer;  state: Exp;  lines: +43 -1
some fixes for --disable-amr target
----------------------------
revision 1.42
date: 2002/11/27 20:58:50;  author: benkirk;  state: Exp;  lines: +20 -13
added trapezoidal quadrature.  Compute tangent directions _and_ normal on faces
----------------------------
revision 1.41
date: 2002/11/04 23:05:12;  author: benkirk;  state: Exp;  lines: +58 -25
can generate quad9 and hex27 bricks internally.  added code in DofMap to only allocate space for element dofs if any elements _have_ dofs
----------------------------
revision 1.40
date: 2002/11/03 23:45:52;  author: benkirk;  state: Exp;  lines: +266 -23
added support for multiple DOFs per node and element-based DOFs
----------------------------
revision 1.39
date: 2002/11/01 15:49:55;  author: benkirk;  state: Exp;  lines: +11 -3
moved the coupling matrix dof_coupling into the DofMap class where it belongs
----------------------------
revision 1.38
date: 2002/10/31 20:22:41;  author: benkirk;  state: Exp;  lines: +2 -8
re-implemented the dof_coupling as a matrix
----------------------------
revision 1.37
date: 2002/10/31 04:39:55;  author: benkirk;  state: Exp;  lines: +13 -7
fixed DofMap::compute_sparsity to work with hanging nodes
----------------------------
revision 1.36
date: 2002/10/30 22:34:44;  author: benkirk;  state: Exp;  lines: +7 -1
Need to rewrite compute_sparsity to account for hanging nodes
----------------------------
revision 1.35
date: 2002/10/30 17:15:22;  author: benkirk;  state: Exp;  lines: +36 -3
Hanging node constraints work.  Need to properly compute the sparsity pattern
----------------------------
revision 1.34
date: 2002/10/29 23:15:36;  author: benkirk;  state: Exp;  lines: +58 -3
dof constraints _almost_ working
----------------------------
revision 1.33
date: 2002/10/29 16:03:40;  author: benkirk;  state: Exp;  lines: +33 -17
formatting
----------------------------
revision 1.32
date: 2002/10/28 22:34:17;  author: benkirk;  state: Exp;  lines: +28 -2
added code to compute hanging node constraints for Lagrange elements
----------------------------
revision 1.31
date: 2002/10/11 20:56:15;  author: benkirk;  state: Exp;  lines: +12 -27
The FEBase class now has a static pointer to the mesh rather than a reference passed via the constructor.  DofMap can _almost_ constrain degrees of freedom properly
----------------------------
revision 1.30
date: 2002/09/06 14:53:28;  author: benkirk;  state: Exp;  lines: +10 -10
added Xdr class to provide a uniform interface for Xdr and ASCII IO.  The equation_systems read & write is also based on these methods.  I have validated it for one processor.  Still need to be sure that in the case of multiple processors each proc gets te relevant piece of data.
----------------------------
revision 1.29
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -3
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.28
date: 2002/06/11 20:06:39;  author: benkirk;  state: Exp;  lines: +6 -1
made the FE classes dof_index ignorant.  Now ask the dof map for the dof_indices associated with a cell
----------------------------
revision 1.27
date: 2002/06/10 21:05:28;  author: benkirk;  state: Exp;  lines: +33 -16
can now mix approximation order for variables in a system.  There is a strange bug that causes the send_list size to be larger than the total number of dofs for the tet meshes on 2 procs
----------------------------
revision 1.26
date: 2002/06/07 21:19:07;  author: benkirk;  state: Exp;  lines: +2 -2
added order enum.  Separating FE from mesh elements
----------------------------
revision 1.25
date: 2002/06/04 15:08:28;  author: benkirk;  state: Exp;  lines: +3 -3
more work on equation system support.  Each SystemData now contains a matrix, rhs, and solution.  Can call the solve
----------------------------
revision 1.24
date: 2002/06/03 12:43:26;  author: benkirk;  state: Exp;  lines: +34 -3
adding hooks for more complicated element DOF distribution in DofMap
----------------------------
revision 1.23
date: 2002/05/31 15:59:28;  author: benkirk;  state: Exp;  lines: +9 -8
added TODO make target.  Allow user to optionally control DOF coupling for matrix allocation
----------------------------
revision 1.22
date: 2002/05/30 12:26:06;  author: benkirk;  state: Exp;  lines: +3 -3
modified Petsc support to be compatible with Petsc 2.1.2
----------------------------
revision 1.21
date: 2002/05/29 22:34:37;  author: benkirk;  state: Exp;  lines: +3 -3
chaned id_map from a pointer to a vector
----------------------------
revision 1.20
date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +4 -10
added equation system support
----------------------------
revision 1.19
date: 2002/05/28 20:33:42;  author: benkirk;  state: Exp;  lines: +7 -8
added initial support for simulation groups (systems) and equation systems
----------------------------
revision 1.18
date: 2002/05/02 02:40:49;  author: benkirk;  state: Exp;  lines: +3 -3
changed variable named map to id_map because it confused cxx compiler
----------------------------
revision 1.17
date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +13 -14
eliminated templates from everything except Petsc Interface
----------------------------
revision 1.16
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +12 -12
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.15
date: 2002/04/18 19:24:24;  author: benkirk;  state: Exp;  lines: +35 -1
documentation
----------------------------
revision 1.14
date: 2002/04/11 17:37:45;  author: benkirk;  state: Exp;  lines: +2 -2
dofs_per_vertex is 0 until distribute_dofs is called, then is either user-specified or 1
----------------------------
revision 1.13
date: 2002/04/11 14:28:54;  author: benkirk;  state: Exp;  lines: +25 -76
BoundaryMesh now works.  Moved DofMap into MeshBase, so the user need not concern herself with that any more.
----------------------------
revision 1.12
date: 2002/04/11 04:57:34;  author: benkirk;  state: Exp;  lines: +6 -6
mucho changes.  better just ask Ben... Im a little too tired to write a useful comment now.  Suffice to say boundary conditions basically work, can have a 2D mesh in 3D space, etc...
----------------------------
revision 1.11
date: 2002/04/09 13:59:12;  author: benkirk;  state: Exp;  lines: +3 -1
sparsity pattern computation works well in 3D, serial and parallel.  Will implement in 2D after rethinking the underlying STL container
----------------------------
revision 1.10
date: 2002/04/05 22:38:18;  author: benkirk;  state: Exp;  lines: +3 -1
added a lot of documentation and re-ordered the quadratic 1D basis functions
----------------------------
revision 1.9
date: 2002/04/05 03:21:44;  author: benkirk;  state: Exp;  lines: +40 -20
cleaned up ./configure some.  Reversed-engineered the Tri6 connectivity.  Documented some.  Added hooks for n_nz & n_oz in dof_map
----------------------------
revision 1.8
date: 2002/04/04 22:02:09;  author: benkirk;  state: Exp;  lines: +59 -3
documentation
----------------------------
revision 1.7
date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +2 -2
renamed config.h mesh_config.h and did some cleanup
----------------------------
revision 1.6
date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +2 -2
changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
----------------------------
revision 1.5
date: 2002/03/25 22:25:16;  author: benkirk;  state: Exp;  lines: +4 -2
added send_list computation to dof_map.distribute()
----------------------------
revision 1.4
date: 2002/03/08 19:45:05;  author: benkirk;  state: Exp;  lines: +8 -6
lots of changes
----------------------------
revision 1.3
date: 2002/03/07 20:52:30;  author: benkirk;  state: Exp;  lines: +4 -1
added dof_indices computation
----------------------------
revision 1.2
date: 2002/03/07 16:32:13;  author: benkirk;  state: Exp;  lines: +2 -2
works in parallel
----------------------------
revision 1.1
date: 2002/03/06 23:13:40;  author: benkirk;  state: Exp;
actually starting to work
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/edge.h,v
Working file: include/edge.h
head: 1.51
branch:
locks: strict
access list:
symbolic names:
	start: 1.1.1.1
	mesh: 1.1.1
keyword substitution: kv
total revisions: 52;	selected revisions: 52
description:
----------------------------
revision 1.51
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -2
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.50
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +24 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.49
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;  lines: +3 -4
split all the cell implementation into separate files.
----------------------------
revision 1.48
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +2 -2
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.47
date: 2002/12/23 18:45:57;  author: peterson;  state: Exp;  lines: +1 -239
Split the 1D elements (edges) including
infinite edges into separate files.  Trying to maintain
format of one class per header file.
----------------------------
revision 1.46
date: 2002/12/22 03:12:16;  author: benkirk;  state: Exp;  lines: +14 -9
added Edge, Face, and Cell classes.  Will be useful in FE reimplementation
----------------------------
revision 1.45
date: 2002/12/04 22:52:50;  author: benkirk;  state: Exp;  lines: +11 -1
added vtk_connectivity support for primitive (non-infinite) elements
----------------------------
revision 1.44
date: 2002/12/01 13:31:47;  author: d.dreyer;  state: Exp;  lines: +3 -2
minor changes to code for infinite elements; added some documentation; added in Makefile target doxy
----------------------------
revision 1.43
date: 2002/11/30 18:45:19;  author: d.dreyer;  state: Exp;  lines: +88 -2
First stage of infinite elements: added geometric entities. Use them with --enable-ifem.
----------------------------
revision 1.42
date: 2002/11/01 20:48:43;  author: benkirk;  state: Exp;  lines: +12 -1
split FE mapping from FE approximation.  made a lot of changes in the FE class that trickled down...
----------------------------
revision 1.41
date: 2002/09/17 17:41:12;  author: benkirk;  state: Exp;  lines: +11 -6
added Pyramid and Prism base classes.
----------------------------
revision 1.40
date: 2002/09/17 03:57:19;  author: benkirk;  state: Exp;  lines: +42 -61
added Edge, Tri, Quad, Tet, and Hex base classes for specific instances of those types of elements.  still need ones for Prism and Pyramid
----------------------------
revision 1.39
date: 2002/08/21 14:44:46;  author: benkirk;  state: Exp;  lines: +5 -5
testing refinement some more.  Had to make the element parent a pointer (not a const pointer) due to some of the logic in the level-one enforcement.  Hopefully I can make it a const Elem* again in the future
----------------------------
revision 1.38
date: 2002/08/15 15:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
Elements now have subdomain IDs and processor IDs.  You can get to an elements parent even if AMR is disabled.  This is useful for derived elements...  If you build a side of an element the resulting side knows what element it came from.
----------------------------
revision 1.37
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -2
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.36
date: 2002/05/16 20:25:54;  author: benkirk;  state: Exp;  lines: +5 -21
moved testmesh to meshtool.  made it more user-friendly so I could give it to Owen since he is now working with cubit meshes
----------------------------
revision 1.35
date: 2002/05/16 00:06:21;  author: benkirk;  state: Exp;  lines: +16 -10
preliminary unrefinement support
----------------------------
revision 1.34
date: 2002/05/15 11:22:18;  author: benkirk;  state: Exp;  lines: +27 -1
working on coarsening
----------------------------
revision 1.33
date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +8 -5
allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
----------------------------
revision 1.32
date: 2002/05/06 21:15:22;  author: benkirk;  state: Exp;  lines: +3 -5
refinement works for all 2D element types
----------------------------
revision 1.31
date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +11 -7
refinement (at least uniform) now works
----------------------------
revision 1.30
date: 2002/05/02 13:40:18;  author: benkirk;  state: Exp;  lines: +29 -1
code clean up.  now compiles with g++, icc, cxx (alpha), and CC (SGI)
----------------------------
revision 1.29
date: 2002/05/01 14:59:10;  author: benkirk;  state: Exp;  lines: +3 -3
elements do not allocate storage for their children until they are refined
----------------------------
revision 1.28
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -2
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.27
date: 2002/04/30 21:44:15;  author: benkirk;  state: Exp;  lines: +2 -1
added some more includes to satisfy CC on the SGI
----------------------------
revision 1.26
date: 2002/04/23 17:38:51;  author: benkirk;  state: Exp;  lines: +3 -3
Quad8 shape functions work now
----------------------------
revision 1.25
date: 2002/04/18 16:06:38;  author: benkirk;  state: Exp;  lines: +63 -2
documentation
----------------------------
revision 1.24
date: 2002/04/18 14:03:20;  author: benkirk;  state: Exp;  lines: +15 -7
added QuadratureOrder enum.  broke quadrature.C into multiple files for faster compiles
----------------------------
revision 1.23
date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;  lines: +17 -135
many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
----------------------------
revision 1.22
date: 2002/04/12 16:04:11;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.21
date: 2002/04/11 16:09:28;  author: benkirk;  state: Exp;  lines: +14 -1
fixed exodusII side maps.  eliminated mesh rebuild_maps() function, moved into find_neighbors()
----------------------------
revision 1.20
date: 2002/04/11 14:28:54;  author: benkirk;  state: Exp;  lines: +9 -2
BoundaryMesh now works.  Moved DofMap into MeshBase, so the user need not concern herself with that any more.
----------------------------
revision 1.19
date: 2002/04/11 04:57:34;  author: benkirk;  state: Exp;  lines: +2 -54
mucho changes.  better just ask Ben... Im a little too tired to write a useful comment now.  Suffice to say boundary conditions basically work, can have a 2D mesh in 3D space, etc...
----------------------------
revision 1.18
date: 2002/04/03 23:25:33;  author: benkirk;  state: Exp;  lines: +1 -7
removerd order from fe
----------------------------
revision 1.17
date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +3 -3
renamed config.h mesh_config.h and did some cleanup
----------------------------
revision 1.16
date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +13 -11
changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
----------------------------
revision 1.15
date: 2002/03/29 14:20:21;  author: benkirk;  state: Exp;  lines: +160 -44
split up mesh.C into logical, disjoint parts.
I also made edge a base-derived class, with Edge2 and Edge3 derived classes.
Tri, Quad, Tri6, Quad9, Hex, Tet, Prism, and Hex27 should work now.  Will double-check
the shape function calculation for the higher-order elements today.
----------------------------
revision 1.14
date: 2002/03/08 19:45:05;  author: benkirk;  state: Exp;  lines: +15 -4
lots of changes
----------------------------
revision 1.13
date: 2002/03/05 20:08:05;  author: benkirk;  state: Exp;  lines: +19 -2
errata
----------------------------
revision 1.12
date: 2002/03/05 06:12:42;  author: benkirk;  state: Exp;  lines: +27 -1
added neighborhood computation, petsc matrix from deal.II
----------------------------
revision 1.11
date: 2002/03/04 13:48:09;  author: benkirk;  state: Exp;  lines: +10 -1
Remade some make rules and split up the unwieldy fe.C
----------------------------
revision 1.10
date: 2002/02/28 16:34:51;  author: benkirk;  state: Exp;  lines: +10 -5
errata
----------------------------
revision 1.9
date: 2002/02/26 15:53:40;  author: benkirk;  state: Exp;  lines: +11 -3
Added pointers to neighbors within faces and cells, can now write UCD files
----------------------------
revision 1.8
date: 2002/02/25 22:55:36;  author: benkirk;  state: Exp;  lines: +7 -6
errata
----------------------------
revision 1.7
date: 2002/02/25 02:52:04;  author: benkirk;  state: Exp;  lines: +13 -10
errata
----------------------------
revision 1.6
date: 2002/02/25 01:18:38;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.5
date: 2002/02/24 16:30:36;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.4
date: 2002/02/24 16:29:51;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.3
date: 2002/02/24 16:27:47;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.2
date: 2002/02/22 22:34:17;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.1
date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;
branches:  1.1.1;
Initial revision
----------------------------
revision 1.1.1.1
date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;  lines: +0 -0
init
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/edge_edge2.h,v
Working file: include/edge_edge2.h
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +4 -3
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.2
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.1
date: 2002/12/24 14:41:35;  author: benkirk;  state: Exp;
face_refinement.C is deprecated.  The functionality is included in individual type implementations.  Also, removed some unnecessary #includes to hopefully simplify things
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/edge_edge3.h,v
Working file: include/edge_edge3.h
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +4 -3
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.2
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.1
date: 2002/12/24 14:41:35;  author: benkirk;  state: Exp;
face_refinement.C is deprecated.  The functionality is included in individual type implementations.  Also, removed some unnecessary #includes to hopefully simplify things
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/edge_inf_edge2.h,v
Working file: include/edge_inf_edge2.h
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +9 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.2
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.1
date: 2002/12/24 14:41:35;  author: benkirk;  state: Exp;
face_refinement.C is deprecated.  The functionality is included in individual type implementations.  Also, removed some unnecessary #includes to hopefully simplify things
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/elem.h,v
Working file: include/elem.h
head: 1.61
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 61;	selected revisions: 61
description:
----------------------------
revision 1.61
date: 2003/01/17 13:25:13;  author: benkirk;  state: Exp;  lines: +24 -11
Now that the elem class is pure virtual there is no need for it to store a std::vector<> of its nodes...  That has been replaced with a Node** that is allocated in the constructor and deallocated in the destructor
----------------------------
revision 1.60
date: 2003/01/16 19:22:01;  author: peterson;  state: Exp;  lines: +2 -2
Appended enum_ to a few more files.
----------------------------
revision 1.59
date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +2 -2
Created separate file for the element type enumeration.
----------------------------
revision 1.58
date: 2003/01/16 16:42:28;  author: peterson;  state: Exp;  lines: +2 -2
Removing unnecessary includes.  Changing headers which
simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
----------------------------
revision 1.57
date: 2003/01/16 16:12:31;  author: benkirk;  state: Exp;  lines: +3 -21
reworked the reference counting to use C++ run-type identification
----------------------------
revision 1.56
date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +24 -12
reworked the ReferenceCounter class
----------------------------
revision 1.55
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +3 -4
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.54
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +27 -41
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.53
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +205 -77
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.52
date: 2003/01/10 22:21:25;  author: benkirk;  state: Exp;  lines: +1 -5
AutoPtr code unification
----------------------------
revision 1.51
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +7 -6
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.50
date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +16 -10
removed kdoc. added order to FEType
----------------------------
revision 1.49
date: 2003/01/09 03:24:43;  author: benkirk;  state: Exp;  lines: +5 -1
auto_ptr now works on gcc 2.9x, 3.2, IBM xlC version 5, and SGI MIPSPro.  Verdict still out on HP aCC
----------------------------
revision 1.48
date: 2003/01/08 21:51:40;  author: benkirk;  state: Exp;  lines: +3 -4
updated documentation
----------------------------
revision 1.47
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +3 -3
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.46
date: 2003/01/08 20:44:05;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.45
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +3 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.44
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +3 -3
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.43
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;  lines: +1 -3
split all the cell implementation into separate files.
----------------------------
revision 1.42
date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +3 -3
added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
----------------------------
revision 1.41
date: 2002/12/31 02:46:20;  author: benkirk;  state: Exp;  lines: +12 -61
added reference_counter
----------------------------
revision 1.40
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +97 -32
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.39
date: 2002/12/23 15:00:45;  author: peterson;  state: Exp;  lines: +6 -2
Moved write_ucd and write_tecplot_connectivity routines into the Elem base class.
----------------------------
revision 1.38
date: 2002/12/22 22:36:25;  author: benkirk;  state: Exp;  lines: +45 -38
made QBase pure virtual.  prefixing private variables with _ to distinguish from local variables.  Will make FEBase pure virtual and have templated classes derived from it for actual families of finite elements
----------------------------
revision 1.37
date: 2002/12/22 03:12:17;  author: benkirk;  state: Exp;  lines: +18 -19
added Edge, Face, and Cell classes.  Will be useful in FE reimplementation
----------------------------
revision 1.36
date: 2002/12/17 16:47:08;  author: benkirk;  state: Exp;  lines: +2 -2
fixed cvs2html to get the names right, fixed typeos in the documentation
----------------------------
revision 1.35
date: 2002/12/04 22:52:50;  author: benkirk;  state: Exp;  lines: +14 -1
added vtk_connectivity support for primitive (non-infinite) elements
----------------------------
revision 1.34
date: 2002/12/02 14:36:28;  author: benkirk;  state: Exp;  lines: +18 -9
added RefinementState enum.  This will be used to interpolate the old solution to new elements when projecting solution data between refinements
----------------------------
revision 1.33
date: 2002/11/01 20:48:43;  author: benkirk;  state: Exp;  lines: +9 -1
split FE mapping from FE approximation.  made a lot of changes in the FE class that trickled down...
----------------------------
revision 1.32
date: 2002/10/27 19:20:51;  author: benkirk;  state: Exp;  lines: +5 -1
compatibility changes.  Successfully builds on Linux with gcc 2.95.3, gcc 2.96 (RedHat), gcc 3.0, gcc 3.2, icc 6.0; on SGI with MipsPro 7.3; on Linux Alpha with Compaq cxx; and on IBM AIX with xlC
----------------------------
revision 1.31
date: 2002/10/16 21:26:33;  author: benkirk;  state: Exp;  lines: +8 -1
Tree builds properly.  Now need to figure out which element contains a point
----------------------------
revision 1.30
date: 2002/10/15 19:22:42;  author: benkirk;  state: Exp;  lines: +9 -18
removed class static pointers to the mesh in the finite element and element base classes.  This is necessary to support multiple meshes at the same time.
----------------------------
revision 1.29
date: 2002/10/11 20:56:15;  author: benkirk;  state: Exp;  lines: +8 -1
The FEBase class now has a static pointer to the mesh rather than a reference passed via the constructor.  DofMap can _almost_ constrain degrees of freedom properly
----------------------------
revision 1.28
date: 2002/09/30 22:44:42;  author: peterson;  state: Exp;  lines: +3 -2
More utility functions in the Quality namespace.
----------------------------
revision 1.27
date: 2002/09/26 22:03:44;  author: peterson;  state: Exp;  lines: +11 -2
Added quality bounds for elements based on CUBIT docs.  Added the cut_below and cut_above functions to the StatVector.
----------------------------
revision 1.26
date: 2002/09/24 23:54:57;  author: peterson;  state: Exp;  lines: +8 -1
Fixed strange bug with diva file, added taper and stretch quality measures for hexes.
----------------------------
revision 1.25
date: 2002/09/24 20:05:07;  author: benkirk;  state: Exp;  lines: +17 -7
the element class now has a static pointer to a constant Mesh named mesh.  This pointer can be used instead of passing the mesh to methods that need vertex locations.  For sanity assert it is not null before you use it!
----------------------------
revision 1.24
date: 2002/09/24 17:39:34;  author: benkirk;  state: Exp;  lines: +15 -5
find_neighbors now uses the minumum element necessary to find a neighbor.  This would be a quad4 in the case of hex{8,20,27}
----------------------------
revision 1.23
date: 2002/09/23 16:46:51;  author: benkirk;  state: Exp;  lines: +24 -17
hmin, hmax, and centroid now computed using element vertices instead of all the nodes.  This will be fatser in the case of Hex27s and other many-noded elements
----------------------------
revision 1.22
date: 2002/09/17 18:09:29;  author: benkirk;  state: Exp;  lines: +8 -1
incorporated Johns quality code for hexes based on diagonal ratio
----------------------------
revision 1.21
date: 2002/09/17 17:41:12;  author: benkirk;  state: Exp;  lines: +19 -1
added Pyramid and Prism base classes.
----------------------------
revision 1.20
date: 2002/08/21 14:44:46;  author: benkirk;  state: Exp;  lines: +14 -6
testing refinement some more.  Had to make the element parent a pointer (not a const pointer) due to some of the logic in the level-one enforcement.  Hopefully I can make it a const Elem* again in the future
----------------------------
revision 1.19
date: 2002/08/15 15:49:52;  author: benkirk;  state: Exp;  lines: +38 -17
Elements now have subdomain IDs and processor IDs.  You can get to an elements parent even if AMR is disabled.  This is useful for derived elements...  If you build a side of an element the resulting side knows what element it came from.
----------------------------
revision 1.18
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -2
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.17
date: 2002/07/28 21:14:30;  author: benkirk;  state: Exp;  lines: +27 -9
reworking internals of refinement
----------------------------
revision 1.16
date: 2002/05/16 00:06:21;  author: benkirk;  state: Exp;  lines: +16 -6
preliminary unrefinement support
----------------------------
revision 1.15
date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +4 -4
allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
----------------------------
revision 1.14
date: 2002/05/06 21:15:22;  author: benkirk;  state: Exp;  lines: +3 -4
refinement works for all 2D element types
----------------------------
revision 1.13
date: 2002/05/06 17:23:32;  author: benkirk;  state: Exp;  lines: +5 -2
refinement now works for linear triangles and quads
----------------------------
revision 1.12
date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +9 -5
refinement (at least uniform) now works
----------------------------
revision 1.11
date: 2002/05/02 13:40:18;  author: benkirk;  state: Exp;  lines: +14 -2
code clean up.  now compiles with g++, icc, cxx (alpha), and CC (SGI)
----------------------------
revision 1.10
date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +4 -4
eliminated templates from everything except Petsc Interface
----------------------------
revision 1.9
date: 2002/05/01 14:59:10;  author: benkirk;  state: Exp;  lines: +8 -14
elements do not allocate storage for their children until they are refined
----------------------------
revision 1.8
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -3
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.7
date: 2002/04/30 22:16:33;  author: benkirk;  state: Exp;  lines: +3 -2
initial shared library support
----------------------------
revision 1.6
date: 2002/04/30 13:33:54;  author: benkirk;  state: Exp;  lines: +19 -6
more on refinement
----------------------------
revision 1.5
date: 2002/04/29 21:50:52;  author: benkirk;  state: Exp;  lines: +41 -13
initial support for AMR.  builds fine, old functionality still retained.  much more to do.
----------------------------
revision 1.4
date: 2002/04/22 14:33:10;  author: benkirk;  state: Exp;  lines: +3 -1
initial support for pyramids.  still need shape functions and quadrature rules
----------------------------
revision 1.3
date: 2002/04/18 19:24:24;  author: benkirk;  state: Exp;  lines: +3 -1
documentation
----------------------------
revision 1.2
date: 2002/04/18 16:06:38;  author: benkirk;  state: Exp;  lines: +161 -25
documentation
----------------------------
revision 1.1
date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;
many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/elem_quality.h,v
Working file: include/elem_quality.h
head: 1.8
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 8;	selected revisions: 8
description:
----------------------------
revision 1.8
date: 2003/01/16 19:22:01;  author: peterson;  state: Exp;  lines: +1 -32
Appended enum_ to a few more files.
----------------------------
revision 1.7
date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +2 -2
Created separate file for the element type enumeration.
----------------------------
revision 1.6
date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +3 -2
Removing more unnecessary includes.
----------------------------
revision 1.5
date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +43 -9
added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
----------------------------
revision 1.4
date: 2002/11/03 23:45:52;  author: benkirk;  state: Exp;  lines: +2 -2
added support for multiple DOFs per node and element-based DOFs
----------------------------
revision 1.3
date: 2002/09/30 22:44:42;  author: peterson;  state: Exp;  lines: +11 -2
More utility functions in the Quality namespace.
----------------------------
revision 1.2
date: 2002/09/26 22:03:44;  author: peterson;  state: Exp;  lines: +19 -2
Added quality bounds for elements based on CUBIT docs.  Added the cut_below and cut_above functions to the StatVector.
----------------------------
revision 1.1
date: 2002/09/17 18:09:29;  author: benkirk;  state: Exp;
incorporated Johns quality code for hexes based on diagonal ratio
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/elem_type.h,v
Working file: include/elem_type.h
head: 1.17
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 17;	selected revisions: 17
description:
----------------------------
revision 1.17
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +2 -2
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.16
date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +1 -57
Created separate file for the element type enumeration.
----------------------------
revision 1.15
date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +13 -1
added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
----------------------------
revision 1.14
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +35 -11
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.13
date: 2002/11/30 18:45:19;  author: d.dreyer;  state: Exp;  lines: +24 -9
First stage of infinite elements: added geometric entities. Use them with --enable-ifem.
----------------------------
revision 1.12
date: 2002/11/03 23:45:52;  author: benkirk;  state: Exp;  lines: +7 -7
added support for multiple DOFs per node and element-based DOFs
----------------------------
revision 1.11
date: 2002/10/01 22:25:51;  author: peterson;  state: Exp;  lines: +11 -2
Added another type of naming system for element types.
----------------------------
revision 1.10
date: 2002/10/01 22:13:37;  author: peterson;  state: Exp;  lines: +28 -1
Added some element type utility functions. More work on stat_window.
----------------------------
revision 1.9
date: 2002/09/17 17:41:12;  author: benkirk;  state: Exp;  lines: +3 -3
added Pyramid and Prism base classes.
----------------------------
revision 1.8
date: 2002/09/17 03:57:19;  author: benkirk;  state: Exp;  lines: +8 -4
added Edge, Tri, Quad, Tet, and Hex base classes for specific instances of those types of elements.  still need ones for Prism and Pyramid
----------------------------
revision 1.7
date: 2002/09/09 13:53:54;  author: benkirk;  state: Exp;  lines: +9 -5
put enums in MeshEnums namespace.  Started using fluid for class design in the gui
----------------------------
revision 1.6
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.5
date: 2002/04/23 16:34:00;  author: benkirk;  state: Exp;  lines: +3 -3
added initial support for quad8 and hex20.  no shape functions yet
----------------------------
revision 1.4
date: 2002/04/22 14:33:10;  author: benkirk;  state: Exp;  lines: +2 -2
initial support for pyramids.  still need shape functions and quadrature rules
----------------------------
revision 1.3
date: 2002/04/12 16:04:11;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.2
date: 2002/04/03 23:25:33;  author: benkirk;  state: Exp;  lines: +2 -2
removerd order from fe
----------------------------
revision 1.1
date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;
changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/enum_elem_quality.h,v
Working file: include/enum_elem_quality.h
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/16 19:22:01;  author: peterson;  state: Exp;
Appended enum_ to a few more files.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/enum_elem_type.h,v
Working file: include/enum_elem_type.h
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/16 19:22:01;  author: peterson;  state: Exp;  lines: +2 -3
Appended enum_ to a few more files.
----------------------------
revision 1.1
date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;
Created separate file for the element type enumeration.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/enum_fe_family.h,v
Working file: include/enum_fe_family.h
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +4 -5
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
----------------------------
revision 1.1
date: 2003/01/16 16:42:28;  author: peterson;  state: Exp;
Removing unnecessary includes.  Changing headers which
simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/enum_inf_map_type.h,v
Working file: include/enum_inf_map_type.h
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/enum_order.h,v
Working file: include/enum_order.h
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +27 -38
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
----------------------------
revision 1.3
date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +4 -2
Added documentation.
----------------------------
revision 1.2
date: 2003/01/16 19:22:01;  author: peterson;  state: Exp;  lines: +2 -2
Appended enum_ to a few more files.
----------------------------
revision 1.1
date: 2003/01/16 16:42:28;  author: peterson;  state: Exp;
Removing unnecessary includes.  Changing headers which
simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/equation_systems.h,v
Working file: include/equation_systems.h
head: 1.20
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 20;	selected revisions: 20
description:
----------------------------
revision 1.20
date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +1 -3
Removing more unnecessary includes.
----------------------------
revision 1.19
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +34 -29
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.18
date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +2 -2
complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
----------------------------
revision 1.17
date: 2002/12/04 05:18:42;  author: benkirk;  state: Exp;  lines: +2 -2
equation_systems now supports inheritance
----------------------------
revision 1.16
date: 2002/11/26 20:27:17;  author: benkirk;  state: Exp;  lines: +2 -1
have sucessfully integrated restart in s3, made minor changes in equation_systems_io.C
----------------------------
revision 1.15
date: 2002/11/08 04:47:55;  author: benkirk;  state: Exp;  lines: +6 -1
errata
----------------------------
revision 1.14
date: 2002/10/17 22:04:04;  author: peterson;  state: Exp;  lines: +14 -2
Initial support for themes added to gui.
----------------------------
revision 1.13
date: 2002/09/09 13:53:54;  author: benkirk;  state: Exp;  lines: +11 -3
put enums in MeshEnums namespace.  Started using fluid for class design in the gui
----------------------------
revision 1.12
date: 2002/09/06 20:24:04;  author: benkirk;  state: Exp;  lines: +12 -3
it is now possible to write an equation system class without data.
----------------------------
revision 1.11
date: 2002/09/06 14:53:28;  author: benkirk;  state: Exp;  lines: +6 -3
added Xdr class to provide a uniform interface for Xdr and ASCII IO.  The equation_systems read & write is also based on these methods.  I have validated it for one processor.  Still need to be sure that in the case of multiple processors each proc gets te relevant piece of data.
----------------------------
revision 1.10
date: 2002/08/30 15:54:54;  author: benkirk;  state: Exp;  lines: +13 -1
forsaking netCDF.  writing a C++ XDR interface instead
----------------------------
revision 1.9
date: 2002/08/22 16:25:57;  author: benkirk;  state: Exp;  lines: +2 -2
separated netCDF from exodusII.  netCDF may be used by itself to provide an alternate binary mesh/solution output format.  Also changed the way system-dependent binary files are stored.  the configure variable host is now used instead of uname
----------------------------
revision 1.8
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -3
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.7
date: 2002/06/10 21:05:28;  author: benkirk;  state: Exp;  lines: +13 -13
can now mix approximation order for variables in a system.  There is a strange bug that causes the send_list size to be larger than the total number of dofs for the tet meshes on 2 procs
----------------------------
revision 1.6
date: 2002/06/06 22:56:14;  author: benkirk;  state: Exp;  lines: +11 -2
added EquationSystems reference inside SystemData.  SystemData solve now calls assemble
----------------------------
revision 1.5
date: 2002/06/06 20:57:30;  author: benkirk;  state: Exp;  lines: +9 -4
added assemble() function in system_data which is capable of assembling the system and vector
----------------------------
revision 1.4
date: 2002/06/04 15:08:28;  author: benkirk;  state: Exp;  lines: +2 -2
more work on equation system support.  Each SystemData now contains a matrix, rhs, and solution.  Can call the solve
----------------------------
revision 1.3
date: 2002/05/30 18:37:31;  author: benkirk;  state: Exp;  lines: +6 -1
added print_info to equation systems
----------------------------
revision 1.2
date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +77 -13
added equation system support
----------------------------
revision 1.1
date: 2002/05/28 20:33:42;  author: benkirk;  state: Exp;
added initial support for simulation groups (systems) and equation systems
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/face.h,v
Working file: include/face.h
head: 1.70
branch:
locks: strict
access list:
symbolic names:
	start: 1.1.1.1
	mesh: 1.1.1
keyword substitution: kv
total revisions: 71;	selected revisions: 71
description:
----------------------------
revision 1.70
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -2
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.69
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +7 -1
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.68
date: 2003/01/02 13:18:15;  author: benkirk;  state: Exp;  lines: +1 -6
split all the cell implementation into separate files.
----------------------------
revision 1.67
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +2 -2
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.66
date: 2002/12/24 14:50:05;  author: benkirk;  state: Exp;  lines: +6 -2
fixed invalid constructor calls.  SGI compiler caught the error
----------------------------
revision 1.65
date: 2002/12/23 18:24:58;  author: peterson;  state: Exp;  lines: +1 -947
Split up all the 2D elements (including
infinite elements) into separate files.  Now trying to
maintain a one class per header file system ;)
----------------------------
revision 1.64
date: 2002/12/23 15:18:39;  author: peterson;  state: Exp;  lines: +1 -13
Removed unnecessary write_tecplot function declarations.
----------------------------
revision 1.63
date: 2002/12/23 15:00:45;  author: peterson;  state: Exp;  lines: +14 -14
Moved write_ucd and write_tecplot_connectivity routines into the Elem base class.
----------------------------
revision 1.62
date: 2002/12/22 03:12:17;  author: benkirk;  state: Exp;  lines: +54 -23
added Edge, Face, and Cell classes.  Will be useful in FE reimplementation
----------------------------
revision 1.61
date: 2002/12/04 22:52:50;  author: benkirk;  state: Exp;  lines: +46 -21
added vtk_connectivity support for primitive (non-infinite) elements
----------------------------
revision 1.60
date: 2002/12/01 13:31:47;  author: d.dreyer;  state: Exp;  lines: +30 -1
minor changes to code for infinite elements; added some documentation; added in Makefile target doxy
----------------------------
revision 1.59
date: 2002/11/30 18:45:19;  author: d.dreyer;  state: Exp;  lines: +238 -1
First stage of infinite elements: added geometric entities. Use them with --enable-ifem.
----------------------------
revision 1.58
date: 2002/11/01 20:48:43;  author: benkirk;  state: Exp;  lines: +23 -19
split FE mapping from FE approximation.  made a lot of changes in the FE class that trickled down...
----------------------------
revision 1.57
date: 2002/10/21 12:54:35;  author: benkirk;  state: Exp;  lines: +3 -3
fixed quality method call
----------------------------
revision 1.56
date: 2002/10/18 15:10:05;  author: benkirk;  state: Exp;  lines: +22 -1
The fast element-containing-point search is now implemented using an OctTree.
----------------------------
revision 1.55
date: 2002/09/26 22:03:44;  author: peterson;  state: Exp;  lines: +27 -1
Added quality bounds for elements based on CUBIT docs.  Added the cut_below and cut_above functions to the StatVector.
----------------------------
revision 1.54
date: 2002/09/24 17:39:34;  author: benkirk;  state: Exp;  lines: +12 -11
find_neighbors now uses the minumum element necessary to find a neighbor.  This would be a quad4 in the case of hex{8,20,27}
----------------------------
revision 1.53
date: 2002/09/23 16:46:51;  author: benkirk;  state: Exp;  lines: +3 -2
hmin, hmax, and centroid now computed using element vertices instead of all the nodes.  This will be fatser in the case of Hex27s and other many-noded elements
----------------------------
revision 1.52
date: 2002/09/17 17:41:12;  author: benkirk;  state: Exp;  lines: +59 -14
added Pyramid and Prism base classes.
----------------------------
revision 1.51
date: 2002/09/17 03:57:19;  author: benkirk;  state: Exp;  lines: +88 -138
added Edge, Tri, Quad, Tet, and Hex base classes for specific instances of those types of elements.  still need ones for Prism and Pyramid
----------------------------
revision 1.50
date: 2002/08/21 14:44:46;  author: benkirk;  state: Exp;  lines: +11 -11
testing refinement some more.  Had to make the element parent a pointer (not a const pointer) due to some of the logic in the level-one enforcement.  Hopefully I can make it a const Elem* again in the future
----------------------------
revision 1.49
date: 2002/08/20 19:26:20;  author: benkirk;  state: Exp;  lines: +86 -1
created embedding matrices for all 2D elements and all but Pyramid for the 3D elements
----------------------------
revision 1.48
date: 2002/08/15 15:49:52;  author: benkirk;  state: Exp;  lines: +11 -11
Elements now have subdomain IDs and processor IDs.  You can get to an elements parent even if AMR is disabled.  This is useful for derived elements...  If you build a side of an element the resulting side knows what element it came from.
----------------------------
revision 1.47
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.46
date: 2002/05/16 20:25:54;  author: benkirk;  state: Exp;  lines: +14 -43
moved testmesh to meshtool.  made it more user-friendly so I could give it to Owen since he is now working with cubit meshes
----------------------------
revision 1.45
date: 2002/05/16 00:06:21;  author: benkirk;  state: Exp;  lines: +33 -29
preliminary unrefinement support
----------------------------
revision 1.44
date: 2002/05/15 11:22:18;  author: benkirk;  state: Exp;  lines: +75 -9
working on coarsening
----------------------------
revision 1.43
date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +14 -11
allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
----------------------------
revision 1.42
date: 2002/05/06 21:15:22;  author: benkirk;  state: Exp;  lines: +6 -14
refinement works for all 2D element types
----------------------------
revision 1.41
date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +24 -16
refinement (at least uniform) now works
----------------------------
revision 1.40
date: 2002/05/02 13:40:18;  author: benkirk;  state: Exp;  lines: +71 -1
code clean up.  now compiles with g++, icc, cxx (alpha), and CC (SGI)
----------------------------
revision 1.39
date: 2002/05/01 14:59:10;  author: benkirk;  state: Exp;  lines: +6 -6
elements do not allocate storage for their children until they are refined
----------------------------
revision 1.38
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -2
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.37
date: 2002/04/30 21:44:15;  author: benkirk;  state: Exp;  lines: +2 -1
added some more includes to satisfy CC on the SGI
----------------------------
revision 1.36
date: 2002/04/23 17:38:51;  author: benkirk;  state: Exp;  lines: +8 -8
Quad8 shape functions work now
----------------------------
revision 1.35
date: 2002/04/23 16:34:00;  author: benkirk;  state: Exp;  lines: +110 -26
added initial support for quad8 and hex20.  no shape functions yet
----------------------------
revision 1.34
date: 2002/04/18 16:06:38;  author: benkirk;  state: Exp;  lines: +125 -1
documentation
----------------------------
revision 1.33
date: 2002/04/18 14:03:20;  author: benkirk;  state: Exp;  lines: +5 -5
added QuadratureOrder enum.  broke quadrature.C into multiple files for faster compiles
----------------------------
revision 1.32
date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;  lines: +34 -291
many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
----------------------------
revision 1.31
date: 2002/04/12 16:04:11;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.30
date: 2002/04/11 04:57:34;  author: benkirk;  state: Exp;  lines: +2 -679
mucho changes.  better just ask Ben... Im a little too tired to write a useful comment now.  Suffice to say boundary conditions basically work, can have a 2D mesh in 3D space, etc...
----------------------------
revision 1.29
date: 2002/04/10 21:39:09;  author: benkirk;  state: Exp;  lines: +124 -1
working on boundary integral support
----------------------------
revision 1.28
date: 2002/04/10 18:13:39;  author: benkirk;  state: Exp;  lines: +42 -1
working on boundary support
----------------------------
revision 1.27
date: 2002/04/08 13:01:38;  author: benkirk;  state: Exp;  lines: +14 -14
more on sparsity structure.  changed n_tecplot_* to n_sub_* to be more generic.  added total_weight to mesh.h for partitioning hybrid meshes.
----------------------------
revision 1.26
date: 2002/04/03 23:25:33;  author: benkirk;  state: Exp;  lines: +1 -11
removerd order from fe
----------------------------
revision 1.25
date: 2002/04/03 02:26:27;  author: benkirk;  state: Exp;  lines: +33 -56
added GMV variable output support
----------------------------
revision 1.24
date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +100 -82
renamed config.h mesh_config.h and did some cleanup
----------------------------
revision 1.23
date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +35 -28
changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
----------------------------
revision 1.22
date: 2002/03/31 05:58:42;  author: peterson;  state: Exp;  lines: +5 -5
Added a new Conversion class to the ExodusII support.  The purpose of this class is to encapsut naming scheme and node numbering scheme which is purely local to ExodusII.  This way, other parts of the code, espend face.h dont need to know anything about other specialized naming schemes.
----------------------------
revision 1.21
date: 2002/03/29 21:22:51;  author: peterson;  state: Exp;  lines: +5 -5
Exodus support is working
----------------------------
revision 1.20
date: 2002/03/29 14:20:21;  author: benkirk;  state: Exp;  lines: +21 -30
split up mesh.C into logical, disjoint parts.
I also made edge a base-derived class, with Edge2 and Edge3 derived classes.
Tri, Quad, Tri6, Quad9, Hex, Tet, Prism, and Hex27 should work now.  Will double-check
the shape function calculation for the higher-order elements today.
----------------------------
revision 1.19
date: 2002/03/28 22:52:32;  author: benkirk;  state: Exp;  lines: +452 -16
added tri6, quad9, hex27.  will add prism17 and tet12 later.  I still need to make edge a base/derived class with edge2 and edge3 as derived classes
----------------------------
revision 1.18
date: 2002/03/21 15:18:27;  author: benkirk;  state: Exp;  lines: +39 -2
added tecplot binary support
----------------------------
revision 1.17
date: 2002/03/05 20:08:05;  author: benkirk;  state: Exp;  lines: +23 -1
errata
----------------------------
revision 1.16
date: 2002/03/05 16:57:43;  author: benkirk;  state: Exp;  lines: +3 -1
errata
----------------------------
revision 1.15
date: 2002/03/05 14:28:22;  author: benkirk;  state: Exp;  lines: +42 -16
adding more stuff
----------------------------
revision 1.14
date: 2002/03/05 06:12:42;  author: benkirk;  state: Exp;  lines: +37 -8
added neighborhood computation, petsc matrix from deal.II
----------------------------
revision 1.13
date: 2002/03/04 22:43:23;  author: benkirk;  state: Exp;  lines: +7 -2
added partitioning
----------------------------
revision 1.12
date: 2002/03/03 00:31:36;  author: benkirk;  state: Exp;  lines: +8 -5
updates makefile and added some fe shape functions, quadrature rules
----------------------------
revision 1.11
date: 2002/03/02 21:19:54;  author: benkirk;  state: Exp;  lines: +7 -1
updates makefile and added some fe shape functions, quadrature rules
----------------------------
revision 1.10
date: 2002/02/26 15:53:40;  author: benkirk;  state: Exp;  lines: +73 -7
Added pointers to neighbors within faces and cells, can now write UCD files
----------------------------
revision 1.9
date: 2002/02/25 22:55:36;  author: benkirk;  state: Exp;  lines: +63 -10
errata
----------------------------
revision 1.8
date: 2002/02/25 14:36:03;  author: benkirk;  state: Exp;  lines: +76 -3
errata
----------------------------
revision 1.7
date: 2002/02/25 05:23:04;  author: benkirk;  state: Exp;  lines: +5 -5
errata
----------------------------
revision 1.6
date: 2002/02/25 02:52:04;  author: benkirk;  state: Exp;  lines: +110 -9
errata
----------------------------
revision 1.5
date: 2002/02/25 01:18:38;  author: benkirk;  state: Exp;  lines: +35 -5
errata
----------------------------
revision 1.4
date: 2002/02/24 16:30:36;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.3
date: 2002/02/24 16:29:51;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.2
date: 2002/02/24 16:27:47;  author: benkirk;  state: Exp;  lines: +96 -4
errata
----------------------------
revision 1.1
date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;
branches:  1.1.1;
Initial revision
----------------------------
revision 1.1.1.1
date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;  lines: +0 -0
init
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/face_inf_quad4.h,v
Working file: include/face_inf_quad4.h
head: 1.8
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 8;	selected revisions: 8
description:
----------------------------
revision 1.8
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -5
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.7
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +11 -3
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.6
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.5
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.4
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.3
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.2
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.1
date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
Implemented the face_ naming scheme
suggested by Ben.  Files with face_ prepended to their
name indicate that they are implementing a 2D element, i.e. a face.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/face_inf_quad6.h,v
Working file: include/face_inf_quad6.h
head: 1.8
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 8;	selected revisions: 8
description:
----------------------------
revision 1.8
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -4
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.7
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +9 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.6
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.5
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.4
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.3
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.2
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.1
date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
Implemented the face_ naming scheme
suggested by Ben.  Files with face_ prepended to their
name indicate that they are implementing a 2D element, i.e. a face.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/face_quad.h,v
Working file: include/face_quad.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +1 -2
Removing more unnecessary includes.
----------------------------
revision 1.5
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -3
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.4
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.3
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -2
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.2
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +4 -4
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.1
date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
Implemented the face_ naming scheme
suggested by Ben.  Files with face_ prepended to their
name indicate that they are implementing a 2D element, i.e. a face.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/face_quad4.h,v
Working file: include/face_quad4.h
head: 1.8
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 8;	selected revisions: 8
description:
----------------------------
revision 1.8
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -4
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.7
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.6
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.5
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.4
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.3
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.2
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.1
date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
Implemented the face_ naming scheme
suggested by Ben.  Files with face_ prepended to their
name indicate that they are implementing a 2D element, i.e. a face.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/face_quad8.h,v
Working file: include/face_quad8.h
head: 1.7
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 7;	selected revisions: 7
description:
----------------------------
revision 1.7
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -3
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.6
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.5
date: 2003/01/08 21:30:24;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.4
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.3
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.2
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +6 -6
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.1
date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
Implemented the face_ naming scheme
suggested by Ben.  Files with face_ prepended to their
name indicate that they are implementing a 2D element, i.e. a face.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/face_quad9.h,v
Working file: include/face_quad9.h
head: 1.8
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 8;	selected revisions: 8
description:
----------------------------
revision 1.8
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -5
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.7
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.6
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.5
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.4
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.3
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.2
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.1
date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
Implemented the face_ naming scheme
suggested by Ben.  Files with face_ prepended to their
name indicate that they are implementing a 2D element, i.e. a face.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/face_tri.h,v
Working file: include/face_tri.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +1 -2
Removing more unnecessary includes.
----------------------------
revision 1.5
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -3
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.4
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +2 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.3
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -2
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.2
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +4 -4
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.1
date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
Implemented the face_ naming scheme
suggested by Ben.  Files with face_ prepended to their
name indicate that they are implementing a 2D element, i.e. a face.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/face_tri3.h,v
Working file: include/face_tri3.h
head: 1.8
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 8;	selected revisions: 8
description:
----------------------------
revision 1.8
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -4
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.7
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.6
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.5
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.4
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.3
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.2
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.1
date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
Implemented the face_ naming scheme
suggested by Ben.  Files with face_ prepended to their
name indicate that they are implementing a 2D element, i.e. a face.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/face_tri6.h,v
Working file: include/face_tri6.h
head: 1.8
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 8;	selected revisions: 8
description:
----------------------------
revision 1.8
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -5
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.7
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -2
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.6
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +2 -2
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.5
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +2 -2
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.4
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +2 -2
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.3
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +2 -2
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.2
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +5 -5
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.1
date: 2002/12/23 19:35:53;  author: peterson;  state: Exp;
Implemented the face_ naming scheme
suggested by Ben.  Files with face_ prepended to their
name indicate that they are implementing a 2D element, i.e. a face.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/factory.h,v
Working file: include/factory.h
head: 1.5
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 5;	selected revisions: 5
description:
----------------------------
revision 1.5
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +8 -8
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.4
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +7 -7
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.3
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +7 -7
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.2
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +17 -27
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.1
date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;
added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/fe.h,v
Working file: include/fe.h
head: 1.80
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 80;	selected revisions: 80
description:
----------------------------
revision 1.80
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +20 -9
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
----------------------------
revision 1.79
date: 2003/01/22 22:07:31;  author: d.dreyer;  state: Exp;  lines: +60 -625
Changes for inifinite elements: added some virtual members in FEBase; split fe_base.h from fe.h, but did not touch fe/src/fe*.C -- shall i change these, too?; changed normal vector of InfAbcXY::build_side(0) so that they point inwards; minor documentation issue in meshtool. -- All of this seems quite imperative to me for infinite elements. If anybody doesn't like - please feedback
----------------------------
revision 1.78
date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +202 -18
Added documentation.
----------------------------
revision 1.77
date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +6 -6
Created separate file for the element type enumeration.
----------------------------
revision 1.76
date: 2003/01/16 16:12:31;  author: benkirk;  state: Exp;  lines: +6 -26
reworked the reference counting to use C++ run-type identification
----------------------------
revision 1.75
date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +29 -14
reworked the ReferenceCounter class
----------------------------
revision 1.74
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +5 -6
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.73
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +31 -53
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.72
date: 2003/01/10 21:35:07;  author: benkirk;  state: Exp;  lines: +8 -8
switched from std::auto_ptr to AutoPtr
----------------------------
revision 1.71
date: 2003/01/09 22:56:51;  author: benkirk;  state: Exp;  lines: +8 -11
oops...  FE<> constructor should be public for FELagrange3D etc... to work!
----------------------------
revision 1.70
date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +56 -44
removed kdoc. added order to FEType
----------------------------
revision 1.69
date: 2003/01/09 19:38:45;  author: benkirk;  state: Exp;  lines: +6 -5
documentation.  Fix for template instantiation with Compaq CXX
----------------------------
revision 1.68
date: 2003/01/09 17:09:11;  author: benkirk;  state: Exp;  lines: +5 -8
added HOSTTYPE to object file names to facilitate cross-platform building. Added 1D (and tensor-product by extension) quadrature to order 23
----------------------------
revision 1.67
date: 2003/01/09 16:10:23;  author: d.dreyer;  state: Exp;  lines: +9 -9
nomenclature
----------------------------
revision 1.66
date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +7 -7
added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
----------------------------
revision 1.65
date: 2003/01/08 21:51:40;  author: benkirk;  state: Exp;  lines: +8 -6
updated documentation
----------------------------
revision 1.64
date: 2003/01/08 21:30:25;  author: benkirk;  state: Exp;  lines: +6 -6
auto_ptr fixed (again, once and for all?)
----------------------------
revision 1.63
date: 2003/01/08 20:23:30;  author: benkirk;  state: Exp;  lines: +8 -8
fixed return auto_ptr to return auto_ptr_ref, should have been that way all along
----------------------------
revision 1.62
date: 2003/01/08 16:17:40;  author: benkirk;  state: Exp;  lines: +14 -13
added auto_ptr<> to prevent memory leaks
----------------------------
revision 1.61
date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +130 -4
added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
----------------------------
revision 1.60
date: 2002/12/31 02:46:20;  author: benkirk;  state: Exp;  lines: +11 -60
added reference_counter
----------------------------
revision 1.59
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +371 -231
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.58
date: 2002/12/22 22:36:25;  author: benkirk;  state: Exp;  lines: +67 -82
made QBase pure virtual.  prefixing private variables with _ to distinguish from local variables.  Will make FEBase pure virtual and have templated classes derived from it for actual families of finite elements
----------------------------
revision 1.57
date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +3 -3
complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
----------------------------
revision 1.56
date: 2002/12/12 21:00:31;  author: d.dreyer;  state: Exp;  lines: +92 -53
Preparations for truly various finite element concepts. Had to decide: either make a _lot_ of FEBase virtual and mess up several switch statements, or introduce the FEInterface class to encapsulate the static member functions of finite element classes (guess what i chose). For good code re-use, i had to move some members in FEBase from private to protected, but did not touch the class in any other way - except for abandoning the virtual shape and shape_deriv. These do not make sense, were never used, and as stand-alone would not allow code re-use.
----------------------------
revision 1.55
date: 2002/11/27 20:58:50;  author: benkirk;  state: Exp;  lines: +8 -1
added trapezoidal quadrature.  Compute tangent directions _and_ normal on faces
----------------------------
revision 1.54
date: 2002/11/18 23:20:49;  author: benkirk;  state: Exp;  lines: +25 -1
added code to get dphidx etc... directly from the FE.  may or may not last
----------------------------
revision 1.53
date: 2002/11/08 20:50:38;  author: benkirk;  state: Exp;  lines: +3 -3
fixed quadrature mapping for faces on quads, tris, and hexes.  still need to fix tets, prisms, and pyramids
----------------------------
revision 1.52
date: 2002/11/06 03:53:27;  author: benkirk;  state: Exp;  lines: +57 -16
initial support for hierarchic shape functions.  tested though 4th-order on quads.  need to implement hexes, tris, and tets.  need to figure out hanging node constraints.  Should run an exhaustive convergence test
----------------------------
revision 1.51
date: 2002/11/03 23:45:52;  author: benkirk;  state: Exp;  lines: +23 -4
added support for multiple DOFs per node and element-based DOFs
----------------------------
revision 1.50
date: 2002/11/01 20:48:43;  author: benkirk;  state: Exp;  lines: +109 -54
split FE mapping from FE approximation.  made a lot of changes in the FE class that trickled down...
----------------------------
revision 1.49
date: 2002/10/28 17:29:47;  author: benkirk;  state: Exp;  lines: +12 -3
added code to compute normal vectors for face integration.  Now remove Make.common and force a re-configure when make distclean is executed
----------------------------
revision 1.48
date: 2002/10/18 20:10:24;  author: benkirk;  state: Exp;  lines: +5 -3
added grid2grid code which is an example of mappings from one grid to another
----------------------------
revision 1.47
date: 2002/10/18 13:12:24;  author: benkirk;  state: Exp;  lines: +7 -1
adding code that will report if a point is located in the reference element for a given type.  This is facilitating the grid2grid projection work.
----------------------------
revision 1.46
date: 2002/10/15 19:22:42;  author: benkirk;  state: Exp;  lines: +10 -8
removed class static pointers to the mesh in the finite element and element base classes.  This is necessary to support multiple meshes at the same time.
----------------------------
revision 1.45
date: 2002/10/11 20:56:15;  author: benkirk;  state: Exp;  lines: +9 -7
The FEBase class now has a static pointer to the mesh rather than a reference passed via the constructor.  DofMap can _almost_ constrain degrees of freedom properly
----------------------------
revision 1.44
date: 2002/10/08 21:24:31;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.43
date: 2002/08/20 13:35:20;  author: benkirk;  state: Exp;  lines: +14 -10
optimizing Point performance, fe_map
----------------------------
revision 1.42
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.41
date: 2002/06/11 20:06:39;  author: benkirk;  state: Exp;  lines: +17 -20
made the FE classes dof_index ignorant.  Now ask the dof map for the dof_indices associated with a cell
----------------------------
revision 1.40
date: 2002/06/11 19:29:22;  author: benkirk;  state: Exp;  lines: +36 -5
added code to compute the inverse map for a FE, that is: given a point in physical space, find the point on the reference element that contains that point.
----------------------------
revision 1.39
date: 2002/06/10 21:05:28;  author: benkirk;  state: Exp;  lines: +6 -1
can now mix approximation order for variables in a system.  There is a strange bug that causes the send_list size to be larger than the total number of dofs for the tet meshes on 2 procs
----------------------------
revision 1.38
date: 2002/06/10 12:03:49;  author: benkirk;  state: Exp;  lines: +7 -1
adding FE order specification to SystemData
----------------------------
revision 1.37
date: 2002/06/07 21:19:07;  author: benkirk;  state: Exp;  lines: +20 -13
added order enum.  Separating FE from mesh elements
----------------------------
revision 1.36
date: 2002/06/03 21:26:10;  author: benkirk;  state: Exp;  lines: +25 -20
initial support for Petsc submatrices
----------------------------
revision 1.35
date: 2002/05/31 15:59:28;  author: benkirk;  state: Exp;  lines: +2 -42
added TODO make target.  Allow user to optionally control DOF coupling for matrix allocation
----------------------------
revision 1.34
date: 2002/05/31 02:55:31;  author: benkirk;  state: Exp;  lines: +41 -32
petsc_matrix can now add non-square element matrices to off-diagonal locations.  fe can report dof_indices for individual components
----------------------------
revision 1.33
date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +20 -30
added equation system support
----------------------------
revision 1.32
date: 2002/05/02 13:41:47;  author: benkirk;  state: Exp;  lines: +11 -19
CC fix.
----------------------------
revision 1.31
date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +10 -10
changed cout to std::cout
----------------------------
revision 1.30
date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +62 -70
eliminated templates from everything except Petsc Interface
----------------------------
revision 1.29
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +22 -19
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.28
date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +9 -9
changes for compatibility with icc v6.0
----------------------------
revision 1.27
date: 2002/04/18 19:24:24;  author: benkirk;  state: Exp;  lines: +3 -1
documentation
----------------------------
revision 1.26
date: 2002/04/18 16:06:38;  author: benkirk;  state: Exp;  lines: +50 -32
documentation
----------------------------
revision 1.25
date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;  lines: +64 -77
many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
----------------------------
revision 1.24
date: 2002/04/15 21:53:14;  author: benkirk;  state: Exp;  lines: +22 -1
reworking boundary integration, not quite there yet
----------------------------
revision 1.23
date: 2002/04/15 12:21:17;  author: benkirk;  state: Exp;  lines: +167 -61
reworking the internals of FE*
----------------------------
revision 1.22
date: 2002/04/11 14:28:54;  author: benkirk;  state: Exp;  lines: +6 -6
BoundaryMesh now works.  Moved DofMap into MeshBase, so the user need not concern herself with that any more.
----------------------------
revision 1.21
date: 2002/04/11 04:57:34;  author: benkirk;  state: Exp;  lines: +46 -143
mucho changes.  better just ask Ben... Im a little too tired to write a useful comment now.  Suffice to say boundary conditions basically work, can have a 2D mesh in 3D space, etc...
----------------------------
revision 1.20
date: 2002/04/10 21:39:09;  author: benkirk;  state: Exp;  lines: +119 -109
working on boundary integral support
----------------------------
revision 1.19
date: 2002/04/10 18:13:39;  author: benkirk;  state: Exp;  lines: +40 -40
working on boundary support
----------------------------
revision 1.18
date: 2002/04/03 23:25:33;  author: benkirk;  state: Exp;  lines: +20 -12
removerd order from fe
----------------------------
revision 1.17
date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +7 -3
renamed config.h mesh_config.h and did some cleanup
----------------------------
revision 1.16
date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +51 -39
changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
----------------------------
revision 1.15
date: 2002/03/21 04:27:32;  author: benkirk;  state: Exp;  lines: +8 -1
fixed a bug in petsc_vector that caused a false lock, thus prohibiting future calls to close()
----------------------------
revision 1.14
date: 2002/03/18 23:27:36;  author: benkirk;  state: Exp;  lines: +12 -1
errata
----------------------------
revision 1.13
date: 2002/03/18 23:20:54;  author: benkirk;  state: Exp;  lines: +14 -11
errata
----------------------------
revision 1.12
date: 2002/03/18 23:13:07;  author: peterson;  state: Exp;  lines: +21 -2
Added print_xyx() to fe.h.
----------------------------
revision 1.11
date: 2002/03/18 21:25:48;  author: peterson;  state: Exp;  lines: +52 -1
Added inlined functions print_JxW() print_phi() print_dphi() and print_info() to fe.h
----------------------------
revision 1.10
date: 2002/03/08 19:45:05;  author: benkirk;  state: Exp;  lines: +7 -4
lots of changes
----------------------------
revision 1.9
date: 2002/03/07 20:52:30;  author: benkirk;  state: Exp;  lines: +11 -7
added dof_indices computation
----------------------------
revision 1.8
date: 2002/03/06 23:13:40;  author: benkirk;  state: Exp;  lines: +72 -3
actually starting to work
----------------------------
revision 1.7
date: 2002/03/05 18:07:09;  author: benkirk;  state: Exp;  lines: +21 -1
errata
----------------------------
revision 1.6
date: 2002/03/04 13:48:09;  author: benkirk;  state: Exp;  lines: +26 -5
Remade some make rules and split up the unwieldy fe.C
----------------------------
revision 1.5
date: 2002/03/02 21:19:54;  author: benkirk;  state: Exp;  lines: +5 -5
updates makefile and added some fe shape functions, quadrature rules
----------------------------
revision 1.4
date: 2002/03/01 01:05:46;  author: benkirk;  state: Exp;  lines: +4 -1
added 3D shape function calculation
----------------------------
revision 1.3
date: 2002/02/28 16:34:51;  author: benkirk;  state: Exp;  lines: +23 -12
errata
----------------------------
revision 1.2
date: 2002/02/28 03:52:05;  author: benkirk;  state: Exp;  lines: +7 -7
errata
----------------------------
revision 1.1
date: 2002/02/28 00:19:42;  author: benkirk;  state: Exp;
errata
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/fe_base.h,v
Working file: include/fe_base.h
head: 1.3
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 3;	selected revisions: 3
description:
----------------------------
revision 1.3
date: 2003/01/24 09:40:35;  author: d.dreyer;  state: Exp;  lines: +2 -2
first typos fixed
----------------------------
revision 1.2
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +44 -2
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
----------------------------
revision 1.1
date: 2003/01/22 22:07:31;  author: d.dreyer;  state: Exp;
Changes for inifinite elements: added some virtual members in FEBase; split fe_base.h from fe.h, but did not touch fe/src/fe*.C -- shall i change these, too?; changed normal vector of InfAbcXY::build_side(0) so that they point inwards; minor documentation issue in meshtool. -- All of this seems quite imperative to me for infinite elements. If anybody doesn't like - please feedback
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/fe_interface.h,v
Working file: include/fe_interface.h
head: 1.10
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 10;	selected revisions: 10
description:
----------------------------
revision 1.10
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +1 -50
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
----------------------------
revision 1.9
date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +2 -2
Created separate file for the element type enumeration.
----------------------------
revision 1.8
date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +24 -11
reworked the reference counting to use C++ run-type identification
----------------------------
revision 1.7
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +1 -3
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.6
date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +5 -11
removed kdoc. added order to FEType
----------------------------
revision 1.5
date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +11 -34
added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
----------------------------
revision 1.4
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;  lines: +67 -61
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.3
date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +3 -3
complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
----------------------------
revision 1.2
date: 2002/12/12 21:24:38;  author: d.dreyer;  state: Exp;  lines: +9 -7
corrected return on void.  renice'd --disable-ifem target.
----------------------------
revision 1.1
date: 2002/12/12 21:00:31;  author: d.dreyer;  state: Exp;
Preparations for truly various finite element concepts. Had to decide: either make a _lot_ of FEBase virtual and mess up several switch statements, or introduce the FEInterface class to encapsulate the static member functions of finite element classes (guess what i chose). For good code re-use, i had to move some members in FEBase from private to protected, but did not touch the class in any other way - except for abandoning the virtual shape and shape_deriv. These do not make sense, were never used, and as stand-alone would not allow code re-use.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/fe_type.h,v
Working file: include/fe_type.h
head: 1.10
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 10;	selected revisions: 10
description:
----------------------------
revision 1.10
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +21 -22
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
----------------------------
revision 1.9
date: 2003/01/16 16:42:28;  author: peterson;  state: Exp;  lines: +3 -29
Removing unnecessary includes.  Changing headers which
simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
----------------------------
revision 1.8
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +22 -6
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.7
date: 2003/01/14 14:33:41;  author: d.dreyer;  state: Exp;  lines: +0 -3
typo
----------------------------
revision 1.6
date: 2003/01/14 13:14:05;  author: d.dreyer;  state: Exp;  lines: +34 -43
updated FEType to match desired infinite element families
----------------------------
revision 1.5
date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +3 -4
removed kdoc. added order to FEType
----------------------------
revision 1.4
date: 2003/01/09 19:38:45;  author: benkirk;  state: Exp;  lines: +66 -18
documentation.  Fix for template instantiation with Compaq CXX
----------------------------
revision 1.3
date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +49 -2
added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
----------------------------
revision 1.2
date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +8 -1
added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
----------------------------
revision 1.1
date: 2002/12/31 00:49:52;  author: benkirk;  state: Exp;
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/inf_fe.h,v
Working file: include/inf_fe.h
head: 1.8
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 8;	selected revisions: 8
description:
----------------------------
revision 1.8
date: 2003/01/24 09:40:35;  author: d.dreyer;  state: Exp;  lines: +5 -5
first typos fixed
----------------------------
revision 1.7
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +765 -139
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
----------------------------
revision 1.6
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +5 -8
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.5
date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +8 -8
removed kdoc. added order to FEType
----------------------------
revision 1.4
date: 2002/12/31 15:38:47;  author: benkirk;  state: Exp;  lines: +2 -2
fixed --enable-mgf-workaround ./configure option
----------------------------
revision 1.3
date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +36 -16
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.2
date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +3 -3
complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
----------------------------
revision 1.1
date: 2002/12/12 21:00:31;  author: d.dreyer;  state: Exp;
Preparations for truly various finite element concepts. Had to decide: either make a _lot_ of FEBase virtual and mess up several switch statements, or introduce the FEInterface class to encapsulate the static member functions of finite element classes (guess what i chose). For good code re-use, i had to move some members in FEBase from private to protected, but did not touch the class in any other way - except for abandoning the virtual shape and shape_deriv. These do not make sense, were never used, and as stand-alone would not allow code re-use.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/inf_fe_instantiate_1D.h,v
Working file: include/inf_fe_instantiate_1D.h
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/inf_fe_instantiate_2D.h,v
Working file: include/inf_fe_instantiate_2D.h
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/inf_fe_instantiate_3D.h,v
Working file: include/inf_fe_instantiate_3D.h
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/inf_fe_macro.h,v
Working file: include/inf_fe_macro.h
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/mesh.h,v
Working file: include/mesh.h
head: 1.86
branch:
locks: strict
access list:
symbolic names:
	start: 1.1.1.1
	mesh: 1.1.1
keyword substitution: kv
total revisions: 87;	selected revisions: 87
description:
----------------------------
revision 1.86
date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +1 -7
Removing more unnecessary includes.
----------------------------
revision 1.85
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -3
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.84
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +15 -15
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.83
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +5 -4
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.82
date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +42 -22
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.81
date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +6 -6
complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
----------------------------
revision 1.80
date: 2002/12/18 18:50:50;  author: d.dreyer;  state: Exp;  lines: +25 -10
shifted all istream/ostream methods to protected since these aren't used from outside Mesh/MeshBase; this enables smooth transition to supporting complex numbers; updated documentation
----------------------------
revision 1.79
date: 2002/11/22 01:11:13;  author: d.dreyer;  state: Exp;  lines: +2 -2
Tammo's efforts: I-deas import seems to work. However, some problems with gcc 2.95.3, while gcc 3.2 works fine. Still need to include tet's.
----------------------------
revision 1.78
date: 2002/11/12 23:09:33;  author: benkirk;  state: Exp;  lines: +15 -1
now set bc_ids when creating a cube
----------------------------
revision 1.77
date: 2002/11/11 14:10:24;  author: benkirk;  state: Exp;  lines: +12 -6
added preliminary support for creating spherical meshes internally
----------------------------
revision 1.76
date: 2002/10/14 20:07:15;  author: benkirk;  state: Exp;  lines: +7 -1
merged Ideas UNV support from Daniel Dreyer et. al.
----------------------------
revision 1.75
date: 2002/09/24 20:05:07;  author: benkirk;  state: Exp;  lines: +2 -2
the element class now has a static pointer to a constant Mesh named mesh.  This pointer can be used instead of passing the mesh to methods that need vertex locations.  For sanity assert it is not null before you use it!
----------------------------
revision 1.74
date: 2002/09/17 03:57:19;  author: benkirk;  state: Exp;  lines: +2 -2
added Edge, Tri, Quad, Tet, and Hex base classes for specific instances of those types of elements.  still need ones for Prism and Pyramid
----------------------------
revision 1.73
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.72
date: 2002/06/06 20:57:30;  author: benkirk;  state: Exp;  lines: +3 -1
added assemble() function in system_data which is capable of assembling the system and vector
----------------------------
revision 1.71
date: 2002/05/30 18:06:39;  author: benkirk;  state: Exp;  lines: +1 -2
removed perf_log from MeshBase.  the user should log events in the applications code.
----------------------------
revision 1.70
date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +3 -2
added equation system support
----------------------------
revision 1.69
date: 2002/05/22 19:23:57;  author: benkirk;  state: Exp;  lines: +4 -1
added distort() to MeshBase that allows a mesh to be randomly distorted
----------------------------
revision 1.68
date: 2002/05/17 19:10:22;  author: benkirk;  state: Exp;  lines: +3 -2
added pause and restart to perf_log.  put it in most of the major algorithms
----------------------------
revision 1.67
date: 2002/05/17 16:45:55;  author: benkirk;  state: Exp;  lines: +6 -1
added performance logging utility
----------------------------
revision 1.66
date: 2002/05/16 20:25:54;  author: benkirk;  state: Exp;  lines: +23 -5
moved testmesh to meshtool.  made it more user-friendly so I could give it to Owen since he is now working with cubit meshes
----------------------------
revision 1.65
date: 2002/05/16 00:06:21;  author: benkirk;  state: Exp;  lines: +3 -5
preliminary unrefinement support
----------------------------
revision 1.64
date: 2002/05/14 23:05:57;  author: benkirk;  state: Exp;  lines: +21 -1
added new_nodes and new_element database for mesh_refinement
----------------------------
revision 1.63
date: 2002/05/13 18:47:35;  author: benkirk;  state: Exp;  lines: +13 -1
Added DIVA output support
----------------------------
revision 1.62
date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +10 -1
allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
----------------------------
revision 1.61
date: 2002/05/10 21:05:19;  author: benkirk;  state: Exp;  lines: +14 -1
added hex20 refinement rules.  completely rewrote main.cc to be much more flexible
----------------------------
revision 1.60
date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +2 -2
refinement (at least uniform) now works
----------------------------
revision 1.59
date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +5 -428
eliminated templates from everything except Petsc Interface
----------------------------
revision 1.58
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +19 -101
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.57
date: 2002/04/30 18:09:01;  author: peterson;  state: Exp;  lines: +1 -12
Removed unneeded filename stuff, pared down the size of objects.
----------------------------
revision 1.56
date: 2002/04/29 21:50:52;  author: benkirk;  state: Exp;  lines: +58 -13
initial support for AMR.  builds fine, old functionality still retained.  much more to do.
----------------------------
revision 1.55
date: 2002/04/26 21:49:02;  author: peterson;  state: Exp;  lines: +2 -2
Added pyramid quadrature rule.
----------------------------
revision 1.54
date: 2002/04/25 21:50:54;  author: benkirk;  state: Exp;  lines: +2 -1
added includes to fix compile under gcc2.*
----------------------------
revision 1.53
date: 2002/04/23 13:12:49;  author: benkirk;  state: Exp;  lines: +3 -3
added face quadrature rules for pyramids.  mesh_metis_support now can compute the graph and call the graph partitioners
----------------------------
revision 1.52
date: 2002/04/18 19:24:24;  author: benkirk;  state: Exp;  lines: +32 -116
documentation
----------------------------
revision 1.51
date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;  lines: +69 -137
many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
----------------------------
revision 1.50
date: 2002/04/16 22:57:03;  author: peterson;  state: Exp;  lines: +6 -1
Found bug in XDR output, still not ready for prime time.
----------------------------
revision 1.49
date: 2002/04/12 21:48:33;  author: benkirk;  state: Exp;  lines: +8 -1
metic works for linear elements, I know what to do to fix it for quadratics, but it isnt there yet
----------------------------
revision 1.48
date: 2002/04/12 16:04:11;  author: benkirk;  state: Exp;  lines: +13 -1
errata
----------------------------
revision 1.47
date: 2002/04/12 06:53:20;  author: peterson;  state: Exp;  lines: +7 -1
Added initial support for the augmented mesh headers in the xdr format.
----------------------------
revision 1.46
date: 2002/04/12 03:32:36;  author: benkirk;  state: Exp;  lines: +2 -2
fixed empty numBCs in the case of writing xdr files
----------------------------
revision 1.45
date: 2002/04/11 17:37:45;  author: benkirk;  state: Exp;  lines: +4 -2
dofs_per_vertex is 0 until distribute_dofs is called, then is either user-specified or 1
----------------------------
revision 1.44
date: 2002/04/11 16:09:28;  author: benkirk;  state: Exp;  lines: +1 -8
fixed exodusII side maps.  eliminated mesh rebuild_maps() function, moved into find_neighbors()
----------------------------
revision 1.43
date: 2002/04/11 14:28:54;  author: benkirk;  state: Exp;  lines: +17 -15
BoundaryMesh now works.  Moved DofMap into MeshBase, so the user need not concern herself with that any more.
----------------------------
revision 1.42
date: 2002/04/11 04:57:34;  author: benkirk;  state: Exp;  lines: +166 -403
mucho changes.  better just ask Ben... Im a little too tired to write a useful comment now.  Suffice to say boundary conditions basically work, can have a 2D mesh in 3D space, etc...
----------------------------
revision 1.41
date: 2002/04/10 18:13:39;  author: benkirk;  state: Exp;  lines: +7 -2
working on boundary support
----------------------------
revision 1.40
date: 2002/04/10 01:53:21;  author: benkirk;  state: Exp;  lines: +2 -1
working on boundary output.  cleaned up some code in shape_function calculations. probably going to change the way side boundary conditions are stored
----------------------------
revision 1.39
date: 2002/04/09 19:27:53;  author: benkirk;  state: Exp;  lines: +56 -1
added n_elem_of_type(ElemType type)
----------------------------
revision 1.38
date: 2002/04/09 18:56:41;  author: benkirk;  state: Exp;  lines: +24 -1
added clear() function to mesh that frees all data
----------------------------
revision 1.37
date: 2002/04/09 01:01:45;  author: peterson;  state: Exp;  lines: +31 -14
Now reads meshes in XDR format created by MGF
and created by itself.  Gets the same answer
both ways!  Still a little buggy though, I wouldn't
use the XDR support for anything important yet.
One thing that does not work: There seems to be
a problem with opening AND closing the SAME
file in a single program ...
----------------------------
revision 1.36
date: 2002/04/08 13:01:38;  author: benkirk;  state: Exp;  lines: +56 -5
more on sparsity structure.  changed n_tecplot_* to n_sub_* to be more generic.  added total_weight to mesh.h for partitioning hybrid meshes.
----------------------------
revision 1.35
date: 2002/04/06 14:25:38;  author: benkirk;  state: Exp;  lines: +21 -11
added an optional flag to write_gmv* that allows the partitioning information to be written.  Useful for viewing the effectiveness of various partitioning schemes
----------------------------
revision 1.34
date: 2002/04/05 22:48:13;  author: peterson;  state: Exp;  lines: +15 -1
Initial merge of XDR read/write capabilities.
----------------------------
revision 1.33
date: 2002/04/05 22:38:18;  author: benkirk;  state: Exp;  lines: +113 -1
added a lot of documentation and re-ordered the quadratic 1D basis functions
----------------------------
revision 1.32
date: 2002/04/04 22:02:09;  author: benkirk;  state: Exp;  lines: +2 -2
documentation
----------------------------
revision 1.31
date: 2002/04/04 16:28:47;  author: benkirk;  state: Exp;  lines: +163 -100
removed the separate data & mesh output functions for GMV and Tecplot, documented mesh.h
----------------------------
revision 1.30
date: 2002/04/04 05:24:21;  author: benkirk;  state: Exp;  lines: +89 -12
added initial hooks for kdoc
----------------------------
revision 1.29
date: 2002/04/03 23:19:21;  author: peterson;  state: Exp;  lines: +39 -1
working on GMV binary support
----------------------------
revision 1.28
date: 2002/04/03 02:26:27;  author: benkirk;  state: Exp;  lines: +78 -32
added GMV variable output support
----------------------------
revision 1.27
date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +7 -6
renamed config.h mesh_config.h and did some cleanup
----------------------------
revision 1.26
date: 2002/04/02 06:27:25;  author: peterson;  state: Exp;  lines: +4 -2
Initial merge of gmv support.  This includes both mesh_gmv_support.C and mesh_gmv_support.h.  Nothing really works yet except possibly ReadGMV::open.  I have also added a file called acronyms.txt which contains possible names for the code, mainly as a joke. The pre-processor variable HAVE_GMV is configured for and is disabled by default.  It can be enabled in the usual -- manner.
----------------------------
revision 1.25
date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +8 -8
changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
----------------------------
revision 1.24
date: 2002/03/29 15:51:49;  author: peterson;  state: Exp;  lines: +15 -1
initial merge of exodus support, changed configure for lsfcurves, lpapi, lperfctr
----------------------------
revision 1.23
date: 2002/03/28 22:52:32;  author: benkirk;  state: Exp;  lines: +47 -2
added tri6, quad9, hex27.  will add prism17 and tet12 later.  I still need to make edge a base/derived class with edge2 and edge3 as derived classes
----------------------------
revision 1.22
date: 2002/03/27 22:38:45;  author: peterson;  state: Exp;  lines: +15 -1
Added mesh.read_matlab(), PetscVector.add_petsc_vector(),PetscVector.print(), and the beginnings of PetscMatrix.print()
----------------------------
revision 1.21
date: 2002/03/21 15:18:27;  author: benkirk;  state: Exp;  lines: +7 -1
added tecplot binary support
----------------------------
revision 1.20
date: 2002/03/08 19:45:05;  author: benkirk;  state: Exp;  lines: +19 -3
lots of changes
----------------------------
revision 1.19
date: 2002/03/07 16:32:13;  author: benkirk;  state: Exp;  lines: +9 -94
works in parallel
----------------------------
revision 1.18
date: 2002/03/06 23:13:40;  author: benkirk;  state: Exp;  lines: +99 -2
actually starting to work
----------------------------
revision 1.17
date: 2002/03/05 20:08:05;  author: benkirk;  state: Exp;  lines: +7 -1
errata
----------------------------
revision 1.16
date: 2002/03/05 18:07:09;  author: benkirk;  state: Exp;  lines: +1 -10
errata
----------------------------
revision 1.15
date: 2002/03/05 16:57:43;  author: benkirk;  state: Exp;  lines: +4 -4
errata
----------------------------
revision 1.14
date: 2002/03/04 22:43:23;  author: benkirk;  state: Exp;  lines: +4 -1
added partitioning
----------------------------
revision 1.13
date: 2002/03/04 15:17:38;  author: benkirk;  state: Exp;  lines: +3 -3
errata
----------------------------
revision 1.12
date: 2002/03/03 00:31:36;  author: benkirk;  state: Exp;  lines: +4 -2
updates makefile and added some fe shape functions, quadrature rules
----------------------------
revision 1.11
date: 2002/02/28 16:34:51;  author: benkirk;  state: Exp;  lines: +8 -1
errata
----------------------------
revision 1.10
date: 2002/02/28 03:52:05;  author: benkirk;  state: Exp;  lines: +19 -5
errata
----------------------------
revision 1.9
date: 2002/02/27 23:22:21;  author: benkirk;  state: Exp;  lines: +8 -8
errata
----------------------------
revision 1.8
date: 2002/02/26 15:53:40;  author: benkirk;  state: Exp;  lines: +10 -1
Added pointers to neighbors within faces and cells, can now write UCD files
----------------------------
revision 1.7
date: 2002/02/25 14:36:03;  author: benkirk;  state: Exp;  lines: +94 -1
errata
----------------------------
revision 1.6
date: 2002/02/25 05:23:04;  author: benkirk;  state: Exp;  lines: +72 -6
errata
----------------------------
revision 1.5
date: 2002/02/25 02:52:04;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.4
date: 2002/02/24 16:30:36;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.3
date: 2002/02/24 16:29:51;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.2
date: 2002/02/24 16:27:47;  author: benkirk;  state: Exp;  lines: +62 -4
errata
----------------------------
revision 1.1
date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;
branches:  1.1.1;
Initial revision
----------------------------
revision 1.1.1.1
date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;  lines: +0 -0
init
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/mesh_base.h,v
Working file: include/mesh_base.h
head: 1.49
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 49;	selected revisions: 49
description:
----------------------------
revision 1.49
date: 2003/01/16 20:43:46;  author: peterson;  state: Exp;  lines: +2 -3
Removing more unnecessary #includes.
----------------------------
revision 1.48
date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +3 -3
Created separate file for the element type enumeration.
----------------------------
revision 1.47
date: 2003/01/16 16:42:28;  author: peterson;  state: Exp;  lines: +3 -3
Removing unnecessary includes.  Changing headers which
simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
----------------------------
revision 1.46
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +808 -813
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.45
date: 2003/01/15 23:20:40;  author: hendrik;  state: Exp;  lines: +813 -782
added MeshBase::add_inf_elem() method
----------------------------
revision 1.44
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +21 -21
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.43
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +95 -18
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.42
date: 2003/01/09 19:38:45;  author: benkirk;  state: Exp;  lines: +2 -16
documentation.  Fix for template instantiation with Compaq CXX
----------------------------
revision 1.41
date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +19 -3
added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
----------------------------
revision 1.40
date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +70 -72
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.39
date: 2002/12/22 22:36:25;  author: benkirk;  state: Exp;  lines: +22 -22
made QBase pure virtual.  prefixing private variables with _ to distinguish from local variables.  Will make FEBase pure virtual and have templated classes derived from it for actual families of finite elements
----------------------------
revision 1.38
date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +38 -8
complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
----------------------------
revision 1.37
date: 2002/12/18 18:50:50;  author: d.dreyer;  state: Exp;  lines: +131 -78
shifted all istream/ostream methods to protected since these aren't used from outside Mesh/MeshBase; this enables smooth transition to supporting complex numbers; updated documentation
----------------------------
revision 1.36
date: 2002/12/17 16:47:08;  author: benkirk;  state: Exp;  lines: +2 -2
fixed cvs2html to get the names right, fixed typeos in the documentation
----------------------------
revision 1.35
date: 2002/11/12 23:09:33;  author: benkirk;  state: Exp;  lines: +1 -15
now set bc_ids when creating a cube
----------------------------
revision 1.34
date: 2002/11/11 14:10:24;  author: benkirk;  state: Exp;  lines: +13 -1
added preliminary support for creating spherical meshes internally
----------------------------
revision 1.33
date: 2002/11/06 22:44:07;  author: benkirk;  state: Exp;  lines: +2 -2
adding hierarchic basis functions
----------------------------
revision 1.32
date: 2002/11/04 23:05:12;  author: benkirk;  state: Exp;  lines: +4 -2
can generate quad9 and hex27 bricks internally.  added code in DofMap to only allocate space for element dofs if any elements _have_ dofs
----------------------------
revision 1.31
date: 2002/10/17 22:04:04;  author: peterson;  state: Exp;  lines: +7 -3
Initial support for themes added to gui.
----------------------------
revision 1.30
date: 2002/10/07 02:48:10;  author: benkirk;  state: Exp;  lines: +8 -1
added the get_log member function.  Allows the logging stream to be captured directly and displayed in a window.
----------------------------
revision 1.29
date: 2002/10/04 17:03:12;  author: benkirk;  state: Exp;  lines: +7 -2
the mesh now can log performance.  configure with --enable-perflog.  also, amr is enabled by default
----------------------------
revision 1.28
date: 2002/10/03 19:14:16;  author: benkirk;  state: Exp;  lines: +7 -1
added uniform refinement to the alter menu.  created get_info function in mesh base class that returns info about the mesh as a string.  this contains the same information printed by print_info
----------------------------
revision 1.27
date: 2002/09/27 16:03:07;  author: benkirk;  state: Exp;  lines: +19 -1
split the mesh.C file into mesh.C and mesh_base.C because it was getting _way_ too big.
----------------------------
revision 1.26
date: 2002/09/25 17:53:41;  author: benkirk;  state: Exp;  lines: +16 -2
added initial surface support.  I have already implemented a plane and a sphere, more to follow.  added support for bounding-box computation on a subdomain-by-subdomain and processor-by-processor basis.
----------------------------
revision 1.25
date: 2002/09/24 20:05:07;  author: benkirk;  state: Exp;  lines: +29 -1
the element class now has a static pointer to a constant Mesh named mesh.  This pointer can be used instead of passing the mesh to methods that need vertex locations.  For sanity assert it is not null before you use it!
----------------------------
revision 1.24
date: 2002/08/15 21:24:05;  author: benkirk;  state: Exp;  lines: +5 -5
made the partition functions virtual for GUI reasons.  added a colormap class
----------------------------
revision 1.23
date: 2002/08/15 15:49:52;  author: benkirk;  state: Exp;  lines: +13 -1
Elements now have subdomain IDs and processor IDs.  You can get to an elements parent even if AMR is disabled.  This is useful for derived elements...  If you build a side of an element the resulting side knows what element it came from.
----------------------------
revision 1.22
date: 2002/08/12 20:02:10;  author: benkirk;  state: Exp;  lines: +10 -1
added bounding box computation
----------------------------
revision 1.21
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.20
date: 2002/07/29 19:17:33;  author: benkirk;  state: Exp;  lines: +1 -11
added absolute pathnames to shared libraries to avoid LD_LIBRARY_PATH problems
----------------------------
revision 1.19
date: 2002/07/28 21:14:30;  author: benkirk;  state: Exp;  lines: +14 -4
reworking internals of refinement
----------------------------
revision 1.18
date: 2002/06/21 01:55:02;  author: benkirk;  state: Exp;  lines: +23 -1
added rotate, translate, and scale.  Need to finish rotate
----------------------------
revision 1.17
date: 2002/06/06 20:57:30;  author: benkirk;  state: Exp;  lines: +2 -2
added assemble() function in system_data which is capable of assembling the system and vector
----------------------------
revision 1.16
date: 2002/06/06 18:43:42;  author: benkirk;  state: Exp;  lines: +18 -1
added all_tri() function that converts a 2D mesh so that is composed completely of triangles
----------------------------
revision 1.15
date: 2002/05/30 18:06:39;  author: benkirk;  state: Exp;  lines: +3 -9
removed perf_log from MeshBase.  the user should log events in the applications code.
----------------------------
revision 1.14
date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +38 -9
added equation system support
----------------------------
revision 1.13
date: 2002/05/22 19:23:57;  author: benkirk;  state: Exp;  lines: +11 -1
added distort() to MeshBase that allows a mesh to be randomly distorted
----------------------------
revision 1.12
date: 2002/05/17 19:10:22;  author: benkirk;  state: Exp;  lines: +5 -2
added pause and restart to perf_log.  put it in most of the major algorithms
----------------------------
revision 1.11
date: 2002/05/17 16:45:55;  author: benkirk;  state: Exp;  lines: +15 -1
added performance logging utility
----------------------------
revision 1.10
date: 2002/05/16 20:25:54;  author: benkirk;  state: Exp;  lines: +2 -2
moved testmesh to meshtool.  made it more user-friendly so I could give it to Owen since he is now working with cubit meshes
----------------------------
revision 1.9
date: 2002/05/14 23:05:57;  author: benkirk;  state: Exp;  lines: +11 -4
added new_nodes and new_element database for mesh_refinement
----------------------------
revision 1.8
date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +1 -10
allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
----------------------------
revision 1.7
date: 2002/05/10 21:05:19;  author: benkirk;  state: Exp;  lines: +18 -5
added hex20 refinement rules.  completely rewrote main.cc to be much more flexible
----------------------------
revision 1.6
date: 2002/05/08 14:09:18;  author: benkirk;  state: Exp;  lines: +5 -46
put refinement support in its own class, split the element refinement implementations into separate files to aviod clutter
----------------------------
revision 1.5
date: 2002/05/07 22:02:57;  author: benkirk;  state: Exp;  lines: +7 -2
refinement now works for all 2D elements, the Tet, and the Hex
----------------------------
revision 1.4
date: 2002/05/06 21:15:22;  author: benkirk;  state: Exp;  lines: +9 -2
refinement works for all 2D element types
----------------------------
revision 1.3
date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +12 -4
refinement (at least uniform) now works
----------------------------
revision 1.2
date: 2002/05/02 03:18:18;  author: benkirk;  state: Exp;  lines: +2 -2
added point.h to mesh_base.h
----------------------------
revision 1.1
date: 2002/05/01 22:24:54;  author: benkirk;  state: Exp;
forgot to add some files
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/mesh_common.h,v
Working file: include/mesh_common.h
head: 1.24
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 24;	selected revisions: 24
description:
----------------------------
revision 1.24
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +10 -4
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.23
date: 2003/01/08 17:13:03;  author: benkirk;  state: Exp;  lines: +4 -7
forget that...
----------------------------
revision 1.22
date: 2003/01/08 17:01:58;  author: benkirk;  state: Exp;  lines: +6 -3
fix for IBM xlC
----------------------------
revision 1.21
date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +26 -1
complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
----------------------------
revision 1.20
date: 2002/10/27 14:39:44;  author: benkirk;  state: Exp;  lines: +2 -1
portability fixes
----------------------------
revision 1.19
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.18
date: 2002/07/28 21:14:30;  author: benkirk;  state: Exp;  lines: +4 -3
reworking internals of refinement
----------------------------
revision 1.17
date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +7 -5
refinement (at least uniform) now works
----------------------------
revision 1.16
date: 2002/05/02 15:36:49;  author: benkirk;  state: Exp;  lines: +2 -2
cxx errata
----------------------------
revision 1.15
date: 2002/05/02 15:29:21;  author: benkirk;  state: Exp;  lines: +2 -2
added configure rules to support muptiple compilers
----------------------------
revision 1.14
date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +2 -2
changed cout to std::cout
----------------------------
revision 1.13
date: 2002/05/02 02:52:20;  author: benkirk;  state: Exp;  lines: +2 -2
changed iostream.h to iostream in mesh_common.h
----------------------------
revision 1.12
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +9 -1
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.11
date: 2002/04/30 18:09:01;  author: peterson;  state: Exp;  lines: +1 -1
Removed unneeded filename stuff, pared down the size of objects.
----------------------------
revision 1.10
date: 2002/04/30 16:19:57;  author: benkirk;  state: Exp;  lines: +5 -5
 hooks to add triangle support, reworked configure to only substitute paths if they are correctly located
----------------------------
revision 1.9
date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +1 -1
changes for compatibility with icc v6.0
----------------------------
revision 1.8
date: 2002/04/08 13:01:38;  author: benkirk;  state: Exp;  lines: +0 -2
more on sparsity structure.  changed n_tecplot_* to n_sub_* to be more generic.  added total_weight to mesh.h for partitioning hybrid meshes.
----------------------------
revision 1.7
date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +1 -3
changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
----------------------------
revision 1.6
date: 2002/02/27 23:22:21;  author: benkirk;  state: Exp;  lines: +2 -4
errata
----------------------------
revision 1.5
date: 2002/02/25 14:36:03;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.4
date: 2002/02/25 05:23:04;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.3
date: 2002/02/25 02:52:04;  author: benkirk;  state: Exp;  lines: +4 -23
errata
----------------------------
revision 1.2
date: 2002/02/22 22:36:39;  author: benkirk;  state: Exp;  lines: +6 -0
errata
----------------------------
revision 1.1
date: 2002/02/22 22:34:17;  author: benkirk;  state: Exp;
errata
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/mesh_documentation.h,v
Working file: include/mesh_documentation.h
head: 1.7
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 7;	selected revisions: 7
description:
----------------------------
revision 1.7
date: 2003/01/24 02:17:03;  author: d.dreyer;  state: Exp;  lines: +1 -1
Adding infinite element class :-) (finally...). Builds & Links successfully with both gcc's.  Managed to avoid templating InfFE also wrt the T of FE<Dim,T> (at the cost of a few new virtual functions in FEBase). Still, with old gcc, library size increases almost by 1/3rd, compared with disabled ifem. Definitely need to test them!
----------------------------
revision 1.6
date: 2003/01/24 00:04:50;  author: d.dreyer;  state: Exp;  lines: +3 -3
just a german umlaut
----------------------------
revision 1.5
date: 2003/01/22 14:07:52;  author: benkirk;  state: Exp;  lines: +28 -23
documentation
----------------------------
revision 1.4
date: 2003/01/22 02:04:18;  author: benkirk;  state: Exp;  lines: +2 -2
documentation
----------------------------
revision 1.3
date: 2003/01/22 00:40:49;  author: benkirk;  state: Exp;  lines: +55 -15
documentation
----------------------------
revision 1.2
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -4
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.1
date: 2003/01/09 19:38:45;  author: benkirk;  state: Exp;
documentation.  Fix for template instantiation with Compaq CXX
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/mesh_exodus_support.h,v
Working file: include/mesh_exodus_support.h
head: 1.17
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 17;	selected revisions: 17
description:
----------------------------
revision 1.17
date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +35 -1
Added documentation.
----------------------------
revision 1.16
date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +91 -54
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.15
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +21 -0
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.14
date: 2002/07/28 21:14:30;  author: benkirk;  state: Exp;  lines: +2 -0
reworking internals of refinement
----------------------------
revision 1.13
date: 2002/05/17 19:10:22;  author: benkirk;  state: Exp;  lines: +0 -40
added pause and restart to perf_log.  put it in most of the major algorithms
----------------------------
revision 1.12
date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +2 -0
refinement (at least uniform) now works
----------------------------
revision 1.11
date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +3 -3
changed cout to std::cout
----------------------------
revision 1.10
date: 2002/04/24 21:32:55;  author: benkirk;  state: Exp;  lines: +11 -1
working on tet10 basis functions
----------------------------
revision 1.9
date: 2002/04/23 16:34:00;  author: benkirk;  state: Exp;  lines: +19 -0
added initial support for quad8 and hex20.  no shape functions yet
----------------------------
revision 1.8
date: 2002/04/11 16:09:28;  author: benkirk;  state: Exp;  lines: +4 -9
fixed exodusII side maps.  eliminated mesh rebuild_maps() function, moved into find_neighbors()
----------------------------
revision 1.7
date: 2002/04/10 18:13:39;  author: benkirk;  state: Exp;  lines: +4 -4
working on boundary support
----------------------------
revision 1.6
date: 2002/04/10 01:53:21;  author: benkirk;  state: Exp;  lines: +1 -1
working on boundary output.  cleaned up some code in shape_function calculations. probably going to change the way side boundary conditions are stored
----------------------------
revision 1.5
date: 2002/04/09 21:13:20;  author: peterson;  state: Exp;  lines: +59 -6
working on XDR support, boundary support in exodusII
----------------------------
revision 1.4
date: 2002/04/05 06:51:15;  author: peterson;  state: Exp;  lines: +22 -20
Added configure check for rpc/rpc.h, the header file responsible for including xdr support.
----------------------------
revision 1.3
date: 2002/04/05 03:21:44;  author: benkirk;  state: Exp;  lines: +9 -3
cleaned up ./configure some.  Reversed-engineered the Tri6 connectivity.  Documented some.  Added hooks for n_nz & n_oz in dof_map
----------------------------
revision 1.2
date: 2002/04/04 18:48:48;  author: peterson;  state: Exp;  lines: +433 -134
Commented exodus support, added new make dependency.
----------------------------
revision 1.1
date: 2002/04/04 06:12:54;  author: peterson;  state: Exp;
Split exodus support into a .C and a .h file. Made main.cc comply with new FE constructor.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/mesh_refinement.h,v
Working file: include/mesh_refinement.h
head: 1.14
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 14;	selected revisions: 14
description:
----------------------------
revision 1.14
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -5
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.13
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +8 -8
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.12
date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +8 -8
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.11
date: 2002/12/12 21:00:31;  author: d.dreyer;  state: Exp;  lines: +2 -2
Preparations for truly various finite element concepts. Had to decide: either make a _lot_ of FEBase virtual and mess up several switch statements, or introduce the FEInterface class to encapsulate the static member functions of finite element classes (guess what i chose). For good code re-use, i had to move some members in FEBase from private to protected, but did not touch the class in any other way - except for abandoning the virtual shape and shape_deriv. These do not make sense, were never used, and as stand-alone would not allow code re-use.
----------------------------
revision 1.10
date: 2002/10/11 20:56:15;  author: benkirk;  state: Exp;  lines: +4 -1
The FEBase class now has a static pointer to the mesh rather than a reference passed via the constructor.  DofMap can _almost_ constrain degrees of freedom properly
----------------------------
revision 1.9
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.8
date: 2002/07/28 21:14:30;  author: benkirk;  state: Exp;  lines: +3 -11
reworking internals of refinement
----------------------------
revision 1.7
date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +4 -4
added equation system support
----------------------------
revision 1.6
date: 2002/05/16 00:06:21;  author: benkirk;  state: Exp;  lines: +1 -9
preliminary unrefinement support
----------------------------
revision 1.5
date: 2002/05/14 23:05:57;  author: benkirk;  state: Exp;  lines: +44 -7
added new_nodes and new_element database for mesh_refinement
----------------------------
revision 1.4
date: 2002/05/13 11:42:06;  author: benkirk;  state: Exp;  lines: +4 -4
allow refined elements to properly inherit side boundary conditions from parents.  Still need to implement for the 2D elements
----------------------------
revision 1.3
date: 2002/05/10 21:05:19;  author: benkirk;  state: Exp;  lines: +5 -2
added hex20 refinement rules.  completely rewrote main.cc to be much more flexible
----------------------------
revision 1.2
date: 2002/05/10 03:06:44;  author: benkirk;  state: Exp;  lines: +15 -1
redid cell refinement support
----------------------------
revision 1.1
date: 2002/05/08 14:09:18;  author: benkirk;  state: Exp;
put refinement support in its own class, split the element refinement implementations into separate files to aviod clutter
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/mesh_unv_support.h,v
Working file: include/mesh_unv_support.h
head: 1.9
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 9;	selected revisions: 9
description:
----------------------------
revision 1.9
date: 2003/01/21 15:41:58;  author: steffen;  state: Exp;  lines: +16 -6
extended UNV support to import analysis datasets (used for boundary conditions)
----------------------------
revision 1.8
date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +39 -13
Added documentation.
----------------------------
revision 1.7
date: 2003/01/16 03:49:17;  author: peterson;  state: Exp;  lines: +4 -4
More unnecessary includes.
----------------------------
revision 1.6
date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +1 -5
Removing more unnecessary includes.
----------------------------
revision 1.5
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +7 -7
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.4
date: 2002/12/29 13:27:23;  author: d.dreyer;  state: Exp;  lines: +12 -22
fixed UNV import for gcc 2.95.3; forsook the std::stringstream mem_file to avoid overly compiler dependencies. library now builds successfully both dbg and opt with gcc 2.95.3 and 3.2.
----------------------------
revision 1.3
date: 2002/12/17 13:10:55;  author: tammo;  state: Exp;  lines: +12 -2
Added workaround for bug in gcc2.95.3
----------------------------
revision 1.2
date: 2002/11/22 01:11:13;  author: d.dreyer;  state: Exp;  lines: +42 -30
Tammo's efforts: I-deas import seems to work. However, some problems with gcc 2.95.3, while gcc 3.2 works fine. Still need to include tet's.
----------------------------
revision 1.1
date: 2002/10/14 20:07:15;  author: benkirk;  state: Exp;
merged Ideas UNV support from Daniel Dreyer et. al.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/mesh_xdr_support.h,v
Working file: include/mesh_xdr_support.h
head: 1.15
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 15;	selected revisions: 15
description:
----------------------------
revision 1.15
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +5 -5
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.14
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -2
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.13
date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +12 -2
complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
----------------------------
revision 1.12
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.11
date: 2002/05/16 20:25:54;  author: benkirk;  state: Exp;  lines: +10 -1
moved testmesh to meshtool.  made it more user-friendly so I could give it to Owen since he is now working with cubit meshes
----------------------------
revision 1.10
date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +2 -5
refinement (at least uniform) now works
----------------------------
revision 1.9
date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +6 -6
eliminated templates from everything except Petsc Interface
----------------------------
revision 1.8
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +3 -3
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.7
date: 2002/04/30 18:09:01;  author: peterson;  state: Exp;  lines: +11 -0
Removed unneeded filename stuff, pared down the size of objects.
----------------------------
revision 1.6
date: 2002/04/20 04:51:59;  author: peterson;  state: Exp;  lines: +2 -2
Cosmetic changes.  Removed dependence on the filename.h
header file and the FileName class.  They can now be
removed at any time in the future.  Removed a bunch
of debugging print statements.  Everywhere changed
the name XdrMGF to the more generic name, XdrIO.
You might need to rebuild dependencies and/or make clean.
----------------------------
revision 1.5
date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;  lines: +1 -3
many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
----------------------------
revision 1.4
date: 2002/04/09 21:13:20;  author: peterson;  state: Exp;  lines: +6 -6
working on XDR support, boundary support in exodusII
----------------------------
revision 1.3
date: 2002/04/09 01:01:45;  author: peterson;  state: Exp;  lines: +33 -115
Now reads meshes in XDR format created by MGF
and created by itself.  Gets the same answer
both ways!  Still a little buggy though, I wouldn't
use the XDR support for anything important yet.
One thing that does not work: There seems to be
a problem with opening AND closing the SAME
file in a single program ...
----------------------------
revision 1.2
date: 2002/04/06 00:17:55;  author: peterson;  state: dead;  lines: +0 -0
Got rid of the layer of indirection I was thinking of putting in.  read_xdr now calls functions in xdrMGF.h directly.  Took out a chunk of code from the init function in xdrMGF which automatically appended .mesh.#### to the filename before trying to open it. This is not the behavior we want, obviously we want people to be able to choose their own file naming system.
----------------------------
revision 1.1
date: 2002/04/05 22:48:13;  author: peterson;  state: Exp;
Initial merge of XDR read/write capabilities.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/node.h,v
Working file: include/node.h
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +3 -23
reworked the reference counting to use C++ run-type identification
----------------------------
revision 1.3
date: 2003/01/16 03:38:18;  author: benkirk;  state: Exp;  lines: +4 -3
-W warning fix
----------------------------
revision 1.2
date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +29 -16
reworked the ReferenceCounter class
----------------------------
revision 1.1
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/perf_log.h,v
Working file: include/perf_log.h
head: 1.14
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 14;	selected revisions: 14
description:
----------------------------
revision 1.14
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +3 -5
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.13
date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +20 -19
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.12
date: 2002/10/27 13:55:01;  author: benkirk;  state: Exp;  lines: +8 -1
added ifdefs to work around missing locale and broken sstream in gcc-2.9*-series compilers
----------------------------
revision 1.11
date: 2002/10/15 23:56:51;  author: peterson;  state: Exp;  lines: +16 -3
Added beginning of ImageMagick stuff, but it is commented out so uncomment it first if you need it.
----------------------------
revision 1.10
date: 2002/10/09 02:05:20;  author: benkirk;  state: Exp;  lines: +5 -2
now using time_facet for time format
----------------------------
revision 1.9
date: 2002/10/07 14:36:54;  author: peterson;  state: Exp;  lines: +1 -5
Fixed formatting in perf_log.
----------------------------
revision 1.8
date: 2002/10/07 02:48:10;  author: benkirk;  state: Exp;  lines: +6 -1
added the get_log member function.  Allows the logging stream to be captured directly and displayed in a window.
----------------------------
revision 1.7
date: 2002/10/06 17:14:41;  author: peterson;  state: Exp;  lines: +6 -2
Removed C code from performance monitoring class.  Now uses the locale for time formatting and does not use printf.
----------------------------
revision 1.6
date: 2002/10/04 17:03:12;  author: benkirk;  state: Exp;  lines: +107 -1
the mesh now can log performance.  configure with --enable-perflog.  also, amr is enabled by default
----------------------------
revision 1.5
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +19 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.4
date: 2002/06/06 21:34:44;  author: benkirk;  state: Exp;  lines: +6 -1
added some documentation and changed some functions to constant that should have been all along
----------------------------
revision 1.3
date: 2002/05/21 16:08:40;  author: benkirk;  state: Exp;  lines: +7 -7
minor changes for cxx compatibility
----------------------------
revision 1.2
date: 2002/05/17 19:10:22;  author: benkirk;  state: Exp;  lines: +13 -2
added pause and restart to perf_log.  put it in most of the major algorithms
----------------------------
revision 1.1
date: 2002/05/17 16:45:55;  author: benkirk;  state: Exp;
added performance logging utility
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/perfmon.h,v
Working file: include/perfmon.h
head: 1.23
branch:
locks: strict
access list:
symbolic names:
	start: 1.1.1.1
	mesh: 1.1.1
keyword substitution: kv
total revisions: 24;	selected revisions: 24
description:
----------------------------
revision 1.23
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -2
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.22
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +19 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.21
date: 2002/05/22 21:17:26;  author: benkirk;  state: Exp;  lines: +2 -2
added proper namespaces to perfmon and petsc_interface
----------------------------
revision 1.20
date: 2002/05/13 22:55:32;  author: benkirk;  state: Exp;  lines: +2 -2
wrapped all external library includes in anonymous namespaces rather than named namespaces.  makes it easier to work with
----------------------------
revision 1.19
date: 2002/05/10 21:05:19;  author: benkirk;  state: Exp;  lines: +34 -24
added hex20 refinement rules.  completely rewrote main.cc to be much more flexible
----------------------------
revision 1.18
date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +5 -5
changed cout to std::cout
----------------------------
revision 1.17
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -2
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.16
date: 2002/04/27 14:59:55;  author: benkirk;  state: Exp;  lines: +5 -3
wrapped all external library APIs inside namespaces to avoid conflicts with application codes, just like Jeremy did with the Petsc interface
----------------------------
revision 1.15
date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +5 -5
changes for compatibility with icc v6.0
----------------------------
revision 1.14
date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +2 -2
renamed config.h mesh_config.h and did some cleanup
----------------------------
revision 1.13
date: 2002/03/27 22:38:45;  author: peterson;  state: Exp;  lines: +2 -2
Added mesh.read_matlab(), PetscVector.add_petsc_vector(),PetscVector.print(), and the beginnings of PetscMatrix.print()
----------------------------
revision 1.12
date: 2002/03/26 01:26:56;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.11
date: 2002/03/26 00:16:48;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.10
date: 2002/03/26 00:06:06;  author: benkirk;  state: Exp;  lines: +35 -1
cleaned up duplicate index sets, added papi (maybe) to perfmon
----------------------------
revision 1.9
date: 2002/03/23 04:09:10;  author: benkirk;  state: Exp;  lines: +22 -15
added an optional constructor argument to perfmon that stores the processor ID, and then only prints timing information if it is processor 0
----------------------------
revision 1.8
date: 2002/03/18 21:25:48;  author: peterson;  state: Exp;  lines: +1 -2
Added inlined functions print_JxW() print_phi() print_dphi() and print_info() to fe.h
----------------------------
revision 1.7
date: 2002/03/07 18:37:35;  author: peterson;  state: Exp;  lines: +14 -8
Added petsc-2.1.0 compatibility and perfmon features.
----------------------------
revision 1.6
date: 2002/02/25 05:26:41;  author: benkirk;  state: Exp;  lines: +19 -16
errata
----------------------------
revision 1.5
date: 2002/02/25 05:23:04;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.4
date: 2002/02/24 16:30:36;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.3
date: 2002/02/24 16:29:51;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.2
date: 2002/02/24 16:27:47;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.1
date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;
branches:  1.1.1;
Initial revision
----------------------------
revision 1.1.1.1
date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;  lines: +0 -0
init
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/petsc_interface.h,v
Working file: include/petsc_interface.h
head: 1.25
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 25;	selected revisions: 25
description:
----------------------------
revision 1.25
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -2
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.24
date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +7 -2
complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
----------------------------
revision 1.23
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.22
date: 2002/06/05 22:01:27;  author: benkirk;  state: Exp;  lines: +23 -23
got Petsc working on tejas
----------------------------
revision 1.21
date: 2002/06/04 15:08:28;  author: benkirk;  state: Exp;  lines: +62 -78
more work on equation system support.  Each SystemData now contains a matrix, rhs, and solution.  Can call the solve
----------------------------
revision 1.20
date: 2002/06/03 21:41:55;  author: benkirk;  state: Exp;  lines: +13 -20
moved PetscInterface options setup to the constructor, removed unused variable in PetscMatrix
----------------------------
revision 1.19
date: 2002/05/30 12:26:06;  author: benkirk;  state: Exp;  lines: +4 -4
modified Petsc support to be compatible with Petsc 2.1.2
----------------------------
revision 1.18
date: 2002/05/22 21:17:27;  author: benkirk;  state: Exp;  lines: +5 -2
added proper namespaces to perfmon and petsc_interface
----------------------------
revision 1.17
date: 2002/05/13 22:55:32;  author: benkirk;  state: Exp;  lines: +9 -9
wrapped all external library includes in anonymous namespaces rather than named namespaces.  makes it easier to work with
----------------------------
revision 1.16
date: 2002/05/01 23:10:57;  author: benkirk;  state: Exp;  lines: +14 -16
un-templated everything
----------------------------
revision 1.15
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -4
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.14
date: 2002/04/27 02:42:56;  author: benkirk;  state: Exp;  lines: +5 -24
working with icc
----------------------------
revision 1.13
date: 2002/04/26 17:11:12;  author: jeremy;  state: Exp;  lines: +8 -6
Added namespace Petsc {} wrapper to the petsc include files.
This prevents unnecessary pollution of the global namespace.
----------------------------
revision 1.12
date: 2002/04/09 13:59:13;  author: benkirk;  state: Exp;  lines: +16 -12
sparsity pattern computation works well in 3D, serial and parallel.  Will implement in 2D after rethinking the underlying STL container
----------------------------
revision 1.11
date: 2002/04/05 03:21:44;  author: benkirk;  state: Exp;  lines: +144 -157
cleaned up ./configure some.  Reversed-engineered the Tri6 connectivity.  Documented some.  Added hooks for n_nz & n_oz in dof_map
----------------------------
revision 1.10
date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +5 -5
renamed config.h mesh_config.h and did some cleanup
----------------------------
revision 1.9
date: 2002/03/21 04:27:32;  author: benkirk;  state: Exp;  lines: +2 -2
fixed a bug in petsc_vector that caused a false lock, thus prohibiting future calls to close()
----------------------------
revision 1.8
date: 2002/03/20 22:22:41;  author: benkirk;  state: Exp;  lines: +4 -4
errata
----------------------------
revision 1.7
date: 2002/03/19 05:20:10;  author: benkirk;  state: Exp;  lines: +3 -3
took out a print statement
----------------------------
revision 1.6
date: 2002/03/07 18:37:35;  author: peterson;  state: Exp;  lines: +3 -2
Added petsc-2.1.0 compatibility and perfmon features.
----------------------------
revision 1.5
date: 2002/03/07 16:32:13;  author: benkirk;  state: Exp;  lines: +6 -3
works in parallel
----------------------------
revision 1.4
date: 2002/03/06 23:13:40;  author: benkirk;  state: Exp;  lines: +7 -7
actually starting to work
----------------------------
revision 1.3
date: 2002/03/04 23:23:56;  author: peterson;  state: Exp;  lines: +10 -6
took solve out of petsc_interface for the time being
----------------------------
revision 1.2
date: 2002/03/04 23:07:02;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.1
date: 2002/03/04 23:04:54;  author: benkirk;  state: Exp;
errata
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/petsc_matrix.h,v
Working file: include/petsc_matrix.h
head: 1.36
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 36;	selected revisions: 36
description:
----------------------------
revision 1.36
date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +3 -5
Removing more unnecessary includes.
----------------------------
revision 1.35
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +1 -2
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.34
date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +24 -20
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.33
date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +46 -14
complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
----------------------------
revision 1.32
date: 2002/09/06 14:53:28;  author: benkirk;  state: Exp;  lines: +22 -15
added Xdr class to provide a uniform interface for Xdr and ASCII IO.  The equation_systems read & write is also based on these methods.  I have validated it for one processor.  Still need to be sure that in the case of multiple processors each proc gets te relevant piece of data.
----------------------------
revision 1.31
date: 2002/09/06 00:31:54;  author: benkirk;  state: Exp;  lines: +4 -1
added cmath to the petsc_matrix and petsc_vector includes.  This is required on the IBM Power3s at NERSC.  This will need to be wrapped in an ifdef later.
----------------------------
revision 1.30
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.29
date: 2002/06/03 21:26:10;  author: benkirk;  state: Exp;  lines: +21 -6
initial support for Petsc submatrices
----------------------------
revision 1.28
date: 2002/05/31 15:59:28;  author: benkirk;  state: Exp;  lines: +6 -6
added TODO make target.  Allow user to optionally control DOF coupling for matrix allocation
----------------------------
revision 1.27
date: 2002/05/31 02:55:31;  author: benkirk;  state: Exp;  lines: +23 -5
petsc_matrix can now add non-square element matrices to off-diagonal locations.  fe can report dof_indices for individual components
----------------------------
revision 1.26
date: 2002/05/30 12:26:06;  author: benkirk;  state: Exp;  lines: +2 -2
modified Petsc support to be compatible with Petsc 2.1.2
----------------------------
revision 1.25
date: 2002/05/28 20:33:42;  author: benkirk;  state: Exp;  lines: +58 -216
added initial support for simulation groups (systems) and equation systems
----------------------------
revision 1.24
date: 2002/05/18 17:32:57;  author: benkirk;  state: Exp;  lines: +7 -2
fixed some namespace issues and added some includes for ICC compatibility (compileability?)
----------------------------
revision 1.23
date: 2002/05/13 22:55:32;  author: benkirk;  state: Exp;  lines: +16 -16
wrapped all external library includes in anonymous namespaces rather than named namespaces.  makes it easier to work with
----------------------------
revision 1.22
date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +3 -3
changed cout to std::cout
----------------------------
revision 1.21
date: 2002/05/02 02:19:05;  author: benkirk;  state: Exp;  lines: +7 -7
errata
----------------------------
revision 1.20
date: 2002/05/01 23:10:57;  author: benkirk;  state: Exp;  lines: +71 -81
un-templated everything
----------------------------
revision 1.19
date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +3 -3
eliminated templates from everything except Petsc Interface
----------------------------
revision 1.18
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -3
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.17
date: 2002/04/27 02:42:56;  author: benkirk;  state: Exp;  lines: +9 -10
working with icc
----------------------------
revision 1.16
date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +2 -2
changes for compatibility with icc v6.0
----------------------------
revision 1.15
date: 2002/04/26 17:11:12;  author: jeremy;  state: Exp;  lines: +11 -10
Added namespace Petsc {} wrapper to the petsc include files.
This prevents unnecessary pollution of the global namespace.
----------------------------
revision 1.14
date: 2002/04/22 13:11:00;  author: benkirk;  state: Exp;  lines: +7 -18
fixed a bug that computed the incorrect sparsity pattern in the case of multiple dofs per vertex
----------------------------
revision 1.13
date: 2002/04/18 19:24:25;  author: benkirk;  state: Exp;  lines: +5 -17
documentation
----------------------------
revision 1.12
date: 2002/04/09 13:59:13;  author: benkirk;  state: Exp;  lines: +8 -1
sparsity pattern computation works well in 3D, serial and parallel.  Will implement in 2D after rethinking the underlying STL container
----------------------------
revision 1.11
date: 2002/04/05 03:21:44;  author: benkirk;  state: Exp;  lines: +366 -365
cleaned up ./configure some.  Reversed-engineered the Tri6 connectivity.  Documented some.  Added hooks for n_nz & n_oz in dof_map
----------------------------
revision 1.10
date: 2002/04/04 05:24:21;  author: benkirk;  state: Exp;  lines: +6 -6
added initial hooks for kdoc
----------------------------
revision 1.9
date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +6 -6
renamed config.h mesh_config.h and did some cleanup
----------------------------
revision 1.8
date: 2002/04/01 22:26:16;  author: benkirk;  state: Exp;  lines: +3 -27
changed petsc_matrix to accept a variable # of nonzeros per row based on constructor argument, defaults to 30
----------------------------
revision 1.7
date: 2002/03/27 22:38:45;  author: peterson;  state: Exp;  lines: +19 -3
Added mesh.read_matlab(), PetscVector.add_petsc_vector(),PetscVector.print(), and the beginnings of PetscMatrix.print()
----------------------------
revision 1.6
date: 2002/03/07 20:52:30;  author: benkirk;  state: Exp;  lines: +3 -3
added dof_indices computation
----------------------------
revision 1.5
date: 2002/03/07 16:32:13;  author: benkirk;  state: Exp;  lines: +9 -1
works in parallel
----------------------------
revision 1.4
date: 2002/03/06 23:13:40;  author: benkirk;  state: Exp;  lines: +5 -2
actually starting to work
----------------------------
revision 1.3
date: 2002/03/05 16:57:43;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.2
date: 2002/03/05 14:28:22;  author: benkirk;  state: Exp;  lines: +27 -74
adding more stuff
----------------------------
revision 1.1
date: 2002/03/05 06:12:42;  author: benkirk;  state: Exp;
added neighborhood computation, petsc matrix from deal.II
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/petsc_vector.h,v
Working file: include/petsc_vector.h
head: 1.35
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 35;	selected revisions: 35
description:
----------------------------
revision 1.35
date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +60 -65
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.34
date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +48 -20
complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
----------------------------
revision 1.33
date: 2002/11/28 01:05:41;  author: benkirk;  state: Exp;  lines: +41 -1
should have sped up find_neighbors routine.  added full_screen to GUI
----------------------------
revision 1.32
date: 2002/09/06 14:53:28;  author: benkirk;  state: Exp;  lines: +6 -4
added Xdr class to provide a uniform interface for Xdr and ASCII IO.  The equation_systems read & write is also based on these methods.  I have validated it for one processor.  Still need to be sure that in the case of multiple processors each proc gets te relevant piece of data.
----------------------------
revision 1.31
date: 2002/09/06 00:31:54;  author: benkirk;  state: Exp;  lines: +4 -1
added cmath to the petsc_matrix and petsc_vector includes.  This is required on the IBM Power3s at NERSC.  This will need to be wrapped in an ifdef later.
----------------------------
revision 1.30
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +19 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.29
date: 2002/06/25 20:24:57;  author: benkirk;  state: Exp;  lines: +2 -2
Changed std::cout << ERROR...  to  std::cerr << ERROR... everywhere it occured.  Also fixed a bug in write_tecplot_binary that caused a segfault when just writing a mesh (with no data).
----------------------------
revision 1.28
date: 2002/06/20 19:20:04;  author: peterson;  state: Exp;  lines: +3 -3
Can now configure for petsc version, and test against the version in the Makefile.
----------------------------
revision 1.27
date: 2002/05/30 12:26:06;  author: benkirk;  state: Exp;  lines: +2 -2
modified Petsc support to be compatible with Petsc 2.1.2
----------------------------
revision 1.26
date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +7 -3
added equation system support
----------------------------
revision 1.25
date: 2002/05/28 20:33:42;  author: benkirk;  state: Exp;  lines: +72 -148
added initial support for simulation groups (systems) and equation systems
----------------------------
revision 1.24
date: 2002/05/18 17:32:57;  author: benkirk;  state: Exp;  lines: +4 -2
fixed some namespace issues and added some includes for ICC compatibility (compileability?)
----------------------------
revision 1.23
date: 2002/05/13 22:55:32;  author: benkirk;  state: Exp;  lines: +8 -8
wrapped all external library includes in anonymous namespaces rather than named namespaces.  makes it easier to work with
----------------------------
revision 1.22
date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +2 -2
changed cout to std::cout
----------------------------
revision 1.21
date: 2002/05/01 23:10:57;  author: benkirk;  state: Exp;  lines: +74 -92
un-templated everything
----------------------------
revision 1.20
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -5
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.19
date: 2002/04/30 16:19:57;  author: benkirk;  state: Exp;  lines: +1 -2
 hooks to add triangle support, reworked configure to only substitute paths if they are correctly located
----------------------------
revision 1.18
date: 2002/04/27 02:42:56;  author: benkirk;  state: Exp;  lines: +6 -5
working with icc
----------------------------
revision 1.17
date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +2 -2
changes for compatibility with icc v6.0
----------------------------
revision 1.16
date: 2002/04/26 17:11:12;  author: jeremy;  state: Exp;  lines: +7 -6
Added namespace Petsc {} wrapper to the petsc include files.
This prevents unnecessary pollution of the global namespace.
----------------------------
revision 1.15
date: 2002/04/22 13:11:00;  author: benkirk;  state: Exp;  lines: +4 -4
fixed a bug that computed the incorrect sparsity pattern in the case of multiple dofs per vertex
----------------------------
revision 1.14
date: 2002/04/18 19:24:25;  author: benkirk;  state: Exp;  lines: +4 -16
documentation
----------------------------
revision 1.13
date: 2002/04/13 04:57:46;  author: benkirk;  state: Exp;  lines: +2 -1
now support --en/disable-metis.  checked the lib with different combinations of the enable flags to make sure everything works.  fixed some bugs when features were disabled
----------------------------
revision 1.12
date: 2002/04/05 03:21:44;  author: benkirk;  state: Exp;  lines: +372 -384
cleaned up ./configure some.  Reversed-engineered the Tri6 connectivity.  Documented some.  Added hooks for n_nz & n_oz in dof_map
----------------------------
revision 1.11
date: 2002/04/04 05:24:21;  author: benkirk;  state: Exp;  lines: +10 -10
added initial hooks for kdoc
----------------------------
revision 1.10
date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +3 -3
renamed config.h mesh_config.h and did some cleanup
----------------------------
revision 1.9
date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +2 -2
changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
----------------------------
revision 1.8
date: 2002/03/27 22:38:45;  author: peterson;  state: Exp;  lines: +26 -2
Added mesh.read_matlab(), PetscVector.add_petsc_vector(),PetscVector.print(), and the beginnings of PetscMatrix.print()
----------------------------
revision 1.7
date: 2002/03/25 22:25:16;  author: benkirk;  state: Exp;  lines: +4 -1
added send_list computation to dof_map.distribute()
----------------------------
revision 1.6
date: 2002/03/21 04:27:32;  author: benkirk;  state: Exp;  lines: +3 -3
fixed a bug in petsc_vector that caused a false lock, thus prohibiting future calls to close()
----------------------------
revision 1.5
date: 2002/03/20 22:22:41;  author: benkirk;  state: Exp;  lines: +4 -2
errata
----------------------------
revision 1.4
date: 2002/03/07 20:52:30;  author: benkirk;  state: Exp;  lines: +6 -1
added dof_indices computation
----------------------------
revision 1.3
date: 2002/03/07 16:32:13;  author: benkirk;  state: Exp;  lines: +22 -20
works in parallel
----------------------------
revision 1.2
date: 2002/03/06 23:13:40;  author: benkirk;  state: Exp;  lines: +15 -13
actually starting to work
----------------------------
revision 1.1
date: 2002/03/04 15:52:46;  author: benkirk;  state: Exp;
porting petsc support from deal.II
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/plane.h,v
Working file: include/plane.h
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2002/09/25 17:53:41;  author: benkirk;  state: Exp;
added initial surface support.  I have already implemented a plane and a sphere, more to follow.  added support for bounding-box computation on a subdomain-by-subdomain and processor-by-processor basis.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/point.h,v
Working file: include/point.h
head: 1.35
branch:
locks: strict
access list:
symbolic names:
	start: 1.1.1.1
	mesh: 1.1.1
keyword substitution: kv
total revisions: 36;	selected revisions: 36
description:
----------------------------
revision 1.35
date: 2003/01/15 19:06:48;  author: benkirk;  state: Exp;  lines: +5 -2
forgot math.h
----------------------------
revision 1.34
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +24 -3
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.33
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +23 -7
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.32
date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +11 -11
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.31
date: 2002/11/19 21:14:26;  author: peterson;  state: Exp;  lines: +78 -30
Added return value optimization to the point class.
----------------------------
revision 1.30
date: 2002/11/05 03:58:10;  author: benkirk;  state: Exp;  lines: +2 -4
minor changes.  removed -funroll-all-loops from GCC optimized flags
----------------------------
revision 1.29
date: 2002/09/23 20:02:02;  author: benkirk;  state: Exp;  lines: +15 -1
added copy-constructor for points
----------------------------
revision 1.28
date: 2002/09/23 17:14:21;  author: benkirk;  state: Exp;  lines: +3 -3
formatting
----------------------------
revision 1.27
date: 2002/08/20 13:35:20;  author: benkirk;  state: Exp;  lines: +9 -9
optimizing Point performance, fe_map
----------------------------
revision 1.26
date: 2002/08/13 19:56:20;  author: benkirk;  state: Exp;  lines: +6 -1
added cross() method to point.  returns the cross product of the point with another point
----------------------------
revision 1.25
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.24
date: 2002/07/28 21:14:30;  author: benkirk;  state: Exp;  lines: +39 -1
reworking internals of refinement
----------------------------
revision 1.23
date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +7 -2
refinement (at least uniform) now works
----------------------------
revision 1.22
date: 2002/05/02 13:41:47;  author: benkirk;  state: Exp;  lines: +4 -4
CC fix.
----------------------------
revision 1.21
date: 2002/05/01 23:10:57;  author: benkirk;  state: Exp;  lines: +1 -4
un-templated everything
----------------------------
revision 1.20
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +47 -82
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.19
date: 2002/04/30 22:16:33;  author: benkirk;  state: Exp;  lines: +4 -4
initial shared library support
----------------------------
revision 1.18
date: 2002/04/29 21:50:52;  author: benkirk;  state: Exp;  lines: +15 -48
initial support for AMR.  builds fine, old functionality still retained.  much more to do.
----------------------------
revision 1.17
date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +11 -11
changes for compatibility with icc v6.0
----------------------------
revision 1.16
date: 2002/04/10 01:53:21;  author: benkirk;  state: Exp;  lines: +22 -89
working on boundary output.  cleaned up some code in shape_function calculations. probably going to change the way side boundary conditions are stored
----------------------------
revision 1.15
date: 2002/04/05 22:38:18;  author: benkirk;  state: Exp;  lines: +71 -7
added a lot of documentation and re-ordered the quadratic 1D basis functions
----------------------------
revision 1.14
date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +2 -2
renamed config.h mesh_config.h and did some cleanup
----------------------------
revision 1.13
date: 2002/03/05 23:28:17;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.12
date: 2002/03/05 18:07:09;  author: benkirk;  state: Exp;  lines: +3 -3
errata
----------------------------
revision 1.11
date: 2002/03/04 13:48:09;  author: benkirk;  state: Exp;  lines: +18 -1
Remade some make rules and split up the unwieldy fe.C
----------------------------
revision 1.10
date: 2002/02/27 23:22:21;  author: benkirk;  state: Exp;  lines: +13 -1
errata
----------------------------
revision 1.9
date: 2002/02/26 15:53:40;  author: benkirk;  state: Exp;  lines: +31 -10
Added pointers to neighbors within faces and cells, can now write UCD files
----------------------------
revision 1.8
date: 2002/02/25 14:36:03;  author: benkirk;  state: Exp;  lines: +33 -1
errata
----------------------------
revision 1.7
date: 2002/02/25 05:23:04;  author: benkirk;  state: Exp;  lines: +1 -5
errata
----------------------------
revision 1.6
date: 2002/02/25 01:18:38;  author: benkirk;  state: Exp;  lines: +2 -2
errata
----------------------------
revision 1.5
date: 2002/02/24 16:30:36;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.4
date: 2002/02/24 16:29:51;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.3
date: 2002/02/24 16:27:47;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.2
date: 2002/02/22 22:34:17;  author: benkirk;  state: Exp;  lines: +1 -1
errata
----------------------------
revision 1.1
date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;
branches:  1.1.1;
Initial revision
----------------------------
revision 1.1.1.1
date: 2002/02/22 22:22:02;  author: benkirk;  state: Exp;  lines: +0 -0
init
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/quadrature.h,v
Working file: include/quadrature.h
head: 1.28
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 28;	selected revisions: 28
description:
----------------------------
revision 1.28
date: 2003/01/19 04:15:50;  author: peterson;  state: Exp;  lines: +20 -2
Moved a few more functions into the quadrature
base class to promote code re-use.  This should also compile
faster since the functions are now only compiled once in
quadrature.C instead of in every rule separately. Have not tested
with prismatic elements (no mesh available) but it should
work fine.
----------------------------
revision 1.27
date: 2003/01/18 19:48:29;  author: peterson;  state: Exp;  lines: +95 -5
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
----------------------------
revision 1.26
date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +2 -2
Created separate file for the element type enumeration.
----------------------------
revision 1.25
date: 2003/01/16 16:42:28;  author: peterson;  state: Exp;  lines: +2 -2
Removing unnecessary includes.  Changing headers which
simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
----------------------------
revision 1.24
date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;  lines: +1 -150
Split up quadrature classes into
separate files.  Removed the quadrature header from
dof_map.C as it did not seem to be using it.
----------------------------
revision 1.23
date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +10 -7
added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
----------------------------
revision 1.22
date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +15 -15
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.21
date: 2002/12/22 22:36:25;  author: benkirk;  state: Exp;  lines: +49 -51
made QBase pure virtual.  prefixing private variables with _ to distinguish from local variables.  Will make FEBase pure virtual and have templated classes derived from it for actual families of finite elements
----------------------------
revision 1.20
date: 2002/11/27 20:58:50;  author: benkirk;  state: Exp;  lines: +75 -2
added trapezoidal quadrature.  Compute tangent directions _and_ normal on faces
----------------------------
revision 1.19
date: 2002/09/17 03:57:19;  author: benkirk;  state: Exp;  lines: +2 -2
added Edge, Tri, Quad, Tet, and Hex base classes for specific instances of those types of elements.  still need ones for Prism and Pyramid
----------------------------
revision 1.18
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.17
date: 2002/06/11 19:29:22;  author: benkirk;  state: Exp;  lines: +2 -2
added code to compute the inverse map for a FE, that is: given a point in physical space, find the point on the reference element that contains that point.
----------------------------
revision 1.16
date: 2002/06/07 21:19:07;  author: benkirk;  state: Exp;  lines: +8 -17
added order enum.  Separating FE from mesh elements
----------------------------
revision 1.15
date: 2002/05/02 13:40:18;  author: benkirk;  state: Exp;  lines: +2 -3
code clean up.  now compiles with g++, icc, cxx (alpha), and CC (SGI)
----------------------------
revision 1.14
date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +5 -5
changed cout to std::cout
----------------------------
revision 1.13
date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +26 -15
eliminated templates from everything except Petsc Interface
----------------------------
revision 1.12
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +4 -4
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.11
date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +5 -5
changes for compatibility with icc v6.0
----------------------------
revision 1.10
date: 2002/04/18 19:24:25;  author: benkirk;  state: Exp;  lines: +3 -1
documentation
----------------------------
revision 1.9
date: 2002/04/18 14:03:20;  author: benkirk;  state: Exp;  lines: +41 -8
added QuadratureOrder enum.  broke quadrature.C into multiple files for faster compiles
----------------------------
revision 1.8
date: 2002/04/18 04:10:34;  author: benkirk;  state: Exp;  lines: +4 -3
many changes.  changed the internal structure of the code to include Elem, a unified base class for element types in all dimensions.  also rewrote the internals of the shape function calculations for the case of boundary integrals
----------------------------
revision 1.7
date: 2002/04/16 13:21:29;  author: benkirk;  state: Exp;  lines: +16 -8
errata
----------------------------
revision 1.6
date: 2002/04/15 21:53:14;  author: benkirk;  state: Exp;  lines: +79 -10
reworking boundary integration, not quite there yet
----------------------------
revision 1.5
date: 2002/04/12 16:04:11;  author: benkirk;  state: Exp;  lines: +4 -4
errata
----------------------------
revision 1.4
date: 2002/04/02 22:46:15;  author: benkirk;  state: Exp;  lines: +2 -2
renamed config.h mesh_config.h and did some cleanup
----------------------------
revision 1.3
date: 2002/04/01 21:40:32;  author: benkirk;  state: Exp;  lines: +8 -7
changed local includes from <...> to "..." everywhere.  Also created the ElemType enum and use this instead of a std::string to define element type
----------------------------
revision 1.2
date: 2002/02/28 03:52:05;  author: benkirk;  state: Exp;  lines: +16 -13
errata
----------------------------
revision 1.1
date: 2002/02/26 21:22:29;  author: benkirk;  state: Exp;
added Gauss quadrature rules in 1D, 2D quad, 3D hex by tensor product
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/quadrature_gauss.h,v
Working file: include/quadrature_gauss.h
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/18 19:48:29;  author: peterson;  state: Exp;  lines: +1 -12
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
----------------------------
revision 1.1
date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
Split up quadrature classes into
separate files.  Removed the quadrature header from
dof_map.C as it did not seem to be using it.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/quadrature_simpson.h,v
Working file: include/quadrature_simpson.h
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/19 04:15:50;  author: peterson;  state: Exp;  lines: +3 -1
Moved a few more functions into the quadrature
base class to promote code re-use.  This should also compile
faster since the functions are now only compiled once in
quadrature.C instead of in every rule separately. Have not tested
with prismatic elements (no mesh available) but it should
work fine.
----------------------------
revision 1.1
date: 2003/01/18 19:48:29;  author: peterson;  state: Exp;
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/quadrature_trap.h,v
Working file: include/quadrature_trap.h
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/18 19:48:29;  author: peterson;  state: Exp;  lines: +8 -28
Added simpson quadrature rule, still
working on simpson for triangles/tets. Also, restructured
the QBase class so that there is less code duplication
when you want to create additional quadrature rules.
----------------------------
revision 1.1
date: 2003/01/15 03:08:54;  author: peterson;  state: Exp;
Split up quadrature classes into
separate files.  Removed the quadrature header from
dof_map.C as it did not seem to be using it.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/reference_counted_object.h,v
Working file: include/reference_counted_object.h
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;
reworked the reference counting to use C++ run-type identification
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/reference_counter.h,v
Working file: include/reference_counter.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/16 16:12:32;  author: benkirk;  state: Exp;  lines: +41 -85
reworked the reference counting to use C++ run-type identification
----------------------------
revision 1.5
date: 2003/01/16 02:45:36;  author: benkirk;  state: Exp;  lines: +104 -43
reworked the ReferenceCounter class
----------------------------
revision 1.4
date: 2003/01/16 02:08:17;  author: peterson;  state: Exp;  lines: +2 -3
Removed some unnecessary headers.
Added support for a new compiling METHOD called syn.
This stands for -fsyntax-only and ive only got the
flags for g++.  Hopefully if you are just testing
small changes it is faster than compiling for real.
Maybe ?
----------------------------
revision 1.3
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +10 -27
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.2
date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +37 -36
added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
----------------------------
revision 1.1
date: 2002/12/31 02:46:20;  author: benkirk;  state: Exp;
added reference_counter
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/sphere.h,v
Working file: include/sphere.h
head: 1.4
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 4;	selected revisions: 4
description:
----------------------------
revision 1.4
date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +11 -2
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.3
date: 2002/10/01 21:03:22;  author: benkirk;  state: Exp;  lines: +10 -3
added bounding sphere drawing.
----------------------------
revision 1.2
date: 2002/09/27 16:03:07;  author: benkirk;  state: Exp;  lines: +7 -1
split the mesh.C file into mesh.C and mesh_base.C because it was getting _way_ too big.
----------------------------
revision 1.1
date: 2002/09/25 17:53:41;  author: benkirk;  state: Exp;
added initial surface support.  I have already implemented a plane and a sphere, more to follow.  added support for bounding-box computation on a subdomain-by-subdomain and processor-by-processor basis.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/statistics.h,v
Working file: include/statistics.h
head: 1.5
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 5;	selected revisions: 5
description:
----------------------------
revision 1.5
date: 2002/09/29 23:47:06;  author: peterson;  state: Exp;  lines: +1 -2
Fixed a conflict in statistics header.
----------------------------
revision 1.4
date: 2002/09/29 23:44:27;  author: peterson;  state: Exp;  lines: +13 -6
New constructor for StatisticsVector.
----------------------------
revision 1.3
date: 2002/09/27 15:36:28;  author: benkirk;  state: Exp;  lines: +3 -3
fixes for SGI C++ compatibility.  Have now successfully built the GUI on milagros!
----------------------------
revision 1.2
date: 2002/09/26 22:03:44;  author: peterson;  state: Exp;  lines: +18 -1
Added quality bounds for elements based on CUBIT docs.  Added the cut_below and cut_above functions to the StatVector.
----------------------------
revision 1.1
date: 2002/09/26 01:16:30;  author: peterson;  state: Exp;
Initial merge of StatVector.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/surface.h,v
Working file: include/surface.h
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +10 -11
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.1
date: 2002/09/25 17:53:41;  author: benkirk;  state: Exp;
added initial surface support.  I have already implemented a plane and a sphere, more to follow.  added support for bounding-box computation on a subdomain-by-subdomain and processor-by-processor basis.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/system_data.h,v
Working file: include/system_data.h
head: 1.35
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 35;	selected revisions: 35
description:
----------------------------
revision 1.35
date: 2003/01/16 20:43:46;  author: peterson;  state: Exp;  lines: +3 -5
Removing more unnecessary #includes.
----------------------------
revision 1.34
date: 2003/01/16 20:13:49;  author: peterson;  state: Exp;  lines: +2 -4
More unnecessary includes. Also added a source file for the
----------------------------
revision 1.33
date: 2003/01/16 16:42:28;  author: peterson;  state: Exp;  lines: +2 -5
Removing unnecessary includes.  Changing headers which
simply contain enumerations to be named enum_ e.g. order.h -> enum_order.h
----------------------------
revision 1.32
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +5 -5
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.31
date: 2003/01/09 22:41:25;  author: benkirk;  state: Exp;  lines: +6 -13
removed kdoc. added order to FEType
----------------------------
revision 1.30
date: 2003/01/09 15:49:47;  author: d.dreyer;  state: Exp;  lines: +16 -8
added struct FEType to encapsulate multiple variable dependencies of FE families from remaining lib
----------------------------
revision 1.29
date: 2003/01/02 00:37:20;  author: benkirk;  state: Exp;  lines: +2 -2
added factory to the lib.  it is generally useful and might be used in place of the ::build members.  Added documentation
----------------------------
revision 1.28
date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +95 -57
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.27
date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +81 -81
complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
----------------------------
revision 1.26
date: 2002/12/01 22:19:16;  author: d.dreyer;  state: Exp;  lines: +14 -1
some fixes for --disable-amr target
----------------------------
revision 1.25
date: 2002/11/27 20:58:50;  author: benkirk;  state: Exp;  lines: +6 -1
added trapezoidal quadrature.  Compute tangent directions _and_ normal on faces
----------------------------
revision 1.24
date: 2002/11/21 00:12:02;  author: benkirk;  state: Exp;  lines: +140 -6
added older_soln support
----------------------------
revision 1.23
date: 2002/11/05 03:58:10;  author: benkirk;  state: Exp;  lines: +5 -40
minor changes.  removed -funroll-all-loops from GCC optimized flags
----------------------------
revision 1.22
date: 2002/11/04 16:39:16;  author: benkirk;  state: Exp;  lines: +195 -21
fixes in fe_project
----------------------------
revision 1.21
date: 2002/11/03 23:45:52;  author: benkirk;  state: Exp;  lines: +4 -19
added support for multiple DOFs per node and element-based DOFs
----------------------------
revision 1.20
date: 2002/11/01 15:49:56;  author: benkirk;  state: Exp;  lines: +1 -12
moved the coupling matrix dof_coupling into the DofMap class where it belongs
----------------------------
revision 1.19
date: 2002/10/31 20:22:41;  author: benkirk;  state: Exp;  lines: +6 -4
re-implemented the dof_coupling as a matrix
----------------------------
revision 1.18
date: 2002/10/29 16:03:40;  author: benkirk;  state: Exp;  lines: +15 -1
formatting
----------------------------
revision 1.17
date: 2002/09/09 13:53:54;  author: benkirk;  state: Exp;  lines: +70 -3
put enums in MeshEnums namespace.  Started using fluid for class design in the gui
----------------------------
revision 1.16
date: 2002/09/06 14:53:28;  author: benkirk;  state: Exp;  lines: +10 -3
added Xdr class to provide a uniform interface for Xdr and ASCII IO.  The equation_systems read & write is also based on these methods.  I have validated it for one processor.  Still need to be sure that in the case of multiple processors each proc gets te relevant piece of data.
----------------------------
revision 1.15
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -3
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.14
date: 2002/07/03 21:14:41;  author: benkirk;  state: Exp;  lines: +1 -33
removed shared_matrix support because it cannot do what I thought it could
----------------------------
revision 1.13
date: 2002/06/21 01:55:02;  author: benkirk;  state: Exp;  lines: +27 -1
added rotate, translate, and scale.  Need to finish rotate
----------------------------
revision 1.12
date: 2002/06/12 21:49:57;  author: benkirk;  state: Exp;  lines: +21 -25
making equation_system more usable from a user point of view
----------------------------
revision 1.11
date: 2002/06/11 20:06:39;  author: benkirk;  state: Exp;  lines: +7 -2
made the FE classes dof_index ignorant.  Now ask the dof map for the dof_indices associated with a cell
----------------------------
revision 1.10
date: 2002/06/10 21:05:28;  author: benkirk;  state: Exp;  lines: +39 -21
can now mix approximation order for variables in a system.  There is a strange bug that causes the send_list size to be larger than the total number of dofs for the tet meshes on 2 procs
----------------------------
revision 1.9
date: 2002/06/10 12:03:49;  author: benkirk;  state: Exp;  lines: +22 -15
adding FE order specification to SystemData
----------------------------
revision 1.8
date: 2002/06/06 22:56:14;  author: benkirk;  state: Exp;  lines: +10 -3
added EquationSystems reference inside SystemData.  SystemData solve now calls assemble
----------------------------
revision 1.7
date: 2002/06/06 21:34:44;  author: benkirk;  state: Exp;  lines: +17 -1
added some documentation and changed some functions to constant that should have been all along
----------------------------
revision 1.6
date: 2002/06/06 20:57:30;  author: benkirk;  state: Exp;  lines: +14 -4
added assemble() function in system_data which is capable of assembling the system and vector
----------------------------
revision 1.5
date: 2002/06/04 15:08:28;  author: benkirk;  state: Exp;  lines: +24 -2
more work on equation system support.  Each SystemData now contains a matrix, rhs, and solution.  Can call the solve
----------------------------
revision 1.4
date: 2002/05/31 15:59:28;  author: benkirk;  state: Exp;  lines: +10 -1
added TODO make target.  Allow user to optionally control DOF coupling for matrix allocation
----------------------------
revision 1.3
date: 2002/05/30 20:24:03;  author: benkirk;  state: Exp;  lines: +4 -4
icc v5.0 caught a prototype/implementation mismatch
----------------------------
revision 1.2
date: 2002/05/29 22:21:42;  author: benkirk;  state: Exp;  lines: +77 -17
added equation system support
----------------------------
revision 1.1
date: 2002/05/28 20:33:42;  author: benkirk;  state: Exp;
added initial support for simulation groups (systems) and equation systems
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/tree.h,v
Working file: include/tree.h
head: 1.7
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 7;	selected revisions: 7
description:
----------------------------
revision 1.7
date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;  lines: +2 -222
Removing more unnecessary includes.
----------------------------
revision 1.6
date: 2003/01/14 21:20:04;  author: benkirk;  state: Exp;  lines: +2 -8
The internals of the mesh have been significantly reworked.  The mesh
now contains pointers to elements and pointers to nodes.  The elements
contain pointers to the nodes they are connected to.  A node is like a
point with more information...  A node knows its global index and will
soon know what degrees of freedom are attached to it.

 - The Mesh::vertex() member has been replaced with the Mesh::point()
   member
 - Elem::point() has been added, now elements can access the points they
   are connected to directly.
 - Many function calls have been changed to reflect this...  For example,
   the Elem::centriod() method no longer requires a mesh object
 - A lot of asserts have been added to, um..., assert things.

 I have tested the new code with everything I could think of, but that
 does not mean it is perfect...

Soon, the DOF enumeration lists will move from the DofMap class to the
individual nodes and elements.  Also, the Elem class will become pure
virtual soon.
----------------------------
revision 1.5
date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +10 -1
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.4
date: 2002/10/18 16:53:11;  author: benkirk;  state: Exp;  lines: +4 -4
grid2grid mapping now works
----------------------------
revision 1.3
date: 2002/10/17 19:01:03;  author: benkirk;  state: Exp;  lines: +13 -12
Tree lookup basically working
----------------------------
revision 1.2
date: 2002/10/16 21:26:33;  author: benkirk;  state: Exp;  lines: +112 -54
Tree builds properly.  Now need to figure out which element contains a point
----------------------------
revision 1.1
date: 2002/10/15 21:14:18;  author: benkirk;  state: Exp;
creating tree data structure
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/tree_node.h,v
Working file: include/tree_node.h
head: 1.1
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 1;	selected revisions: 1
description:
----------------------------
revision 1.1
date: 2003/01/16 02:58:09;  author: peterson;  state: Exp;
Removing more unnecessary includes.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/utility.h,v
Working file: include/utility.h
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;	selected revisions: 2
description:
----------------------------
revision 1.2
date: 2002/10/27 14:39:44;  author: benkirk;  state: Exp;  lines: +16 -4
portability fixes
----------------------------
revision 1.1
date: 2002/10/15 23:56:51;  author: peterson;  state: Exp;
Added beginning of ImageMagick stuff, but it is commented out so uncomment it first if you need it.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/xdrIO.h,v
Working file: include/xdrIO.h
head: 1.25
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 25;	selected revisions: 25
description:
----------------------------
revision 1.25
date: 2003/01/20 01:11:31;  author: peterson;  state: Exp;  lines: +5 -1
Added documentation.
----------------------------
revision 1.24
date: 2003/01/16 16:54:23;  author: peterson;  state: Exp;  lines: +2 -2
Created separate file for the element type enumeration.
----------------------------
revision 1.23
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +7 -5
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.22
date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +72 -72
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.21
date: 2002/12/20 21:01:08;  author: benkirk;  state: Exp;  lines: +5 -5
fixed a memory leak in XdrIO.  passed the code through Valgrind, seems really clean.  Allow for << chaining in xdr_cxx.
----------------------------
revision 1.20
date: 2002/09/06 14:53:28;  author: benkirk;  state: Exp;  lines: +1 -239
added Xdr class to provide a uniform interface for Xdr and ASCII IO.  The equation_systems read & write is also based on these methods.  I have validated it for one processor.  Still need to be sure that in the case of multiple processors each proc gets te relevant piece of data.
----------------------------
revision 1.19
date: 2002/08/30 18:57:01;  author: benkirk;  state: Exp;  lines: +188 -4
working on C++ XDR wrapper
----------------------------
revision 1.18
date: 2002/08/30 15:54:54;  author: benkirk;  state: Exp;  lines: +56 -1
forsaking netCDF.  writing a C++ XDR interface instead
----------------------------
revision 1.17
date: 2002/08/22 18:25:36;  author: benkirk;  state: Exp;  lines: +9 -9
oops...  xdr.h is wrong.  use rpc.h
----------------------------
revision 1.16
date: 2002/08/22 17:27:15;  author: benkirk;  state: Exp;  lines: +3 -3
include xdr.h, not rpc.h.  mostly for AIX compatibility
----------------------------
revision 1.15
date: 2002/08/12 13:18:07;  author: benkirk;  state: Exp;  lines: +20 -1
added LGPL information to all files.  The library is now protected under the GNU LGPL.
----------------------------
revision 1.14
date: 2002/06/06 13:03:00;  author: benkirk;  state: Exp;  lines: +3 -5
made xdrIO dimension-aware and the connectivity output is now more human-readable
----------------------------
revision 1.13
date: 2002/05/21 23:20:23;  author: benkirk;  state: Exp;  lines: +2 -2
changed includes to comply with C++ standard
----------------------------
revision 1.12
date: 2002/05/21 23:15:27;  author: benkirk;  state: Exp;  lines: +2 -2
changed includes to comply with C++ standard
----------------------------
revision 1.11
date: 2002/05/06 04:07:57;  author: benkirk;  state: Exp;  lines: +14 -8
refinement (at least uniform) now works
----------------------------
revision 1.10
date: 2002/05/02 15:29:21;  author: benkirk;  state: Exp;  lines: +3 -3
added configure rules to support muptiple compilers
----------------------------
revision 1.9
date: 2002/05/02 03:02:38;  author: benkirk;  state: Exp;  lines: +3 -3
changed cout to std::cout
----------------------------
revision 1.8
date: 2002/05/01 21:29:40;  author: benkirk;  state: Exp;  lines: +3 -3
eliminated templates from everything except Petsc Interface
----------------------------
revision 1.7
date: 2002/05/01 14:04:45;  author: benkirk;  state: Exp;  lines: +2 -3
better shared library support.  removed spacedim as a second template p[arameter.  Will un-template other classes today
----------------------------
revision 1.6
date: 2002/04/30 18:09:01;  author: peterson;  state: Exp;  lines: +6 -1
Removed unneeded filename stuff, pared down the size of objects.
----------------------------
revision 1.5
date: 2002/04/30 16:19:58;  author: benkirk;  state: Exp;  lines: +14 -18
 hooks to add triangle support, reworked configure to only substitute paths if they are correctly located
----------------------------
revision 1.4
date: 2002/04/26 22:55:01;  author: benkirk;  state: Exp;  lines: +3 -3
changes for compatibility with icc v6.0
----------------------------
revision 1.3
date: 2002/04/26 20:09:23;  author: benkirk;  state: Exp;  lines: +3 -3
change in xdrIO to be happy with Intel icc
----------------------------
revision 1.2
date: 2002/04/25 21:50:54;  author: benkirk;  state: Exp;  lines: +2 -1
added includes to fix compile under gcc2.*
----------------------------
revision 1.1
date: 2002/04/20 04:51:59;  author: peterson;  state: Exp;
Cosmetic changes.  Removed dependence on the filename.h
header file and the FileName class.  They can now be
removed at any time in the future.  Removed a bunch
of debugging print statements.  Everywhere changed
the name XdrMGF to the more generic name, XdrIO.
You might need to rebuild dependencies and/or make clean.
=============================================================================

RCS file: /home/benkirk/SOURCE/mesh/include/xdr_cxx.h,v
Working file: include/xdr_cxx.h
head: 1.6
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 6;	selected revisions: 6
description:
----------------------------
revision 1.6
date: 2003/01/16 03:21:00;  author: peterson;  state: Exp;  lines: +3 -1
Removing <iostream> from a bunch
of files where it was already included.
----------------------------
revision 1.5
date: 2003/01/15 19:05:15;  author: benkirk;  state: Exp;  lines: +3 -3
compiles with -W under gcc with no warnings.  element class is now pure virtual.  many copies changed to references
----------------------------
revision 1.4
date: 2002/12/31 00:49:53;  author: benkirk;  state: Exp;  lines: +138 -3
templated the FE class.  Read the doxygen documentation and fixed all the documentation formatting to be doxygen compatible.  Adding optional reference counting
----------------------------
revision 1.3
date: 2002/12/20 21:01:08;  author: benkirk;  state: Exp;  lines: +35 -35
fixed a memory leak in XdrIO.  passed the code through Valgrind, seems really clean.  Allow for << chaining in xdr_cxx.
----------------------------
revision 1.2
date: 2002/12/19 22:49:35;  author: d.dreyer;  state: Exp;  lines: +44 -2
complex! - This got much bigger than i thought... 'number' and 'real' coexist, 'number' is either 'real' or 'std::complex < real >', while 'real' is always...(you guess)? In theory, --enable-complex turns it on (by default disabled); in practice, though, complex does not yet go with PETSc; acceptable output only for gmv and xdr/a.
----------------------------
revision 1.1
date: 2002/09/06 14:53:28;  author: benkirk;  state: Exp;
added Xdr class to provide a uniform interface for Xdr and ASCII IO.  The equation_systems read & write is also based on these methods.  I have validated it for one processor.  Still need to be sure that in the case of multiple processors each proc gets te relevant piece of data.
=============================================================================
